<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning Flask on Tutorials</title>
    <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/</link>
    <description>Recent content in Learning Flask on Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ep.1 Your first Flask app</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-1/</guid>
      <description>Your first Flask app | Learning Flask Ep. 1 In the first part of this series, you&amp;rsquo;ll learn how to create and run your very first Flask web application
Creating a project directory and virtual environment First of all, we need to create our new project directory. We&amp;rsquo;re going to a new directory called app in our home directory.
 Tip - I advise using the same names for your project so it&amp;rsquo;s easier to follow along</description>
    </item>
    
    <item>
      <title>Ep.2 Flask application structure</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-2/</guid>
      <description>Flask application structure | Learning Flask Ep. 2 Structuring your Flask application for
In this part of the Learning Flask series, you&amp;rsquo;ll learn how to structure files and directories in your Flask application.
Flask is a very flexible framework and doesn&amp;rsquo;t enforce that you follow any specific pattern for structuring your application. However there are some best practices and tips to make sure you don&amp;rsquo;t run into issues down the line as your application grows!</description>
    </item>
    
    <item>
      <title>Ep.3 Serving HTML files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-3/</guid>
      <description>Serving HTML files | Learning Flask Ep. 3 How to render HTML files and structure template directories with Flask
In this part of the Learning Flask series, you&amp;rsquo;ll learn how to work with and serve HTML files.
Flask provides a fast and easy way for us to serve static files! So building a simple website is a breeze.
We&amp;rsquo;re going to pick up the same application we created in the last episode and build upon it.</description>
    </item>
    
    <item>
      <title>Ep.4 Serving static files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-4/</guid>
      <description>Serving static files | Learning Flask Ep. 4 Linking stylesheets, javascript files and serving images with Flask
In this episode of the Learning Flask series, we&amp;rsquo;ll be making our HTML look prettier with some images, CSS and JavaScript, along with a few extra tips on working with static files.
Flask provides a few useful ways for working with static files so let&amp;rsquo;s get started.
Creating stylesheets If you&amp;rsquo;ve worked with HTML and CSS before, you&amp;rsquo;ll know that we have to import a stylesheet in the &amp;lt;head&amp;gt; tag of our HTML.</description>
    </item>
    
    <item>
      <title>Ep.5 Jinja template inheritance</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-5/</guid>
      <description>Jinja template inheritance | Learning Flask Ep. 5 Creating reusable base HTML templates and extending them throughout your Flask app
In this firth part of the Learning Flask series, you&amp;rsquo;ll learn how to use the powerful Jinja templating engine to make working with our HTML files much more efficient.
Template inheritance works by creating a series of &amp;ldquo;base templates&amp;rdquo; and importing them into &amp;ldquo;child templates&amp;rdquo;, minimising the amount of repetitive code we need to write and allowing us to reuse elements effectively and reliably.</description>
    </item>
    
    <item>
      <title>Ep.6 Jinja template design</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-6/</guid>
      <description>Jinja template design | Learning Flask Ep. 6 An brief introduction to the power of the Jinja templating engine
In this part of the Learning Flask series, we&amp;rsquo;re going to dive deeper into the Jinja templating engine and you&amp;rsquo;ll learn more of the advanced features of this powerful library!
In the last part of this series, you learned how to create base templates, child templates and how to extend them.</description>
    </item>
    
    <item>
      <title>Ep.7 Working with forms in Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-7/</guid>
      <description>Working with forms in Flask | Learning Flask Ep. 7 Creating forms, posting data to views and working with form data in Flask
In this part of the Learning Flask series, You&amp;rsquo;ll learn how to post forms to a Flask view and work with the incoming data.
Forms (or input data in general) play a critical role in any kind of website or web allication as we need a way for the user to communicate with our app!</description>
    </item>
    
    <item>
      <title>Ep.8 Generating dynamic URLs in Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-8/</guid>
      <description>Generating dynamic URLs in Flask | Learning Flask Ep. 8 Learn how to create and work with dynamic URLs and dynamic data in Flask
Dynamic URL&amp;rsquo;s in Flask play an important role in the ability to create unique URL&amp;rsquo;s that aren&amp;rsquo;t hard-coded into our application.
For example, let&amp;rsquo;s say our application allows users to create an account and log into their profile, we&amp;rsquo;ll need a way to dynamically generate a route for that specific user.</description>
    </item>
    
    <item>
      <title>Ep.9 Working with JSON data</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-9/</guid>
      <description>Working with JSON data | Learning Flask Ep. 9 Handle incoming, parsing and returning JSON data with Flask!
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to be working with JSON data.
JSON is an extremely popular format for sending and receiving data over the web. Flask provides us with some great tools to make light work of handling JSON data.
In this guide, we&amp;rsquo;re going to quickly cover how to handle incoming JSON data and return JSON data to the client.</description>
    </item>
    
    <item>
      <title>Ep.10 Flask and the Fetch API</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-10/</guid>
      <description>Flask and the Fetch API | Learning Flask Ep. 10 Asynchronous requests from the client to the server using the JavaScript Fetch API
Making asynchronus requests from the client to the server is a common feature of most modern web applications, allowing a more fluid user experience.
In this episode of the &amp;ldquo;Learning Flask&amp;rdquo; series, you&amp;rsquo;ll learn how to make asynchronus requests from the client to your application using some basic vanilla JavaScript and the Fetch API.</description>
    </item>
    
    <item>
      <title>Ep.11 Query strings in Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-11/</guid>
      <description>Query strings in Flask | Learning Flask Ep. 11 Creating, serializing and working with query string data in Flask
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to working with query strings. A query string is part of the URL as a string of parameters and values and are used ubiquitously across the web.
Query strings are essentially a string of key/value pairs sent by the client to the server.</description>
    </item>
    
    <item>
      <title>Ep.12 Flask configuration files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-12/</guid>
      <description>Flask configuration files | Learning Flask Ep. 12 Configuring Flask applications using a config file and classes
Configuration is an important part of any appliction and Flask provides several different methods for us to configure our app.
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to cover our preferred app configuration method, using a config file with classes.
Let&amp;rsquo;s get started.
Config basics Every Flask application has a global config object which can be accessed via app.</description>
    </item>
    
    <item>
      <title>Ep.13 Uploading files with Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-13/</guid>
      <description>Uploading files with Flask | Learning Flask Ep. 13 Posting, checking and validating file uploads with Flask
Uploading files to the server is often a requirement of a website or web application. Thankfully, Flask makes this relitively simple for us with a few useful functions.
We&amp;rsquo;re using Bootstrap 4 CSS in this example but feel free to use any other CSS library, use your own or skip the styling completely.</description>
    </item>
    
    <item>
      <title>Ep.14 Sending files with Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-14/</guid>
      <description>Sending files with Flask | Learning Flask Ep. 14 How to send and allow users to download files with Flask
Allowing users to download files from your website of application is an often required feature of any website or application and Flask provides us with some useful function to do so.
In this example, we&amp;rsquo;re going to allow our users to download 3 types of files, images, CSV&amp;rsquo;s and PDF&amp;rsquo;s simply by accessing a route and providing a unique id to the resource.</description>
    </item>
    
    <item>
      <title>Ep.15 Flask cookies</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-15/</guid>
      <description>Flask cookies | Learning Flask Ep. 15 Setting, getting and working with cookies in Flask
Cookies play an important role in most modern websites and web applications, allowing us leave small strings of key/value pairs on the clients browser to help both developers and users by temporarily preserving inportant information such as preferences, unique identifiers, state etc..
Fortunately for us, Flask makes working with cookies very simple.
Let&amp;rsquo;s get started.</description>
    </item>
    
    <item>
      <title>Ep.16 The Flask session object</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-16/</guid>
      <description>The Flask session object | Learning Flask Ep. 16 Using, understanding and decoding the Flask session object, the globally available signed &amp;amp; encoded cookie
Sessions in Flask are a way to store information about a specific user from one request to the next. They work by storing a cryptographically signed cookie on the users browser and decoding it on every request.
The sesison object can be treated just like a dictionary that persists across requests, making it an ideal place to store non sensitive user data.</description>
    </item>
    
    <item>
      <title>Ep.17 Flask message flashing</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-17/</guid>
      <description>Flask message flashing | Learning Flask Ep. 17 Providing feedback and notifications to users using Flask&amp;rsquo;s flash function
Providing feedback to users of a web application is critical, from notifications and error messages to warnings and progress alerts.
If the application doesn&amp;rsquo;t the right level of feedback, chances are the user will become frustrated and end up having a bad experience.
Fortunately for us, Flask provides a simple way to send messages from the server to the client using flash.</description>
    </item>
    
    <item>
      <title>Ep.18 Flask error handling</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-18/</guid>
      <description>Flask error handling | Learning Flask Ep. 18 Manually throwing errors, creating custom error handlers and rendering error templates
In a perfect world, our applications would never have errors and our users would use our application just as we intended, however it&amp;rsquo;s not a perfect world and there will be bugs in our code and users will always be unpredictable!
Catching and handling errors ensures our users aren&amp;rsquo;t confused when something goes wrong, also giving them a way to get home or back to the content.</description>
    </item>
    
    <item>
      <title>Ep.19 Flask HTTP methods</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-19/</guid>
      <description>Flask HTTP methods | Learning Flask Ep. 19 Understanding when and where to use GET, POST, PUT, PATCH, DELETE and a brief introduction to HTTP methods in Flask
Flask supports the common HTTP methods, including GET, POST, PUT, PATCH, DELETE and working with them is extremely simple, allowing us to build URL&amp;rsquo;s and endpoints which only listen for certain HTTP methods.
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to build a simple application to demonstrate working with the 5 HTTP methods listed above, along with examples of when and how to use them.</description>
    </item>
    
    <item>
      <title>Ep.20 The request object</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-20/</guid>
      <description>The request object | Learning Flask Ep. 20 Exploring the Flask request object
The Flask request object gives us access to all of the incoming request data, nicely parsed and ready for us to work with.
The request object is available globally and can be accessed to get information about the current request, ensuring we only get data from the active thread.
If you&amp;rsquo;ve been following along with the &amp;ldquo;Learning Flask&amp;rdquo; series, you&amp;rsquo;ve seen the request object in action, from parsing incoming form data and handling the various request methods, however there&amp;rsquo;s much more to explore.</description>
    </item>
    
    <item>
      <title>Ep.21 Task queues with Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-21/</guid>
      <description>Task queues with Flask| Learning Flask Ep. 21 An introduction to task queues with Flask and RQ
Sometimes we need to run tasks in the background, outside of the HTTP request/response cycle. Long running tasks such as image, video or audio processing can take anywhere from minutes to hours, depending on the task at hand.
Picture this scenario.
You have a web application that allows users to upload an image, to which you&amp;rsquo;re going to produce 5 copies, all with different sizes to match the various screen sizes used on modern devices, including a thumbnail.</description>
    </item>
    
    <item>
      <title>Ep.22 Pillow, task queues &amp; the HTML picture element</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-22/</guid>
      <description>Pillow, task queues &amp;amp; the HTML picture element| Learning Flask Ep. 22 Using Pillow and task queues to offload image resizing to a worker process and using the HTML picture tag to increase image rendering performance
Images on the web are important and we now have access to a plethora of devices to view them - from mobile to desktop and tablet to TV screens, to get the most performance from our images, we should consider showing a peoperly sized image based on their device.</description>
    </item>
    
  </channel>
</rss>