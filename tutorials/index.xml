<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>e-Library on Tutorials</title>
    <link>https://dragon-library.github.io/library/tutorials/</link>
    <description>Recent content in e-Library on Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 18 Jan 2020 10:42:26 +0600</lastBuildDate>
    
	<atom:link href="https://dragon-library.github.io/library/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Simple Example-Based Guide</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/simple-example-based-guide/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/simple-example-based-guide/</guid>
      <description>NumPy Tutorial: A Simple Example-Based Guide  Introduction Advantages of NumPy NumPy Operations Creating a NumPy Array  The array Method The arange Method The zeros Method The ones Method The linspace Method The eye Method The random Method  Reshaping NumPy Array Finding Max/Min Values Array Indexing in NumPy  Indexing with 1-D Arrays Indexing with 2-D Arrays  Arithmetic Operations with NumPy Arrays  The log Function The exp Function The sqrt Function The sin Function  Linear Algebra Operations with NumPy Arrays  Finding the Vector Dot Product Matrix Multiplication Finding the Inverse of a Matrix Finding the Determinant of a Matrix Finding the Trace of a Matrix  Conclusion  Introduction The NumPy library is a popular Python library used for scientific computing applications, and is an acronym for &amp;ldquo;Numerical Python&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>10 Pandas tips</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/10_pandas_tip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/10_pandas_tip/</guid>
      <description>10 Python Pandas tips to make data analysis faster Source
1. Styling Have you ever complained about the table output looks boring when you do .head() in Jupyter notebooks? Is there a way not to display indexes (especially when there is already an ID column)? There’re ways to fix these issues.
A. Highlight all negative values in a dataframe. (example revised from https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html)
import pandas as pd def color_negative_red(val): color = &#39;red&#39; if val &amp;lt; 0 else &#39;black&#39; return &#39;color: %s&#39; % colordf = pd.</description>
    </item>
    
    <item>
      <title>24 เคล็ดลับ การใช้งาน Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/24-trick-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/24-trick-python/</guid>
      <description>24 เคล็ดลับ การใช้งาน Python Python เป็นอีกหนึ่งภาษา Programming ที่ได้รับความนิยม ถูกนำไปใช้ในการเขียน Program ได้หลากหลายประเภท โดยไม่ได้จำกัดอยู่ที่งานเฉพาะทางใดทางหนึ่ง ไม่ว่าจะเป็นการพัฒนา Web หรือด้าน Data Science และ Machine Learning เป็นต้น จึงทำให้มีการนำไปใช้กันอย่างแพร่หลาย วันนี้เรามาดู 24 เคล็ดลับ การใช้งาน Python ที่จะช่วยให้คุณประหยัดเวลาและทำงานได้สะดวกขึ้น โดยดูตัวอย่างการใช้งานในแต่ละหัวข้อกันได้เลย
1. Unpacking Array Items (http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/01.png)
2. Swapping Variables 3. Profile And Stats Of Your Code
3. Profile And Stats Of Your Code
(http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/03.png)
4. Repeat String
(http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/04.png)
5. Slicing
(http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/05.png)
6. Reversing

7. Negative Index
ถ้าคุณต้องการที่จะเริ่มต้นจาก Character ตัวสุดท้าย สามารถใช้ Negative Index ได้</description>
    </item>
    
    <item>
      <title>71 Python Code Snippets</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/71-python-code-snippet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/71-python-code-snippet/</guid>
      <description>71 Python Code Snippets for Everyday Problems POSTED ON DECEMBER 27, 2019 BY JEREMY GRIFSKI
Last Updated on February 3, 2020
If you’ve been following me for any amount of time, you know that I regularly publish Python code snippets for everyday problems. Well, I figured I’d finally aggregate all those responses in one massive article with links to all those resources.
As a heads up, I’m looking to start porting all of the code snippets in this article to Jupyter Notebooks.</description>
    </item>
    
    <item>
      <title>81 Python Code Snippets</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/81-pythoncodesnippets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/81-pythoncodesnippets/</guid>
      <description>81 Python Code Snippets for Everyday Problems POSTED ON DECEMBER 27, 2019 BY JEREMY GRIFSKI
If you’ve been following me for any amount of time, you know that I regularly publish Python code snippets for everyday problems. Well, I figured I’d finally aggregate all those responses in one massive article with links to all those resources.
As a heads up, I’m looking to start porting all of the code snippets in this article to Jupyter Notebooks.</description>
    </item>
    
    <item>
      <title>Automate the Boring Stuff</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/e-book/automate-the-boring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/e-book/automate-the-boring/</guid>
      <description>Automate the Boring Stuff with Python By Al Sweigart. Free to read under a Creative Commons license.
Table of Contents  Chapter 0 – Introduction Chapter 1 – Python Basics Chapter 2 – Flow Control Chapter 3 – Functions Chapter 4 – Lists Chapter 5 – Dictionaries and Structuring Data Chapter 6 – Manipulating Strings Chapter 7 – Pattern Matching with Regular Expressions Chapter 8 – Input Validation Chapter 9 – Reading and Writing Files Chapter 10 – Organizing Files Chapter 11 – Debugging Chapter 12 – Web Scraping Chapter 13 – Working with Excel Spreadsheets Chapter 14 – Working with Google Spreadsheets Chapter 15 – Working with PDF and Word Documents Chapter 16 – Working with CSV Files and JSON Data Chapter 17 – Keeping Time, Scheduling Tasks, and Launching Programs Chapter 18 – Sending Email and Text Messages Chapter 19 – Manipulating Images Chapter 20 – Controlling the Keyboard and Mouse with GUI Automation Appendix A – Installing Third-Party Modules Appendix B – Running Programs Appendix C – Answers to the Practice Questions  (Read the 1st edition book.</description>
    </item>
    
    <item>
      <title>Bootstrap 4 แบบพื้นฐาน ตอนที่ 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-1/</guid>
      <description>สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน ตอนที่ 1 บทความนี้เป็นบทความสอนการใช้ Bootstrap เรื่องมีอยู่ว่าที่ทำงานของผมส่งผมไปเรียนคอส Web Design สอนโดย อ.กษิติ พันธุ์ถนอม คอสนี้เกี่ยวกับการใช้งาน Bootstrap4 ซึ่งผมก็พอจะรู้อยู่บ้างแล้ว การเรียนครั้งนี้เลยเหมือนการทบทวนและเพิ่มเติมเทคนิคต่างๆ ผมก็เลยได้โอกาสเขียนเป็นบล็อกนี้ขึ้นครับ
โดยเป้าหมายคือ การใช้งาน Bootstrap ทำให้เว็บ responsive แล้วก็ใช้งาน component ของ Bootstrap ต่างๆ รวมถึงคลาสที่ใช้งานบ่อยๆ นอกจากนี้ก็มีแนะนำเทค และการใช้เครื่องมือช่วยต่างๆด้วย
ติดตั้ง VS code เครื่องมือสำหรับเขียน แนะนำ VS Code ใครไม่มีก็ติดตั้งเลย
ดาวน์โหลดได้ที่
https://code.visualstudio.com/
เริ่มต้น เริ่มจากการพิมพ์คำสั่งลัด html:5 เพื่อให้ VS Code generate code ให้อัตโนมัติ
คำสั่ง meta UTF-8 และ viewport สำคัญสำหรับ Bootstrap ต้องใส่ทุกครั้ง ซึ่งมันก็สร้างมาให้แล้ว
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;  อีกอันคือพิมพ์ว่า lorem มันจะ generate ประโยคที่เรียกว่า lorem ให้ มันคือคำที่ไม่มีความหมาย เอามาวางไว้เฉยๆว่านี่คือตัวอักษรจะเห็นในงานพวก design หรือตัวอย่างโค้ดบ่อยๆ</description>
    </item>
    
    <item>
      <title>CSV &amp; Text files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/csv-and-text-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/csv-and-text-file/</guid>
      <description>CSV &amp;amp; Text files The workhorse function for reading text files (a.k.a. flat files) is read_csv(). See the cookbook for some advanced strategies.
Parsing options read_csv() accepts the following common arguments:
Basic filepath_or_buffervarious
Either a path to a file (a str&amp;rdquo;), pathlib.Path&amp;rdquo;), or py._path.local.LocalPath), URL (including http, ftp, and S3 locations), or any object with a read() method (such as an open file or StringIO&amp;rdquo;)).
sepstr, defaults to &#39;,&#39; for read_csv(), \t for read_table()</description>
    </item>
    
    <item>
      <title>Ep.1 Your first Flask app</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-1/</guid>
      <description>Your first Flask app | Learning Flask Ep. 1 In the first part of this series, you&amp;rsquo;ll learn how to create and run your very first Flask web application
Creating a project directory and virtual environment First of all, we need to create our new project directory. We&amp;rsquo;re going to a new directory called app in our home directory.
 Tip - I advise using the same names for your project so it&amp;rsquo;s easier to follow along</description>
    </item>
    
    <item>
      <title>JavaScript Cheat Sheet</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/javascript/cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/javascript/cheatsheet/</guid>
      <description>JavaScript Cheat Sheet  Link  If - Else⇵ if ((age &amp;gt;= 14) &amp;amp;&amp;amp; (age &amp;lt; 19)) { // logical condition status = &amp;quot;Eligible.&amp;quot;; // executed if condition is true } else { // else block is optional status = &amp;quot;Not eligible.&amp;quot;; // executed if condition is false } Switch Statement switch (new Date().getDay()) { // input is current day case 6: // if (day == 6) text = &amp;quot;Saturday&amp;quot;; break; case 0: // if (day == 0) text = &amp;quot;Sunday&amp;quot;; break; default: // else.</description>
    </item>
    
    <item>
      <title>Pandas User Guide</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/user_guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/user_guide/</guid>
      <description>User Guide  Source : Pandas Document : .
 The User Guide covers all of pandas by topic area. Each of the subsections introduces a topic (such as “working with missing data”), and discusses how pandas approaches the problem, with many examples throughout.
Users brand-new to pandas should start with 10 minutes to pandas.
Further information on any specific method can be obtained in the API reference.
 IO tools (text, CSV, HDF5, …)  CSV &amp;amp; text files JSON HTML Excel files OpenDocument Spreadsheets Binary Excel (.</description>
    </item>
    
    <item>
      <title>Primer on Jinja Templating</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/primer-jinja-templating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/primer-jinja-templating/</guid>
      <description>Primer on Jinja Templating Flask comes packaged with the powerful Jinja templating language.
For those who have not been exposed to a templating language before, such languages essentially contain variables as well as some programming logic, which when evaluated (or rendered into HTML) are replaced with actual values.
The variables and/or logic are placed between tags or delimiters. For example, Jinja templates use {% ... %} for expressions or logic (like for loops), while {{ .</description>
    </item>
    
    <item>
      <title>Progressive Web App คืออะไร</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/create-progressive-web-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/create-progressive-web-app/</guid>
      <description>Progressive Web App คืออะไร และ มาลองกันแบบง่ายๆ วันเดียวเสร็จ ฮัลโหลๆ สวัสดีครับ ช่วงนี้หายไปนาน แอบไปศึกษา Front-end framework อยู่หลายตัว จนไปเจอกับของเล่นใหม่เรียกว่า Progressive Web App หรือเรียกสั้นๆว่า PWA นั่นเอง ซึ่งประจวบเหมาะกับทาง Google ผู้ผลักดันเทคโนโลยีนี้ก็ได้มา Roadshow แสดงความเทพที่กรุงเทพกันไปหยกๆ ก็เลยถือโอกาสใช้พลังความมั่วส่วนตัว ขอมาเขียนเรื่องนี้ ดีไม่ดี ผิดพลาดตรงไหน ติชมได้เน่อ เริ่มกันเลย …
 บทความนี้เกิดจากเนื้อหาหลายๆส่วนจากทั้งในงาน Roadshow เอง รวมถึงการมั่วซั่วของผู้เขียนนะครับ ดู Reference ได้ท้ายบทความ
 หัวข้อในวันนี้  อะไรคือ PWA ทำไมต้อง PWA เบื้องหลังการทำงานของ PWA เป็นอย่างไร มาลองทำ PWA เล่นๆกันดู  อะไรคือ เจ้า Progressive Web App ? Source: http://www.letsnurture.com/blog/progressive-web-app-an-application-in-a-webpage.html
เจ้านี่คือเทคโนโลยีที่จะทำให้เว็บของเราเนี่ย มีความใกล้เคียงกับ App ในมือถือมากขึ้น ทั้งความลื่นไหลในการใช้งาน, เข้าเมนูต่างๆอย่างง่ายดาย, การใช้งานเมื่ออยู่ใน Mode Offline, การทำ Push Notification ฯลฯ ในขณะเดียวกันก็เก็บข้อดีของเว็บไว้อาทิเช่น ความสดใหม่ของข้อมูล(อัพเดทกันได้ทันที ไม่ต้องไปอัพ App Store), ความเข้าถึงง่ายไม่ต้อง Install ให้ยุ่งยาก</description>
    </item>
    
    <item>
      <title>Python 101</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-101/</guid>
      <description>Python 101 ฉบับรวบลัด การแสดงผล และรับข้อมูล เริ่มแรกลอง print “hello world” กันก่อน
print(&amp;quot;hello_world&amp;quot;)  Data type (ประเภทข้อมูล) 1. String String ก็เป็นตัวแปรที่เก็ยตัวอักษร หรือข้อความ คราวนี้เรามาลองรับ input เป็นชื่อเก็บใส่ตัวแปรที่ชื่อว่า name แล้ว print ออกมากันครับ
ในที่นี้ตัวแปร name ก็จะมี data type คือ string นั้นเอง
name = input(&amp;quot;What is your name? &amp;quot;) print(&amp;quot;Hello &amp;quot;,name)  2. Numeric    Type Description     Integer จำนวนเต็ม เช่น 10, 20   Float ทศนิยม เช่น 10.0, 20.5    ต่อมาลองรับ input เป็น integer 1 ตัว และ float 1 ตัว แล้วเอามาบวกกันแสดงผลรับเป็น integer</description>
    </item>
    
    <item>
      <title>Python Thailand</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pythonthailand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pythonthailand/</guid>
      <description>Python Thailand Python Thailand - แหล่งเรียนรู้ภาษาไพธอนสำหรับคนไทย print(&amp;quot;Hello Thai Pythonista!&amp;quot;)  ยินดีต้อนรับเข้าสู่ Python Thailand เว็บไซต์ที่เปรียบเสมือนเป็นประตูบานแรกสำหรับคนที่ต้องการก้าวเข้ามาสู่จักรวาลของภาษาไพธอน เว็บไซต์นี้ได้รวบรวมแหล่งข้อมูลที่เกี่ยวข้องกับภาษาไพธอนที่ถูกเขียนขึ้นในภาษาไทย ไม่ว่าจะเป็นทั้งการสอนไพธอน เว็บบล็อกไพธอน รวมถึงวิดีโอที่เกี่ยวกับไพธอนต่าง ๆ ไพธอนนั้นมีประโยชน์มากมาย ไพธอนเปรียบเสมือนไม้กายสิทธิ์ที่สามารถช่วยให้เราสร้างสรรค์นวัตกรรมหรือสิ่งใหม่ ๆ ให้กับมวลมนุษยชาติได้
ด้วยเนื้อหาที่รวบรวมในเว็บไซต์นี้ คุณจะสามารถเขียนโปรแกรมด้วยภาษาไพธอนได้ เริ่มตั้งแต่การสร้างแอพพลิเคชันอย่างง่ายไปจนถึงโปรแกรมการคำนวณที่ซับซ้อน คุณจะเข้าใจหลักการสำคัญในการเขียนโปรแกรมทั้งในพื้นฐานทั้งหมดและในขั้นสูงที่เป็นการเขียนโปรแกรมแบบเชิงวัตถุ คุณจะได้รู้จักกับเครื่องมือที่ใช้ในการพัฒนาโปรแกรมหลากหลายรูปแบบ ซึ่งเนื้อหาเหล่านี้เป็นพื้นฐานที่สำคัญที่จะทำให้คุณสามารถนำไปพัฒนาทักษะการเขียนโปรแกรมภาษาไพธอน ของคุณในขั้นสูงต่อไป เช่น การพัฒนาเว็บไซต์ การสร้างเกม ฐานข้อมูล เน็ตเวิร์ค การจัดการกราฟฟิค
ภาษาไพธอน  ประวัติและต้นกำเนิด ตราสัญลักษณ์ของภาษาไพธอน ปรัชญาของไพธอน เกร็ดความรู้เกี่ยวกับไพธอน ทำไมต้องไพธอน ความสำเร็จของไพธอน   ดาวน์โหลดไพธอนและเครื่องมืออื่น ๆ  เริ่มต้นใช้งานไพธอน ระบบปฏิบัติการที่รองรับ ดาวน์โหลดไพธอน การติดตั้งไพธอน โปรแกรมแก้ไขข้อความสำหรับเขียนภาษาไพธอน ไลบรารี่และแพคเกจ   เนื้อหาไพธอน เลือกระดับความยากของเนื้อหา
 เริ่มต้น (Beginner) ปานกลาง (Intermediate) ขั้นสูง (Advanced)   โจทย์และการแก้ปัญหา  ระดับพื้นฐาน ระดับปานกลาง ระดับยาก โจทย์แข่งขัน คำถามสอบสัมภาษณ์งาน   หนังสือแนะนำ  Python ๑๐๑ คณะวิศวกรรมศาสตร์ จุฬา ฯ เชี่ยวชาญการเขียนโปรแกรมด้วยไพธอน ผศ.</description>
    </item>
    
    <item>
      <title>Start Web Application</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/django/start-django-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/django/start-django-framework/</guid>
      <description>เริ่มพัฒนา Web Application กับภาษา Python ด้วย Django Framework ภาษา Python เริ่มถูกใช้งานอย่างแพร่หลายมากขึ้นเรื่อยๆ ในช่วงนี้เนื่องจากความง่ายในการเรียนรู้ และความสะดวกในการทดสอบโปรแกรม เนื่องจาก Python เป็นภาษาประเภท Script ซึ่งจะแตกต่างกับภาษาประเภท Java หรือ C ที่ต้อง compile code ให้ออกมาเป็น binary ก่อนนำไปรันได้จริง เช่น หากต้องการทดสอบ function substring ว่าจะสามารถตัดคำให้เราถูกต้องหรือไม่ กรณีใช้ภาษา Java หรือ C ก็ต้องเขียน class, main function หรืออื่นๆ อีกมากมายกว่าจะเริ่มทดสอบ function เล็กๆ นี้ได้ แต่ใน Python นั้น เพียงแค่เข้า Python console ก็สามารถทดสอบ function เหล่านี้ได้ทันที
Django (อ่านว่าจังโก้ หรือแจงโก้ โดยไม่ออกเสียงตัว D) เป็น framework ที่ใช้ในการสร้าง Web Application ในฝั่งของ Back End ที่พัฒนาด้วยภาษา Python โดยในตัว framework จะมีส่วนประกอบทุกอย่างที่จำเป็นตั้งแต่การเชื่อมต่อฐานข้อมูล ไปจนถึงการ render ข้อมูลออกมาให้ฝั่ง Front End แสดงผลข้อมูลเหล่านั้นได้ ซึ่ง framework ในรูปแบบนี้ในภาษาอื่นๆ เช่น Ruby on rails สำหรับภาษา Ruby, Play Framework สำหรับภาษา Java หรือ Scala, Groovy on Grails สำหรับภาษา Groovy, Laravel สำหรับภาษา PHP, หรือ Express สำหรับภาษา Javascript ของ Node.</description>
    </item>
    
    <item>
      <title>ตัวแปรและประเภทข้อมูล</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/variable/</guid>
      <description>Variable &amp;amp; Data Types (ตัวแปรและประเภทข้อมูล) ตัวแปรและประข้อมูลในภาษา Python เราจะพูดถึงการประกาศตัวแปรและการนำตัวแปรไปใช้งานในโปรแกรม และเราจะอธิบายถึงข้อมูลประเภทต่างๆ ที่เป็น Primitive datatype ในภาษา Python และรวมทั้งฟังก์ชันสำหรับการใช้งานกับตัวแปร
ตัวแปร ตัวแปร (variable) คือชื่อหรือเครื่องหมายที่กำหนดขึ้นสำหรับใช้เก็บค่าในหน่วยความจำ ตัวแปรจะมีชื่อ (identifier) สำหรับใช้ในการอ้างถึงข้อมูลของมัน ในการเขียนโปรแกรม ค่าของตัวแปรสามารถที่จะกำหนดได้ใน run-time หรือเปลี่ยนแปลงอยู่ตลอดเวลาในขณะที่โปรแกรมทำงาน (executing)
ในการเขียนโปรแกรมคอมพิวเตอร์นั้น ตัวแปรจะแตกต่างจากตัวแปรในทางคณิตศาสตร์ ค่าของตัวแปรนั้นไม่จำเป็นต้องประกอบไปด้วยสูตรหรือสมการที่สมบูรณ์เหมือนกับในคณิตศาสตร์ ในคอมพิวเตอร์ ตัวแปรนั้นอาจจะมีการทำงานซ้ำๆ เช่น การกำหนดค่าในที่หนึ่ง และนำไปใช้อีกที่หนึ่งในโปรแกรม และนอกจากนี้ยังสามารถกำหนดค่าใหม่ให้กับตัวแปรได้ตลอดเวลา ต่อไปเป็นตัวอย่างของการประกาศตัวแปรในภาษา Python
a = 3 b = 4.92 c = &amp;quot;marcuscode.com&amp;quot; c = 10.5  ในตัวอย่าง เราได้ทำการประกาศ 3 ตัวแปร ในการประกาศตัวแปรในภาษา Python คุณไม่จำเป็นต้องระบุประเภทของตัวแปรในตอนที่ประกาศเหมือนในภาษา C ในตัวแปร a มีค่าเป็น 3 และเป็นประเภทเป็น Integer ตัวแปร b มีค่าเป็น 4.92 และเป็นประเภทเป็น Float และตัวแปร c มีค่าเป็น &amp;ldquo;marcuscode.</description>
    </item>
    
    <item>
      <title>โครงสร้างข้อมูล Dictionary</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/dictionary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/dictionary/</guid>
      <description>โครงสร้างข้อมูล Dictionary ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูล Dictionary ในภาษา Python เราจะแนะนำให้คุณรู้จักกับ Dictionary คืออะไร และการประกาศและใช้งานสำหรับเก็บข้อมูลในการเขียนโปรแกรม นอกจากนี้ เรายังจะพูดถึงการใช้งานเมธอดและ built-in functions ของ Dictionary และตัวอย่างการใช้งานกับการเขียนโปรแกรมใบรูปแบบต่างๆ ในภาษา Python
Dictionary คือประเภทข้อมูลที่เก็บข้อมูลในรูปแบบคู่ของ Key และ Value โดยที่ Key ใช้สำหรับเป็น Index ในการเข้าถึงข้อมูลและ Value เป็นค่าข้อมูลที่สอดคล้องกับ Key ของมัน การเข้าถึงข้อมูลใน Dictionary นั้นรวดเร็วเพราะว่าข้อมูลได้ถูกทำ Index ไว้อัตโนมัติโดยใช้ Key นอกจากนี้ Dictionary ยังมีเมธอดและฟังก์ชันอำนวยความสะดวกสำหรับการทำงานทั่วไป
การประกาศ Dictionary ในภาษา Python ในการใช้งาน Dictionary เรามักจะใช้เก็บข้อมูลที่สามารถใช้บางอย่างที่สามารถจำแนกข้อมูลออกจากกันได้ โดยกำหนดให้สิ่งนั้นเป็น Key ในการประกาศ Dictionary สมาชิกของมันจะอยู่ภายในวงเล็บปีกกา {} มาดูตัวอย่างในการประกาศ Dictionary ในภาษา Python
scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310} scores[&#39;bobby&#39;] = 4401 numbers = {1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;} print(scores) print(numbers)  ในตัวอย่าง เราได้ประกาศตัวแปร Dictionary ที่มีชื่อว่า scores สำหรับเก็บคะแนนของแต่ละคนโดยใช้ชื่อเป็น Key และค่าของมันก็คือคะแนน สมาชิกของ Dictionary แต่ละตัวจะถูกกำหนดในรูปแบบ key: value และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา เราได้กำหนดค่าเริ่มต้นสามค่าให้กับ Dictionary และสามารถกำหนดค่าให้กับ Dictionary ในรูปแบบ scores[&#39;bobby&#39;] ได้หลังจากที่ตัวแปรถูกสร้างแล้ว สังเกตว่าเราสามารถใช้ Key เป็น String หรือประเภทข้อมูลอื่นๆ ได้ ต่อมาตัวแปร numbers เป็น Dictionary ที่มี Key เป็นตัวเลข</description>
    </item>
    
    <item>
      <title>From Zero to Hero</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/from-zero/</link>
      <pubDate>Fri, 17 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/from-zero/</guid>
      <description>Learning Python: From Zero to Hero First of all, what is Python? According to its creator, Guido van Rossum, Python is a:
 “high-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.”
 For me, the first reason to learn Python was that it is, in fact, a beautiful programming language.</description>
    </item>
    
    <item>
      <title>Awesome Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/awesome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/awesome/</guid>
      <description>Awesome Python A curated list of awesome Python frameworks, libraries, software and resources.
Inspired by awesome-php.
 Awesome Python  Admin Panels Algorithms and Design Patterns Audio Authentication Build Tools Built-in Classes Enhancement Caching ChatOps Tools CMS Code Analysis Command-line Interface Development Command-line Tools Compatibility Computer Vision Concurrency and Parallelism Configuration Cryptography Data Analysis Data Validation Data Visualization Database Database Drivers Date and Time Debugging Tools Deep Learning DevOps Tools Distributed Computing Distribution Documentation Downloader E-commerce Editor Plugins and IDEs Email Environment Management Files Foreign Function Interface Forms Functional Programming Game Development Geolocation GUI Development Hardware HTML Manipulation HTTP Clients Image Processing Implementations Interactive Interpreter Internationalization Job Scheduler Logging Machine Learning Miscellaneous Natural Language Processing Network Virtualization Networking News Feed ORM Package Management Package Repositories Permissions Processes Queue Recommender Systems RESTful API Robotics RPC Servers Science Search Serialization Serverless Frameworks Specific Formats Processing Static Site Generator Tagging Template Engine Testing Text Processing Third-party APIs URL Manipulation Video Web Asset Management Web Content Extracting Web Crawling Web Frameworks WebSocket WSGI Servers  Services  Code Quality Continuous Integration  Resources  Podcasts Twitter Websites Weekly  Contributing  [](https://github.</description>
    </item>
    
    <item>
      <title>Bootstrap 4 แบบพื้นฐาน ตอนที่ 2</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-2/</guid>
      <description>สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน ตอนที่ 2 Table สร้างไฟล์ใหม่ชื่อ portal.html
ใส่โค้ดพื้นฐาน html ลงไปแล้วก็เพิ่ม bootstrap.css ด้วย
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt; &amp;lt;title&amp;gt;Portal&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/bootstrap.min.css&amp;quot; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  ใส่ตารางลงไปใน container
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt; &amp;lt;title&amp;gt;Portal&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/bootstrap.</description>
    </item>
    
    <item>
      <title>Ep.2 Flask application structure</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-2/</guid>
      <description>Flask application structure | Learning Flask Ep. 2 Structuring your Flask application for
In this part of the Learning Flask series, you&amp;rsquo;ll learn how to structure files and directories in your Flask application.
Flask is a very flexible framework and doesn&amp;rsquo;t enforce that you follow any specific pattern for structuring your application. However there are some best practices and tips to make sure you don&amp;rsquo;t run into issues down the line as your application grows!</description>
    </item>
    
    <item>
      <title>HTML</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/html/</guid>
      <description>HTML Reading HTML content  Warning
We highly encourage you to read the HTML Table Parsing gotchas below regarding the issues surrounding the BeautifulSoup4/html5lib/lxml parsers.
 The top-level read_html() function can accept an HTML string/file/URL and will parse HTML tables into list of pandas DataFrames. Let’s look at a few examples.
 Note read_html returns a list of DataFrame objects, even if there is only a single table contained in the HTML content.</description>
    </item>
    
    <item>
      <title>Lists</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/list/</guid>
      <description>Lists ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูลแบบ List ในภาษา Python เราจะพูดถึงการสร้างและใช้งาน List ในเบื้องต้น การใช้งานเมธอดและฟังก์ชันเพื่อจัดการข้อมูลภายใน List และการใช้งานคำสั่ง For loop กับ List รวมถึงการ slicing
List (ลิสต์) คือโครงสร้างข้อมูลชนิดหนึ่งในภาษา Python ที่ใช้เก็บข้อมูลแบบลำดับ (Sequence) โดยมี Index เป็นตัวระบุตำแหน่งในการเข้าถึงข้อมูล เราสามารถใช้ List เพื่อเก็บข้อมูลจำนวนมากและหลากหลายประเภทในเวลาเดียวกัน List เป็นประเภทข้อมูลที่ใช้อย่างหลากหลายในการเขียนโปรแกรม นอกจากนี้ ในภาษา Python ยังมี built-in function ที่สามารถทำงานกับ List และใน List ออบเจ็คเองก็มีเมธอดต่างๆ เป็นจำนวนมากที่ช่วยอำนวยความสะดวกในการเขียนโปรแกรม
การประกาศและใช้งาน List List นั้นเป็นตัวแปรประเภทหนึ่ง การใช้งานของมันจะเหมือนกันอาเรย์ในภาษาอื่นๆ ในการประกาศ List นั้นข้อมูลของมันจะอยู่ภายในเครื่องหมาย [] และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา , มาดูตัวอย่างการประกาศ List ในภาษา Python
numbers = [-1, 2, 5, 8, 10, 13] names = [&#39;Mateo&#39;, &#39;Danny&#39;, &#39;James&#39;, &#39;Thomas&#39;, &#39;Luke&#39;] mixed_type = [-2, 5, 84.</description>
    </item>
    
    <item>
      <title>Dictionaries</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-dictionaries/</link>
      <pubDate>Fri, 17 Jan 2020 11:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-dictionaries/</guid>
      <description>Python Dictionaries Data structures are basically containers that store data in predefined layouts, optimized for certain operations — like apples in a box, ready for picking😉.
The Python programming language natively implements a number of data structures. Lists, tuples, sets, dictionaries are but some of them. We will be looking at the dictionary data type in subsequent sections.
What are dictionaries ? key-value mapping  A dictionary in python is a mapping object that maps keys to values, where the keys are unique within a collection and the values can hold any arbitrary value.</description>
    </item>
    
    <item>
      <title>Ep.3 Serving HTML files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-3/</guid>
      <description>Serving HTML files | Learning Flask Ep. 3 How to render HTML files and structure template directories with Flask
In this part of the Learning Flask series, you&amp;rsquo;ll learn how to work with and serve HTML files.
Flask provides a fast and easy way for us to serve static files! So building a simple website is a breeze.
We&amp;rsquo;re going to pick up the same application we created in the last episode and build upon it.</description>
    </item>
    
    <item>
      <title>Excel files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/excel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/excel/</guid>
      <description>Excel files The read_excel() method can read Excel 2003 (.xls) files using the xlrd Python module. Excel 2007+ (.xlsx) files can be read using either xlrd or openpyxl. Binary Excel (.xlsb) files can be read using pyxlsb. The to_excel() instance method is used for saving a DataFrame to Excel. Generally the semantics are similar to working with csv data. See the cookbook for some advanced strategies.
Reading Excel files In the most basic use-case, read_excel takes a path to an Excel file, and the sheet_name indicating which sheet to parse.</description>
    </item>
    
    <item>
      <title>Python Cheat sheet</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/cheat-sheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/cheat-sheet/</guid>
      <description>Python Cheat sheet Useful tricks # Terminate a Python script early. quit()# For 1 statement on multiple lines,  # use line continuation character (\). # Good for blog post. def __str__(self):return &amp;#34;Name={}, Title={}, Hourly rate={}.&amp;#34;\.format( self.name, self.title, self.__hourly_rate ) String # Concatenation s1 = &amp;#39;Open&amp;#39;s2 = &amp;#39;Writings.net&amp;#39;print( s1+s2 ) # Output: OpenWritings.net # Object to string: Use str() function import datetimenow_str = &amp;#34;Today is &amp;#34; + str(datetime.</description>
    </item>
    
    <item>
      <title>Clipboard</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/clipboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/clipboard/</guid>
      <description>Clipboard A handy way to grab data is to use the read_clipboard() method, which takes the contents of the clipboard buffer and passes them to the read_csv method. For instance, you can copy the following text to the clipboard (CTRL-C on many operating systems):
   A B C     1 4 p   2 5 q   3 6 r    And then import the data directly to a DataFrame by calling:</description>
    </item>
    
    <item>
      <title>Ep.4 Serving static files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-4/</guid>
      <description>Serving static files | Learning Flask Ep. 4 Linking stylesheets, javascript files and serving images with Flask
In this episode of the Learning Flask series, we&amp;rsquo;ll be making our HTML look prettier with some images, CSS and JavaScript, along with a few extra tips on working with static files.
Flask provides a few useful ways for working with static files so let&amp;rsquo;s get started.
Creating stylesheets If you&amp;rsquo;ve worked with HTML and CSS before, you&amp;rsquo;ll know that we have to import a stylesheet in the &amp;lt;head&amp;gt; tag of our HTML.</description>
    </item>
    
    <item>
      <title>List for Tutorial</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/list-python-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/list-python-basics/</guid>
      <description>List Python Tutorial Python is one of the most popular programming languages. In the last few years, it has gained a lot of popularity due to the increasing interest in Data Science, Deep Learning, Machine Learning, and Artificial Intelligence.
Just have a look at the Google Trends chart for interest in Python programming language. It’s increasing continuously and it will keep on increasing over time.
Python Interest Over Time</description>
    </item>
    
    <item>
      <title>Ep.5 Jinja template inheritance</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-5/</guid>
      <description>Jinja template inheritance | Learning Flask Ep. 5 Creating reusable base HTML templates and extending them throughout your Flask app
In this firth part of the Learning Flask series, you&amp;rsquo;ll learn how to use the powerful Jinja templating engine to make working with our HTML files much more efficient.
Template inheritance works by creating a series of &amp;ldquo;base templates&amp;rdquo; and importing them into &amp;ldquo;child templates&amp;rdquo;, minimising the amount of repetitive code we need to write and allowing us to reuse elements effectively and reliably.</description>
    </item>
    
    <item>
      <title>Modules List</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/modules-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/modules-list/</guid>
      <description>Python Modules List Python os module
Python sys module
Python time
Python MySQL
Python CSV
Python multiprocessing
Python pickle
Python time sleep
Python queue
Python unittest
Python socket
Python SimpleHTTPServer
Python json
Python signal
Python random
Python System Command
Python Daemon Thread
Python Copy
Python threading module
Python struct
Python logging
Python subprocess
Python argparse
Python functools
Python itertools
Python getopt
Python ftp
Python tarfile
Python lxml
Python ConfigParser</description>
    </item>
    
    <item>
      <title>Ep.6 Jinja template design</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-6/</guid>
      <description>Jinja template design | Learning Flask Ep. 6 An brief introduction to the power of the Jinja templating engine
In this part of the Learning Flask series, we&amp;rsquo;re going to dive deeper into the Jinja templating engine and you&amp;rsquo;ll learn more of the advanced features of this powerful library!
In the last part of this series, you learned how to create base templates, child templates and how to extend them.</description>
    </item>
    
    <item>
      <title>Ep.7 Working with forms in Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-7/</guid>
      <description>Working with forms in Flask | Learning Flask Ep. 7 Creating forms, posting data to views and working with form data in Flask
In this part of the Learning Flask series, You&amp;rsquo;ll learn how to post forms to a Flask view and work with the incoming data.
Forms (or input data in general) play a critical role in any kind of website or web allication as we need a way for the user to communicate with our app!</description>
    </item>
    
    <item>
      <title>Ep.8 Generating dynamic URLs in Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-8/</guid>
      <description>Generating dynamic URLs in Flask | Learning Flask Ep. 8 Learn how to create and work with dynamic URLs and dynamic data in Flask
Dynamic URL&amp;rsquo;s in Flask play an important role in the ability to create unique URL&amp;rsquo;s that aren&amp;rsquo;t hard-coded into our application.
For example, let&amp;rsquo;s say our application allows users to create an account and log into their profile, we&amp;rsquo;ll need a way to dynamically generate a route for that specific user.</description>
    </item>
    
    <item>
      <title>Ep.9 Working with JSON data</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-9/</guid>
      <description>Working with JSON data | Learning Flask Ep. 9 Handle incoming, parsing and returning JSON data with Flask!
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to be working with JSON data.
JSON is an extremely popular format for sending and receiving data over the web. Flask provides us with some great tools to make light work of handling JSON data.
In this guide, we&amp;rsquo;re going to quickly cover how to handle incoming JSON data and return JSON data to the client.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://dragon-library.github.io/library/tutorials/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://dragon-library.github.io/library/tutorials/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Ep.10 Flask and the Fetch API</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-10/</guid>
      <description>Flask and the Fetch API | Learning Flask Ep. 10 Asynchronous requests from the client to the server using the JavaScript Fetch API
Making asynchronus requests from the client to the server is a common feature of most modern web applications, allowing a more fluid user experience.
In this episode of the &amp;ldquo;Learning Flask&amp;rdquo; series, you&amp;rsquo;ll learn how to make asynchronus requests from the client to your application using some basic vanilla JavaScript and the Fetch API.</description>
    </item>
    
    <item>
      <title>Ep.11 Query strings in Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-11/</guid>
      <description>Query strings in Flask | Learning Flask Ep. 11 Creating, serializing and working with query string data in Flask
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to working with query strings. A query string is part of the URL as a string of parameters and values and are used ubiquitously across the web.
Query strings are essentially a string of key/value pairs sent by the client to the server.</description>
    </item>
    
    <item>
      <title>Ep.12 Flask configuration files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-12/</guid>
      <description>Flask configuration files | Learning Flask Ep. 12 Configuring Flask applications using a config file and classes
Configuration is an important part of any appliction and Flask provides several different methods for us to configure our app.
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to cover our preferred app configuration method, using a config file with classes.
Let&amp;rsquo;s get started.
Config basics Every Flask application has a global config object which can be accessed via app.</description>
    </item>
    
    <item>
      <title>Ep.13 Uploading files with Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-13/</guid>
      <description>Uploading files with Flask | Learning Flask Ep. 13 Posting, checking and validating file uploads with Flask
Uploading files to the server is often a requirement of a website or web application. Thankfully, Flask makes this relitively simple for us with a few useful functions.
We&amp;rsquo;re using Bootstrap 4 CSS in this example but feel free to use any other CSS library, use your own or skip the styling completely.</description>
    </item>
    
    <item>
      <title>Ep.14 Sending files with Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-14/</guid>
      <description>Sending files with Flask | Learning Flask Ep. 14 How to send and allow users to download files with Flask
Allowing users to download files from your website of application is an often required feature of any website or application and Flask provides us with some useful function to do so.
In this example, we&amp;rsquo;re going to allow our users to download 3 types of files, images, CSV&amp;rsquo;s and PDF&amp;rsquo;s simply by accessing a route and providing a unique id to the resource.</description>
    </item>
    
    <item>
      <title>Ep.15 Flask cookies</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-15/</guid>
      <description>Flask cookies | Learning Flask Ep. 15 Setting, getting and working with cookies in Flask
Cookies play an important role in most modern websites and web applications, allowing us leave small strings of key/value pairs on the clients browser to help both developers and users by temporarily preserving inportant information such as preferences, unique identifiers, state etc..
Fortunately for us, Flask makes working with cookies very simple.
Let&amp;rsquo;s get started.</description>
    </item>
    
    <item>
      <title>Ep.16 The Flask session object</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-16/</guid>
      <description>The Flask session object | Learning Flask Ep. 16 Using, understanding and decoding the Flask session object, the globally available signed &amp;amp; encoded cookie
Sessions in Flask are a way to store information about a specific user from one request to the next. They work by storing a cryptographically signed cookie on the users browser and decoding it on every request.
The sesison object can be treated just like a dictionary that persists across requests, making it an ideal place to store non sensitive user data.</description>
    </item>
    
    <item>
      <title>21 Pandas operations</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/21-pandas-operations/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/21-pandas-operations/</guid>
      <description>21 Pandas operations for absolute beginners  Source  Prerequisites: Python and NumPy basics.
A CSV file is comma-separated so in order to read a CSV file, do:
df = pd.read_csv(file_path, sep=’,’, header = 0, index_col=False,names=None)  Explanation:
read_csv function has a plethora of parameters and I have specified only a few, ones that you may use most often. A few key points:
a) - header=0 means you have the names of columns in the first row in the file and if you don’t you will have to specify header=None b)  - index_col = False means to not use the first column of the data as an index in the data frame, you might want to set it to true if the first column is really an index.</description>
    </item>
    
    <item>
      <title>An A-Z of useful Python tricks</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/useful-python-tricks/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/useful-python-tricks/</guid>
      <description>An A-Z of useful Python tricks Source : FreeCodeCamp.org
Python is one of the world’s most popular, in-demand programming languages. This is for many reasons:
 it’s easy to learn it’s super versatile it has a huge range of modules and libraries  I use Python daily as an integral part of my job as a data scientist. Along the way, I’ve picked up a few useful tricks and tips.</description>
    </item>
    
    <item>
      <title>Basic Data Analysis</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-2/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-2/</guid>
      <description>Introduction to basic data analysis with Pandas (Private Munich Housemarket data set) Source
This article is the continuation from a previous article (here link to medium) where I explained my goal of identifying the value of House Market in Munich in order to buy a house.
Since I get the data, buying a house in Munich is out the question, I don’t (and probably will never) earn enough to actually realize that but the data are still interesting in order to do a quick look at data analysis with pandas.</description>
    </item>
    
    <item>
      <title>Code Examples</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-code-example/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-code-example/</guid>
      <description>Python Code Examples By : freeCodeCamp
Python is a general purpose programming language which is dynamically typed, interpreted, and known for its easy readability with great design principles.
Python Data Structures Example Some general information about floating point numbers and how they work in Python, can be found here.
Nearly all implementations of Python follow the IEEE 754 specification: Standard for Binary Floating-Point Arithmetic. More information found on the IEEE site.</description>
    </item>
    
    <item>
      <title>Converting Strings using datetime</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/onverting-strings-to-datetime/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/onverting-strings-to-datetime/</guid>
      <description>Converting Strings using datetime The datetime module consists of three different object types: date, time and datetime. As you may have guessed, date holds the date, time holds the time, and datetime holds both date and time.
For example, the following example will print the current date and time:
import datetime print (&#39;Current date/time: {}&#39;.format(datetime.datetime.now()))  Running this code will print an output similar to below:
$ python3 datetime-print-1.py Current date/time: 2018-06-29 08:15:27.</description>
    </item>
    
    <item>
      <title>Datetime</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/date-time/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/date-time/</guid>
      <description>Datetime import datetime x = datetime.datetime.now() print(x)  2019-09-26 00:21:06.668559  Date Output import datetime x = datetime.datetime.now() print(x.year) print(x.strftime(&amp;quot;%A&amp;quot;))  2019 Thursday  Creating Date Objects import datetime x = datetime.datetime(2020, 5, 17) print(x)  2020-05-17 00:00:00  The strftime() Method import datetime x = datetime.datetime(2018, 6, 1) print(x.strftime(&amp;quot;%B&amp;quot;))  June  A reference of all the legal format codes:    Directive Description Example     %a Weekday, short version Wed   %A Weekday, full version Wednesday   %w Weekday as a number 0-6, 0 is Sunday 3   %d Day of month 01-31 31   %b Month name, short version Dec   %B Month name, full version December   %m Month as a number 01-12 12   %y Year, short version, without century 18   %Y Year, full version 2018   %H Hour 00-23 17   %I Hour 00-12 05   %p AM/PM PM   %M Minute 00-59 41   %S Second 00-59 08   %f Microsecond 000000-999999 548513   %z UTC offset +0100   %Z Timezone CST   %j Day number of year 001-366 365   %U Week number of year, Sunday as the first day of week, 00-53 52   %W Week number of year, Monday as the first day of week, 00-53 52   %c Local version of date and time Mon Dec 31 17:41:00 2018   %x Local version of date 12/31/18   %X Local version of time 17:41:00   %% A % character %    timedelta ตัวอย่างการหาผลต่างของวันที่</description>
    </item>
    
    <item>
      <title>Exploration of S&amp;P 500 Index</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/exploration-stock-index/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/exploration-stock-index/</guid>
      <description>Exploration of S&amp;amp;P 500 Index Using Pandas and Matplotlib In this article we want to explore whether it is true that staying in the market over a longer duration can be lucrative.
Import the Python libraries that are commonly used for data analysis and data exploration such as Pandas and Matplotlib.
In [1]:
import pandas as pd import numpy as np import matplotlib.pyplot as plt  Read the files with S&amp;amp;P 500 data into Pandas dataframes.</description>
    </item>
    
    <item>
      <title>Extract table from PDF</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-for-pdf-02/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-for-pdf-02/</guid>
      <description>tabula-py: Extract table from PDF into Python DataFrame As of Oct. 2019, I launched a documentation site and Google Colab notebook for tabula-py. The FAQ would be good place to execute accurate extraction.
It is simple wrapper of tabula-java and it enables you to extract table into DataFrame or JSON with Python. You also can extract tables from PDF into CSV, TSV or JSON file.
tabula is a tool to extract tables from PDFs.</description>
    </item>
    
    <item>
      <title>Functions and Functional Programming</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-functions_and-functional-programming/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-functions_and-functional-programming/</guid>
      <description>Tutorial: Python Functions and Functional Programming  https://www.dataquest.io/blog/introduction-functional-programming-python/  Most of us have been introduced to Python as an object-oriented language, but Python functions are also useful tools for data scientists and programmers alike. While classes, and objects, are easy to start working with, there are other ways to write your Python code. Languages like Java can make it hard to move away from object-oriented thinking, but Python makes it easy.</description>
    </item>
    
    <item>
      <title>Getting Started with APIs</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-api-tutorial/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-api-tutorial/</guid>
      <description>Python API Tutorial: Getting Started with APIs In this Python API tutorial, we’ll learn how to retrieve data for data science projects. There are millions of APIs online which provide access to data. Websites like Reddit, Twitter, and Facebook all offer certain data through their APIs.
To use an API, you make a request to a remote web server, and retrieve the data you need.
But why use an API instead of a static CSV dataset you can download from the web?</description>
    </item>
    
    <item>
      <title>House Market Analysis 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-1/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-1/</guid>
      <description>Python Pandas : House Market Analysis – Munich (2016-2017) (1&amp;frasl;2) Source
I started to use python for other things than Data Analysis at the beginning. I was a technical SEO consultant and wanted to use a crawler (or built one) and not knowing any programming language, python looked as the perfect language to start with…
Flash forward to nowadays, I am even more fan of python now because of its versatility to do what I just mentioned and also to realize data analysis easily.</description>
    </item>
    
    <item>
      <title>Introduction Pickle Module</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-pickle-module/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-pickle-module/</guid>
      <description>Introduction to the Python Pickle Module Introduction Pickling is a popular method of preserving food. According to Wikipedia, it is also a pretty ancient procedure – although the origins of pickling are unknown, the ancient Mesopotamians probably used the process 4400 years ago. By placing a product in a specific solution, it is possible to drastically increase its shelf life. In other words, it&amp;rsquo;s a method that lets us store food for later consumption.</description>
    </item>
    
    <item>
      <title>OOP in Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/oop-in-python/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/oop-in-python/</guid>
      <description>Object Oriented Programming in Python  Introduction Pros and Cons of OOP Class Objects Attributes Methods Constructors Local vs Global Variables Access Modifiers Inheritance Polymorphism Encapsulation Conclusion  Introduction Object-Oriented Programming (OOP) is a programming paradigm where different components of a computer program are modeled after real-world objects. An object is anything that has some characteristics and can perform a function.
Consider a scenario where you have to develop a Formula 1 car racing game using the object-oriented programming approach.</description>
    </item>
    
    <item>
      <title>Optimizations</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-optimizations/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-optimizations/</guid>
      <description>Python Optimizations Peephole is a way Python optimizes certain things of your program at compile time by either pre-calculating constant expressions or transforming certain data structures. Constant Expressions Optimizing constant expressions is really simple. What Python does is basically pre-calculate constants. Suppose that along your program you have the following multiplication for some reason,
secondsInADay = 60*60*24  What python will do is pre-calculate that multiplication and will replace it for 86400 .</description>
    </item>
    
    <item>
      <title>Overloading Functions and Operators</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/overloading-functions/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/overloading-functions/</guid>
      <description>Overloading Functions and Operators in Python What is Overloading? Overloading, in the context of programming, refers to the ability of a function or an operator to behave in different ways depending on the parameters that are passed to the function, or the operands that the operator acts on. In this article, we will see how we can perform function overloading and operator overloading in Python.
Overloading a method fosters reusability.</description>
    </item>
    
    <item>
      <title>Pandas Cheatsheet</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/cheatsheet-pandas/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/cheatsheet-pandas/</guid>
      <description>Cheatsheet วิธีใช้ และเทคนิคใน Pandas (Python) ฉบับสมบูรณ์ Pandas คืออะไร? Pandas เป็น Library ใน Python ที่ทำให้เราเล่นกับข้อมูลได้ง่ายขึ้น เหมาะมากสำหรับทำ Data Cleaning / Wrangling ครับผม
วิธีการใช้งาน Pandas คือ โหลดไฟล์ข้อมูล เช่น CSV เข้าไป แล้วเราจะได้ข้อมูลในรูปแบบตาราง (DataFrame) ที่แบ่งข้อมูลตามแถวและคอลัมน์ หรือเหมือน Excel ที่เราใช้กันนั่นเอง

ตัวอย่าง DataFrame ของ Pandas เป็นตารางเหมือน Excel เลยครับ
ป.ล. Pandas ไม่เกี่ยวกับหมีแพนด้านะฮะ จริง ๆ แล้วมาจากคำว่า PANel DAta ซึ่งหมายถึงข้อมูลที่มีหลายมิตินั่นเอง
เทคนิคการใช้ Pandas อย่างที่แอดมินเคยเล่า ว่าการทำ Data Wrangling เป็นงานที่ค่อนข้างถึกครับ วันนี้เลยรวบรวมโค้ดต่าง ๆ ในการใช้ Pandas มาให้ ซึ่งน่าจะครอบคลุมการใช้งานประมาณ 80 – 90% แล้วครับผม
โค้ดบางส่วนมาจากคลาส Data Wrangling ที่แอดมินเรียน และจากเว็บไซต์ MyCheatSheet ครับ</description>
    </item>
    
    <item>
      <title>Python Dictionary Tutorial</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-dictionary-tutorial/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-dictionary-tutorial/</guid>
      <description>Python Dictionary Tutorial  Introduction Creating a Dictionary Accessing Elements Adding Elements Updating Elements Removing Elements Other Common Methods Conclusion  Introduction Python comes with a variety of built-in data structures, capable of storing different types of data. A Python dictionary is one such data structure that can store data in the form of key-value pairs. The values in a Python dictionary can be accessed using the keys. In this article, we will be discussing the Python dictionary in detail.</description>
    </item>
    
    <item>
      <title>Python for PDF</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-for-pdf-01/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-for-pdf-01/</guid>
      <description>Python for Pdf Why Python for PDF processing PDF processing comes under text analytics. Most of the Text Analytics Library or frameworks are designed in Python only. This gives leverage on text analytics. Once you extract the useful information from PDF you can easily use that data into any Machine Learning or Natural Language Processing Model.
Common Python Libraries Here is the list of some Python Libraries could be used to handle PDF files</description>
    </item>
    
    <item>
      <title>Python Programming in R</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-programming-in-r/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-programming-in-r/</guid>
      <description>Python Programming in R  All code used in this tutorial can be found here: https://github.com/joelalcedo/Python_in_R
 I am a Data Scientist working in New York. I have worked on a number of different projects spanning data visualization, machine learning and software development all in hopes to better understand the complexities associated with the financial markets. I started learning how to program about 10 years ago in visual basic. One thing led to another (as it does) and I learned SQL, R, Python, JavaScript (regrettably), C++ and others.</description>
    </item>
    
    <item>
      <title>Python Time Module</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-time-module./</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-time-module./</guid>
      <description>A Beginner’s Guide to the Python time Module Table of Contents
 Dealing With Python Time Using Seconds  The Epoch Python Time in Seconds as a Floating Point Number Python Time in Seconds as a String Representing Local Time  Understanding Time Zones  UTC and Time Zones Daylight Savings Time  Dealing With Python Time Using Data Structures  Python Time as a Tuple Python Time as an Object  Converting Python Time in Seconds to an Object  Coordinated Universal Time (UTC) Local Time  Converting a Local Time Object to Seconds Converting a Python Time Object to a String  asctime() strftime()  Converting a Python Time String to an Object Suspending Execution Measuring Performance Conclusion Further Reading  The Python time module provides many ways of representing time in code, such as objects, numbers, and strings.</description>
    </item>
    
    <item>
      <title>Python vs. Scala  (Part I)</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-scala-comparison-part-1/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-scala-comparison-part-1/</guid>
      <description>Python vs. Scala: a comparison of the basic commands (Part I) Source :
I recently started playing a little bit with Scala, and I have to say it has been kind of traumatic. I love learning new things but after months of programming with Python, it is just not natural to set that aside and switch mode while solving Data Science problems. When learning a new language, whether it is a coding or a spoken one, it is normal for this to happen.</description>
    </item>
    
    <item>
      <title>Python vs. Scala  (Part II)</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-scala-comparison-part-2/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-scala-comparison-part-2/</guid>
      <description>Pandas vs. Spark: how to handle dataframes (Part II) “Panda statues on gray concrete stairs during daytime” by chuttersnap on Unsplash. “Scala” means “stairway” in Italian, my native language: hence the choice of the picture. It just seemed appropriate.
A few days ago I published a post comparing the basic commands of Python and Scala: how to deal with lists and arrays, functions, loops, dictionaries and so on. As I continue practicing with Scala, it seemed appropriate to follow-up with a second part, comparing how to handle dataframes in the two programming languages, in order to get the data ready before the modeling process.</description>
    </item>
    
    <item>
      <title>Selecting Subsets of Data 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/selecting-subsets-pandas-1/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/selecting-subsets-pandas-1/</guid>
      <description>Selecting Subsets of Data in Pandas Part 1  Source  This article is available as a Jupyter Notebook complete with exercises at the bottom to practice and detailed solutions in another notebook.
Become an Expert  My book Master Data Analysis with Python is the most comprehensive text on the market to learn data analysis using Python and comes with 300+ exercises and projects. Sign-up for the FREE Intro to Pandas class Follow me on Twitter @TedPetrou for my daily data science tricks  Part 1: Selection with [ ], .</description>
    </item>
    
    <item>
      <title>Send email using SMTP</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/use-python-send-email/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/use-python-send-email/</guid>
      <description>Use Python to send email using SMTP Use Python to send emails
In this tutorial, we will learn to use python to send emails. If you are new to python, you can see our beginner’s series. In case you are having trouble installing Python, you can see our posts on installing python on MacOS and Windows.
We will start with sending plain email using python and then learn to send advanced automated emails, HTML emails, emails with attachments etc.</description>
    </item>
    
    <item>
      <title>Set Passwords and Secret Keys</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/set-passwords-and-secret-keys/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/set-passwords-and-secret-keys/</guid>
      <description>Set Passwords and Secret Keys in Environment Variables (Mac/Linux/Windows) Hide Passwords and Secret Keys in Environment Variables
If you are into python , there is a fair chance that you would have contributed to open-source or had your code snippets/projects on Github or BitBucket.Some time your code involves some important credentials like passwords or secret keys etc. like the code for our post on how to send emails using python uses google/app password.</description>
    </item>
    
    <item>
      <title>Stock Analysis in Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-analysis-in-python/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-analysis-in-python/</guid>
      <description>Stock Analysis in Python Exploring financial data with object-oriented programming and additive models
It’s easy to get carried away with the wealth of data and free open-source tools available for data science. After spending a little bit of time with the quandl financial library and the prophet modeling library, I decided to try some simple stock data exploration. Several days and 1000 lines of Python later, I ended up with a complete stock analysis and prediction tool.</description>
    </item>
    
    <item>
      <title>การใช้งาน Virtualenv</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/virtualenv/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/virtualenv/</guid>
      <description>การใช้งาน Virtualenv Virtualenv คืออะไร Virtualenv(ironment) คือ environment ของ python เช่น คุณทำโปรแกรมอยู่ 2 ตัว A กับ B แล้วเวลาคุณจะติดตั้ง library ถ้าคุณ pip install ลงไปเลย
 library ที่คุณใช้กับงาน A กับปนมั่วกับงาน B  เช่น เวลาจะทำไฟล์ requirement เพื่อให้คนอื่น สามารถติดตั้ง library ที่ใช้กับงานเราได้สะดวกมากขึ้นก็กลับกลายเป็นว่า งาน A ใช้ 5 library งาน B ใช้ 10 Libray สรุป คนที่เอาโปรแกรมเราไม่ไปใช้ก็ไม่รู้ว่า โปรแกรมเราใช้ library อะไรบ้างก็ต้องติดตั้งทั้งหมด 15 library
 หรือแบบไม่สามารถแยก version ของ library กันได้  เช่น งาน A ใช้ OpenCV 3 แต่ งาน B ใช้ OpenCV 4 ทำไงให้ลง 2 version พร้อมกันได้ละ ก็ต้องให้เจ้า Virtualenv ช่วยเราไง</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://dragon-library.github.io/library/tutorials/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://dragon-library.github.io/library/tutorials/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>10 เรื่องน่ารู้ตอบข้อสงสัย JavaScript</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/10-knowledge-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/10-knowledge-javascript/</guid>
      <description>10 เรื่องน่ารู้ตอบข้อสงสัย JavaScript ในการเขียนภาษา JavaScript นั้นมีทั้งสิ่งที่เหมือนและแตกต่างกับภาษาโปรแกรมอื่นๆ สำหรับคนที่ใช้งาน JavaScript ไม่ว่าจะเพิ่งเริ่มศึกษาหรือใช้มานานแล้ว ก็อาจจะยังมีบางเรื่องที่สงสัยหรือยังไม่รู้เกี่ยวกับ JavaScript อยู่ เราจึงรวบรวม 10 เรื่องน่ารู้เกี่ยวกับ JavaScriptมาให้ได้ลองอ่านกัน
1. การประกาศตัวแปร Var, Let, Const ใช้แบบไหน ในการเขียนโค้ด การประกาศตัวแปรก็เป็นสิ่งแรกๆ ที่น่าจะเจอในการเริ่มต้นศึกษาภาษานั้นๆ ใน JavaScript ก็เช่นกัน สำหรับคนที่เริ่มศึกษา JavaSctipt น่าจะเคยเห็นผ่านตามาบ้างก็คือ var, let และ const เพื่อการนำไปใช้งานอย่างถูกต้อง ลองมาดูกันว่าการประกาศแต่ละแบบนั้นต่างกันอย่างไรบ้าง
function run() { const myNum = 191; var one = &amp;quot;One&amp;quot;; let two = &amp;quot;Two&amp;quot;; { var three = &amp;quot;Three&amp;quot;; let four = &amp;quot;Four&amp;quot;; } console.log(one); //Output: One console.log(two); //Output: Two console.log(three); //Output: Three console.</description>
    </item>
    
    <item>
      <title>Build a web app with Vue</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/vue/build-web-app-with-vue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/vue/build-web-app-with-vue/</guid>
      <description>How to build a web app with Vue, Vuetify and Axios Source:
Introduction In this article, we will be building a Vue.js Application supported by Vuetify and Axios. The aim of this article is to implement a movie application which will be calling on an API. The user will be able to search for movies. The API will retrieve movies with all the search details. When a user clicks on a movie, it will give more details of each movie.</description>
    </item>
    
    <item>
      <title>Building a Stock Screener - Part 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-1/</guid>
      <description>Building a Stock Screener in Python- Part 1  ที่มาบทความ .
 In this post, I’ll share how to create a stock screener — a program which can filter stocks based on user preferences — from scratch (and for free) using python. This project will be broken into 3 parts-
 Scraping data Storing data Screening data  Before we dive into programming, let’s start by asking why anyone would want to build a stock screener.</description>
    </item>
    
    <item>
      <title>Building a Stock Screener - Part 2</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-2/</guid>
      <description>Building a Stock Screener in Python- Part 2 In this series, I’ll share how to create a stock screener — a program which can filter stocks based on user preferences — from scratch (and for free) using python. This project will be broken into 3 parts-
 Scraping data Storing data Screening data  If you haven’t already, check out Part 1 where I talk about scraping stock information from Yahoo Finance in under 10 minutes!</description>
    </item>
    
    <item>
      <title>Calculate Stock Returns</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/cal-stock-return/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/cal-stock-return/</guid>
      <description>How to calculate stock returns in Python  4/3/2018 Written by DD
Source.
 Calculating financial returns in Python One of the most important tasks in financial markets is to analyze historical returns on various investments. To perform this analysis we need historical data for the assets. There are many data providers, some are free most are paid. In this chapter we will use the data from Yahoo’s finance website.</description>
    </item>
    
    <item>
      <title>Circle Progress</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/circle-progress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/circle-progress/</guid>
      <description>Circle Progress  Responsive, accessible, animated, stylable with CSS circular progress bar available as plain (vanilla) JavaScript and jQuery plugin.
 See examples or go to the project site
Getting Started As plain JavaScript Download the minified [production version][vanilla-min]
In your web page:
&amp;lt;div class=&amp;quot;progress&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;dist/circle-progress.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; new CircleProgress(&#39;.progress&#39;); &amp;lt;/script&amp;gt;  As jQuery plugin Download the minified jQuery production version
In your web page:
&amp;lt;div class=&amp;quot;progress&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.3.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;dist/jquery.</description>
    </item>
    
    <item>
      <title>Creating the Layout in HTML</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/html/creating-the-layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/html/creating-the-layout/</guid>
      <description>Website Design: Creating the Layout in HTML For this you need to be aware of the different layout options available in HTML/CSS and which of those is the right fit for your website design. Let us go through the options one by one.
Photo by Pankaj Patel on Unsplash
Tables — Do Not Do This! This was used earlier when the web was still in its infancy, and there wasn’t much you could do with a website except display text.</description>
    </item>
    
    <item>
      <title>CSS Animation — Part 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/css/guide-to-css-animation-part-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/css/guide-to-css-animation-part-1/</guid>
      <description>A Guide to CSS Animation — Part 1 This post assumes you’ve never created a CSS animation before. But even if you have, there may be things you were not aware of. It does assume you have some familiarity with HTML and CSS. We’ll explore creating your first animation through to things like chaining animations.
CSS animation can be a quick concept to grasp but a big topic to cover once we really dig in.</description>
    </item>
    
    <item>
      <title>CSS Animation — Part 2</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/css/guide-to-css-animation-part-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/css/guide-to-css-animation-part-2/</guid>
      <description>A Guide to CSS Animation — Part 2 animation-iteration-count Let’s pick up from where we left off with by modifying our first animation. If you need a little refresher, this is what we had.
But the animation only ran once. What if we wanted the animation to run many times or not even stop? In the case of loading animations, we may want the animation to be infinite. This is where animation-iteration-count comes into play.</description>
    </item>
    
    <item>
      <title>CSS Animation — Part 3</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/css/guide-to-css-animation-part-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/css/guide-to-css-animation-part-3/</guid>
      <description>A Guide to CSS Animation — Part 3 CSS Variables CSS variables are awesome. But you can’t animate them just yet. So what can we do with them? We can use their values to create dynamic animations.
Consider an example where we have three squares. We want to animate them all growing to different scales. Do we need three different animations for this? We could use animation-fill-mode backwards and scale them all from the same start size?</description>
    </item>
    
    <item>
      <title>Dash by Plotly</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-2/</guid>
      <description>Python for Finance: Dash by Plotly  Source.
 Part 2 of Leveraging Python for Stock Portfolio Analyses. In part 1 of this series I discussed how, since I’ve become more accustomed to using pandas, that I have signficantly increased my use of Python for financial analyses. During the part 1 post, we reviewed how to largely automate the tracking and benchmarking of a stock portfolio’s performance leveraging pandas and the Yahoo Finance API.</description>
    </item>
    
    <item>
      <title>DateTime, TimeDelta, Strftime with Examples</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/datetime-timedelta-strftime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/datetime-timedelta-strftime/</guid>
      <description>Python DateTime, TimeDelta, Strftime(Format) with Examples In Python, date, time and datetime classes provides a number of function to deal with dates, times and time intervals. Date and datetime are an object in Python, so when you manipulate them, you are actually manipulating objects and not string or timestamps. Whenever you manipulate dates or time, you need to import datetime function.
The datetime classes in Python are categorized into main 5 classes.</description>
    </item>
    
    <item>
      <title>Dictionary(Dict) with Example</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/dictionary-beginners-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/dictionary-beginners-tutorial/</guid>
      <description>Python Dictionary(Dict): Update, Cmp, Len, Sort, Copy, Items, str with Example Dictionaries are another example of a data structure. A dictionary is used to map or associate things you want to store the keys you need to get them. A dictionary in Python is just like a dictionary in the real world. Python Dictionary are defined into two elements Keys and Values.
 Keys will be a single element Values can be a list or list within a list, numbers, etc.</description>
    </item>
    
    <item>
      <title>How to scrape Yahoo Finance</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scrape-yahoo-finance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scrape-yahoo-finance/</guid>
      <description>How to scrape Yahoo Finance and extract fundamental stock market data using Python, LXML, and Pandas In this blog post I’ll show you how to scrape Income Statement, Balance Sheet, and Cash Flow data for companies from Yahoo Finance using Python, LXML, and Pandas.
I’ll use data from Mainfreight NZ (MFT.NZ) as an example, but the code will work for any stock symbol on Yahoo Finance.
The screenshot below shows a Pandas DataFrame with MFT.</description>
    </item>
    
    <item>
      <title>Introduction to Stock Analysis using Pandas</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/intro-stock-analysis-pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/intro-stock-analysis-pandas/</guid>
      <description>Introduction to Stock Analysis using Pandas  http://www.quantsbin.com/introduction-stock-analysis-pandas1/  As defined in Investopedia A time series is a sequence of numerical data points in successive order. Generally, observation points are successively equally spaced in time. Most of the financial data is in the time series format and hence &amp;ldquo;Financial Time Series Analysis&amp;rdquo; is an important tool for anyone trying to understand the historical movements, predict the future movements or manage the risk associated with the future movements.</description>
    </item>
    
    <item>
      <title>Learning Full Stack Web Development</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/html/learning-web-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/html/learning-web-development/</guid>
      <description>The Ultimate Guide to Learning Full Stack Web Development in 6 months, for $30 Hey everyone! In this article I’m going to show you how to go from knowing little to nothing about Web Development to Junior Full Stack Developer in just six months, for under $30.
This article will cover everything you need to know! You’ll first learn the basics of Web Development with an online coding bootcamp ($15).</description>
    </item>
    
    <item>
      <title>Merge Two Dictionaries</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/merge-two-dictionaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/merge-two-dictionaries/</guid>
      <description>How to Merge Two Dictionaries in Python: Dictionary Comprehensions and Unpacking POSTED ON JUNE 7, 2019 BY JEREMY GRIFSKI
When I’m trying to find a topic for this series, I either decide to write about something I just learned, or I choose to write about something I found from the list of top Python questions on Stack Overflow. Today, I’m hitting both by covering how to merge two dictionaries in Python.</description>
    </item>
    
    <item>
      <title>Portfolio Optimization in Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/portfolio-optimization-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/portfolio-optimization-python/</guid>
      <description>Portfolio Optimization in Python 5/31/2018 Written by DD
In this post we will demonstrate how to use python to calculate the optimal portfolio and visualize the efficient frontier.
In this post we will only show the code with minor explanations.
Lets begin with loading the modules.
import pandas as pd import numpy as np import matplotlib.pyplot as plt import pandas_datareader as web  Next we will get the stock tickers and the price data.</description>
    </item>
    
    <item>
      <title>Portfolio Optimization Methods</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/portfolio-optimization-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/portfolio-optimization-methods/</guid>
      <description>Portfolio Optimization Methods When constructing a multi-asset portfolio, coming up with the strategy to allocate weights to the portfolio components is a very important step in the process. Coming up with weights for a portfolio given its components can be done in a number of ways and is a question that boggles even the most skilled managers. So what is the most optimal way to do this? in this article we will try to introduce the most widely used methods and understand the intuition behind them.</description>
    </item>
    
    <item>
      <title>Python - Date &amp; Time</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-date-and-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-date-and-time/</guid>
      <description>Python - Date &amp;amp; Time A Python program can handle date and time in several ways. Converting between date formats is a common chore for computers. Python&amp;rsquo;s time and calendar modules help track dates and times.
What is Tick? Time intervals are floating-point numbers in units of seconds. Particular instants in time are expressed in seconds since 12:00am, January 1, 1970(epoch).
There is a popular time module available in Python which provides functions for working with times, and for converting between representations.</description>
    </item>
    
    <item>
      <title>Python 101 สําหรับมือใหม่</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-101-for-beginner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-101-for-beginner/</guid>
      <description>Python 101 สําหรับมือใหม่ Interpreted Language (ความหมายง่ายๆของภาษาแบบนี้คือ มันสามารถทํางานได้บนทุกแพลตฟอร์มขอให้มีแค่ interpreter ให้มันก็พอ และ อีกอย่างคือมันจะทําการแปลงจากโค้ดที่เรามีไปเป็นภาษาที่เครื่องเข้าใจแบบ on the fly)
ถ้าเทียบกับการพัฒนาโปรแกรมด้วย Java การเขียน Python นี้จะแตกต่างแล้วก็เห็นได้ชัดเลยว่ามันเร็วกว่ามากๆ เช่นตัวอย่างนี้เลย
public class { public static void main(String[]args) { System.out.println(&amp;quot;Hello, world!&amp;quot;); } }  ตัวอย่างภาษา Java
print(&amp;quot;Hello, world!&amp;quot;)
ตัวอย่างภาษา Python
แค่เทียบก็เห็นละว่า Line of code น้อยกว่ามาก เขียนสั้นง่ายๆดี
Basic Python Syntax Indent
ปกติภาษาเขียนโปรแกรมทั่วไปจะต้องมี วงเล็บ (Bracket – {}) เพื่อระบุว่าอะไรคือขอบเขตของมัน แต่ Python ไม่ได้ใช้วงเล็บ แต่ใช้ Indent หรือ Space แทน
public class { public static void main(String[]args) { System.</description>
    </item>
    
    <item>
      <title>Quantitative Trading Strategies</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_2/</guid>
      <description>Python for Finance, Part 2: Intro to Quantitative Trading Strategies In Python for Finance, Part I, we focused on using Python and Pandas to
 retrieve financial time-series from free online sources (Yahoo), format the data by filling missing observations and aligning them, calculate some simple indicators such as rolling moving averages and visualise the final time-series.  As a reminder, the dataframe containing the three “cleaned” price timeseries has the following format:</description>
    </item>
    
    <item>
      <title>Requests and BeautifulSoup</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/request-and-beautifulsoup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/request-and-beautifulsoup/</guid>
      <description>Ultimate Guide to Web Scraping with Python Part 1: Requests and BeautifulSoup After the 2016 election I became much more interested in media bias and the manipulation of individuals through advertising. This series will be a walkthrough of a web scraping project that monitors political news from both left and right wing media outlets and performs an analysis on the rhetoric being used, the ads being displayed, and the sentiment of certain topics.</description>
    </item>
    
    <item>
      <title>Start Django RestFramework</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/django/django-rest-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/django/django-rest-framework/</guid>
      <description>เริ่มต้นใช้งาน Django RestFramework ปัจจุบันการพัฒนาเวปไซด์จะแยกการพัฒนาออกเป็น FrontEnd (เช่น React, Angular, Vue) และ BackEnd ( เช่น Django ) ซึ่งสิ่งที่ใช้เป็นสื่อกลางในการแลกเปลี่ยนข้อมูลกันระหว่าง FrontEnd และ BackEnd คือ Rest API นั่นเอง ในบทความนี้จะเป็นการอธิบายการสร้าง BackEnd ให้รองรับ Rest API ด้วย Django โดยได้มีการเลือกใช้ Library ชื่อ Django Rest framework เพื่อช่วยให้การพัฒนา REST API ทำได้อย่างง่ายดายและรวดเร็ว
สิ่งที่ต้องเตรียม  Python 3.7 ความรู้ด้านการเขียน Django ขั้นพื้นฐาน ( สร้าง model และเขียน view ได้ ) ติดตั้ง package พื้นฐานด้วยคำสั่งต่อไปนี้
$ pip install -r requirements.txt  ทำความรู้จักกับ REST API REST API คือข้อกำหนดที่ใช้ในการแลกเปลี่ยนข้อมูลระหว่าง FrontEnd และ BackEnd โดยทั่วไปข้อกำหนดนี้จะถูกใช้งานอยู่บน HTTP Protocol</description>
    </item>
    
    <item>
      <title>Stock Portfolio Analyses</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-1/</guid>
      <description>Python for Finance: Stock Portfolio Analyses  Written with StackEdit.
 My two most recent blog posts were about Scaling Analytical Insights with Python; part 1 can be found here and part 2 can be found here. It has been several months since I wrote those, largely due to the fact that I relocated my family to Seattle to join Amazon in November; I’ve spent most of the time on my primary project determining our global rollout plan and related business intelligence roadmap.</description>
    </item>
    
    <item>
      <title>Use .map(), .reduce(), and .filter()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/javascript-use-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/javascript-use-map/</guid>
      <description>Simplify your JavaScript – Use .map(), .reduce(), and .filter() Jan 29, 2018 · 7 min read
If you’re starting in JavaScript, maybe you haven’t heard of .map(), .reduce(), and .filter(). For me, it took a while as I had to support Internet Explorer 8 until a couple years ago. But if you don’t need to be compatible with this very old browser, you have to become familiar with those methods.</description>
    </item>
    
    <item>
      <title>Web Scraping 101</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-101/</guid>
      <description>Web Scraping 101 in Python : overview of the tools &amp;amp; the pros and cons of each Summary:  Web Fundamentals Manually opening a socket and sending the HTTP request urllib3 &amp;amp; LXML requests &amp;amp; BeautifulSoup Scrapy Selenium &amp;amp; Chrome —headless Conclusion  Web Fundamentals The internet is really complex–there are many underlying technologies and concepts involved to view a simple web page in your browser. I&amp;rsquo;m not going to explain everything, but I will show you the most important things you have to understand in order to extract data from the web.</description>
    </item>
    
    <item>
      <title>Yahoo &amp; Google Finance API</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_1/</guid>
      <description>Python for Finance, Part I: Yahoo &amp;amp; Google Finance API, pandas, and matplotlib Getting the Data Pandas and matplotlib are included in the more popular distributions of Python for Windows, such as Anaconda.
In case it&amp;rsquo;s not included in your Python distribution, just simply use pip or conda install. Once installed, to use pandas, all one needs to do is import it. We will also need the pandas_datareader package (pip install pandas-datareader), as well as matplotlib for visualizing our results.</description>
    </item>
    
    <item>
      <title>การจัดการวันเวลาด้วย datetime</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-datetime/</guid>
      <description>การจัดการวันเวลาใน python ด้วย datetime  เขียนเมื่อ 2016/06/21 19:35
 มอดูล datetime เป็นหนึ่งในมอดูลภายในตัวของไพธอน มีหน้าที่จัดการเกี่ยวกับเรื่องวันเดือนปีและเวลาต่างๆ หน้าที่มีความคล้ายคลึงกับมอดูล time (อ่านรายละเอียดใน https://phyblas.hinaboshi.com/20160610) แต่ก็มีความต่างกันอยู่ บางครั้งก็อาจใช้ร่วมกัน datetime มักถูกใช้เมื่อต้องการจัดการกับข้อมูลที่อยู่ในรูปของวันเดือนปีหรือเวลาชั่วโมงนาทีวินาที เวลาและวันเดือนปีนั้นเป็นปริมาณที่ใช้หน่วยหลากหลายในการอธิบาย และการแปลงหน่วยก็มีความยุ่งยากเพราะมีความไม่สม่ำเสมอ เช่นจำนวนวันในหนึ่งปีหรือหนึ่งเดือนเป็นต้น
การใช้ออบเจ็กต์พิเศษของ datetime จะทำให้การคำนวณทำได้โดยง่ายขึ้น อีกทั้งยังสามารถปรับเปลี่ยนรูปแบบการแสดงผลให้เป็นไปตามที่ต้องการได้ง่ายด้วย การใช้มอดูลนี้ก่อนอื่นต้องเริ่มจากทำการ import เรียกใช้ก่อน
import datetime  ออบเจ็กต์พิเศษใน datetime มอดูล datetime นั้นมีการนิยามคลาสของออบเจ็กต์สำหรับเก็บค่าวันเดือนปีและเวลาโดยเฉพาะ มีอยู่ 4 ชนิดคือ
 datetime.date ออบเจ็กต์เก็บค่าวันเดือนปี datetime.time ออบเจ็กต์เก็บค่าเวลา datetime.datetime เป็นออบเจ็กต์ที่เอา datetime.date กับ datetime.time มารวมกัน เก็บค่าทั้งวันเดือนปีและเวลา datetime.timedelta ออบเจ็กต์เก็บค่าระยะห่างระหว่างเวลาซึ่งมีหน่วยเป็นวันและวินาที   datetime.date จะเก็บค่าตัวเลขปี เดือน วัน ทั้งหมดเป็นจำนวนเต็มเอาไว้ ในการสร้าง datetime.date จะต้องใส่ค่าปี, เดือน, วัน ตามลำดับ เช่น</description>
    </item>
    
    <item>
      <title>รวม API สำหรับ Javascript ที่น่าสนใจในปี 2020</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/api-for-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/website/javascript/api-for-javascript/</guid>
      <description>รวม API สำหรับ Javascript ที่น่าสนใจในปี 2020 หากคุณอยากเขียนไซต์หรือโปรแกรมของคุณ ในหัวของคุณคงมีภาพไซต์ที่มีฟีเจอร์มากมาย แต่จะทำอย่างไรล่ะให้ไซต์ของคุณเป็นไปตามที่วาดเอาไว้ เราจึงได้รวบรวม API สำหรับ JavaScript ที่จะทำให้ไซต์ของคุณทำงานได้อย่างหลากหลายทันต่อยุคสมัยปี 2020
Youtube API Youtube เป็นหนึ่งในสิ่งที่ทุกคนใช้กันอย่างล้นหลาม และเป็นส่วนหนึ่งในชีวิตประจำวันของทุกคน จะเป็นอย่างไรถ้าเรานำยูทูปมาเป็นส่วนหนึ่งในไซต์ของเรา โดย Youtube API จะช่วยให้เราสามารถนำวิดิโอที่เราต้องการมาแปะในไซต์ของเราได้โดยไม่จำเป็นต้องเปลี่ยนหน้าไปที่ลิงค์วิดิโอของวิดิโอนั้นๆ
https://developers.google.com/youtube
Google Map API เราสามารถย่อส่วนกูเกิ้ลแมพมาใส่ไซต์ของเราได้!! ด้วย API ของ Google Map จะทำให้เราสามารถนำ service ต่างๆของ Google Map มาใส่ในไซต์ของเราได้ ไม่ว่าจะเป็นนำแผนที่มาใส่ในไซต์ หรือปักหมุดบนแผนที่ ซึ่งเป็นประโยชน์มากหากเราต้องการระบุตำแหน่งสถานที่ต่างๆบนแผนที่ ถึงแม้จะไม่สามารถทำทุกอย่างได้เหมือนกูเกิ้ลแมพหลักแต่ก็มีประโยชน์มากไม่น้อย
https://developers.google.com/maps/documentation/javascript/tutorial
Nasa API นาซ่าเองก็มี API ของตัวเอง โดย API ของนาซ่าจะทำให้เราสามารถนำข้อมูลต่างๆที่น่าสนใจของนาซ่ามาแปะไว้ในไซต์ของเราได้ ไม่ว่าจะเป็นข้อมูลทางดาราศาสตร์ต่างๆ บทคความสนุกๆของนาซ่า หรือรูปภาพสวยๆของนาซ่า ซึ่งแต่ละวันนาซ่าจะมี Picture of The Day ที่เป็นภาพที่นาซ่าคัดมาไม่ซ้ำกัน ช่วยเพิ่มความสนุกให้ในการเยี่ยมชมไซต์ของเราได้ไม่น้อย
https://api.nasa.gov/
Web Animation API อยากให้ไซต์ของเรามีอนิชั่นสวยๆ แต่CSSมันก็ใช้ยากเหลือเกิน แถมการเคลื่อนไหวก็ดูไม่ค่อยสมูท ปัญหานี้จะหมดไปเมื่อเราใช้ Web Animation API ซึ่งช่วยให้เราจัดการอนิเมชั่นของCSS animationได้ง่ายขึ้น ช่วยให้ไซต์ของเราให้มีชีวิตชีวามากขึ้น</description>
    </item>
    
  </channel>
</rss>