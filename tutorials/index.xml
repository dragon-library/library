<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Tutorials</title>
    <link>https://dragon-library.github.io/library/tutorials/</link>
    <description>Recent content in Introduction on Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 18 Jan 2020 10:42:26 +0600</lastBuildDate>
    
	<atom:link href="https://dragon-library.github.io/library/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Simple Example-Based Guide</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/simple-example-based-guide/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/simple-example-based-guide/</guid>
      <description>NumPy Tutorial: A Simple Example-Based Guide  Introduction Advantages of NumPy NumPy Operations Creating a NumPy Array  The array Method The arange Method The zeros Method The ones Method The linspace Method The eye Method The random Method  Reshaping NumPy Array Finding Max/Min Values Array Indexing in NumPy  Indexing with 1-D Arrays Indexing with 2-D Arrays  Arithmetic Operations with NumPy Arrays  The log Function The exp Function The sqrt Function The sin Function  Linear Algebra Operations with NumPy Arrays  Finding the Vector Dot Product Matrix Multiplication Finding the Inverse of a Matrix Finding the Determinant of a Matrix Finding the Trace of a Matrix  Conclusion  Introduction The NumPy library is a popular Python library used for scientific computing applications, and is an acronym for &amp;ldquo;Numerical Python&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>10 Pandas tips</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/10_pandas_tip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/10_pandas_tip/</guid>
      <description>10 Python Pandas tips to make data analysis faster Source
1. Styling Have you ever complained about the table output looks boring when you do .head() in Jupyter notebooks? Is there a way not to display indexes (especially when there is already an ID column)? There’re ways to fix these issues.
A. Highlight all negative values in a dataframe. (example revised from https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html)
import pandas as pd def color_negative_red(val): color = &#39;red&#39; if val &amp;lt; 0 else &#39;black&#39; return &#39;color: %s&#39; % colordf = pd.</description>
    </item>
    
    <item>
      <title>24 เคล็ดลับ การใช้งาน Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/24-trick-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/24-trick-python/</guid>
      <description>24 เคล็ดลับ การใช้งาน Python Python เป็นอีกหนึ่งภาษา Programming ที่ได้รับความนิยม ถูกนำไปใช้ในการเขียน Program ได้หลากหลายประเภท โดยไม่ได้จำกัดอยู่ที่งานเฉพาะทางใดทางหนึ่ง ไม่ว่าจะเป็นการพัฒนา Web หรือด้าน Data Science และ Machine Learning เป็นต้น จึงทำให้มีการนำไปใช้กันอย่างแพร่หลาย วันนี้เรามาดู 24 เคล็ดลับ การใช้งาน Python ที่จะช่วยให้คุณประหยัดเวลาและทำงานได้สะดวกขึ้น โดยดูตัวอย่างการใช้งานในแต่ละหัวข้อกันได้เลย
1. Unpacking Array Items (http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/01.png)
2. Swapping Variables 3. Profile And Stats Of Your Code 3. Profile And Stats Of Your Code (http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/03.png)
4. Repeat String (http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/04.png)
5. Slicing (http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/05.png)
6. Reversing 
7. Negative Index ถ้าคุณต้องการที่จะเริ่มต้นจาก Character ตัวสุดท้าย สามารถใช้ Negative Index ได้</description>
    </item>
    
    <item>
      <title>71 Python Code Snippets</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/71-python-code-snippet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/71-python-code-snippet/</guid>
      <description>71 Python Code Snippets for Everyday Problems POSTED ON DECEMBER 27, 2019 BY JEREMY GRIFSKI
Last Updated on February 3, 2020
If you’ve been following me for any amount of time, you know that I regularly publish Python code snippets for everyday problems. Well, I figured I’d finally aggregate all those responses in one massive article with links to all those resources.
As a heads up, I’m looking to start porting all of the code snippets in this article to Jupyter Notebooks.</description>
    </item>
    
    <item>
      <title>81 Python Code Snippets</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/81-pythoncodesnippets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/81-pythoncodesnippets/</guid>
      <description>81 Python Code Snippets for Everyday Problems POSTED ON DECEMBER 27, 2019 BY JEREMY GRIFSKI
If you’ve been following me for any amount of time, you know that I regularly publish Python code snippets for everyday problems. Well, I figured I’d finally aggregate all those responses in one massive article with links to all those resources.
As a heads up, I’m looking to start porting all of the code snippets in this article to Jupyter Notebooks.</description>
    </item>
    
    <item>
      <title>Automate the Boring Stuff</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/e-book/automate-the-boring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/e-book/automate-the-boring/</guid>
      <description>Automate the Boring Stuff with Python By Al Sweigart. Free to read under a Creative Commons license.
Table of Contents  Chapter 0 – Introduction Chapter 1 – Python Basics Chapter 2 – Flow Control Chapter 3 – Functions Chapter 4 – Lists Chapter 5 – Dictionaries and Structuring Data Chapter 6 – Manipulating Strings Chapter 7 – Pattern Matching with Regular Expressions Chapter 8 – Input Validation Chapter 9 – Reading and Writing Files Chapter 10 – Organizing Files Chapter 11 – Debugging Chapter 12 – Web Scraping Chapter 13 – Working with Excel Spreadsheets Chapter 14 – Working with Google Spreadsheets Chapter 15 – Working with PDF and Word Documents Chapter 16 – Working with CSV Files and JSON Data Chapter 17 – Keeping Time, Scheduling Tasks, and Launching Programs Chapter 18 – Sending Email and Text Messages Chapter 19 – Manipulating Images Chapter 20 – Controlling the Keyboard and Mouse with GUI Automation Appendix A – Installing Third-Party Modules Appendix B – Running Programs Appendix C – Answers to the Practice Questions  (Read the 1st edition book.</description>
    </item>
    
    <item>
      <title>Bootstrap 4 แบบพื้นฐาน ตอนที่ 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-1/</guid>
      <description>สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน ตอนที่ 1 บทความนี้เป็นบทความสอนการใช้ Bootstrap เรื่องมีอยู่ว่าที่ทำงานของผมส่งผมไปเรียนคอส Web Design สอนโดย อ.กษิติ พันธุ์ถนอม คอสนี้เกี่ยวกับการใช้งาน Bootstrap4 ซึ่งผมก็พอจะรู้อยู่บ้างแล้ว การเรียนครั้งนี้เลยเหมือนการทบทวนและเพิ่มเติมเทคนิคต่างๆ ผมก็เลยได้โอกาสเขียนเป็นบล็อกนี้ขึ้นครับ
โดยเป้าหมายคือ การใช้งาน Bootstrap ทำให้เว็บ responsive แล้วก็ใช้งาน component ของ Bootstrap ต่างๆ รวมถึงคลาสที่ใช้งานบ่อยๆ นอกจากนี้ก็มีแนะนำเทค และการใช้เครื่องมือช่วยต่างๆด้วย
ติดตั้ง VS code เครื่องมือสำหรับเขียน แนะนำ VS Code ใครไม่มีก็ติดตั้งเลย
ดาวน์โหลดได้ที่
https://code.visualstudio.com/
เริ่มต้น เริ่มจากการพิมพ์คำสั่งลัด html:5 เพื่อให้ VS Code generate code ให้อัตโนมัติ
คำสั่ง meta UTF-8 และ viewport สำคัญสำหรับ Bootstrap ต้องใส่ทุกครั้ง ซึ่งมันก็สร้างมาให้แล้ว
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;  อีกอันคือพิมพ์ว่า lorem มันจะ generate ประโยคที่เรียกว่า lorem ให้ มันคือคำที่ไม่มีความหมาย เอามาวางไว้เฉยๆว่านี่คือตัวอักษรจะเห็นในงานพวก design หรือตัวอย่างโค้ดบ่อยๆ</description>
    </item>
    
    <item>
      <title>CSV &amp; Text files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/csv-and-text-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/csv-and-text-file/</guid>
      <description>CSV &amp;amp; Text files The workhorse function for reading text files (a.k.a. flat files) is read_csv(). See the cookbook for some advanced strategies.
Parsing options read_csv() accepts the following common arguments:
Basic filepath_or_buffervarious
Either a path to a file (a str&amp;rdquo;), pathlib.Path&amp;rdquo;), or py._path.local.LocalPath), URL (including http, ftp, and S3 locations), or any object with a read() method (such as an open file or StringIO&amp;rdquo;)).
sepstr, defaults to &#39;,&#39; for read_csv(), \t for read_table()</description>
    </item>
    
    <item>
      <title>Ep.1 Your first Flask app</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-1/</guid>
      <description>Your first Flask app | Learning Flask Ep. 1 In the first part of this series, you&amp;rsquo;ll learn how to create and run your very first Flask web application
Creating a project directory and virtual environment First of all, we need to create our new project directory. We&amp;rsquo;re going to a new directory called app in our home directory.
 Tip - I advise using the same names for your project so it&amp;rsquo;s easier to follow along</description>
    </item>
    
    <item>
      <title>JavaScript Cheat Sheet</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/javascript/cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/javascript/cheatsheet/</guid>
      <description>JavaScript Cheat Sheet  Link  If - Else⇵ if ((age &amp;gt;= 14) &amp;amp;&amp;amp; (age &amp;lt; 19)) { // logical condition status = &amp;quot;Eligible.&amp;quot;; // executed if condition is true } else { // else block is optional status = &amp;quot;Not eligible.&amp;quot;; // executed if condition is false } Switch Statement switch (new Date().getDay()) { // input is current day case 6: // if (day == 6) text = &amp;quot;Saturday&amp;quot;; break; case 0: // if (day == 0) text = &amp;quot;Sunday&amp;quot;; break; default: // else.</description>
    </item>
    
    <item>
      <title>Lists</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/list/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/list/list/</guid>
      <description>Lists ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูลแบบ List ในภาษา Python เราจะพูดถึงการสร้างและใช้งาน List ในเบื้องต้น การใช้งานเมธอดและฟังก์ชันเพื่อจัดการข้อมูลภายใน List และการใช้งานคำสั่ง For loop กับ List รวมถึงการ slicing
List (ลิสต์) คือโครงสร้างข้อมูลชนิดหนึ่งในภาษา Python ที่ใช้เก็บข้อมูลแบบลำดับ (Sequence) โดยมี Index เป็นตัวระบุตำแหน่งในการเข้าถึงข้อมูล เราสามารถใช้ List เพื่อเก็บข้อมูลจำนวนมากและหลากหลายประเภทในเวลาเดียวกัน List เป็นประเภทข้อมูลที่ใช้อย่างหลากหลายในการเขียนโปรแกรม นอกจากนี้ ในภาษา Python ยังมี built-in function ที่สามารถทำงานกับ List และใน List ออบเจ็คเองก็มีเมธอดต่างๆ เป็นจำนวนมากที่ช่วยอำนวยความสะดวกในการเขียนโปรแกรม
การประกาศและใช้งาน List List นั้นเป็นตัวแปรประเภทหนึ่ง การใช้งานของมันจะเหมือนกันอาเรย์ในภาษาอื่นๆ ในการประกาศ List นั้นข้อมูลของมันจะอยู่ภายในเครื่องหมาย [] และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา , มาดูตัวอย่างการประกาศ List ในภาษา Python
numbers = [-1, 2, 5, 8, 10, 13] names = [&#39;Mateo&#39;, &#39;Danny&#39;, &#39;James&#39;, &#39;Thomas&#39;, &#39;Luke&#39;] mixed_type = [-2, 5, 84.</description>
    </item>
    
    <item>
      <title>Pandas User Guide</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/user_guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/user_guide/</guid>
      <description>User Guide  Source : Pandas Document : .
 The User Guide covers all of pandas by topic area. Each of the subsections introduces a topic (such as “working with missing data”), and discusses how pandas approaches the problem, with many examples throughout.
Users brand-new to pandas should start with 10 minutes to pandas.
Further information on any specific method can be obtained in the API reference.
 IO tools (text, CSV, HDF5, …)  CSV &amp;amp; text files JSON HTML Excel files OpenDocument Spreadsheets Binary Excel (.</description>
    </item>
    
    <item>
      <title>Part. I</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/build-a-crud-web-app/part-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/build-a-crud-web-app/part-1/</guid>
      <description>Python Flask for Beginners: Build a CRUD Web App with Python and Flask Part. I I’ve named the app Project Dream Team, and it will have the following features:
 Users will be able to register and login as employees The administrator will be able to create, update, and delete departments and roles The administrator will be able to assign employees to a department and assign them roles The administrator will be able to view all employees and their details  Part One will cover:</description>
    </item>
    
    <item>
      <title>Primer on Jinja Templating</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/primer-jinja-templating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/primer-jinja-templating/</guid>
      <description>Primer on Jinja Templating Flask comes packaged with the powerful Jinja templating language.
For those who have not been exposed to a templating language before, such languages essentially contain variables as well as some programming logic, which when evaluated (or rendered into HTML) are replaced with actual values.
The variables and/or logic are placed between tags or delimiters. For example, Jinja templates use {% ... %} for expressions or logic (like for loops), while {{ .</description>
    </item>
    
    <item>
      <title>Progressive Web App คืออะไร</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/create-progressive-web-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/create-progressive-web-app/</guid>
      <description>Progressive Web App คืออะไร และ มาลองกันแบบง่ายๆ วันเดียวเสร็จ ฮัลโหลๆ สวัสดีครับ ช่วงนี้หายไปนาน แอบไปศึกษา Front-end framework อยู่หลายตัว จนไปเจอกับของเล่นใหม่เรียกว่า Progressive Web App หรือเรียกสั้นๆว่า PWA นั่นเอง ซึ่งประจวบเหมาะกับทาง Google ผู้ผลักดันเทคโนโลยีนี้ก็ได้มา Roadshow แสดงความเทพที่กรุงเทพกันไปหยกๆ ก็เลยถือโอกาสใช้พลังความมั่วส่วนตัว ขอมาเขียนเรื่องนี้ ดีไม่ดี ผิดพลาดตรงไหน ติชมได้เน่อ เริ่มกันเลย …
 บทความนี้เกิดจากเนื้อหาหลายๆส่วนจากทั้งในงาน Roadshow เอง รวมถึงการมั่วซั่วของผู้เขียนนะครับ ดู Reference ได้ท้ายบทความ
 หัวข้อในวันนี้  อะไรคือ PWA ทำไมต้อง PWA เบื้องหลังการทำงานของ PWA เป็นอย่างไร มาลองทำ PWA เล่นๆกันดู  อะไรคือ เจ้า Progressive Web App ? Source: http://www.letsnurture.com/blog/progressive-web-app-an-application-in-a-webpage.html
เจ้านี่คือเทคโนโลยีที่จะทำให้เว็บของเราเนี่ย มีความใกล้เคียงกับ App ในมือถือมากขึ้น ทั้งความลื่นไหลในการใช้งาน, เข้าเมนูต่างๆอย่างง่ายดาย, การใช้งานเมื่ออยู่ใน Mode Offline, การทำ Push Notification ฯลฯ ในขณะเดียวกันก็เก็บข้อดีของเว็บไว้อาทิเช่น ความสดใหม่ของข้อมูล(อัพเดทกันได้ทันที ไม่ต้องไปอัพ App Store), ความเข้าถึงง่ายไม่ต้อง Install ให้ยุ่งยาก</description>
    </item>
    
    <item>
      <title>Python 101</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-101/</guid>
      <description>Python 101 ฉบับรวบลัด การแสดงผล และรับข้อมูล เริ่มแรกลอง print “hello world” กันก่อน
print(&amp;quot;hello_world&amp;quot;)  Data type (ประเภทข้อมูล) 1. String String ก็เป็นตัวแปรที่เก็ยตัวอักษร หรือข้อความ คราวนี้เรามาลองรับ input เป็นชื่อเก็บใส่ตัวแปรที่ชื่อว่า name แล้ว print ออกมากันครับ
ในที่นี้ตัวแปร name ก็จะมี data type คือ string นั้นเอง
name = input(&amp;quot;What is your name? &amp;quot;) print(&amp;quot;Hello &amp;quot;,name)  2. Numeric    Type Description     Integer จำนวนเต็ม เช่น 10, 20   Float ทศนิยม เช่น 10.0, 20.5    ต่อมาลองรับ input เป็น integer 1 ตัว และ float 1 ตัว แล้วเอามาบวกกันแสดงผลรับเป็น integer</description>
    </item>
    
    <item>
      <title>Python Thailand</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pythonthailand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pythonthailand/</guid>
      <description>Python Thailand Python Thailand - แหล่งเรียนรู้ภาษาไพธอนสำหรับคนไทย print(&amp;quot;Hello Thai Pythonista!&amp;quot;)  ยินดีต้อนรับเข้าสู่ Python Thailand เว็บไซต์ที่เปรียบเสมือนเป็นประตูบานแรกสำหรับคนที่ต้องการก้าวเข้ามาสู่จักรวาลของภาษาไพธอน เว็บไซต์นี้ได้รวบรวมแหล่งข้อมูลที่เกี่ยวข้องกับภาษาไพธอนที่ถูกเขียนขึ้นในภาษาไทย ไม่ว่าจะเป็นทั้งการสอนไพธอน เว็บบล็อกไพธอน รวมถึงวิดีโอที่เกี่ยวกับไพธอนต่าง ๆ ไพธอนนั้นมีประโยชน์มากมาย ไพธอนเปรียบเสมือนไม้กายสิทธิ์ที่สามารถช่วยให้เราสร้างสรรค์นวัตกรรมหรือสิ่งใหม่ ๆ ให้กับมวลมนุษยชาติได้
ด้วยเนื้อหาที่รวบรวมในเว็บไซต์นี้ คุณจะสามารถเขียนโปรแกรมด้วยภาษาไพธอนได้ เริ่มตั้งแต่การสร้างแอพพลิเคชันอย่างง่ายไปจนถึงโปรแกรมการคำนวณที่ซับซ้อน คุณจะเข้าใจหลักการสำคัญในการเขียนโปรแกรมทั้งในพื้นฐานทั้งหมดและในขั้นสูงที่เป็นการเขียนโปรแกรมแบบเชิงวัตถุ คุณจะได้รู้จักกับเครื่องมือที่ใช้ในการพัฒนาโปรแกรมหลากหลายรูปแบบ ซึ่งเนื้อหาเหล่านี้เป็นพื้นฐานที่สำคัญที่จะทำให้คุณสามารถนำไปพัฒนาทักษะการเขียนโปรแกรมภาษาไพธอน ของคุณในขั้นสูงต่อไป เช่น การพัฒนาเว็บไซต์ การสร้างเกม ฐานข้อมูล เน็ตเวิร์ค การจัดการกราฟฟิค
ภาษาไพธอน  ประวัติและต้นกำเนิด ตราสัญลักษณ์ของภาษาไพธอน ปรัชญาของไพธอน เกร็ดความรู้เกี่ยวกับไพธอน ทำไมต้องไพธอน ความสำเร็จของไพธอน   ดาวน์โหลดไพธอนและเครื่องมืออื่น ๆ  เริ่มต้นใช้งานไพธอน ระบบปฏิบัติการที่รองรับ ดาวน์โหลดไพธอน การติดตั้งไพธอน โปรแกรมแก้ไขข้อความสำหรับเขียนภาษาไพธอน ไลบรารี่และแพคเกจ   เนื้อหาไพธอน เลือกระดับความยากของเนื้อหา
 เริ่มต้น (Beginner) ปานกลาง (Intermediate) ขั้นสูง (Advanced)   โจทย์และการแก้ปัญหา  ระดับพื้นฐาน ระดับปานกลาง ระดับยาก โจทย์แข่งขัน คำถามสอบสัมภาษณ์งาน   หนังสือแนะนำ  Python ๑๐๑ คณะวิศวกรรมศาสตร์ จุฬา ฯ เชี่ยวชาญการเขียนโปรแกรมด้วยไพธอน ผศ.</description>
    </item>
    
    <item>
      <title>SQLite for Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/database/sqlite/sqlite3-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/database/sqlite/sqlite3-module/</guid>
      <description>SQLite for Python Create Database import os import sqlite3 db_filename = &#39;journaldev.db&#39; db_exists = not os.path.exists(db_filename) connection = sqlite3.connect(db_filename) if db_exists: print(&#39;No schema exists.&#39;) else: print(&#39;DB exists.&#39;) connection.close()  Create Table To start working with the database, we must define a table schema on which we will write our further queries and perform operations. Here is the schema we will follow:
For the same schema, we will be writing related SQL Query next and these queries will be saved in book_schema.</description>
    </item>
    
    <item>
      <title>Start Web Application</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/django/start-django-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/django/start-django-framework/</guid>
      <description>เริ่มพัฒนา Web Application กับภาษา Python ด้วย Django Framework ภาษา Python เริ่มถูกใช้งานอย่างแพร่หลายมากขึ้นเรื่อยๆ ในช่วงนี้เนื่องจากความง่ายในการเรียนรู้ และความสะดวกในการทดสอบโปรแกรม เนื่องจาก Python เป็นภาษาประเภท Script ซึ่งจะแตกต่างกับภาษาประเภท Java หรือ C ที่ต้อง compile code ให้ออกมาเป็น binary ก่อนนำไปรันได้จริง เช่น หากต้องการทดสอบ function substring ว่าจะสามารถตัดคำให้เราถูกต้องหรือไม่ กรณีใช้ภาษา Java หรือ C ก็ต้องเขียน class, main function หรืออื่นๆ อีกมากมายกว่าจะเริ่มทดสอบ function เล็กๆ นี้ได้ แต่ใน Python นั้น เพียงแค่เข้า Python console ก็สามารถทดสอบ function เหล่านี้ได้ทันที
Django (อ่านว่าจังโก้ หรือแจงโก้ โดยไม่ออกเสียงตัว D) เป็น framework ที่ใช้ในการสร้าง Web Application ในฝั่งของ Back End ที่พัฒนาด้วยภาษา Python โดยในตัว framework จะมีส่วนประกอบทุกอย่างที่จำเป็นตั้งแต่การเชื่อมต่อฐานข้อมูล ไปจนถึงการ render ข้อมูลออกมาให้ฝั่ง Front End แสดงผลข้อมูลเหล่านั้นได้ ซึ่ง framework ในรูปแบบนี้ในภาษาอื่นๆ เช่น Ruby on rails สำหรับภาษา Ruby, Play Framework สำหรับภาษา Java หรือ Scala, Groovy on Grails สำหรับภาษา Groovy, Laravel สำหรับภาษา PHP, หรือ Express สำหรับภาษา Javascript ของ Node.</description>
    </item>
    
    <item>
      <title>With ToC</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/example/table-of-contents/with-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/example/table-of-contents/with-toc/</guid>
      <description>Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.
 Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae.</description>
    </item>
    
    <item>
      <title>ตัวแปรและประเภทข้อมูล</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/variable/</guid>
      <description>Variable &amp;amp; Data Types (ตัวแปรและประเภทข้อมูล) ตัวแปรและประข้อมูลในภาษา Python เราจะพูดถึงการประกาศตัวแปรและการนำตัวแปรไปใช้งานในโปรแกรม และเราจะอธิบายถึงข้อมูลประเภทต่างๆ ที่เป็น Primitive datatype ในภาษา Python และรวมทั้งฟังก์ชันสำหรับการใช้งานกับตัวแปร
ตัวแปร ตัวแปร (variable) คือชื่อหรือเครื่องหมายที่กำหนดขึ้นสำหรับใช้เก็บค่าในหน่วยความจำ ตัวแปรจะมีชื่อ (identifier) สำหรับใช้ในการอ้างถึงข้อมูลของมัน ในการเขียนโปรแกรม ค่าของตัวแปรสามารถที่จะกำหนดได้ใน run-time หรือเปลี่ยนแปลงอยู่ตลอดเวลาในขณะที่โปรแกรมทำงาน (executing)
ในการเขียนโปรแกรมคอมพิวเตอร์นั้น ตัวแปรจะแตกต่างจากตัวแปรในทางคณิตศาสตร์ ค่าของตัวแปรนั้นไม่จำเป็นต้องประกอบไปด้วยสูตรหรือสมการที่สมบูรณ์เหมือนกับในคณิตศาสตร์ ในคอมพิวเตอร์ ตัวแปรนั้นอาจจะมีการทำงานซ้ำๆ เช่น การกำหนดค่าในที่หนึ่ง และนำไปใช้อีกที่หนึ่งในโปรแกรม และนอกจากนี้ยังสามารถกำหนดค่าใหม่ให้กับตัวแปรได้ตลอดเวลา ต่อไปเป็นตัวอย่างของการประกาศตัวแปรในภาษา Python
a = 3 b = 4.92 c = &amp;quot;marcuscode.com&amp;quot; c = 10.5  ในตัวอย่าง เราได้ทำการประกาศ 3 ตัวแปร ในการประกาศตัวแปรในภาษา Python คุณไม่จำเป็นต้องระบุประเภทของตัวแปรในตอนที่ประกาศเหมือนในภาษา C ในตัวแปร a มีค่าเป็น 3 และเป็นประเภทเป็น Integer ตัวแปร b มีค่าเป็น 4.92 และเป็นประเภทเป็น Float และตัวแปร c มีค่าเป็น &amp;ldquo;marcuscode.</description>
    </item>
    
    <item>
      <title>โครงสร้างข้อมูล Dictionary</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/dictionary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/dictionary/</guid>
      <description>โครงสร้างข้อมูล Dictionary ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูล Dictionary ในภาษา Python เราจะแนะนำให้คุณรู้จักกับ Dictionary คืออะไร และการประกาศและใช้งานสำหรับเก็บข้อมูลในการเขียนโปรแกรม นอกจากนี้ เรายังจะพูดถึงการใช้งานเมธอดและ built-in functions ของ Dictionary และตัวอย่างการใช้งานกับการเขียนโปรแกรมใบรูปแบบต่างๆ ในภาษา Python
Dictionary คือประเภทข้อมูลที่เก็บข้อมูลในรูปแบบคู่ของ Key และ Value โดยที่ Key ใช้สำหรับเป็น Index ในการเข้าถึงข้อมูลและ Value เป็นค่าข้อมูลที่สอดคล้องกับ Key ของมัน การเข้าถึงข้อมูลใน Dictionary นั้นรวดเร็วเพราะว่าข้อมูลได้ถูกทำ Index ไว้อัตโนมัติโดยใช้ Key นอกจากนี้ Dictionary ยังมีเมธอดและฟังก์ชันอำนวยความสะดวกสำหรับการทำงานทั่วไป
การประกาศ Dictionary ในภาษา Python ในการใช้งาน Dictionary เรามักจะใช้เก็บข้อมูลที่สามารถใช้บางอย่างที่สามารถจำแนกข้อมูลออกจากกันได้ โดยกำหนดให้สิ่งนั้นเป็น Key ในการประกาศ Dictionary สมาชิกของมันจะอยู่ภายในวงเล็บปีกกา {} มาดูตัวอย่างในการประกาศ Dictionary ในภาษา Python
scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310} scores[&#39;bobby&#39;] = 4401 numbers = {1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;} print(scores) print(numbers)  ในตัวอย่าง เราได้ประกาศตัวแปร Dictionary ที่มีชื่อว่า scores สำหรับเก็บคะแนนของแต่ละคนโดยใช้ชื่อเป็น Key และค่าของมันก็คือคะแนน สมาชิกของ Dictionary แต่ละตัวจะถูกกำหนดในรูปแบบ key: value และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา เราได้กำหนดค่าเริ่มต้นสามค่าให้กับ Dictionary และสามารถกำหนดค่าให้กับ Dictionary ในรูปแบบ scores[&#39;bobby&#39;] ได้หลังจากที่ตัวแปรถูกสร้างแล้ว สังเกตว่าเราสามารถใช้ Key เป็น String หรือประเภทข้อมูลอื่นๆ ได้ ต่อมาตัวแปร numbers เป็น Dictionary ที่มี Key เป็นตัวเลข</description>
    </item>
    
    <item>
      <title>ไวยกรณ์พื้นฐานที่จำเป็น</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/important-basic-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/important-basic-syntax/</guid>
      <description>ไวยกรณ์พื้นฐานที่จำเป็นอย่างยิ่งต้องจดจำ (Important basic syntax) ไวยกรณ์ต่าง ๆ ที่จะกล่าวต่อไปนี้ ขอให้ผู้อ่านจดจำ และท่องให้ขึ้นใจ เพราะมันจะทำให้การเขียนโปรแกรมไม่มีอุปสรรค
Case sensitivity การตั้งชื่อตัวแปร ตัวใหญ่ และตัวเล็กถือว่าเป็นคนละตัวแปร เช่น Number และ number ไม่ใช่ตัวแปรตัวเดียวกัน
Space and tabs don’t mix ไพธอนมองว่า space และ tabs มีความหมายไม่เหมือนกัน ดังนั้นเวลาเขียนโปรแกรมอย่าผสมระหว่าง space และ tabs เข้าด้วยกันให้เลือกเอาอย่างใดอย่างหนึ่งเท่านั้น
Objects (วัตถุ) ไพธอนถูกสร้างขึ้นภายใต้แนวคิดการโปรแกรมเชิงวัตถุ ดังนั้นเมื่อเราเรียกใช้งานคลาสใด ๆ ก็ตามถือว่าเป็นวัตถุตามแนวความคิดแบบโปรแกรมเชิงวัตถุ (การโปรแกรมเชิงวัตถุจะกล่าวในบทที่ 11 ) ดังนั้นเมื่อใดก็ตามที่มีการสร้างวัตถุและต้องการเข้าถึงแอตทริบิวต์ (Attribute) หรือฟังชัน (Function) ใดๆ ในวัตถุต้องใช้“ ” แล้วตามด้วยเครื่องหมาย ( ) แต่ถ้าอ้างถึงตัวแปรไม่ต้อง มี ( ) เช่น เมื่อต้องการเปลี่ยนค่าสตริง &#39;Pop&#39;เป็นตัวอักษรตัวใหญ่ทั้งหมด ทำได้โดยเรียกใช้คลาส upper ในไลบรารีของไพธอน ดังนี้ &#39;Pop&#39;.upper()
Scope ในการพัฒนาโปรแกรมขนาดใหญ่ ที่มีโปรแกรมเมอร์มากกว่า 1 คน อาจจะประสบปัญหาเรื่องการประกาศตัวแปรที่ซ ้ากันได้ ดังนั้นเพื่อให้การเข้าถึงและใช้งานตัวแปรเป็นไปอย่างถูกต้องโดยไม่มีข้อผิดพลาด แนะนำให้ผู้เขียนโปรแกรมใช้งานในลักษณะของฟังชันจะดีกว่า โดยมีการส่งค่าตัวแปรไปในฟังชัน และคืนค่าที่คำนวณเรียบร้อยแล้วกลับมา จะไม่ทำให้ประสบปัญหาเรื่องของการอ้างตัวแปรดังที่กล่าวมาแล้ว</description>
    </item>
    
    <item>
      <title>From Zero to Hero</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/from-zero/</link>
      <pubDate>Fri, 17 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/from-zero/</guid>
      <description>Learning Python: From Zero to Hero First of all, what is Python? According to its creator, Guido van Rossum, Python is a:
 “high-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.”
 For me, the first reason to learn Python was that it is, in fact, a beautiful programming language.</description>
    </item>
    
    <item>
      <title>Awesome Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/awesome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/awesome/</guid>
      <description>Awesome Python A curated list of awesome Python frameworks, libraries, software and resources.
Inspired by awesome-php.
 Awesome Python  Admin Panels Algorithms and Design Patterns Audio Authentication Build Tools Built-in Classes Enhancement Caching ChatOps Tools CMS Code Analysis Command-line Interface Development Command-line Tools Compatibility Computer Vision Concurrency and Parallelism Configuration Cryptography Data Analysis Data Validation Data Visualization Database Database Drivers Date and Time Debugging Tools Deep Learning DevOps Tools Distributed Computing Distribution Documentation Downloader E-commerce Editor Plugins and IDEs Email Environment Management Files Foreign Function Interface Forms Functional Programming Game Development Geolocation GUI Development Hardware HTML Manipulation HTTP Clients Image Processing Implementations Interactive Interpreter Internationalization Job Scheduler Logging Machine Learning Miscellaneous Natural Language Processing Network Virtualization Networking News Feed ORM Package Management Package Repositories Permissions Processes Queue Recommender Systems RESTful API Robotics RPC Servers Science Search Serialization Serverless Frameworks Specific Formats Processing Static Site Generator Tagging Template Engine Testing Text Processing Third-party APIs URL Manipulation Video Web Asset Management Web Content Extracting Web Crawling Web Frameworks WebSocket WSGI Servers  Services  Code Quality Continuous Integration  Resources  Podcasts Twitter Websites Weekly  Contributing  [](https://github.</description>
    </item>
    
    <item>
      <title>Bootstrap 4 แบบพื้นฐาน ตอนที่ 2</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-2/</guid>
      <description>สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน ตอนที่ 2 Table สร้างไฟล์ใหม่ชื่อ portal.html
ใส่โค้ดพื้นฐาน html ลงไปแล้วก็เพิ่ม bootstrap.css ด้วย
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt; &amp;lt;title&amp;gt;Portal&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/bootstrap.min.css&amp;quot; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  ใส่ตารางลงไปใน container
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt; &amp;lt;title&amp;gt;Portal&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/bootstrap.</description>
    </item>
    
    <item>
      <title>Ep.2 Flask application structure</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-2/</guid>
      <description>Flask application structure | Learning Flask Ep. 2 Structuring your Flask application for
In this part of the Learning Flask series, you&amp;rsquo;ll learn how to structure files and directories in your Flask application.
Flask is a very flexible framework and doesn&amp;rsquo;t enforce that you follow any specific pattern for structuring your application. However there are some best practices and tips to make sure you don&amp;rsquo;t run into issues down the line as your application grows!</description>
    </item>
    
    <item>
      <title>HTML</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/html/</guid>
      <description>HTML Reading HTML content  Warning
We highly encourage you to read the HTML Table Parsing gotchas below regarding the issues surrounding the BeautifulSoup4/html5lib/lxml parsers.
 The top-level read_html() function can accept an HTML string/file/URL and will parse HTML tables into list of pandas DataFrames. Let’s look at a few examples.
 Note read_html returns a list of DataFrame objects, even if there is only a single table contained in the HTML content.</description>
    </item>
    
    <item>
      <title>Part. II</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/build-a-crud-web-app/part-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/build-a-crud-web-app/part-2/</guid>
      <description>Python Flask for Beginners: Build a CRUD Web App with Python and Flask Part. II This is Part Two of a three-part tutorial to build an employee management web app, named Project Dream Team. In Part One) of the tutorial, we set up a MySQL database using MySQL-Python and Flask-SQLAlchemy. We created models, migrated the database, and worked on the home and auth blueprints and templates. By the end of Part One, we had a working app that had a homepage, registration page, login page, and dashboard.</description>
    </item>
    
    <item>
      <title>Without ToC</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/example/table-of-contents/without-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/example/table-of-contents/without-toc/</guid>
      <description>At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description>
    </item>
    
    <item>
      <title>Ep.3 Serving HTML files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-3/</guid>
      <description>Serving HTML files | Learning Flask Ep. 3 How to render HTML files and structure template directories with Flask
In this part of the Learning Flask series, you&amp;rsquo;ll learn how to work with and serve HTML files.
Flask provides a fast and easy way for us to serve static files! So building a simple website is a breeze.
We&amp;rsquo;re going to pick up the same application we created in the last episode and build upon it.</description>
    </item>
    
    <item>
      <title>Excel files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/excel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/excel/</guid>
      <description>Excel files The read_excel() method can read Excel 2003 (.xls) files using the xlrd Python module. Excel 2007+ (.xlsx) files can be read using either xlrd or openpyxl. Binary Excel (.xlsb) files can be read using pyxlsb. The to_excel() instance method is used for saving a DataFrame to Excel. Generally the semantics are similar to working with csv data. See the cookbook for some advanced strategies.
Reading Excel files In the most basic use-case, read_excel takes a path to an Excel file, and the sheet_name indicating which sheet to parse.</description>
    </item>
    
    <item>
      <title>Part. III</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/build-a-crud-web-app/part-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/build-a-crud-web-app/part-3/</guid>
      <description>Python Flask for Beginners: Build a CRUD Web App with Python and Flask Part. III This is the last part of a three-part tutorial to build an employee management web app, named Project Dream Team. In Part Two of the tutorial, we built out the CRUD functionality of the app.
We created forms, views, and templates to list, add, edit and delete departments and roles. By the end of Part Two, we could assign (and re-assign) departments and roles to employees.</description>
    </item>
    
    <item>
      <title>Python Cheat sheet</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/cheat-sheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/cheat-sheet/</guid>
      <description>Python Cheat sheet Useful tricks # Terminate a Python script early. quit() # For 1 statement on multiple lines, # use line continuation character (\). # Good for blog post. def __str__(self): return &amp;quot;Name={}, Title={}, Hourly rate={}.&amp;quot;\ .format( self.name, self.title, self.__hourly_rate )  String # Concatenation s1 = &#39;Open&#39; s2 = &#39;Writings.net&#39; print( s1+s2 ) # Output: OpenWritings.net # Object to string: Use str() function import datetime now_str = &amp;quot;Today is &amp;quot; + str(datetime.</description>
    </item>
    
    <item>
      <title>Clipboard</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/clipboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/1_io/clipboard/</guid>
      <description>Clipboard A handy way to grab data is to use the read_clipboard() method, which takes the contents of the clipboard buffer and passes them to the read_csv method. For instance, you can copy the following text to the clipboard (CTRL-C on many operating systems):
   A B C     1 4 p   2 5 q   3 6 r    And then import the data directly to a DataFrame by calling:</description>
    </item>
    
    <item>
      <title>Ep.4 Serving static files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-4/</guid>
      <description>Serving static files | Learning Flask Ep. 4 Linking stylesheets, javascript files and serving images with Flask
In this episode of the Learning Flask series, we&amp;rsquo;ll be making our HTML look prettier with some images, CSS and JavaScript, along with a few extra tips on working with static files.
Flask provides a few useful ways for working with static files so let&amp;rsquo;s get started.
Creating stylesheets If you&amp;rsquo;ve worked with HTML and CSS before, you&amp;rsquo;ll know that we have to import a stylesheet in the &amp;lt;head&amp;gt; tag of our HTML.</description>
    </item>
    
    <item>
      <title>List for Tutorial</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/list-python-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/list-python-basics/</guid>
      <description>List Python Tutorial Python is one of the most popular programming languages. In the last few years, it has gained a lot of popularity due to the increasing interest in Data Science, Deep Learning, Machine Learning, and Artificial Intelligence.
Just have a look at the Google Trends chart for interest in Python programming language. It’s increasing continuously and it will keep on increasing over time.
Python Interest Over Time</description>
    </item>
    
    <item>
      <title>Ep.5 Jinja template inheritance</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-5/</guid>
      <description>Jinja template inheritance | Learning Flask Ep. 5 Creating reusable base HTML templates and extending them throughout your Flask app
In this firth part of the Learning Flask series, you&amp;rsquo;ll learn how to use the powerful Jinja templating engine to make working with our HTML files much more efficient.
Template inheritance works by creating a series of &amp;ldquo;base templates&amp;rdquo; and importing them into &amp;ldquo;child templates&amp;rdquo;, minimising the amount of repetitive code we need to write and allowing us to reuse elements effectively and reliably.</description>
    </item>
    
    <item>
      <title>Modules List</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/modules-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/modules-list/</guid>
      <description>Python Modules List Python os module
Python sys module
Python time
Python MySQL
Python CSV
Python multiprocessing
Python pickle
Python time sleep
Python queue
Python unittest
Python socket
Python SimpleHTTPServer
Python json
Python signal
Python random
Python System Command
Python Daemon Thread
Python Copy
Python threading module
Python struct
Python logging
Python subprocess
Python argparse
Python functools
Python itertools
Python getopt
Python ftp
Python tarfile
Python lxml
Python ConfigParser</description>
    </item>
    
    <item>
      <title>Ep.6 Jinja template design</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-6/</guid>
      <description>Jinja template design | Learning Flask Ep. 6 An brief introduction to the power of the Jinja templating engine
In this part of the Learning Flask series, we&amp;rsquo;re going to dive deeper into the Jinja templating engine and you&amp;rsquo;ll learn more of the advanced features of this powerful library!
In the last part of this series, you learned how to create base templates, child templates and how to extend them.</description>
    </item>
    
    <item>
      <title>Ep.7 Working with forms in Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-7/</guid>
      <description>Working with forms in Flask | Learning Flask Ep. 7 Creating forms, posting data to views and working with form data in Flask
In this part of the Learning Flask series, You&amp;rsquo;ll learn how to post forms to a Flask view and work with the incoming data.
Forms (or input data in general) play a critical role in any kind of website or web allication as we need a way for the user to communicate with our app!</description>
    </item>
    
    <item>
      <title>Ep.8 Generating dynamic URLs in Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-8/</guid>
      <description>Generating dynamic URLs in Flask | Learning Flask Ep. 8 Learn how to create and work with dynamic URLs and dynamic data in Flask
Dynamic URL&amp;rsquo;s in Flask play an important role in the ability to create unique URL&amp;rsquo;s that aren&amp;rsquo;t hard-coded into our application.
For example, let&amp;rsquo;s say our application allows users to create an account and log into their profile, we&amp;rsquo;ll need a way to dynamically generate a route for that specific user.</description>
    </item>
    
    <item>
      <title>Ep.9 Working with JSON data</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-9/</guid>
      <description>Working with JSON data | Learning Flask Ep. 9 Handle incoming, parsing and returning JSON data with Flask!
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to be working with JSON data.
JSON is an extremely popular format for sending and receiving data over the web. Flask provides us with some great tools to make light work of handling JSON data.
In this guide, we&amp;rsquo;re going to quickly cover how to handle incoming JSON data and return JSON data to the client.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://dragon-library.github.io/library/tutorials/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://dragon-library.github.io/library/tutorials/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Ep.10 Flask and the Fetch API</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-10/</guid>
      <description>Flask and the Fetch API | Learning Flask Ep. 10 Asynchronous requests from the client to the server using the JavaScript Fetch API
Making asynchronus requests from the client to the server is a common feature of most modern web applications, allowing a more fluid user experience.
In this episode of the &amp;ldquo;Learning Flask&amp;rdquo; series, you&amp;rsquo;ll learn how to make asynchronus requests from the client to your application using some basic vanilla JavaScript and the Fetch API.</description>
    </item>
    
    <item>
      <title>Ep.11 Query strings in Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-11/</guid>
      <description>Query strings in Flask | Learning Flask Ep. 11 Creating, serializing and working with query string data in Flask
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to working with query strings. A query string is part of the URL as a string of parameters and values and are used ubiquitously across the web.
Query strings are essentially a string of key/value pairs sent by the client to the server.</description>
    </item>
    
    <item>
      <title>Ep.12 Flask configuration files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-12/</guid>
      <description>Flask configuration files | Learning Flask Ep. 12 Configuring Flask applications using a config file and classes
Configuration is an important part of any appliction and Flask provides several different methods for us to configure our app.
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to cover our preferred app configuration method, using a config file with classes.
Let&amp;rsquo;s get started.
Config basics Every Flask application has a global config object which can be accessed via app.</description>
    </item>
    
    <item>
      <title>Ep.13 Uploading files with Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-13/</guid>
      <description>Uploading files with Flask | Learning Flask Ep. 13 Posting, checking and validating file uploads with Flask
Uploading files to the server is often a requirement of a website or web application. Thankfully, Flask makes this relitively simple for us with a few useful functions.
We&amp;rsquo;re using Bootstrap 4 CSS in this example but feel free to use any other CSS library, use your own or skip the styling completely.</description>
    </item>
    
    <item>
      <title>Ep.14 Sending files with Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-14/</guid>
      <description>Sending files with Flask | Learning Flask Ep. 14 How to send and allow users to download files with Flask
Allowing users to download files from your website of application is an often required feature of any website or application and Flask provides us with some useful function to do so.
In this example, we&amp;rsquo;re going to allow our users to download 3 types of files, images, CSV&amp;rsquo;s and PDF&amp;rsquo;s simply by accessing a route and providing a unique id to the resource.</description>
    </item>
    
    <item>
      <title>Ep.15 Flask cookies</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-15/</guid>
      <description>Flask cookies | Learning Flask Ep. 15 Setting, getting and working with cookies in Flask
Cookies play an important role in most modern websites and web applications, allowing us leave small strings of key/value pairs on the clients browser to help both developers and users by temporarily preserving inportant information such as preferences, unique identifiers, state etc..
Fortunately for us, Flask makes working with cookies very simple.
Let&amp;rsquo;s get started.</description>
    </item>
    
    <item>
      <title>Ep.16 The Flask session object</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-16/</guid>
      <description>The Flask session object | Learning Flask Ep. 16 Using, understanding and decoding the Flask session object, the globally available signed &amp;amp; encoded cookie
Sessions in Flask are a way to store information about a specific user from one request to the next. They work by storing a cryptographically signed cookie on the users browser and decoding it on every request.
The sesison object can be treated just like a dictionary that persists across requests, making it an ideal place to store non sensitive user data.</description>
    </item>
    
    <item>
      <title>Ep.17 Flask message flashing</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-17/</guid>
      <description>Flask message flashing | Learning Flask Ep. 17 Providing feedback and notifications to users using Flask&amp;rsquo;s flash function
Providing feedback to users of a web application is critical, from notifications and error messages to warnings and progress alerts.
If the application doesn&amp;rsquo;t the right level of feedback, chances are the user will become frustrated and end up having a bad experience.
Fortunately for us, Flask provides a simple way to send messages from the server to the client using flash.</description>
    </item>
    
    <item>
      <title>Ep.18 Flask error handling</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-18/</guid>
      <description>Flask error handling | Learning Flask Ep. 18 Manually throwing errors, creating custom error handlers and rendering error templates
In a perfect world, our applications would never have errors and our users would use our application just as we intended, however it&amp;rsquo;s not a perfect world and there will be bugs in our code and users will always be unpredictable!
Catching and handling errors ensures our users aren&amp;rsquo;t confused when something goes wrong, also giving them a way to get home or back to the content.</description>
    </item>
    
    <item>
      <title>Ep.19 Flask HTTP methods</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-19/</guid>
      <description>Flask HTTP methods | Learning Flask Ep. 19 Understanding when and where to use GET, POST, PUT, PATCH, DELETE and a brief introduction to HTTP methods in Flask
Flask supports the common HTTP methods, including GET, POST, PUT, PATCH, DELETE and working with them is extremely simple, allowing us to build URL&amp;rsquo;s and endpoints which only listen for certain HTTP methods.
In this part of the &amp;ldquo;Learning Flask&amp;rdquo; series, we&amp;rsquo;re going to build a simple application to demonstrate working with the 5 HTTP methods listed above, along with examples of when and how to use them.</description>
    </item>
    
    <item>
      <title>Ep.20 The request object</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-20/</guid>
      <description>The request object | Learning Flask Ep. 20 Exploring the Flask request object
The Flask request object gives us access to all of the incoming request data, nicely parsed and ready for us to work with.
The request object is available globally and can be accessed to get information about the current request, ensuring we only get data from the active thread.
If you&amp;rsquo;ve been following along with the &amp;ldquo;Learning Flask&amp;rdquo; series, you&amp;rsquo;ve seen the request object in action, from parsing incoming form data and handling the various request methods, however there&amp;rsquo;s much more to explore.</description>
    </item>
    
    <item>
      <title>Ep.21 Task queues with Flask</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-21/</guid>
      <description>Task queues with Flask| Learning Flask Ep. 21 An introduction to task queues with Flask and RQ
Sometimes we need to run tasks in the background, outside of the HTTP request/response cycle. Long running tasks such as image, video or audio processing can take anywhere from minutes to hours, depending on the task at hand.
Picture this scenario.
You have a web application that allows users to upload an image, to which you&amp;rsquo;re going to produce 5 copies, all with different sizes to match the various screen sizes used on modern devices, including a thumbnail.</description>
    </item>
    
    <item>
      <title>Ep.22 Pillow, task queues &amp; the HTML picture element</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/learning-flask/ep-22/</guid>
      <description>Pillow, task queues &amp;amp; the HTML picture element| Learning Flask Ep. 22 Using Pillow and task queues to offload image resizing to a worker process and using the HTML picture tag to increase image rendering performance
Images on the web are important and we now have access to a plethora of devices to view them - from mobile to desktop and tablet to TV screens, to get the most performance from our images, we should consider showing a peoperly sized image based on their device.</description>
    </item>
    
    <item>
      <title>21 Pandas operations</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/21-pandas-operations/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/21-pandas-operations/</guid>
      <description>21 Pandas operations for absolute beginners  Source  Prerequisites: Python and NumPy basics.
A CSV file is comma-separated so in order to read a CSV file, do:
df = pd.read_csv(file_path, sep=’,’, header = 0, index_col=False,names=None)  Explanation:
read_csv function has a plethora of parameters and I have specified only a few, ones that you may use most often. A few key points:
a) - header=0 means you have the names of columns in the first row in the file and if you don’t you will have to specify header=None b)  - index_col = False means to not use the first column of the data as an index in the data frame, you might want to set it to true if the first column is really an index.</description>
    </item>
    
    <item>
      <title>An A-Z of useful Python tricks</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/useful-python-tricks/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/useful-python-tricks/</guid>
      <description>An A-Z of useful Python tricks Source : FreeCodeCamp.org
Python is one of the world’s most popular, in-demand programming languages. This is for many reasons:
 it’s easy to learn it’s super versatile it has a huge range of modules and libraries  I use Python daily as an integral part of my job as a data scientist. Along the way, I’ve picked up a few useful tricks and tips.</description>
    </item>
    
    <item>
      <title>Basic Data Analysis</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-2/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-2/</guid>
      <description>Introduction to basic data analysis with Pandas (Private Munich Housemarket data set) Source
This article is the continuation from a previous article (here link to medium) where I explained my goal of identifying the value of House Market in Munich in order to buy a house.
Since I get the data, buying a house in Munich is out the question, I don’t (and probably will never) earn enough to actually realize that but the data are still interesting in order to do a quick look at data analysis with pandas.</description>
    </item>
    
    <item>
      <title>Code Examples</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-code-example/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-code-example/</guid>
      <description>Python Code Examples By : freeCodeCamp
Python is a general purpose programming language which is dynamically typed, interpreted, and known for its easy readability with great design principles.
Python Data Structures Example Some general information about floating point numbers and how they work in Python, can be found here.
Nearly all implementations of Python follow the IEEE 754 specification: Standard for Binary Floating-Point Arithmetic. More information found on the IEEE site.</description>
    </item>
    
    <item>
      <title>Converting Strings using datetime</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/onverting-strings-to-datetime/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/onverting-strings-to-datetime/</guid>
      <description>Converting Strings using datetime The datetime module consists of three different object types: date, time and datetime. As you may have guessed, date holds the date, time holds the time, and datetime holds both date and time.
For example, the following example will print the current date and time:
import datetime print (&#39;Current date/time: {}&#39;.format(datetime.datetime.now()))  Running this code will print an output similar to below:
$ python3 datetime-print-1.py Current date/time: 2018-06-29 08:15:27.</description>
    </item>
    
    <item>
      <title>Datetime</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/date-time/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/date-time/</guid>
      <description>Datetime import datetime x = datetime.datetime.now() print(x)  2019-09-26 00:21:06.668559  Date Output import datetime x = datetime.datetime.now() print(x.year) print(x.strftime(&amp;quot;%A&amp;quot;))  2019 Thursday  Creating Date Objects import datetime x = datetime.datetime(2020, 5, 17) print(x)  2020-05-17 00:00:00  The strftime() Method import datetime x = datetime.datetime(2018, 6, 1) print(x.strftime(&amp;quot;%B&amp;quot;))  June  A reference of all the legal format codes:    Directive Description Example     %a Weekday, short version Wed   %A Weekday, full version Wednesday   %w Weekday as a number 0-6, 0 is Sunday 3   %d Day of month 01-31 31   %b Month name, short version Dec   %B Month name, full version December   %m Month as a number 01-12 12   %y Year, short version, without century 18   %Y Year, full version 2018   %H Hour 00-23 17   %I Hour 00-12 05   %p AM/PM PM   %M Minute 00-59 41   %S Second 00-59 08   %f Microsecond 000000-999999 548513   %z UTC offset +0100   %Z Timezone CST   %j Day number of year 001-366 365   %U Week number of year, Sunday as the first day of week, 00-53 52   %W Week number of year, Monday as the first day of week, 00-53 52   %c Local version of date and time Mon Dec 31 17:41:00 2018   %x Local version of date 12/31/18   %X Local version of time 17:41:00   %% A % character %    timedelta ตัวอย่างการหาผลต่างของวันที่</description>
    </item>
    
    <item>
      <title>Exploration of S&amp;P 500 Index</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/exploration-stock-index/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/exploration-stock-index/</guid>
      <description>Exploration of S&amp;amp;P 500 Index Using Pandas and Matplotlib In this article we want to explore whether it is true that staying in the market over a longer duration can be lucrative.
Import the Python libraries that are commonly used for data analysis and data exploration such as Pandas and Matplotlib.
In [1]:
import pandas as pd import numpy as np import matplotlib.pyplot as plt  Read the files with S&amp;amp;P 500 data into Pandas dataframes.</description>
    </item>
    
    <item>
      <title>Extract table from PDF</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-for-pdf-02/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-for-pdf-02/</guid>
      <description>tabula-py: Extract table from PDF into Python DataFrame As of Oct. 2019, I launched a documentation site and Google Colab notebook for tabula-py. The FAQ would be good place to execute accurate extraction.
It is simple wrapper of tabula-java and it enables you to extract table into DataFrame or JSON with Python. You also can extract tables from PDF into CSV, TSV or JSON file.
tabula is a tool to extract tables from PDFs.</description>
    </item>
    
    <item>
      <title>Functions and Functional Programming</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-functions_and-functional-programming/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-functions_and-functional-programming/</guid>
      <description>Tutorial: Python Functions and Functional Programming  https://www.dataquest.io/blog/introduction-functional-programming-python/  Most of us have been introduced to Python as an object-oriented language, but Python functions are also useful tools for data scientists and programmers alike. While classes, and objects, are easy to start working with, there are other ways to write your Python code. Languages like Java can make it hard to move away from object-oriented thinking, but Python makes it easy.</description>
    </item>
    
    <item>
      <title>Getting Started with APIs</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-api-tutorial/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-api-tutorial/</guid>
      <description>Python API Tutorial: Getting Started with APIs In this Python API tutorial, we’ll learn how to retrieve data for data science projects. There are millions of APIs online which provide access to data. Websites like Reddit, Twitter, and Facebook all offer certain data through their APIs.
To use an API, you make a request to a remote web server, and retrieve the data you need.
But why use an API instead of a static CSV dataset you can download from the web?</description>
    </item>
    
    <item>
      <title>House Market Analysis 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-1/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-1/</guid>
      <description>Python Pandas : House Market Analysis – Munich (2016-2017) (1/.2) Source
I started to use python for other things than Data Analysis at the beginning. I was a technical SEO consultant and wanted to use a crawler (or built one) and not knowing any programming language, python looked as the perfect language to start with…
Flash forward to nowadays, I am even more fan of python now because of its versatility to do what I just mentioned and also to realize data analysis easily.</description>
    </item>
    
    <item>
      <title>Introduction Pickle Module</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-pickle-module/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-pickle-module/</guid>
      <description>Introduction to the Python Pickle Module Introduction Pickling is a popular method of preserving food. According to Wikipedia, it is also a pretty ancient procedure – although the origins of pickling are unknown, the ancient Mesopotamians probably used the process 4400 years ago. By placing a product in a specific solution, it is possible to drastically increase its shelf life. In other words, it&amp;rsquo;s a method that lets us store food for later consumption.</description>
    </item>
    
    <item>
      <title>OOP in Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/oop-in-python/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/oop-in-python/</guid>
      <description>Object Oriented Programming in Python  Introduction Pros and Cons of OOP Class Objects Attributes Methods Constructors Local vs Global Variables Access Modifiers Inheritance Polymorphism Encapsulation Conclusion  Introduction Object-Oriented Programming (OOP) is a programming paradigm where different components of a computer program are modeled after real-world objects. An object is anything that has some characteristics and can perform a function.
Consider a scenario where you have to develop a Formula 1 car racing game using the object-oriented programming approach.</description>
    </item>
    
    <item>
      <title>Optimizations</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-optimizations/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-optimizations/</guid>
      <description>Python Optimizations Peephole is a way Python optimizes certain things of your program at compile time by either pre-calculating constant expressions or transforming certain data structures. Constant Expressions Optimizing constant expressions is really simple. What Python does is basically pre-calculate constants. Suppose that along your program you have the following multiplication for some reason,
secondsInADay = 60*60*24  What python will do is pre-calculate that multiplication and will replace it for 86400 .</description>
    </item>
    
    <item>
      <title>Overloading Functions and Operators</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/overloading-functions/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/overloading-functions/</guid>
      <description>Overloading Functions and Operators in Python What is Overloading? Overloading, in the context of programming, refers to the ability of a function or an operator to behave in different ways depending on the parameters that are passed to the function, or the operands that the operator acts on. In this article, we will see how we can perform function overloading and operator overloading in Python.
Overloading a method fosters reusability.</description>
    </item>
    
    <item>
      <title>Pandas Cheatsheet</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/cheatsheet-pandas/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/cheatsheet-pandas/</guid>
      <description>Cheatsheet วิธีใช้ และเทคนิคใน Pandas (Python) ฉบับสมบูรณ์ Pandas คืออะไร? Pandas เป็น Library ใน Python ที่ทำให้เราเล่นกับข้อมูลได้ง่ายขึ้น เหมาะมากสำหรับทำ Data Cleaning / Wrangling ครับผม
วิธีการใช้งาน Pandas คือ โหลดไฟล์ข้อมูล เช่น CSV เข้าไป แล้วเราจะได้ข้อมูลในรูปแบบตาราง (DataFrame) ที่แบ่งข้อมูลตามแถวและคอลัมน์ หรือเหมือน Excel ที่เราใช้กันนั่นเอง

ตัวอย่าง DataFrame ของ Pandas เป็นตารางเหมือน Excel เลยครับ
ป.ล. Pandas ไม่เกี่ยวกับหมีแพนด้านะฮะ จริง ๆ แล้วมาจากคำว่า PANel DAta ซึ่งหมายถึงข้อมูลที่มีหลายมิตินั่นเอง
เทคนิคการใช้ Pandas อย่างที่แอดมินเคยเล่า ว่าการทำ Data Wrangling เป็นงานที่ค่อนข้างถึกครับ วันนี้เลยรวบรวมโค้ดต่าง ๆ ในการใช้ Pandas มาให้ ซึ่งน่าจะครอบคลุมการใช้งานประมาณ 80 – 90% แล้วครับผม
โค้ดบางส่วนมาจากคลาส Data Wrangling ที่แอดมินเรียน และจากเว็บไซต์ MyCheatSheet ครับ</description>
    </item>
    
    <item>
      <title>Python Dictionary Tutorial</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-dictionary-tutorial/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-dictionary-tutorial/</guid>
      <description>Python Dictionary Tutorial  Introduction Creating a Dictionary Accessing Elements Adding Elements Updating Elements Removing Elements Other Common Methods Conclusion  Introduction Python comes with a variety of built-in data structures, capable of storing different types of data. A Python dictionary is one such data structure that can store data in the form of key-value pairs. The values in a Python dictionary can be accessed using the keys. In this article, we will be discussing the Python dictionary in detail.</description>
    </item>
    
    <item>
      <title>Python for PDF</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-for-pdf-01/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-for-pdf-01/</guid>
      <description>Python for Pdf Why Python for PDF processing PDF processing comes under text analytics. Most of the Text Analytics Library or frameworks are designed in Python only. This gives leverage on text analytics. Once you extract the useful information from PDF you can easily use that data into any Machine Learning or Natural Language Processing Model.
Common Python Libraries Here is the list of some Python Libraries could be used to handle PDF files</description>
    </item>
    
    <item>
      <title>Python Programming in R</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-programming-in-r/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-programming-in-r/</guid>
      <description>Python Programming in R  All code used in this tutorial can be found here: https://github.com/joelalcedo/Python_in_R
 I am a Data Scientist working in New York. I have worked on a number of different projects spanning data visualization, machine learning and software development all in hopes to better understand the complexities associated with the financial markets. I started learning how to program about 10 years ago in visual basic. One thing led to another (as it does) and I learned SQL, R, Python, JavaScript (regrettably), C++ and others.</description>
    </item>
    
    <item>
      <title>Python Time Module</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-time-module./</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-time-module./</guid>
      <description>A Beginner’s Guide to the Python time Module Table of Contents
 Dealing With Python Time Using Seconds  The Epoch Python Time in Seconds as a Floating Point Number Python Time in Seconds as a String Representing Local Time  Understanding Time Zones  UTC and Time Zones Daylight Savings Time  Dealing With Python Time Using Data Structures  Python Time as a Tuple Python Time as an Object  Converting Python Time in Seconds to an Object  Coordinated Universal Time (UTC) Local Time  Converting a Local Time Object to Seconds Converting a Python Time Object to a String  asctime() strftime()  Converting a Python Time String to an Object Suspending Execution Measuring Performance Conclusion Further Reading  The Python time module provides many ways of representing time in code, such as objects, numbers, and strings.</description>
    </item>
    
    <item>
      <title>Python vs. Scala  (Part I)</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-scala-comparison-part-1/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-scala-comparison-part-1/</guid>
      <description>Python vs. Scala: a comparison of the basic commands (Part I) Source :
I recently started playing a little bit with Scala, and I have to say it has been kind of traumatic. I love learning new things but after months of programming with Python, it is just not natural to set that aside and switch mode while solving Data Science problems. When learning a new language, whether it is a coding or a spoken one, it is normal for this to happen.</description>
    </item>
    
    <item>
      <title>Python vs. Scala  (Part II)</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-scala-comparison-part-2/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-scala-comparison-part-2/</guid>
      <description>Pandas vs. Spark: how to handle dataframes (Part II) “Panda statues on gray concrete stairs during daytime” by chuttersnap on Unsplash. “Scala” means “stairway” in Italian, my native language: hence the choice of the picture. It just seemed appropriate.
A few days ago I published a post comparing the basic commands of Python and Scala: how to deal with lists and arrays, functions, loops, dictionaries and so on. As I continue practicing with Scala, it seemed appropriate to follow-up with a second part, comparing how to handle dataframes in the two programming languages, in order to get the data ready before the modeling process.</description>
    </item>
    
    <item>
      <title>Selecting Subsets of Data 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/selecting-subsets-pandas-1/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/selecting-subsets-pandas-1/</guid>
      <description>Selecting Subsets of Data in Pandas Part 1  Source  This article is available as a Jupyter Notebook complete with exercises at the bottom to practice and detailed solutions in another notebook.
Become an Expert  My book Master Data Analysis with Python is the most comprehensive text on the market to learn data analysis using Python and comes with 300+ exercises and projects. Sign-up for the FREE Intro to Pandas class Follow me on Twitter @TedPetrou for my daily data science tricks  Part 1: Selection with [ ], .</description>
    </item>
    
    <item>
      <title>Send email using SMTP</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/use-python-send-email/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/use-python-send-email/</guid>
      <description>Use Python to send email using SMTP Use Python to send emails
In this tutorial, we will learn to use python to send emails. If you are new to python, you can see our beginner’s series. In case you are having trouble installing Python, you can see our posts on installing python on MacOS and Windows.
We will start with sending plain email using python and then learn to send advanced automated emails, HTML emails, emails with attachments etc.</description>
    </item>
    
    <item>
      <title>Set Passwords and Secret Keys</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/set-passwords-and-secret-keys/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/set-passwords-and-secret-keys/</guid>
      <description>Set Passwords and Secret Keys in Environment Variables (Mac/Linux/Windows) Hide Passwords and Secret Keys in Environment Variables
If you are into python , there is a fair chance that you would have contributed to open-source or had your code snippets/projects on Github or BitBucket.Some time your code involves some important credentials like passwords or secret keys etc. like the code for our post on how to send emails using python uses google/app password.</description>
    </item>
    
    <item>
      <title>Stock Analysis in Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-analysis-in-python/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-analysis-in-python/</guid>
      <description>Stock Analysis in Python Exploring financial data with object-oriented programming and additive models
It’s easy to get carried away with the wealth of data and free open-source tools available for data science. After spending a little bit of time with the quandl financial library and the prophet modeling library, I decided to try some simple stock data exploration. Several days and 1000 lines of Python later, I ended up with a complete stock analysis and prediction tool.</description>
    </item>
    
    <item>
      <title>การใช้งาน Virtualenv</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/virtualenv/</link>
      <pubDate>Sat, 18 Jan 2020 10:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/virtualenv/</guid>
      <description>การใช้งาน Virtualenv Virtualenv คืออะไร Virtualenv(ironment) คือ environment ของ python เช่น คุณทำโปรแกรมอยู่ 2 ตัว A กับ B แล้วเวลาคุณจะติดตั้ง library ถ้าคุณ pip install ลงไปเลย
 library ที่คุณใช้กับงาน A กับปนมั่วกับงาน B  เช่น เวลาจะทำไฟล์ requirement เพื่อให้คนอื่น สามารถติดตั้ง library ที่ใช้กับงานเราได้สะดวกมากขึ้นก็กลับกลายเป็นว่า งาน A ใช้ 5 library งาน B ใช้ 10 Libray สรุป คนที่เอาโปรแกรมเราไม่ไปใช้ก็ไม่รู้ว่า โปรแกรมเราใช้ library อะไรบ้างก็ต้องติดตั้งทั้งหมด 15 library
 หรือแบบไม่สามารถแยก version ของ library กันได้  เช่น งาน A ใช้ OpenCV 3 แต่ งาน B ใช้ OpenCV 4 ทำไงให้ลง 2 version พร้อมกันได้ละ ก็ต้องให้เจ้า Virtualenv ช่วยเราไง</description>
    </item>
    
    <item>
      <title>Dictionaries</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/python-dictionaries/</link>
      <pubDate>Fri, 17 Jan 2020 11:42:26 +0600</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/python-dictionaries/</guid>
      <description>Python Dictionaries Data structures are basically containers that store data in predefined layouts, optimized for certain operations — like apples in a box, ready for picking😉.
The Python programming language natively implements a number of data structures. Lists, tuples, sets, dictionaries are but some of them. We will be looking at the dictionary data type in subsequent sections.
What are dictionaries ? key-value mapping  A dictionary in python is a mapping object that maps keys to values, where the keys are unique within a collection and the values can hold any arbitrary value.</description>
    </item>
    
    <item>
      <title>Newfunction</title>
      <link>https://dragon-library.github.io/library/tutorials/functions/newfunction/</link>
      <pubDate>Tue, 26 Nov 2019 17:04:13 +0700</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/functions/newfunction/</guid>
      <description></description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://dragon-library.github.io/library/tutorials/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://dragon-library.github.io/library/tutorials/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/example/2nd/3rd/4th/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/example/2nd/3rd/4th/</guid>
      <description>4th Level of Menu Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.
Venasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/example/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/example/hidden/</guid>
      <description>This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
 Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/buttons/</guid>
      <description> Buttons Buttons are styled links that can lead to local page or external link.
{{&amp;lt; button relref=&amp;quot;/&amp;quot; [class=&amp;quot;...&amp;quot;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;quot;https://github.com/alex-shpak/hugo-book&amp;quot; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Example Get HomeContribute</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/columns/</guid>
      <description>Columns Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic sparator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic sparator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}}  Example Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/expand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/expand/</guid>
      <description>Expand Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example Default {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}  Expand↕Markdown content Lorem markdownum insigne&amp;hellip;With Custom Label {{&amp;lt; expand &amp;quot;Custom Label&amp;quot; &amp;quot;...&amp;quot; &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}  Custom Label.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/hints/</guid>
      <description>Hints Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}}  Example Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus TelethusaMarkdown content</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/katex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/katex/</guid>
      <description> KaTeX KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example {{&amp;lt; katex [class=&amp;quot;text-center&amp;quot;] &amp;gt;}} x = \begin{cases} a &amp;amp;\text{if } b \\ c &amp;amp;\text{if } d \end{cases} {{&amp;lt; /katex &amp;gt;}} $$ x = \begin{cases} a &amp;\text{if } b \\ c &amp;\text{if } d \end{cases} $$</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/mermaid/</guid>
      <description> Mermaid Chart Mermaid is library for generating svg charts and diagrams from text.
Example {{&amp;lt; mermaid [class=&amp;quot;text-center&amp;quot;]&amp;gt;}} sequenceDiagram Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you? alt is sick Bob-&amp;gt;&amp;gt;Alice: Not so good :( else is well Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-&amp;gt;&amp;gt;Alice: Thanks for asking end {{&amp;lt; /mermaid &amp;gt;}} sequenceDiagram Alice-Bob: Hello Bob, how are you? alt is sick Bob-Alice: Not so good :( else is well Bob-Alice: Feeling fresh like a daisy end opt Extra response Bob-Alice: Thanks for asking end</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/backup/shortcodes/tabs/</guid>
      <description>Tabs Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;quot;uniqueid&amp;quot; &amp;gt;}} {{&amp;lt; tab &amp;quot;MacOS&amp;quot; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;quot;Linux&amp;quot; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;quot;Windows&amp;quot; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}}  Example MacOSMacOS This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description>
    </item>
    
    <item>
      <title>10 เรื่องน่ารู้ตอบข้อสงสัย JavaScript</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/10-knowledge-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/10-knowledge-javascript/</guid>
      <description>10 เรื่องน่ารู้ตอบข้อสงสัย JavaScript ในการเขียนภาษา JavaScript นั้นมีทั้งสิ่งที่เหมือนและแตกต่างกับภาษาโปรแกรมอื่นๆ สำหรับคนที่ใช้งาน JavaScript ไม่ว่าจะเพิ่งเริ่มศึกษาหรือใช้มานานแล้ว ก็อาจจะยังมีบางเรื่องที่สงสัยหรือยังไม่รู้เกี่ยวกับ JavaScript อยู่ เราจึงรวบรวม 10 เรื่องน่ารู้เกี่ยวกับ JavaScriptมาให้ได้ลองอ่านกัน
1. การประกาศตัวแปร Var, Let, Const ใช้แบบไหน ในการเขียนโค้ด การประกาศตัวแปรก็เป็นสิ่งแรกๆ ที่น่าจะเจอในการเริ่มต้นศึกษาภาษานั้นๆ ใน JavaScript ก็เช่นกัน สำหรับคนที่เริ่มศึกษา JavaSctipt น่าจะเคยเห็นผ่านตามาบ้างก็คือ var, let และ const เพื่อการนำไปใช้งานอย่างถูกต้อง ลองมาดูกันว่าการประกาศแต่ละแบบนั้นต่างกันอย่างไรบ้าง
function run() { const myNum = 191; var one = &amp;quot;One&amp;quot;; let two = &amp;quot;Two&amp;quot;; { var three = &amp;quot;Three&amp;quot;; let four = &amp;quot;Four&amp;quot;; } console.log(one); //Output: One console.log(two); //Output: Two console.log(three); //Output: Three console.</description>
    </item>
    
    <item>
      <title>13. Working With Excel</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/book/automate-the-boring-stuff/chapter-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/book/automate-the-boring-stuff/chapter-13/</guid>
      <description>13 Working With Excel Spreadsheets Although we don’t often think of spreadsheets as programming tools, almost everyone uses them to organize information into two-dimensional data structures, perform calculations with formulas, and produce output as charts. In the next two chapters, we’ll integrate Python into two popular spreadsheet applications: Microsoft Excel and Google Sheets.
Excel is a popular and powerful spreadsheet application for Windows. The openpyxl module allows your Python programs to read and modify Excel spreadsheet files.</description>
    </item>
    
    <item>
      <title>14 Working With Google Sheets</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/book/automate-the-boring-stuff/chapter-14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/book/automate-the-boring-stuff/chapter-14/</guid>
      <description>14 Working With Google Sheets Source : 
Google Sheets, the free, web-based spreadsheet application available to anyone with a Google account or Gmail address, has become a useful, feature-rich competitor to Excel. Google Sheets has its own API, but this API can be confusing to learn and use. This chapter covers the EZSheets third-party module, documented at https://ezsheets.readthedocs.io/. While not as full featured as the official Google Sheets API, EZSheets makes common spreadsheet tasks easy to perform.</description>
    </item>
    
    <item>
      <title>3-tile layout</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/tile-layout-using-inline-block/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/tile-layout-using-inline-block/</guid>
      <description>Align items horizontally using display: inline-block to create a 3-tile layout.
&amp;lt;div class=&amp;quot;tiles&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;tile&amp;quot;&amp;gt; &amp;lt;img class=&amp;quot;tile_image&amp;quot; src=&amp;quot;https://via.placeholder.com/250x150&amp;quot; alt=&amp;quot;placeholder&amp;quot; &amp;gt; &amp;lt;h2 class=&amp;quot;tile_title&amp;quot;&amp;gt;30 Seconds of CSS&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;tile&amp;quot;&amp;gt; &amp;lt;img class=&amp;quot;tile_image&amp;quot; src=&amp;quot;https://via.placeholder.com/250x150&amp;quot; alt=&amp;quot;placeholder&amp;quot; &amp;gt; &amp;lt;h2 class=&amp;quot;tile_title&amp;quot;&amp;gt;30 Seconds of CSS&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;tile&amp;quot;&amp;gt; &amp;lt;img class=&amp;quot;tile_image&amp;quot; src=&amp;quot;https://via.placeholder.com/250x150&amp;quot; alt=&amp;quot;placeholder&amp;quot; &amp;gt; &amp;lt;h2 class=&amp;quot;tile_title&amp;quot;&amp;gt;30 Seconds of CSS&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  .tiles { width: 900px; font-size: 0; } .tile { width: calc(900px / 3); display: inline-block; } .</description>
    </item>
    
    <item>
      <title>5 แหล่งดาวน์โหลด CSS สวย ๆ</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/css/5-web-download-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/css/5-web-download-css/</guid>
      <description> 5 แหล่งดาวน์โหลด CSS สวย ๆ CSS ถือเป็นหนึ่งเครื่องมือสำคัญในการสร้างสรรค์เว็บไซต์ให้สวยงามและมีลูกเล่นซึ่งไม่ใช่เรื่องยากอีกต่อไป เพราะวันนี้เราได้รวบรวมคลังเหล่านั้นมาไว้ให้คุณแล้ว
1. Easing functions cheatsheet
2. Animate.css 3. Animate Plus 4. Motion and Meaning 5. Hover.css  Source : .
 </description>
    </item>
    
    <item>
      <title>:not selector</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/not-selector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/not-selector/</guid>
      <description>The :not pseudo selector is useful for styling a group of elements, while leaving the last (or specified) element unstyled.
&amp;lt;ul class=&amp;quot;css-not-selector-shortcut&amp;quot;&amp;gt; &amp;lt;li&amp;gt;One&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Two&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Three&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Four&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;  .css-not-selector-shortcut { display: flex; } ul { padding-left: 0; } li { list-style-type: none; margin: 0; padding: 0 0.75rem; } li:not(:last-child) { border-right: 2px solid #d2d5e4; }  Explanation  li:not(:last-child) specifies that the styles should apply to all li elements except the :last-child.</description>
    </item>
    
    <item>
      <title>all_equal()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/all_equal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/all_equal/</guid>
      <description> all_equal() Checks if all elements in a list are equal.
Use [1:] and [:-1] to compare all the values in the given list.
def all_equal(lst): return lst[1:] == lst[:-1]  all_equal([1, 2, 3, 4, 5, 6]) # False all_equal([1, 1, 1, 1]) # True  </description>
    </item>
    
    <item>
      <title>all_unique()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/all_unique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/all_unique/</guid>
      <description> all_unique() Returns True if all the values in a list are unique, False otherwise.
Use set() on the given list to remove duplicates, use len() to compare its length with the length of the list.
def all_unique(lst): return len(lst) == len(set(lst))  x = [1, 2, 3, 4, 5, 6] y = [1, 2, 2, 3, 4, 5] all_unique(x) # True all_unique(y) # False  </description>
    </item>
    
    <item>
      <title>average()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/average/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/average/</guid>
      <description> average() Returns the average of two or more numbers.
Use sum() to sum all of the args provided, divide by len(args).
def average(*args): return sum(args, 0.0) / len(args)  average(*[1, 2, 3]) # 2.0 average(1, 2, 3) # 2.0  </description>
    </item>
    
    <item>
      <title>average_by()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/average_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/average_by/</guid>
      <description>average_by() Returns the average of a list, after mapping each element to a value using the provided function.
Use map() to map each element to the value returned by fn. Use sum() to sum all of the mapped values, divide by len(lst).
def average_by(lst, fn=lambda x: x): return sum(map(fn, lst), 0.0) / len(lst)  average_by([{ &#39;n&#39;: 4 }, { &#39;n&#39;: 2 }, { &#39;n&#39;: 8 }, { &#39;n&#39;: 6 }], lambda x: x[&#39;n&#39;]) # 5.</description>
    </item>
    
    <item>
      <title>bifurcate()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/bifurcate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/bifurcate/</guid>
      <description> bifurcate() Splits values into two groups. If an element in filter is True, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.
Use list comprehension and enumerate() to add elements to groups, based on filter.
def bifurcate(lst, filter): return [ [x for i, x in enumerate(lst) if filter[i] == True], [x for i, x in enumerate(lst) if filter[i] == False] ]  bifurcate([&#39;beep&#39;, &#39;boop&#39;, &#39;foo&#39;, &#39;bar&#39;], [True, True, False, True]) # [ [&#39;beep&#39;, &#39;boop&#39;, &#39;bar&#39;], [&#39;foo&#39;] ]  </description>
    </item>
    
    <item>
      <title>bifurcate_by()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/bifurcate_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/bifurcate_by/</guid>
      <description> bifurcate_by() Splits values into two groups according to a function, which specifies which group an element in the input list belongs to. If the function returns True, the element belongs to the first group; otherwise, it belongs to the second group.
Use list comprehension to add elements to groups, based on fn.
def bifurcate_by(lst, fn): return [ [x for x in lst if fn(x)], [x for x in lst if not fn(x)] ]  bifurcate_by( [&#39;beep&#39;, &#39;boop&#39;, &#39;foo&#39;, &#39;bar&#39;], lambda x: x[0] == &#39;b&#39; ) # [ [&#39;beep&#39;, &#39;boop&#39;, &#39;bar&#39;], [&#39;foo&#39;] ]  </description>
    </item>
    
    <item>
      <title>Bootstrap 4 Grid</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/boostrap-4-flex-grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/bootstrap/boostrap-4-flex-grid/</guid>
      <description>Bootstrap 4 Grid Download Source Code
Bootstrap 4 brings many changes and new features to the grid system we are all so familiar with from version 3. The new grid is now powered by flexbox, lots of utility classes have been renamed, and a new XL breakpoint has been added.
 When we first wrote this article, Bootstrap 4 was supposed to have two separate grids. Shortly after we published it, a new Alpha was released, making flexbox the only layout mode of the framework as well as introducing some new features.</description>
    </item>
    
    <item>
      <title>Border with top triangle</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/border-with-top-triangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/border-with-top-triangle/</guid>
      <description>Border with top triangle Creates a text container with a triangle at the top.
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; Border with top triangle &amp;lt;/div&amp;gt;  .container { position: relative; background: #ffffff; padding: 15px; border: 1px solid #dddddd; margin-top: 20px; } .container:before, .container:after { content: &#39;&#39;; position: absolute; bottom: 100%; left: 19px; border: 11px solid transparent; border-bottom-color: #dddddd; } .container:after { left: 20px; border: 10px solid transparent; border-bottom-color: #ffffff; }  Explanation  Use the :before and :after pseudo-elements to create two triangles.</description>
    </item>
    
    <item>
      <title>Bouncing loader</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/bouncing-loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/bouncing-loader/</guid>
      <description>Bouncing loader Creates a bouncing loader animation.
&amp;lt;div class=&amp;quot;bouncing-loader&amp;quot;&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  @keyframes bouncing-loader { to { opacity: 0.1; transform: translate3d(0, -1rem, 0); } } .bouncing-loader { display: flex; justify-content: center; } .bouncing-loader &amp;gt; div { width: 1rem; height: 1rem; margin: 3rem 0.2rem; background: #8385aa; border-radius: 50%; animation: bouncing-loader 0.6s infinite alternate; } .bouncing-loader &amp;gt; div:nth-child(2) { animation-delay: 0.2s; } .bouncing-loader &amp;gt; div:nth-child(3) { animation-delay: 0.4s; }  Explanation Note: 1rem is usually 16px.</description>
    </item>
    
    <item>
      <title>Box-sizing reset</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/box-sizing-reset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/box-sizing-reset/</guid>
      <description>Box-sizing reset Resets the box-model so that widths and heights are not affected by their borders or padding.
&amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;border-box&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;box content-box&amp;quot;&amp;gt;content-box&amp;lt;/div&amp;gt;  html { box-sizing: border-box; } *, *::before, *::after { box-sizing: inherit; } .box { display: inline-block; width: 150px; height: 150px; padding: 10px; background: tomato; color: white; border: 10px solid red; } .content-box { box-sizing: content-box; }  Explanation  box-sizing: border-box makes the addition of padding or borders not affect an element&amp;rsquo;s width or height.</description>
    </item>
    
    <item>
      <title>Build a web app with Vue</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/vue/build-web-app-with-vue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/vue/build-web-app-with-vue/</guid>
      <description>How to build a web app with Vue, Vuetify and Axios Source:
Introduction In this article, we will be building a Vue.js Application supported by Vuetify and Axios. The aim of this article is to implement a movie application which will be calling on an API. The user will be able to search for movies. The API will retrieve movies with all the search details. When a user clicks on a movie, it will give more details of each movie.</description>
    </item>
    
    <item>
      <title>Build a Web Scraper</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/beautiful-soup-web-scraper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/beautiful-soup-web-scraper/</guid>
      <description>Beautiful Soup: Build a Web Scraper With Python The incredible amount of data on the Internet is a rich resource for any field of research or personal interest. To effectively harvest that data, you’ll need to become skilled at web scraping. The Python libraries requests and Beautiful Soup are powerful tools for the job. If you like to learn with hands-on examples and you have a basic understanding of Python and HTML, then this tutorial is for you.</description>
    </item>
    
    <item>
      <title>Building a Simple Web APP using Flask and MongoDB</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/build-web-app-using-flask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/build-web-app-using-flask/</guid>
      <description>Building a Simple Python Web APP using Flask framework and MongoDB Introduction We are going to create a simple Python web application using Flask framework and MongoDB. It is very easy to work with Flask as well as MongoDB.
You can select the customized installation choice for adding Python environment variables. If you choose default installation, please set these variables manually.
Please click Add Python 3.7 to PATH option. It will add one entry in the environment variable.</description>
    </item>
    
    <item>
      <title>Building a Stock Screener - Part 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-1/</guid>
      <description>Building a Stock Screener in Python- Part 1  ที่มาบทความ .
 In this post, I’ll share how to create a stock screener — a program which can filter stocks based on user preferences — from scratch (and for free) using python. This project will be broken into 3 parts-
 Scraping data Storing data Screening data  Before we dive into programming, let’s start by asking why anyone would want to build a stock screener.</description>
    </item>
    
    <item>
      <title>Building a Stock Screener - Part 2</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-2/</guid>
      <description>Building a Stock Screener in Python- Part 2 In this series, I’ll share how to create a stock screener — a program which can filter stocks based on user preferences — from scratch (and for free) using python. This project will be broken into 3 parts-
 Scraping data Storing data Screening data  If you haven’t already, check out Part 1 where I talk about scraping stock information from Yahoo Finance in under 10 minutes!</description>
    </item>
    
    <item>
      <title>Button border animation</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/button-border-animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/button-border-animation/</guid>
      <description>Button border animation Creates a border animation on hover.
&amp;lt;div class=&amp;quot;button-border&amp;quot;&amp;gt;&amp;lt;button class=&amp;quot;button&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;  .button { background-color: #c47135; border: none; color: #ffffff; outline: none; padding: 12px 40px 10px; position: relative; } .button:before, .button:after { border: 0 solid transparent; transition: all 0.25s; content: &#39;&#39;; height: 24px; position: absolute; width: 24px; } .button:before { border-top: 2px solid #c47135; left: 0px; top: -5px; } .button:after { border-bottom: 2px solid #c47135; bottom: -5px; right: 0px; } .</description>
    </item>
    
    <item>
      <title>byte_size()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/byte_size/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/byte_size/</guid>
      <description> byte_size() Returns the length of a string in bytes.
Use s.encode(&#39;utf-8&#39;) to encode the given string and return its length.
def byte_size(s): return len(s.encode(&#39;utf-8&#39;))  byte_size(&#39;😀&#39;) # 4 byte_size(&#39;Hello World&#39;) # 11  </description>
    </item>
    
    <item>
      <title>Calc()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/calc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/calc/</guid>
      <description>Calc() The function calc() allows to define CSS values with the use of mathematical expressions, the value adopted for the property is the result of a mathematical expression.
&amp;lt;div class=&amp;quot;box-example&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;  .box-example { height: 280px; background: #222 url(&#39;https://image.ibb.co/fUL9nS/wolf.png&#39;) no-repeat; background-position: calc(100% - 20px) calc(100% - 20px); }  Explanation  It allows addition, subtraction, multiplication and division. Can use different units (pixel and percent together, for example) for each value in your expression.</description>
    </item>
    
    <item>
      <title>Calculate Stock Returns</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/cal-stock-return/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/cal-stock-return/</guid>
      <description>How to calculate stock returns in Python  4/3/2018 Written by DD
Source.
 Calculating financial returns in Python One of the most important tasks in financial markets is to analyze historical returns on various investments. To perform this analysis we need historical data for the assets. There are many data providers, some are free most are paid. In this chapter we will use the data from Yahoo’s finance website.</description>
    </item>
    
    <item>
      <title>camel()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/camel/</guid>
      <description> camel() Converts a string to camelcase.
Use re.sub() to replace any - or _ with a space, using the regexp r&amp;quot;(_|-)+&amp;quot;. Use title() to capitalize the first letter of each word convert the rest to lowercase. Finally, use replace() to remove spaces between words.
from re import sub def camel(s): s = sub(r&amp;quot;(_|-)+&amp;quot;, &amp;quot; &amp;quot;, s).title().replace(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;) return s[0].lower() + s[1:]  camel(&#39;some_database_field_name&#39;) # &#39;someDatabaseFieldName&#39; camel(&#39;Some label that needs to be camelized&#39;) # &#39;someLabelThatNeedsToBeCamelized&#39; camel(&#39;some-javascript-property&#39;) # &#39;someJavascriptProperty&#39; camel(&#39;some-mixed_string with spaces_underscores-and-hyphens&#39;) # &#39;someMixedStringWithSpacesUnderscoresAndHyphens&#39;  </description>
    </item>
    
    <item>
      <title>capitalize()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/capitalize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/capitalize/</guid>
      <description> capitalize() Capitalizes the first letter of a string.
Capitalize the first letter of the string and then add it with rest of the string. Omit the lower_rest parameter to keep the rest of the string intact, or set it to True to convert to lowercase.
def capitalize(s, lower_rest=False): return s[:1].upper() + (s[1:].lower() if lower_rest else s[1:])  capitalize(&#39;fooBar&#39;) # &#39;FooBar&#39; capitalize(&#39;fooBar&#39;, True) # &#39;Foobar&#39;  </description>
    </item>
    
    <item>
      <title>capitalize_every_word()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/capitalize_every_word/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/capitalize_every_word/</guid>
      <description> capitalize_every_word() Capitalizes the first letter of every word in a string.
Use s.title() to capitalize first letter of every word in the string.
def capitalize_every_word(s): return s.title()  capitalize_every_word(&#39;hello world!&#39;) # &#39;Hello World!&#39;  </description>
    </item>
    
    <item>
      <title>cast_list()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/cast_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/cast_list/</guid>
      <description> cast_list() Casts the provided value as a list if it&amp;rsquo;s not one.
Use isinstance() to check if the given value is enumerable and return it by using list() or encapsulated in a list accordingly.
def cast_list(val): return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]  cast_list(&#39;foo&#39;) # [&#39;foo&#39;] cast_list([1]) # [1] cast_list((&#39;foo&#39;, &#39;bar&#39;)) # [&#39;foo&#39;, &#39;bar&#39;]  </description>
    </item>
    
    <item>
      <title>check_prop()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/check_prop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/check_prop/</guid>
      <description> check_prop() Given a predicate function, fn, and a prop string, this curried function will then take an object to inspect by calling the property and passing it to the predicate.
Return a lambda function that takes an object and applies the predicate function, fn to the specified property.
def check_prop(fn, prop): return lambda obj: fn(obj[prop])  check_age = check_prop(lambda x: x &amp;gt;= 18, &#39;age&#39;) user = {&#39;name&#39;: &#39;Mark&#39;, &#39;age&#39;: 18} check_age(user) # True  </description>
    </item>
    
    <item>
      <title>chunk()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/chunk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/chunk/</guid>
      <description> chunk() Chunks a list into smaller lists of a specified size.
Use list() and range() to create a list of the desired size. Use map() on the list and fill it with splices of the given list. Finally, return the created list.
from math import ceil def chunk(lst, size): return list( map(lambda x: lst[x * size:x * size + size], list(range(0, ceil(len(lst) / size)))))  chunk([1, 2, 3, 4, 5], 2) # [[1,2],[3,4],5]  </description>
    </item>
    
    <item>
      <title>Circle</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/circle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/circle/</guid>
      <description> Circle Creates a circle shape with pure CSS.
&amp;lt;div class=&amp;quot;circle&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;  .circle { border-radius: 50%; width: 2rem; height: 2rem; background: #333; }  Explanation  border-radius: 50% curves the borders of an element to create a circle. Since a circle has the same radius at any given point, the width and height must be the same. Differing values will create an ellipse.  Browser support  https://caniuse.com/#feat=border-radius  </description>
    </item>
    
    <item>
      <title>Circle Progress</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/circle-progress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/circle-progress/</guid>
      <description>Circle Progress  Responsive, accessible, animated, stylable with CSS circular progress bar available as plain (vanilla) JavaScript and jQuery plugin.
 See examples or go to the project site
Getting Started As plain JavaScript Download the minified [production version][vanilla-min]
In your web page:
&amp;lt;div class=&amp;quot;progress&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;dist/circle-progress.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; new CircleProgress(&#39;.progress&#39;); &amp;lt;/script&amp;gt;  As jQuery plugin Download the minified jQuery production version
In your web page:
&amp;lt;div class=&amp;quot;progress&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.3.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;dist/jquery.</description>
    </item>
    
    <item>
      <title>clamp_number()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/clamp_number/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/clamp_number/</guid>
      <description> clamp_number() Clamps num within the inclusive range specified by the boundary values a and b.
If num falls within the range, return num. Otherwise, return the nearest number in the range.
def clamp_number(num,a,b): return max(min(num, max(a, b)), min(a, b))  clamp_number(2, 3, 5) # 3 clamp_number(1, -1, -5) # -1  </description>
    </item>
    
    <item>
      <title>Clearfix</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/clearfix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/clearfix/</guid>
      <description>Clearfix Ensures that an element self-clears its children.
&amp;lt;div class=&amp;quot;clearfix&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;floated&amp;quot;&amp;gt;float a&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;floated&amp;quot;&amp;gt;float b&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;floated&amp;quot;&amp;gt;float c&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  .clearfix::after { content: &#39;&#39;; display: block; clear: both; } .floated { float: left; }  Explanation  .clearfix::after defines a pseudo-element. content: &#39;&#39; allows the pseudo-element to affect layout. clear: both indicates that the left, right or both sides of the element cannot be adjacent to earlier floated elements within the same block formatting context.</description>
    </item>
    
    <item>
      <title>compact()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/compact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/compact/</guid>
      <description> compact() Removes falsey values from a list.
Use filter() to filter out falsey values (False, None, 0, and &amp;quot;&amp;quot;).
def compact(lst): return list(filter(bool, lst))  compact([0, 1, False, 2, &#39;&#39;, 3, &#39;a&#39;, &#39;s&#39;, 34]) # [ 1, 2, 3, &#39;a&#39;, &#39;s&#39;, 34 ]  </description>
    </item>
    
    <item>
      <title>compose()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/compose/</guid>
      <description> compose() Performs right-to-left function composition.
Use functools.reduce() to perform right-to-left function composition. The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.
from functools import reduce def compose(*fns): return reduce(lambda f, g: lambda *args: f(g(*args)), fns)  add5 = lambda x: x + 5 multiply = lambda x, y: x * y multiply_and_add_5 = compose(add5, multiply) multiply_and_add_5(5, 2) # 15  </description>
    </item>
    
    <item>
      <title>compose_right()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/compose_right/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/compose_right/</guid>
      <description> compose_right() Performs left-to-right function composition.
Use functools.reduce() to perform left-to-right function composition. The first (leftmost) function can accept one or more arguments; the remaining functions must be unary.
from functools import reduce def compose_right(*fns): return reduce(lambda f, g: lambda *args: g(f(*args)), fns)  add = lambda x, y: x + y square = lambda x: x * x add_and_square = compose_right(add,square) add_and_square(1, 2) # 9  </description>
    </item>
    
    <item>
      <title>Constant width to height ratio</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/constant-width-to-height-ratio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/constant-width-to-height-ratio/</guid>
      <description>Constant width to height ratio Given an element of variable width, it will ensure its height remains proportionate in a responsive fashion (i.e., its width to height ratio remains constant).
&amp;lt;div class=&amp;quot;constant-width-to-height-ratio&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;  .constant-width-to-height-ratio { background: #333; width: 50%; } .constant-width-to-height-ratio::before { content: &#39;&#39;; padding-top: 100%; float: left; } .constant-width-to-height-ratio::after { content: &#39;&#39;; display: block; clear: both; }  Explanation  padding-top on the ::before pseudo-element causes the height of the element to equal a percentage of its width.</description>
    </item>
    
    <item>
      <title>Constant width to height ratio</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/pandas-groupby-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/pandas-groupby-tutorial/</guid>
      <description> Constant width to height ratio </description>
    </item>
    
    <item>
      <title>count_by()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/count_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/count_by/</guid>
      <description>count_by() Groups the elements of a list based on the given function and returns the count of elements in each group.
Use map() to map the values of the given list using the given function. Iterate over the map and increase the element count each time it occurs.
def count_by(arr, fn=lambda x: x): key = {} for el in map(fn, arr): key[el] = 1 if el not in key else key[el] + 1 return key  from math import floor count_by([6.</description>
    </item>
    
    <item>
      <title>count_occurences()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/count_occurences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/count_occurences/</guid>
      <description> count_occurences() Counts the occurrences of a value in a list.
Increment a counter for every item in the list that has the given value and is of the same type.
def count_occurrences(lst, val): return len([x for x in lst if x == val and type(x) == type(val)])  count_occurrences([1, 1, 2, 1, 2, 3], 1) # 3  </description>
    </item>
    
    <item>
      <title>Counter</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/counter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/counter/</guid>
      <description>Counter Counters are, in essence, variables maintained by CSS whose values may be incremented by CSS rules to track how many times they&amp;rsquo;re used.
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; List item &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;  ul { counter-reset: counter; } li::before { counter-increment: counter; content: counters(counter, &#39;.&#39;) &#39; &#39;; }  Explanation  You can create a ordered list using any type of HTML.</description>
    </item>
    
    <item>
      <title>Creating the Layout in HTML</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/html/creating-the-layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/html/creating-the-layout/</guid>
      <description>Website Design: Creating the Layout in HTML For this you need to be aware of the different layout options available in HTML/CSS and which of those is the right fit for your website design. Let us go through the options one by one.
Photo by Pankaj Patel on Unsplash
Tables — Do Not Do This! This was used earlier when the web was still in its infancy, and there wasn’t much you could do with a website except display text.</description>
    </item>
    
    <item>
      <title>CSS Animation — Part 1</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/css/guide-to-css-animation-part-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/css/guide-to-css-animation-part-1/</guid>
      <description>A Guide to CSS Animation — Part 1 This post assumes you’ve never created a CSS animation before. But even if you have, there may be things you were not aware of. It does assume you have some familiarity with HTML and CSS. We’ll explore creating your first animation through to things like chaining animations.
CSS animation can be a quick concept to grasp but a big topic to cover once we really dig in.</description>
    </item>
    
    <item>
      <title>CSS Animation — Part 2</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/css/guide-to-css-animation-part-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/css/guide-to-css-animation-part-2/</guid>
      <description>A Guide to CSS Animation — Part 2 animation-iteration-count Let’s pick up from where we left off with by modifying our first animation. If you need a little refresher, this is what we had.
But the animation only ran once. What if we wanted the animation to run many times or not even stop? In the case of loading animations, we may want the animation to be infinite. This is where animation-iteration-count comes into play.</description>
    </item>
    
    <item>
      <title>CSS Animation — Part 3</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/css/guide-to-css-animation-part-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/css/guide-to-css-animation-part-3/</guid>
      <description>A Guide to CSS Animation — Part 3 CSS Variables CSS variables are awesome. But you can’t animate them just yet. So what can we do with them? We can use their values to create dynamic animations.
Consider an example where we have three squares. We want to animate them all growing to different scales. Do we need three different animations for this? We could use animation-fill-mode backwards and scale them all from the same start size?</description>
    </item>
    
    <item>
      <title>curry()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/curry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/curry/</guid>
      <description> curry() Curries a function.
Use functools.partial() to return a new partial object which behaves like fn with the given arguments, args, partially applied.
from functools import partial def curry(fn, *args): return partial(fn,*args)  add = lambda x, y: x + y add10 = curry(add, 10) add10(20) # 30  </description>
    </item>
    
    <item>
      <title>Custom scrollbar</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/custom-scrollbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/custom-scrollbar/</guid>
      <description>Custom scrollbar Customizes the scrollbar style for the document and elements with scrollable overflow, on WebKit platforms.
&amp;lt;div class=&amp;quot;custom-scrollbar&amp;quot;&amp;gt; &amp;lt;p&amp;gt; Lorem ipsum dolor sit amet consectetur adipisicing elit.&amp;lt;br /&amp;gt; Iure id exercitationem nulla qui repellat laborum vitae, &amp;lt;br /&amp;gt; molestias tempora velit natus. Quas, assumenda nisi. &amp;lt;br /&amp;gt; Quisquam enim qui iure, consequatur velit sit? &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt;  .custom-scrollbar { height: 70px; overflow-y: scroll; } /* To style the document scrollbar, remove `.</description>
    </item>
    
    <item>
      <title>Custom text selection</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/custom-text-selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/custom-text-selection/</guid>
      <description>Custom text selection Changes the styling of text selection.
&amp;lt;p class=&amp;quot;custom-text-selection&amp;quot;&amp;gt;Select some of this text.&amp;lt;/p&amp;gt;  ::selection { background: aquamarine; color: black; } .custom-text-selection::selection { background: deeppink; color: white; }  Explanation  ::selection defines a pseudo selector on an element to style text within it when selected. Note that if you don&amp;rsquo;t combine any other selector your style will be applied at document root level, to any selectable element.</description>
    </item>
    
    <item>
      <title>Custom variables</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/custom-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/custom-variables/</guid>
      <description>Custom variables CSS variables that contain specific values to be reused throughout a document.
&amp;lt;p class=&amp;quot;custom-variables&amp;quot;&amp;gt;CSS is awesome!&amp;lt;/p&amp;gt;  :root { /* Place variables within here to use the variables globally. */ } .custom-variables { --some-color: #da7800; --some-keyword: italic; --some-size: 1.25em; --some-complex-value: 1px 1px 2px whitesmoke, 0 0 1em slategray, 0 0 0.2em slategray; color: var(--some-color); font-size: var(--some-size); font-style: var(--some-keyword); text-shadow: var(--some-complex-value); }  Explanation  The variables are defined globally within the :root CSS pseudo-class which matches the root element of a tree representing the document.</description>
    </item>
    
    <item>
      <title>Dash by Plotly</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-2/</guid>
      <description>Python for Finance: Dash by Plotly  Source.
 Part 2 of Leveraging Python for Stock Portfolio Analyses. In part 1 of this series I discussed how, since I’ve become more accustomed to using pandas, that I have signficantly increased my use of Python for financial analyses. During the part 1 post, we reviewed how to largely automate the tracking and benchmarking of a stock portfolio’s performance leveraging pandas and the Yahoo Finance API.</description>
    </item>
    
    <item>
      <title>Datetime Tutorial</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-datetime-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-datetime-tutorial/</guid>
      <description>Python Datetime Tutorial: Manipulate Times, Dates, and Time Spans Table of Contents  Python datetime Classes Creating Date Objects Extract Year and Month from the Date  - Handling Date and Time Strings with strptime() and strftime()  Getting Day of the Month and Day of the Week from a Date Getting Hours and Minutes From a Python Datetime Object Getting Week of the Year from a Datetime Object Converting a Date Object into Unix Timestamp and Vice Versa Measuring Time Span with Timedelta Objects Find the Difference Between Two Dates and Times Formatting Dates: More on strftime() and strptime() Handling Timezones Working with pandas Datetime Objects  - Get Year, Month, Day, Hour, Minute in pandas  Get Weekday and Day of Year  Convert Date Object into DataFrame Index  Conclusion  Dealing with dates and times in Python can be a hassle.</description>
    </item>
    
    <item>
      <title>DateTime, TimeDelta, Strftime with Examples</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/datetime-timedelta-strftime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/datetime-timedelta-strftime/</guid>
      <description>Python DateTime, TimeDelta, Strftime(Format) with Examples In Python, date, time and datetime classes provides a number of function to deal with dates, times and time intervals. Date and datetime are an object in Python, so when you manipulate them, you are actually manipulating objects and not string or timestamps. Whenever you manipulate dates or time, you need to import datetime function.
The datetime classes in Python are categorized into main 5 classes.</description>
    </item>
    
    <item>
      <title>dateutil()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/dateutil/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/dateutil/</guid>
      <description>dateutil()  Source :
# pip install python-dateutil from datetime import datetime, date from dateutil.relativedelta import relativedelta, SA, TH def demo1(): today = date.today() next_3_m = today + relativedelta(months=3) print(today) print(next_3_m) d1 = today + relativedelta(weeks=40) print(d1) d2 = today + relativedelta(years=1, months=6) print(d2) d3 = today + relativedelta(days=-1) print(d3) def demo2(): now = datetime.today() print(now) t1 = now + relativedelta(hours=3, minutes=30) print(t1) def demo_weekday(): childrenday = date(2016, 1, 1) + relativedelta(weekday=SA(+2)) print(childrenday) print(datetime.</description>
    </item>
    
    <item>
      <title>decapitalize()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/decapitalize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/decapitalize/</guid>
      <description> decapitalize() Decapitalizes the first letter of a string.
Decapitalize the first letter of the string and then add it with rest of the string. Omit the upper_rest parameter to keep the rest of the string intact, or set it to True to convert to uppercase.
def decapitalize(s, upper_rest=False): return s[:1].lower() + (s[1:].upper() if upper_rest else s[1:])  decapitalize(&#39;FooBar&#39;) # &#39;fooBar&#39; decapitalize(&#39;FooBar&#39;, True) # &#39;fOOBAR&#39;  </description>
    </item>
    
    <item>
      <title>deep_flatten()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/deep_flatten/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/deep_flatten/</guid>
      <description> deep_flatten() Deep flattens a list.
Use recursion. Use isinstance() with collections.abc.Iterable to check if an element is iterable. If it is, apply deep_flatten() recursively, otherwise return [lst].
from collections.abc import Iterable def deep_flatten(lst): return [a for i in lst for a in deep_flatten(i)] if isinstance(lst, Iterable) else [lst]  deep_flatten([1, [2], [[3], 4], 5]) # [1,2,3,4,5]  </description>
    </item>
    
    <item>
      <title>degrees_to_rads()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/degrees_to_rads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/degrees_to_rads/</guid>
      <description> degrees_to_rads() Converts an angle from degrees to radians.
Use math.pi and the degrees to radians formula to convert the angle from degrees to radians.
from math import pi def degrees_to_rads(deg): return (deg * pi) / 180.0  degrees_to_rads(180) # 3.141592653589793  </description>
    </item>
    
    <item>
      <title>delay()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/delay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/delay/</guid>
      <description> delay() Invokes the provided function after ms milliseconds.
Use time.sleep() to delay the execution of fn by ms / 1000 seconds.
from time import sleep def delay(fn, ms, *args): sleep(ms / 1000) return fn(*args)  delay( lambda x: print(x), 1000, &#39;later&#39; ) # prints &#39;later&#39; after one second  </description>
    </item>
    
    <item>
      <title>Dictionary(Dict) with Example</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/dictionary-beginners-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/dictionary-beginners-tutorial/</guid>
      <description>Python Dictionary(Dict): Update, Cmp, Len, Sort, Copy, Items, str with Example Dictionaries are another example of a data structure. A dictionary is used to map or associate things you want to store the keys you need to get them. A dictionary in Python is just like a dictionary in the real world. Python Dictionary are defined into two elements Keys and Values.
 Keys will be a single element Values can be a list or list within a list, numbers, etc.</description>
    </item>
    
    <item>
      <title>difference()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/difference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/difference/</guid>
      <description> difference() Returns the difference between two iterables.
Create a set from b, then use list comprehension on a to only keep values not contained in the previously created set, _b.
def difference(a, b): _b = set(b) return [item for item in a if item not in _b]  difference([1, 2, 3], [1, 2, 4]) # [3]  </description>
    </item>
    
    <item>
      <title>difference_by()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/difference_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/difference_by/</guid>
      <description>difference_by() Returns the difference between two lists, after applying the provided function to each list element of both.
Create a set by applying fn to each element in b, then use list comprehension in combination with fn on a to only keep values not contained in the previously created set, _b.
def difference_by(a, b, fn): _b = set(map(fn, b)) return [item for item in a if fn(item) not in _b]  from math import floor difference_by([2.</description>
    </item>
    
    <item>
      <title>digitize()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/digitize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/digitize/</guid>
      <description> digitize() Converts a number to a list of digits.
Use map() combined with int on the string representation of n and return a list from the result.
def digitize(n): return list(map(int, str(n)))  digitize(123) # [1, 2, 3]  </description>
    </item>
    
    <item>
      <title>Disable selection</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/disable-selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/disable-selection/</guid>
      <description> Disable selection Makes the content unselectable.
&amp;lt;p&amp;gt;You can select me.&amp;lt;/p&amp;gt; &amp;lt;p class=&amp;quot;unselectable&amp;quot;&amp;gt;You can&#39;t select me!&amp;lt;/p&amp;gt;  .unselectable { user-select: none; }  Explanation  user-select: none specifies that the text cannot be selected.  Browser support ⚠️ Requires prefixes for full support. ⚠️ This is not a secure method to prevent users from copying content.
 https://caniuse.com/#feat=user-select-none  </description>
    </item>
    
    <item>
      <title>Display table centering</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/display-table-centering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/display-table-centering/</guid>
      <description>Display table centering Vertically and horizontally centers a child element within its parent element using display: table (as an alternative to flexbox).
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;span&amp;gt;Centered content&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  .container { border: 1px solid #333; height: 250px; width: 250px; } .center { display: table; height: 100%; width: 100%; } .center &amp;gt; span { display: table-cell; text-align: center; vertical-align: middle; }  Explanation  display: table on &amp;lsquo;.center&amp;rsquo; allows the element to behave like a &amp;lt;table&amp;gt; HTML element.</description>
    </item>
    
    <item>
      <title>Donut spinner</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/donut-spinner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/donut-spinner/</guid>
      <description>Donut spinner Creates a donut spinner that can be used to indicate the loading of content.
&amp;lt;div class=&amp;quot;donut&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;  @keyframes donut-spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } .donut { display: inline-block; border: 4px solid rgba(0, 0, 0, 0.1); border-left-color: #7983ff; border-radius: 50%; width: 30px; height: 30px; animation: donut-spin 1.2s linear infinite; }  Explanation  Use a semi-transparent border for the whole element, except one side that will serve as the loading indicator for the donut.</description>
    </item>
    
    <item>
      <title>Drop cap</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/drop-cap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/drop-cap/</guid>
      <description>Makes the first letter in the first paragraph bigger than the rest of the text - often used to signify the beginning of a new section.
&amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam commodo ligula quis tincidunt cursus. Integer consectetur tempor ex eget hendrerit. Cras facilisis sodales odio nec maximus. Pellentesque lacinia convallis libero, rhoncus tincidunt ante dictum at. Nullam facilisis lectus tellus, sit amet congue erat sodales commodo.</description>
    </item>
    
    <item>
      <title>Dynamic shadow</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/dynamic-shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/dynamic-shadow/</guid>
      <description>Creates a shadow similar to box-shadow but based on the colors of the element itself.
&amp;lt;div class=&amp;quot;dynamic-shadow&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;  .dynamic-shadow { position: relative; width: 10rem; height: 10rem; background: linear-gradient(75deg, #6d78ff, #00ffb8); z-index: 1; } .dynamic-shadow::after { content: &#39;&#39;; width: 100%; height: 100%; position: absolute; background: inherit; top: 0.5rem; filter: blur(0.4rem); opacity: 0.7; z-index: -1; }  Explanation  position: relative on the element establishes a Cartesian positioning context for psuedo-elements. z-index: 1 establishes a new stacking context.</description>
    </item>
    
    <item>
      <title>Easing variables</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/easing-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/easing-variables/</guid>
      <description>Variables that can be reused for transition-timing-function properties, more powerful than the built-in ease, ease-in, ease-out and ease-in-out.
&amp;lt;div class=&amp;quot;easing-variables&amp;quot;&amp;gt;Hover&amp;lt;/div&amp;gt;  :root { /* Place variables in here to use globally */ } .easing-variables { --ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53); --ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19); --ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22); --ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06); --ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035); --ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335); --ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.</description>
    </item>
    
    <item>
      <title>Etched text</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/etched-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/etched-text/</guid>
      <description>Creates an effect where text appears to be &amp;ldquo;etched&amp;rdquo; or engraved into the background.
&amp;lt;p class=&amp;quot;etched-text&amp;quot;&amp;gt;I appear etched into the background.&amp;lt;/p&amp;gt;  .etched-text { text-shadow: 0 2px white; font-size: 1.5rem; font-weight: bold; color: #b8bec5; }  Explanation  text-shadow: 0 2px white creates a white shadow offset 0px horizontally and 2px vertically from the origin position. The background must be darker than the shadow for the effect to work. The text color should be slightly faded to make it look like it&amp;rsquo;s engraved/carved out of the background.</description>
    </item>
    
    <item>
      <title>Evenly distributed children</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/evenly-distributed-children/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/evenly-distributed-children/</guid>
      <description>Evenly distributes child elements within a parent element.
&amp;lt;div class=&amp;quot;evenly-distributed-children&amp;quot;&amp;gt; &amp;lt;p&amp;gt;Item1&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Item2&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Item3&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt;  .evenly-distributed-children { display: flex; justify-content: space-between; }  Explanation  display: flex enables flexbox. justify-content: space-between evenly distributes child elements horizontally. The first item is positioned at the left edge, while the last item is positioned at the right edge.   Alternatively, use justify-content: space-around to distribute the children with space around them, rather than between them.</description>
    </item>
    
    <item>
      <title>every()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/every/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/every/</guid>
      <description> every() Returns True if the provided function returns True for every element in the list, False otherwise.
Use all() in combination with map and fn to check if fn returns True for all elements in the list.
def every(lst, fn=lambda x: x): return all(map(fn, lst))  every([4, 2, 3], lambda x: x &amp;gt; 1) # True every([1, 2, 3]) # True  </description>
    </item>
    
    <item>
      <title>every_nth()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/every_nth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/every_nth/</guid>
      <description> every_nth() Returns every nth element in a list.
Use [nth-1::nth] to create a new list that contains every nth element of the given list.
def every_nth(lst, nth): return lst[nth - 1::nth]  every_nth([1, 2, 3, 4, 5, 6], 2) # [ 2, 4, 6 ]  </description>
    </item>
    
    <item>
      <title>Explore Your Dataset</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/pandas-explore-dataset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/pandas-explore-dataset/</guid>
      <description>Using Pandas and Python to Explore Your Dataset Table of Contents  Setting Up Your Environment Using the Pandas Python Library Getting to Know Your Data  Displaying Data Types Showing Basics Statistics Exploring Your Dataset  Getting to Know Pandas&amp;rsquo; Data Structures  Understanding Series Objects Understanding DataFrame Objects  Accessing Series Elements  Using the Indexing Operator Using .loc and .iloc  Accessing DataFrame Elements  Using the Indexing Operator Using .</description>
    </item>
    
    <item>
      <title>factorial()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/factorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/factorial/</guid>
      <description> factorial() Calculates the factorial of a number.
Use recursion. If num is less than or equal to 1, return 1. Otherwise, return the product of num and the factorial of num - 1. Throws an exception if num is a negative or a floating point number.
def factorial(num): if not ((num &amp;gt;= 0) and (num % 1 == 0)): raise Exception(&amp;quot;Number can&#39;t be floating point or negative.&amp;quot;) return 1 if num == 0 else num * factorial(num - 1)  factorial(6) # 720  </description>
    </item>
    
    <item>
      <title>fibonacci()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/fibonacci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/fibonacci/</guid>
      <description>fibonacci() Generates a list, containing the Fibonacci sequence, up until the nth term.
Starting with 0 and 1, use list.append() to add the sum of the last two numbers of the list to the end of the list, until the length of the list reaches n.
If n is less or equal to 0, return a list containing 0.
def fibonacci(n): if n &amp;lt;= 0: return [0] sequence = [0, 1] while len(sequence) &amp;lt;= n: next_value = sequence[len(sequence) - 1] + sequence[len(sequence) - 2] sequence.</description>
    </item>
    
    <item>
      <title>filter_non_unique()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/filter_non_unique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/filter_non_unique/</guid>
      <description> filter_non_unique() Filters out the non-unique values in a list.
Use a collections.Counter to get the count of each value in the list. Use list comprehension to create a list containing only the unique values.
from collections import Counter def filter_non_unique(lst): return [item for item, count in counter = Counter(lst).items() if count == 1]  filter_non_unique([1, 2, 2, 3, 4, 4, 5]) # [1, 3, 5]  </description>
    </item>
    
    <item>
      <title>filter_unique()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/filter_unique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/filter_unique/</guid>
      <description> filter_unique() Filters out the unique values in a list.
Use a collections.Counter to get the count of each value in the list. Use list comprehension to create a list containing only the non-unique values.
from collections import Counter def filter_unique(lst): return [item for item, count in Counter(lst).items() if count &amp;gt; 1]  filter_unique([1, 2, 2, 3, 4, 4, 5]) # [2, 4]  </description>
    </item>
    
    <item>
      <title>find_parity_outliers()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/find_parity_outliers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/find_parity_outliers/</guid>
      <description>find_parity_outliers() Given a list, returns the items that are parity outliers.
Use collections.Counter with a list comprehension to count even and odd values in the list, use collections.Counter.most_common() to get the most common parity. Use a list comprehension to find all elements that do not match the most common parity.
from collections import Counter def find_parity_outliers(nums): return [ x for x in nums if x % 2 != Counter([n % 2 for n in nums]).</description>
    </item>
    
    <item>
      <title>Fit image in container</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/fit-image-in-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/fit-image-in-container/</guid>
      <description>Changes the fit and position of an image within its container while preserving its aspect ratio. Previously only possible using a background image and the background-size property.
&amp;lt;img class=&amp;quot;image image-contain&amp;quot; src=&amp;quot;https://picsum.photos/600/200&amp;quot; /&amp;gt; &amp;lt;img class=&amp;quot;image image-cover&amp;quot; src=&amp;quot;https://picsum.photos/600/200&amp;quot; /&amp;gt;  .image { background: #34495e; border: 1px solid #34495e; width: 200px; height: 200px; } .image-contain { object-fit: contain; object-position: center; } .image-cover { object-fit: cover; object-position: right top; }  Explanation  object-fit: contain fits the entire image within the container while preserving its aspect ratio.</description>
    </item>
    
    <item>
      <title>flatten()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/flatten/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/flatten/</guid>
      <description> flatten() Flattens a list of lists once.
Use nested list comprehension to extract each value from sub-lists in order.
def flatten(lst): return [x for y in lst for x in y]  flatten([[1,2,3,4],[5,6,7,8]]) # [1, 2, 3, 4, 5, 6, 7, 8]  </description>
    </item>
    
    <item>
      <title>Flexbox centering</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/flexbox-centering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/flexbox-centering/</guid>
      <description> Horizontally and vertically centers a child element within a parent element using flexbox.
&amp;lt;div class=&amp;quot;flexbox-centering&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;child&amp;quot;&amp;gt;Centered content.&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;  .flexbox-centering { display: flex; justify-content: center; align-items: center; height: 100px; }  Explanation  display: flex enables flexbox. justify-content: center centers the child horizontally. align-items: center centers the child vertically.  Browser support ⚠️ Needs prefixes for full support.
 https://caniuse.com/#feat=flexbox  </description>
    </item>
    
    <item>
      <title>Focus Within</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/focus-within/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/focus-within/</guid>
      <description>Changes the appearance of a form if any of its children are focused.
&amp;lt;div class=&amp;quot;focus-within&amp;quot;&amp;gt; &amp;lt;form&amp;gt; &amp;lt;label for=&amp;quot;given_name&amp;quot;&amp;gt;Given Name:&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;given_name&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;label for=&amp;quot;family_name&amp;quot;&amp;gt;Family Name:&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;family_name&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/div&amp;gt;  form { border: 3px solid #2d98da; color: #000000; padding: 4px; } form:focus-within { background: #f7b731; color: #000000; }  Explanation  The psuedo class :focus-within applies styles to a parent element if any child element gets focused.</description>
    </item>
    
    <item>
      <title>Format a String in Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/string-format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/string-format/</guid>
      <description>How to Format a String in Python: Interpolation, Concatenation, and More POSTED ON SEPTEMBER 6, 2019 BY JEREMY GRIFSKI
Last Updated on January 31, 2020
It’s been awhile since I’ve written one of these “how to” articles, but I’m back at it. This time, I want to talk about string formatting using techniques like interpolation and concatenation. In other words, it’s time to finally learn how to format a string in Python</description>
    </item>
    
    <item>
      <title>Fullscreen</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/fullscreen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/fullscreen/</guid>
      <description>The :fullscreen CSS pseudo-class represents an element that&amp;rsquo;s displayed when the browser is in fullscreen mode.
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Click the button below to enter the element into fullscreen mode. &amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;div class=&amp;quot;element&amp;quot; id=&amp;quot;element&amp;quot;&amp;gt;&amp;lt;p&amp;gt;I change color in fullscreen mode!&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;button onclick=&amp;quot;var el = document.getElementById(&#39;element&#39;); el.requestFullscreen();&amp;quot;&amp;gt; Go Full Screen! &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt;  .container { margin: 40px auto; max-width: 700px; } .element { padding: 20px; height: 300px; width: 100%; background-color: skyblue; box-sizing: border-box; } .</description>
    </item>
    
    <item>
      <title>gcd()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/gcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/gcd/</guid>
      <description> gcd() Calculates the greatest common divisor of a list of numbers.
Use functools.reduce() and math.gcd() over the given list.
from functools import reduce from math import gcd def gcd(numbers): return reduce(gcd, numbers)  gcd([8, 36, 28]) # 4  </description>
    </item>
    
    <item>
      <title>Ghost trick</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/ghost-trick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/ghost-trick/</guid>
      <description> Vertically centers an element in another.
&amp;lt;div class=&amp;quot;ghost-trick&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;ghosting&amp;quot;&amp;gt;&amp;lt;p&amp;gt;Vertically centered without changing the position property.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  .ghosting { height: 300px; background: #0ff; } .ghosting:before { content: &#39;&#39;; display: inline-block; height: 100%; vertical-align: middle; } p { display: inline-block; vertical-align: middle; }  Explanation  Use the style of a :before pseudo-element to vertically align inline elements without changing their position property.  Browser support  https://caniuse.com/#feat=inline-block  </description>
    </item>
    
    <item>
      <title>Gradient text</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/gradient-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/gradient-text/</guid>
      <description> Gives text a gradient color.
&amp;lt;p class=&amp;quot;gradient-text&amp;quot;&amp;gt;Gradient text&amp;lt;/p&amp;gt;  .gradient-text { background: -webkit-linear-gradient(pink, red); -webkit-text-fill-color: transparent; -webkit-background-clip: text; }  Explanation  background: -webkit-linear-gradient(...) gives the text element a gradient background. webkit-text-fill-color: transparent fills the text with a transparent color. webkit-background-clip: text clips the background with the text, filling the text with the gradient background as the color.  Browser support ⚠️ Uses non-standard properties.
 https://caniuse.com/#feat=text-stroke  </description>
    </item>
    
    <item>
      <title>Grid centering</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/grid-centering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/grid-centering/</guid>
      <description> Horizontally and vertically centers a child element within a parent element using grid.
&amp;lt;div class=&amp;quot;grid-centering&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;child&amp;quot;&amp;gt;Centered content.&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;  .grid-centering { display: grid; justify-content: center; align-items: center; height: 100px; }  Explanation  display: grid enables grid. justify-content: center centers the child horizontally. align-items: center centers the child vertically.  Browser support  https://caniuse.com/#feat=css-grid  </description>
    </item>
    
    <item>
      <title>group_by()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/group_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/group_by/</guid>
      <description>group_by() Groups the elements of a list based on the given function.
Use map() and fn to map the values of the list to the keys of an object. Use list comprehension to map each element to the appropriate key.
def group_by(lst, fn): return {key : [el for el in lst if fn(el) == key] for key in map(fn, lst)}  from math import floor group_by([6.1, 4.2, 6.3], floor) # {4: [4.</description>
    </item>
    
    <item>
      <title>Hairline border</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/hairline-border/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/hairline-border/</guid>
      <description>Gives an element a border equal to 1 native device pixel in width, which can look very sharp and crisp.
&amp;lt;div class=&amp;quot;hairline-border&amp;quot;&amp;gt;text&amp;lt;/div&amp;gt;  .hairline-border { box-shadow: 0 0 0 1px; } @media (min-resolution: 2dppx) { .hairline-border { box-shadow: 0 0 0 0.5px; } } @media (min-resolution: 3dppx) { .hairline-border { box-shadow: 0 0 0 0.33333333px; } } @media (min-resolution: 4dppx) { .hairline-border { box-shadow: 0 0 0 0.25px; } }  Explanation  box-shadow, when only using spread, adds a pseudo-border which can use subpixels*.</description>
    </item>
    
    <item>
      <title>Hamburger Button</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/hamburger-button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/hamburger-button/</guid>
      <description>Displays a hamburger menu which transitions to a cross on hover.
&amp;lt;div class=&amp;quot;hamburger-menu&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;bar top&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;bar middle&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;bar bottom&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  .hamburger-menu { display: flex; flex-direction: column; flex-wrap: wrap; justify-content: space-between; height: 2.5rem; width: 2.5rem; cursor: pointer; } .hamburger-menu .bar { height: 5px; background: black; border-radius: 5px; margin: 3px 0px; transform-origin: left; transition: all 0.5s; } .hamburger-menu:hover .top { transform: rotate(45deg); } .hamburger-menu:hover .middle { opacity: 0; } .</description>
    </item>
    
    <item>
      <title>has_duplicates()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/has_duplicates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/has_duplicates/</guid>
      <description> has_duplicates() Returns True if there are duplicate values in a flast list, False otherwise.
Use set() on the given list to remove duplicates, compare its length with the length of the list.
def has_duplicates(lst): return len(lst) != len(set(lst))  x = [1, 2, 3, 4, 5, 5] y = [1, 2, 3, 4, 5] has_duplicates(x) # True has_duplicates(y) # False  </description>
    </item>
    
    <item>
      <title>head()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/head/</guid>
      <description> head() Returns the head of a list.
Use lst[0] to return the first element of the passed list.
def head(lst): return lst[0]  head([1, 2, 3]) # 1  </description>
    </item>
    
    <item>
      <title>Height transition</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/height-transition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/height-transition/</guid>
      <description>Transitions an element&amp;rsquo;s height from 0 to auto when its height is unknown.
&amp;lt;div class=&amp;quot;trigger&amp;quot;&amp;gt; Hover me to see a height transition. &amp;lt;div class=&amp;quot;el&amp;quot;&amp;gt;content&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  .el { transition: max-height 0.5s; overflow: hidden; max-height: 0; } .trigger:hover &amp;gt; .el { max-height: var(--max-height); }  var el = document.querySelector(&#39;.el&#39;) var height = el.scrollHeight el.style.setProperty(&#39;--max-height&#39;, height + &#39;px&#39;)  Explanation  transition: max-height: 0.5s cubic-bezier(...) specifies that changes to max-height should be transitioned over 0.</description>
    </item>
    
    <item>
      <title>Hover shadow box animation</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/hover-shadow-box-animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/hover-shadow-box-animation/</guid>
      <description>Creates a shadow box around the text when it is hovered.
&amp;lt;p class=&amp;quot;hover-shadow-box-animation&amp;quot;&amp;gt;Box it!&amp;lt;/p&amp;gt;  .hover-shadow-box-animation { display: inline-block; vertical-align: middle; transform: perspective(1px) translateZ(0); box-shadow: 0 0 1px transparent; margin: 10px; transition-duration: 0.3s; transition-property: box-shadow, transform; } .hover-shadow-box-animation:hover, .hover-shadow-box-animation:focus, .hover-shadow-box-animation:active { box-shadow: 1px 10px 10px -10px rgba(0, 0, 24, 0.5); transform: scale(1.2); }  Explanation  display: inline-block to set width and length for p element thus making it an inline-block.</description>
    </item>
    
    <item>
      <title>Hover underline animation</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/hover-underline-animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/hover-underline-animation/</guid>
      <description>Creates an animated underline effect when the text is hovered over.
Credit: https://flatuicolors.com/
&amp;lt;p class=&amp;quot;hover-underline-animation&amp;quot;&amp;gt;Hover this text to see the effect!&amp;lt;/p&amp;gt;  .hover-underline-animation { display: inline-block; position: relative; color: #0087ca; } .hover-underline-animation::after { content: &#39;&#39;; position: absolute; width: 100%; transform: scaleX(0); height: 2px; bottom: 0; left: 0; background-color: #0087ca; transform-origin: bottom right; transition: transform 0.25s ease-out; } .hover-underline-animation:hover::after { transform: scaleX(1); transform-origin: bottom left; }  Explanation  display: inline-block makes the block p an inline-block to prevent the underline from spanning the entire parent width rather than just the content (text).</description>
    </item>
    
    <item>
      <title>How to scrape Yahoo Finance</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scrape-yahoo-finance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scrape-yahoo-finance/</guid>
      <description>How to scrape Yahoo Finance and extract fundamental stock market data using Python, LXML, and Pandas In this blog post I’ll show you how to scrape Income Statement, Balance Sheet, and Cash Flow data for companies from Yahoo Finance using Python, LXML, and Pandas.
I’ll use data from Mainfreight NZ (MFT.NZ) as an example, but the code will work for any stock symbol on Yahoo Finance.
The screenshot below shows a Pandas DataFrame with MFT.</description>
    </item>
    
    <item>
      <title>in_range()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/in_range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/in_range/</guid>
      <description> in_range() Checks if the given number falls within the given range.
Use arithmetic comparison to check if the given number is in the specified range. If the second parameter, end, is not specified, the range is considered to be from 0 to start.
def in_range(n, start, end = 0): return start &amp;lt;= n &amp;lt;= end if end &amp;gt;= start else end &amp;lt;= n &amp;lt;= start  in_range(3, 2, 5) # True in_range(3, 4) # True in_range(2, 3, 5) # False in_range(3, 2) # False  </description>
    </item>
    
    <item>
      <title>initial</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/initial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/initial/</guid>
      <description>Returns all the elements of a list except the last one.
Use lst[0:-1] to return all but the last element of the list.
def initial(lst): return lst[0:-1]  initial([1, 2, 3]) # [1,2]  </description>
    </item>
    
    <item>
      <title>initialize_2d_list</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/initialize_2d_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/initialize_2d_list/</guid>
      <description>Initializes a 2D list of given width and height and value.
Use list comprehension and range() to generate h rows where each is a list with length h, initialized with val. If val is not provided, default to None.
def initialize_2d_list(w,h, val = None): return [[val for x in range(w)] for y in range(h)]  initialize_2d_list(2, 2, 0) # [[0,0], [0,0]]  </description>
    </item>
    
    <item>
      <title>initialize_list_with_range</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/initialize_list_with_range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/initialize_list_with_range/</guid>
      <description>Initializes a list containing the numbers in the specified range where start and end are inclusive with their common difference step.
Use list and range() to generate a list of the appropriate length, filled with the desired values in the given range. Omit start to use the default value of 0. Omit step to use the default value of 1.
def initialize_list_with_range(end, start=0, step=1): return list(range(start, end + 1, step))  initialize_list_with_range(5) # [0, 1, 2, 3, 4, 5] initialize_list_with_range(7, 3) # [3, 4, 5, 6, 7] initialize_list_with_range(9, 0, 2) # [0, 2, 4, 6, 8]  </description>
    </item>
    
    <item>
      <title>initialize_list_with_values</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/initialize_list_with_values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/initialize_list_with_values/</guid>
      <description>Initializes and fills a list with the specified value.
Use list comprehension and range() to generate a list of length equal to n, filled with the desired values. Omit val to use the default value of 0.
def initialize_list_with_values(n, val = 0): return [val for x in range(n)]  initialize_list_with_values(5, 2) # [2, 2, 2, 2, 2]  </description>
    </item>
    
    <item>
      <title>intersection</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/intersection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/intersection/</guid>
      <description>Returns a list of elements that exist in both lists.
Create a set from a and b, then use the built-in set operator &amp;amp; to only keep values contained in both sets, then transform the set back into a list.
def intersection(a, b): _a, _b = set(a), set(b) return list(_a &amp;amp; _b)  intersection([1, 2, 3], [4, 3, 2]) # [2, 3]  </description>
    </item>
    
    <item>
      <title>intersection_by</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/intersection_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/intersection_by/</guid>
      <description>Returns a list of elements that exist in both lists, after applying the provided function to each list element of both.
Create a set by applying fn to each element in b, then use list comprehension in combination with fn on a to only keep values contained in both lists.
def intersection_by(a, b, fn): _b = set(map(fn, b)) return [item for item in a if fn(item) in _b]  from math import floor intersection_by([2.</description>
    </item>
    
    <item>
      <title>Introduction to Stock Analysis using Pandas</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/intro-stock-analysis-pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/intro-stock-analysis-pandas/</guid>
      <description>Introduction to Stock Analysis using Pandas  http://www.quantsbin.com/introduction-stock-analysis-pandas1/  As defined in Investopedia A time series is a sequence of numerical data points in successive order. Generally, observation points are successively equally spaced in time. Most of the financial data is in the time series format and hence &amp;ldquo;Financial Time Series Analysis&amp;rdquo; is an important tool for anyone trying to understand the historical movements, predict the future movements or manage the risk associated with the future movements.</description>
    </item>
    
    <item>
      <title>is_anagram</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/is_anagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/is_anagram/</guid>
      <description>Checks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters).
Use s.replace() to remove spaces from both strings. Compare the lengths of the two strings, return False if they are not equal. Use sorted() on both strings and compare the results.
def is_anagram(s1, s2): _str1, _str2 = s1.replace(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;), s2.replace(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;) return False if len(_str1) != len(_str2) else sorted(_str1.lower()) == sorted(_str2.lower())  is_anagram(&amp;quot;anagram&amp;quot;, &amp;quot;Nag a ram&amp;quot;) # True  </description>
    </item>
    
    <item>
      <title>is_divisible</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/is_divisible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/is_divisible/</guid>
      <description>Checks if the first numeric argument is divisible by the second one.
Use the modulo operator (%) to check if the remainder is equal to 0.
def is_divisible(dividend, divisor): return dividend % divisor == 0  is_divisible(6, 3) # True  </description>
    </item>
    
    <item>
      <title>is_even</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/is_even/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/is_even/</guid>
      <description>Returns True if the given number is even, False otherwise.
Checks whether a number is odd or even using the modulo (%) operator. Returns True if the number is even, False if the number is odd.
def is_even(num): return num % 2 == 0  is_even(3) # False  </description>
    </item>
    
    <item>
      <title>is_odd</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/is_odd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/is_odd/</guid>
      <description>Returns True if the given number is odd, False otherwise.
Checks whether a number is even or odd using the modulo (%) operator. Returns True if the number is odd, False if the number is even.
def is_odd(num): return num % 2 != 0  is_odd(3) # True  </description>
    </item>
    
    <item>
      <title>kebab</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/kebab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/kebab/</guid>
      <description>Converts a string to kebab case.
Break the string into words and combine them adding - as a separator, using a regexp.
from re import sub def kebab(s): return sub( r&amp;quot;(\s|_|-)+&amp;quot;,&amp;quot;-&amp;quot;, sub( r&amp;quot;[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+&amp;quot;, lambda mo: mo.group(0).lower(), s))  kebab(&#39;camelCase&#39;) # &#39;camel-case&#39; kebab(&#39;some text&#39;) # &#39;some-text&#39; kebab(&#39;some-mixed_string With spaces_underscores-and-hyphens&#39;) # &#39;some-mixed-string-with-spaces-underscores-and-hyphens&#39; kebab(&#39;AllThe-small Things&#39;) # &amp;quot;all-the-small-things&amp;quot;  </description>
    </item>
    
    <item>
      <title>keys_only</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/keys_only/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/keys_only/</guid>
      <description>Returns a flat list of all the keys in a flat dictionary.
Use dict.keys() to return the keys in the given dictionary. Return a list() of the previous result.
def keys_only(flat_dict): return list(flat_dict.keys())  ages = { &amp;quot;Peter&amp;quot;: 10, &amp;quot;Isabel&amp;quot;: 11, &amp;quot;Anna&amp;quot;: 9, } keys_only(ages) # [&#39;Peter&#39;, &#39;Isabel&#39;, &#39;Anna&#39;]  </description>
    </item>
    
    <item>
      <title>last</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/last/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/last/</guid>
      <description>Returns the last element in a list.
use lst[-1] to return the last element of the passed list.
def last(lst): return lst[-1]  last([1, 2, 3]) # 3  </description>
    </item>
    
    <item>
      <title>Last item with remaining available height</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/last-item-with-remaining-available-height/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/last-item-with-remaining-available-height/</guid>
      <description>Take advantage of available viewport space by giving the last element the remaining available space in current viewport, even when resizing the window.
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;div&amp;gt;Div 1&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Div 2&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Div 3&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  html, body { height: 100%; margin: 0; } .container { height: 100%; display: flex; flex-direction: column; } .container &amp;gt; div:last-child { background-color: tomato; flex: 1; }  Explanation  height: 100% set the height of container as viewport height.</description>
    </item>
    
    <item>
      <title>lcm</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/lcm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/lcm/</guid>
      <description>Returns the least common multiple of a list of numbers.
Use functools.reduce(), math.gcd() and lcm(x,y) = x * y / gcd(x,y) over the given list.
from functools import reduce from math import gcd def lcm(numbers): return reduce((lambda x, y: int(x * y / gcd(x, y))), numbers)  lcm([12, 7]) # 84 lcm([1, 3, 4, 5]) # 60  </description>
    </item>
    
    <item>
      <title>Learning Full Stack Web Development</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/html/learning-web-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/html/learning-web-development/</guid>
      <description>The Ultimate Guide to Learning Full Stack Web Development in 6 months, for $30 Hey everyone! In this article I’m going to show you how to go from knowing little to nothing about Web Development to Junior Full Stack Developer in just six months, for under $30.
This article will cover everything you need to know! You’ll first learn the basics of Web Development with an online coding bootcamp ($15).</description>
    </item>
    
    <item>
      <title>Lobotomized Owl Selector</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/lobotomizedowlselector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/lobotomizedowlselector/</guid>
      <description>Sets an automatically inherited margin for all elements that follow other elements in the document.
&amp;lt;div&amp;gt; &amp;lt;div&amp;gt;Parent 01&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Parent 02 &amp;lt;div&amp;gt;Child 01&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Child 02&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Parent 03&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  * + * { margin-top: 1.5em; }  Explanation  View this link for a detailed explanation. In this example, all elements in the flow of the document that follow other elements will receive margin-top: 1.5em. This example assumes that the paragraphs&amp;rsquo; font-size is 1em and its line-height is 1.</description>
    </item>
    
    <item>
      <title>longest_item</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/longest_item/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/longest_item/</guid>
      <description>Takes any number of iterable objects or objects with a length property and returns the longest one. If multiple objects have the same length, the first one will be returned.
Use max() with len as the key to return the item with the greatest length.
def longest_item(*args): return max(args, key=len)  longest_item(&#39;this&#39;, &#39;is&#39;, &#39;a&#39;, &#39;testcase&#39;) # &#39;testcase&#39; longest_item([1, 2, 3], [1, 2], [1, 2, 3, 4, 5]) # [1, 2, 3, 4, 5] longest_item([1, 2, 3], &#39;foobar&#39;) # &#39;foobar&#39;  </description>
    </item>
    
    <item>
      <title>map_values</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/map_values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/map_values/</guid>
      <description>Creates an object with the same keys as the provided object and values generated by running the provided function for each value.
Use dict.keys() to iterate over the object&amp;rsquo;s keys, assigning the values produced by fn to each key of a new object.
def map_values(obj, fn): ret = {} for key in obj.keys(): ret[key] = fn(obj[key]) return ret  users = { &#39;fred&#39;: { &#39;user&#39;: &#39;fred&#39;, &#39;age&#39;: 40 }, &#39;pebbles&#39;: { &#39;user&#39;: &#39;pebbles&#39;, &#39;age&#39;: 1 } } map_values(users, lambda u : u[&#39;age&#39;]) # {&#39;fred&#39;: 40, &#39;pebbles&#39;: 1}  </description>
    </item>
    
    <item>
      <title>Masonry Layout</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/masonry-layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/masonry-layout/</guid>
      <description>Creates a vertical Masonry layout using pure HTML and CSS.
&amp;lt;div class=&amp;quot;masonry-container&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;masonry-columns&amp;quot;&amp;gt; &amp;lt;img class=&amp;quot;masonry-brick&amp;quot; src=&amp;quot;https://picsum.photos/id/1016/384/256&amp;quot; alt=&amp;quot;An image&amp;quot;&amp;gt; &amp;lt;img class=&amp;quot;masonry-brick&amp;quot; src=&amp;quot;https://picsum.photos/id/1025/495/330&amp;quot; alt=&amp;quot;Another image&amp;quot;&amp;gt; &amp;lt;img class=&amp;quot;masonry-brick&amp;quot; src=&amp;quot;https://picsum.photos/id/1024/192/128&amp;quot; alt=&amp;quot;Another image&amp;quot;&amp;gt; &amp;lt;img class=&amp;quot;masonry-brick&amp;quot; src=&amp;quot;https://picsum.photos/id/1028/518/345&amp;quot; alt=&amp;quot;One more image&amp;quot;&amp;gt; &amp;lt;img class=&amp;quot;masonry-brick&amp;quot; src=&amp;quot;https://picsum.photos/id/1035/585/390&amp;quot; alt=&amp;quot;And another one&amp;quot;&amp;gt; &amp;lt;img class=&amp;quot;masonry-brick&amp;quot; src=&amp;quot;https://picsum.photos/id/1074/384/216&amp;quot; alt=&amp;quot;Last one&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  /* Container */ .masonry-container { --column-count-small: 1; --column-count-medium: 2; --column-count-large: 3; --column-gap: 0.125rem; padding: var(--column-gap); } /* Columns */ .masonry-columns { column-gap: var(--column-gap); column-count: var(--column-count-small); column-width: calc(1 / var(--column-count-small) * 100%); } @media only screen and (min-width: 640px) { .</description>
    </item>
    
    <item>
      <title>max_by</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/max_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/max_by/</guid>
      <description>Returns the maximum value of a list, after mapping each element to a value using the provided function.
Use map() with fn to map each element to a value using the provided function, use max() to return the maximum value.
def max_by(lst, fn): return max(map(fn, lst))  max_by([{ &#39;n&#39;: 4 }, { &#39;n&#39;: 2 }, { &#39;n&#39;: 8 }, { &#39;n&#39;: 6 }], lambda v : v[&#39;n&#39;]) # 8  </description>
    </item>
    
    <item>
      <title>max_element_index</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/max_element_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/max_element_index/</guid>
      <description>Returns the index of the element with the maximum value in a list.
Use max() and list.index() to get the maximum value in the list and return its index.
def max_element_index(arr): return arr.index(max(arr))  max_element_index([5, 8, 9, 7, 10, 3, 0]) # 4  </description>
    </item>
    
    <item>
      <title>max_n</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/max_n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/max_n/</guid>
      <description> max_n Returns the n maximum elements from the provided list. If n is greater than or equal to the provided list&amp;rsquo;s length, then return the original list (sorted in descending order).
Use sorted() to sort the list, [:n] to get the specified number of elements. Omit the second argument, n, to get a one-element list.
def max_n(lst, n=1): return sorted(lst, reverse=True)[:n]  max_n([1, 2, 3]) # [3] max_n([1, 2, 3], 2) # [3,2]  </description>
    </item>
    
    <item>
      <title>median</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/median/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/median/</guid>
      <description>median Finds the median of a list of numbers.
Sort the numbers of the list using list.sort() and find the median, which is either the middle element of the list if the list length is odd or the average of the two middle elements if the list length is even.
statistics.median() provides similar functionality to this snippet.
def median(list): list.sort() list_length = len(list) if list_length % 2 == 0: return (list[int(list_length / 2) - 1] + list[int(list_length / 2)]) / 2 return list[int(list_length / 2)]  median([1,2,3]) # 2 median([1,2,3,4]) # 2.</description>
    </item>
    
    <item>
      <title>Merge Two Dictionaries</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/merge-two-dictionaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/dictionary/merge-two-dictionaries/</guid>
      <description>How to Merge Two Dictionaries in Python: Dictionary Comprehensions and Unpacking POSTED ON JUNE 7, 2019 BY JEREMY GRIFSKI
When I’m trying to find a topic for this series, I either decide to write about something I just learned, or I choose to write about something I found from the list of top Python questions on Stack Overflow. Today, I’m hitting both by covering how to merge two dictionaries in Python.</description>
    </item>
    
    <item>
      <title>merge_two_dictionaries()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/merge_two_dictionaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/merge_two_dictionaries/</guid>
      <description>merge_two_dictionaries()  source: 
 # How to merge two dictionaries # in Python 3.5+: x = {&#39;a&#39;: 1, &#39;b&#39;: 2} y = {&#39;b&#39;: 3, &#39;c&#39;: 4} z = {**x, **y} z # {&#39;c&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 3}  # Why Python Is Great: # Function argument unpacking def myfunc(x, y, z): print(x, y, z) tuple_vec = (1, 0, 1) dict_vec = {&#39;x&#39;: 1, &#39;y&#39;: 0, &#39;z&#39;: 1} &amp;gt;&amp;gt;&amp;gt; myfunc(*tuple_vec) 1, 0, 1 &amp;gt;&amp;gt;&amp;gt; myfunc(**dict_vec) 1, 0, 1  # The lambda keyword in Python provides a # shortcut for declaring small and # anonymous functions: &amp;gt;&amp;gt;&amp;gt; add = lambda x, y: x + y &amp;gt;&amp;gt;&amp;gt; add(5, 3) 8 # You could declare the same add() # function with the def keyword: &amp;gt;&amp;gt;&amp;gt; def add(x, y): .</description>
    </item>
    
    <item>
      <title>min_by</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/min_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/min_by/</guid>
      <description>Returns the minimum value of a list, after mapping each element to a value using the provided function.
Use map() with fn to map each element to a value using the provided function, use min() to return the minimum value.
def min_by(lst, fn): return min(map(fn, lst))  min_by([{ &#39;n&#39;: 4 }, { &#39;n&#39;: 2 }, { &#39;n&#39;: 8 }, { &#39;n&#39;: 6 }], lambda v : v[&#39;n&#39;]) # 2  </description>
    </item>
    
    <item>
      <title>min_n</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/min_n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/min_n/</guid>
      <description>Returns the n minimum elements from the provided list. If n is greater than or equal to the provided list&amp;rsquo;s length, then return the original list (sorted in ascending order).
Use sorted() to sort the list,[:n]to get the specified number of elements. Omit the second argument,n`, to get a one-element list.
def min_n(lst, n=1): return sorted(lst, reverse=False)[:n]  min_n([1, 2, 3]) # [1] min_n([1, 2, 3], 2) # [1,2]  </description>
    </item>
    
    <item>
      <title>most_frequent</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/most_frequent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/most_frequent/</guid>
      <description>Returns the most frequent element in a list.
Use set(list) to get the unique values in the list combined with max() to find the element that has the most appearances.
def most_frequent(list): return max(set(list), key=list.count)  most_frequent([1, 2, 1, 2, 3, 2, 1, 4, 2]) #2  </description>
    </item>
    
    <item>
      <title>Mouse cursor gradient tracking</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/mouse-cursor-gradient-tracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/mouse-cursor-gradient-tracking/</guid>
      <description>A hover effect where the gradient follows the mouse cursor.
&amp;lt;button class=&amp;quot;mouse-cursor-gradient-tracking&amp;quot;&amp;gt;&amp;lt;span&amp;gt;Hover me&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;  .mouse-cursor-gradient-tracking { position: relative; background: #7983ff; padding: 0.5rem 1rem; font-size: 1.2rem; border: none; color: white; cursor: pointer; outline: none; overflow: hidden; } .mouse-cursor-gradient-tracking span { position: relative; } .mouse-cursor-gradient-tracking::before { --size: 0; content: &#39;&#39;; position: absolute; left: var(--x); top: var(--y); width: var(--size); height: var(--size); background: radial-gradient(circle closest-side, pink, transparent); transform: translate(-50%, -50%); transition: width 0.2s ease, height 0.</description>
    </item>
    
    <item>
      <title>n_times_string</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/n_times_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/n_times_string/</guid>
      <description>Prints out the same string a defined number of times.
Repeat the string n times, using the * operator.
def n_times_string(s, n): return (s * n)  n_times_string(&#39;py&#39;, 4) #&#39;pypypypy&#39;  </description>
    </item>
    
    <item>
      <title>Navigation list item hover and focus effect</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/navigation-list-item-hover-and-focus-effect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/navigation-list-item-hover-and-focus-effect/</guid>
      <description>Fancy hover and focus effect at navigation items using transform CSS property.
&amp;lt;nav&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#/&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#/&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt;  nav ul { list-style: none; margin: 0; padding: 0; overflow: hidden; } nav li { float: left; } nav li a { position: relative; display: block; color: #222; text-align: center; padding: 8px 12px; text-decoration: none; } li a::before { position: absolute; content: &amp;quot;&amp;quot;; width: 100%; height: 100%; bottom: 0; left: 0; background-color: #f6c126; z-index: -1; transform: scale(0); transition: transform 0.</description>
    </item>
    
    <item>
      <title>none</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/none/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/none/</guid>
      <description>Returns False if the provided function returns True for at least one element in the list, True otherwise.
Use all() and fn to check if fn returns False for all the elements in the list.
def none(lst, fn=lambda x: x): return all(not fn(x) for x in lst)  none([0, 1, 2, 0], lambda x: x &amp;gt;= 2 ) # False none([0, 0, 0]) # True  </description>
    </item>
    
    <item>
      <title>Offscreen</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/offscreen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/offscreen/</guid>
      <description>A bulletproof way to completely hide an element visually and positionally in the DOM while still allowing it to be accessed by JavaScript and readable by screen readers. This method is very useful for accessibility (ADA) development when more context is needed for visually-impaired users. As an alternative to display: none which is not readable by screen readers or visibility: hidden which takes up physical space in the DOM.</description>
    </item>
    
    <item>
      <title>offset</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/offset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/offset/</guid>
      <description>Moves the specified amount of elements to the end of the list.
Use lst[offset:] and lst[:offset] to get the two slices of the list and combine them before returning.
def offset(lst, offset): return lst[offset:] + lst[:offset]  offset([1, 2, 3, 4, 5], 2) # [3, 4, 5, 1, 2] offset([1, 2, 3, 4, 5], -2) # [4, 5, 1, 2, 3]  </description>
    </item>
    
    <item>
      <title>Overflow scroll gradient</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/overflow-scroll-gradient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/overflow-scroll-gradient/</guid>
      <description>Adds a fading gradient to an overflowing element to better indicate there is more content to be scrolled.
&amp;lt;div class=&amp;quot;overflow-scroll-gradient&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;overflow-scroll-gradient__scroller&amp;quot;&amp;gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. &amp;lt;br /&amp;gt; Iure id exercitationem nulla qui repellat laborum vitae, &amp;lt;br /&amp;gt; molestias tempora velit natus. Quas, assumenda nisi. &amp;lt;br /&amp;gt; Quisquam enim qui iure, consequatur velit sit? &amp;lt;br /&amp;gt; Lorem ipsum dolor sit amet consectetur adipisicing elit.&amp;lt;br /&amp;gt; Iure id exercitationem nulla qui repellat laborum vitae, &amp;lt;br /&amp;gt; molestias tempora velit natus.</description>
    </item>
    
    <item>
      <title>palindrome</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/palindrome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/palindrome/</guid>
      <description>Returns True if the given string is a palindrome, False otherwise.
Use s.lower() and re.sub() to convert to lowercase and remove non-alphanumeric characters from the given string. Then, compare the new string with its reverse.
from re import sub def palindrome(s): s = sub(&#39;[\W_]&#39;, &#39;&#39;, s.lower()) return s == s[::-1]  palindrome(&#39;taco cat&#39;) # True  </description>
    </item>
    
    <item>
      <title>Part I</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/web_applications_with_flask/part-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/web_applications_with_flask/part-1/</guid>
      <description>Python Web Applications with Flask – Part I Table of Contents  Articles in this series: What we are building Starting off  First principles A note on the repository structure  Starting the project  Dependencies  Outgrowing small A place for everything  Domain models Data translation layer Views Application setup Configuration and command line runner  And everything in its place Wrapping Up  Please note: This is a collaboration piece between Michael Herman, from Real Python, and Sean Vieira, a Python developer from De Deo Designs.</description>
    </item>
    
    <item>
      <title>Part II</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/web_applications_with_flask/part-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/web_applications_with_flask/part-2/</guid>
      <description>Python Web Applications with Flask – Part II Articles in this series:
 Part I: Application setup Part II: Setup user accounts, Templates, Static files ← CURRENT ARTICLE Part III: Testing (unit and integration), Debugging, and Error handling  Welcome back to the Flask-Tracking development series! For those of you who are just joining us, we are implementing a web analytics application that conforms to this napkin specification. For all those of you following along at home, you may check out today’s code with:</description>
    </item>
    
    <item>
      <title>Part III</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/web_applications_with_flask/part-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/falsk/web_applications_with_flask/part-3/</guid>
      <description>Python Web Applications with Flask – Part III Articles in this series:
 Part I: Application setup Part II: Setup user accounts, Templates, Static files Part III: Testing (unit and integration), Debugging, and Error handling ← CURRENT ARTICLE  Welcome back to the Flask-Tracking development series! For those of you who are just joining us, we are implementing a web analytics application that conforms to this napkin specification. For all those of you following along at home, you may check out today’s code with:</description>
    </item>
    
    <item>
      <title>Popout menu</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/popout-menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/popout-menu/</guid>
      <description>Reveals an interactive popout menu on hover and focus.
&amp;lt;div class=&amp;quot;reference&amp;quot; tabindex=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;popout-menu&amp;quot;&amp;gt;Popout menu&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;  .reference { position: relative; background: tomato; width: 100px; height: 100px; } .popout-menu { position: absolute; visibility: hidden; left: 100%; background: #333; color: white; padding: 15px; } .reference:hover &amp;gt; .popout-menu, .reference:focus &amp;gt; .popout-menu, .reference:focus-within &amp;gt; .popout-menu { visibility: visible; }  Explanation  position: relative on the reference parent establishes a Cartesian positioning context for its child.</description>
    </item>
    
    <item>
      <title>Portfolio Optimization in Python</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/portfolio-optimization-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/portfolio-optimization-python/</guid>
      <description>Portfolio Optimization in Python 5/31/2018 Written by DD
In this post we will demonstrate how to use python to calculate the optimal portfolio and visualize the efficient frontier.
In this post we will only show the code with minor explanations.
Lets begin with loading the modules.
import pandas as pd import numpy as np import matplotlib.pyplot as plt import pandas_datareader as web  Next we will get the stock tickers and the price data.</description>
    </item>
    
    <item>
      <title>Portfolio Optimization Methods</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/portfolio-optimization-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/portfolio-optimization-methods/</guid>
      <description>Portfolio Optimization Methods When constructing a multi-asset portfolio, coming up with the strategy to allocate weights to the portfolio components is a very important step in the process. Coming up with weights for a portfolio given its components can be done in a number of ways and is a question that boggles even the most skilled managers. So what is the most optimal way to do this? in this article we will try to introduce the most widely used methods and understand the intuition behind them.</description>
    </item>
    
    <item>
      <title>Pretty text underline</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/pretty-text-underline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/pretty-text-underline/</guid>
      <description>A nicer alternative to text-decoration: underline or &amp;lt;u&amp;gt;&amp;lt;/u&amp;gt; where descenders do not clip the underline. Natively implemented as text-decoration-skip-ink: auto but it has less control over the underline.
&amp;lt;p class=&amp;quot;pretty-text-underline&amp;quot;&amp;gt;Pretty text underline without clipping descending letters.&amp;lt;/p&amp;gt;  .pretty-text-underline { display: inline; text-shadow: 1px 1px #f5f6f9, -1px 1px #f5f6f9, -1px -1px #f5f6f9, 1px -1px #f5f6f9; background-image: linear-gradient(90deg, currentColor 100%, transparent 100%); background-position: bottom; background-repeat: no-repeat; background-size: 100% 1px; } .pretty-text-underline::-moz-selection { background-color: rgba(0, 150, 255, 0.</description>
    </item>
    
    <item>
      <title>Pulse loader</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/pulse-loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/pulse-loader/</guid>
      <description>Creates a pulse effect loader animation using the animation-delay property.
&amp;lt;div class=&amp;quot;ripple-loader&amp;quot;&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  .ripple-loader { position: relative; width: 64px; height: 64px; } .ripple-loader div { position: absolute; border: 4px solid #76ff03; border-radius: 50%; animation: ripple-loader 1s ease-out infinite; } .ripple-loader div:nth-child(2) { animation-delay: -0.5s; } @keyframes ripple-loader { 0% { top: 32px; left: 32px; width: 0; height: 0; opacity: 1; } 100% { top: 0; left: 0; width: 64px; height: 64px; opacity: 0; } }  Explanation  Use @keyframes to define an animation at two points in the cycle, start (0%), where the two &amp;lt;div&amp;gt; elements have no width or height and are positioned at the center and end (100%), where both &amp;lt;div&amp;gt; elements have increased width and height, but their position is reset to 0.</description>
    </item>
    
    <item>
      <title>Python - Date &amp; Time</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-date-and-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-date-and-time/</guid>
      <description>Python - Date &amp;amp; Time A Python program can handle date and time in several ways. Converting between date formats is a common chore for computers. Python&amp;rsquo;s time and calendar modules help track dates and times.
What is Tick? Time intervals are floating-point numbers in units of seconds. Particular instants in time are expressed in seconds since 12:00am, January 1, 1970(epoch).
There is a popular time module available in Python which provides functions for working with times, and for converting between representations.</description>
    </item>
    
    <item>
      <title>Python 101 สําหรับมือใหม่</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-101-for-beginner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/python/python-101-for-beginner/</guid>
      <description>Python 101 สําหรับมือใหม่ Interpreted Language (ความหมายง่ายๆของภาษาแบบนี้คือ มันสามารถทํางานได้บนทุกแพลตฟอร์มขอให้มีแค่ interpreter ให้มันก็พอ และ อีกอย่างคือมันจะทําการแปลงจากโค้ดที่เรามีไปเป็นภาษาที่เครื่องเข้าใจแบบ on the fly)
ถ้าเทียบกับการพัฒนาโปรแกรมด้วย Java การเขียน Python นี้จะแตกต่างแล้วก็เห็นได้ชัดเลยว่ามันเร็วกว่ามากๆ เช่นตัวอย่างนี้เลย
public class { public static void main(String[]args) { System.out.println(&amp;quot;Hello, world!&amp;quot;); } }  ตัวอย่างภาษา Java
print(&amp;quot;Hello, world!&amp;quot;)
ตัวอย่างภาษา Python
แค่เทียบก็เห็นละว่า Line of code น้อยกว่ามาก เขียนสั้นง่ายๆดี
Basic Python Syntax Indent
ปกติภาษาเขียนโปรแกรมทั่วไปจะต้องมี วงเล็บ (Bracket – {}) เพื่อระบุว่าอะไรคือขอบเขตของมัน แต่ Python ไม่ได้ใช้วงเล็บ แต่ใช้ Indent หรือ Space แทน
public class { public static void main(String[]args) { System.</description>
    </item>
    
    <item>
      <title>Python Heapq for Beginners</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/python-heapq-for-beginners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/python-heapq-for-beginners/</guid>
      <description>How to using Python Heapq for Beginners (With Examples) Often when working with collections of data, you may want to find the smallest or largest item. It&amp;rsquo;s easy enough to write a function that iterates through the items and returns the smallest or largest one, or use the builtin min(), max(), or sorted() functions. Another interesting way may be implementing a heap (priority) queue.
Interestingly, the heapq module uses a regular Python list to create Heap.</description>
    </item>
    
    <item>
      <title>Quantitative Trading Strategies</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_2/</guid>
      <description>Python for Finance, Part 2: Intro to Quantitative Trading Strategies In Python for Finance, Part I, we focused on using Python and Pandas to
 retrieve financial time-series from free online sources (Yahoo), format the data by filling missing observations and aligning them, calculate some simple indicators such as rolling moving averages and visualise the final time-series.  As a reminder, the dataframe containing the three “cleaned” price timeseries has the following format:</description>
    </item>
    
    <item>
      <title>rads_to_degrees</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/rads_to_degrees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/rads_to_degrees/</guid>
      <description>Converts an angle from radians to degrees.
Use math.pi and the radian to degree formula to convert the angle from radians to degrees.
from math import pi def rads_to_degrees(rad): return (rad * 180.0) / math.pi  from math import pi rads_to_degrees(math.pi / 2) # 90.0  </description>
    </item>
    
    <item>
      <title>Read and Write Files</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/pandas/read-and-write-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/pandas/read-and-write-files/</guid>
      <description>Pandas: How to Read and Write Files Table of Contents  Installing Pandas Preparing Data Using the Pandas read_csv() and .to_csv() Functions  Write a CSV File Read a CSV File  Using Pandas to Write and Read Excel Files  Write an Excel File Read an Excel File  Understanding the Pandas IO API  Write Files Read Files  Working With Different File Types  CSV Files JSON Files HTML Files Excel Files SQL Files Pickle Files  Working With Big Data  Compress and Decompress Files Choose Columns Omit Rows Force Less Precise Data Types Use Chunks to Iterate Through Files  Conclusion  Pandas is a powerful and flexible Python package that allows you to work with labeled and time series data.</description>
    </item>
    
    <item>
      <title>Regular Expressions</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/python-regular-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/python-regular-expressions/</guid>
      <description>Tutorial: Python Regex (Regular Expressions) for Data Scientists Diving headlong into data sets is a part of the mission for anyone working in data science. Often, this means number-crunching, but what do we do when our data set is primarily text-based? We can use regular expressions. In this tutorial, we’re going to take a closer look at how to use regular expressions (regex) in Python.
Regular expressions (regex) are essentially text patterns that you can use to automate searching through and replacing elements within strings of text.</description>
    </item>
    
    <item>
      <title>Requests and BeautifulSoup</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/request-and-beautifulsoup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/request-and-beautifulsoup/</guid>
      <description>Ultimate Guide to Web Scraping with Python Part 1: Requests and BeautifulSoup After the 2016 election I became much more interested in media bias and the manipulation of individuals through advertising. This series will be a walkthrough of a web scraping project that monitors political news from both left and right wing media outlets and performs an analysis on the rhetoric being used, the ads being displayed, and the sentiment of certain topics.</description>
    </item>
    
    <item>
      <title>Reset all styles</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/reset-all-styles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/reset-all-styles/</guid>
      <description>Resets all styles to default values with one property. This will not affect direction and unicode-bidi properties.
&amp;lt;div class=&amp;quot;reset-all-styles&amp;quot;&amp;gt; &amp;lt;h5&amp;gt;Title&amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure id exercitationem nulla qui repellat laborum vitae, molestias tempora velit natus. Quas, assumenda nisi. Quisquam enim qui iure, consequatur velit sit? &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt;  .reset-all-styles { all: initial; }  Explanation  The all property allows you to reset all styles (inherited or not) to default values.</description>
    </item>
    
    <item>
      <title>reverse_string</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/reverse_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/reverse_string/</guid>
      <description>Returns the reverse of a string.
Use string slicing to reverse the string.
def reverse_string(s): return s[::-1]  reverse_string(&amp;quot;snippet&amp;quot;) #&amp;quot;teppins&amp;quot;  </description>
    </item>
    
    <item>
      <title>sample</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/sample/</guid>
      <description>Returns a random element from a list.
Use random.randint() to generate a random number that corresponds to an index in the list, return the element at that index.
random.sample() provides similar functionality to this snippet.
from random import randint def sample(lst): return lst[randint(0, len(lst) - 1)]  sample([3, 7, 9, 11]) # 9  </description>
    </item>
    
    <item>
      <title>Shape separator</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/shape-separator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/shape-separator/</guid>
      <description>Uses an SVG shape to separate two different blocks to create more a interesting visual appearance compared to standard horizontal separation.
&amp;lt;div class=&amp;quot;shape-separator&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;  .shape-separator { position: relative; height: 48px; background: #333; } .shape-separator::after { content: &#39;&#39;; background-image: url(&amp;quot;data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 24 12&#39;%3E%3Cpath d=&#39;m12 0l12 12h-24z&#39; fill=&#39;%23fff&#39;/%3E%3C/svg%3E&amp;quot;); position: absolute; width: 100%; height: 12px; bottom: 0; }  Explanation  position: relative on the element establishes a Cartesian positioning context for pseudo elements.</description>
    </item>
    
    <item>
      <title>shuffle</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/shuffle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/shuffle/</guid>
      <description>Randomizes the order of the values of an list, returning a new list.
Uses the Fisher-Yates algorithm to reorder the elements of the list.
random.shuffle provides similar functionality to this snippet.
from copy import deepcopy from random import randint def shuffle(lst): temp_lst = deepcopy(lst) m = len(temp_lst) while (m): m -= 1 i = randint(0, m) temp_lst[m], temp_lst[i] = temp_lst[i], temp_lst[m] return temp_lst  foo = [1,2,3] shuffle(foo) # [2,3,1], foo = [1,2,3]  </description>
    </item>
    
    <item>
      <title>Sibling fade</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/sibling-fade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/sibling-fade/</guid>
      <description>Fades out the siblings of a hovered item.
&amp;lt;div class=&amp;quot;sibling-fade&amp;quot;&amp;gt; &amp;lt;span&amp;gt;Item 1&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Item 2&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Item 3&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Item 4&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Item 5&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Item 6&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt;  span { padding: 0 1rem; transition: opacity 0.2s; } .sibling-fade:hover span:not(:hover) { opacity: 0.5; }  Explanation  transition: opacity 0.2s specifies that changes to opacity will be transitioned over 0.2 seconds. .sibling-fade:hover span:not(:hover) specifies that when the parent is hovered, select any span children that are not currently being hovered and change their opacity to 0.</description>
    </item>
    
    <item>
      <title>similarity</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/similarity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/similarity/</guid>
      <description>Returns a list of elements that exist in both lists.
Use list comprehension on a to only keep values contained in both lists.
def similarity(a, b): return [item for item in a if item in b]  similarity([1, 2, 3], [1, 2, 4]) # [1, 2]  </description>
    </item>
    
    <item>
      <title>snake</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/snake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/snake/</guid>
      <description>Converts a string to snake case.
Break the string into words and combine them adding _ as a separator, using a regexp.
from re import sub def snake(s): return &#39;_&#39;.join( sub(&#39;([A-Z][a-z]+)&#39;, r&#39; \1&#39;, sub(&#39;([A-Z]+)&#39;, r&#39; \1&#39;, s.replace(&#39;-&#39;, &#39; &#39;))).split()).lower()  snake(&#39;camelCase&#39;) # &#39;camel_case&#39; snake(&#39;some text&#39;) # &#39;some_text&#39; snake(&#39;some-mixed_string With spaces_underscores-and-hyphens&#39;) # &#39;some_mixed_string_with_spaces_underscores_and_hyphens&#39; snake(&#39;AllThe-small Things&#39;) # &amp;quot;all_the_small_things&amp;quot;  </description>
    </item>
    
    <item>
      <title>some</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/some/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/some/</guid>
      <description>Returns True if the provided function returns True for at least one element in the list, False otherwise.
Use any() in combination with map() and fn to check if fn returns True for any element in the list.
def some(lst, fn=lambda x: x): return any(map(fn, lst))  some([0, 1, 2, 0], lambda x: x &amp;gt;= 2 ) # True some([0, 0, 1, 0]) # True  </description>
    </item>
    
    <item>
      <title>split_lines</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/split_lines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/split_lines/</guid>
      <description>Splits a multiline string into a list of lines.
Use s.split() and &#39;\n&#39; to match line breaks and create a list.
str.splitlines() provides similar functionality to this snippet.
def split_lines(s): return s.split(&#39;\n&#39;)  split_lines(&#39;This\nis a\nmultiline\nstring.\n&#39;) # [&#39;This&#39;, &#39;is a&#39;, &#39;multiline&#39;, &#39;string.&#39; , &#39;&#39;]  </description>
    </item>
    
    <item>
      <title>spread</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/spread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/spread/</guid>
      <description>Flattens a list, by spreading its elements into a new list.
Loop over elements, use list.extend() if the element is a list, list.append() otherwise.
def spread(arg): ret = [] for i in arg: ret.extend(i) if isinstance(i, list) else ret.append(i) return ret  spread([1, 2, 3, [4, 5, 6], [7], 8, 9]) # [1, 2, 3, 4, 5, 6, 7, 8, 9]  </description>
    </item>
    
    <item>
      <title>Start Django RestFramework</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/django/django-rest-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/django/django-rest-framework/</guid>
      <description>เริ่มต้นใช้งาน Django RestFramework ปัจจุบันการพัฒนาเวปไซด์จะแยกการพัฒนาออกเป็น FrontEnd (เช่น React, Angular, Vue) และ BackEnd ( เช่น Django ) ซึ่งสิ่งที่ใช้เป็นสื่อกลางในการแลกเปลี่ยนข้อมูลกันระหว่าง FrontEnd และ BackEnd คือ Rest API นั่นเอง ในบทความนี้จะเป็นการอธิบายการสร้าง BackEnd ให้รองรับ Rest API ด้วย Django โดยได้มีการเลือกใช้ Library ชื่อ Django Rest framework เพื่อช่วยให้การพัฒนา REST API ทำได้อย่างง่ายดายและรวดเร็ว
สิ่งที่ต้องเตรียม  Python 3.7 ความรู้ด้านการเขียน Django ขั้นพื้นฐาน ( สร้าง model และเขียน view ได้ ) ติดตั้ง package พื้นฐานด้วยคำสั่งต่อไปนี้
$ pip install -r requirements.txt  ทำความรู้จักกับ REST API REST API คือข้อกำหนดที่ใช้ในการแลกเปลี่ยนข้อมูลระหว่าง FrontEnd และ BackEnd โดยทั่วไปข้อกำหนดนี้จะถูกใช้งานอยู่บน HTTP Protocol</description>
    </item>
    
    <item>
      <title>Stock Portfolio Analyses</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-1/</guid>
      <description>Python for Finance: Stock Portfolio Analyses  Written with StackEdit.
 My two most recent blog posts were about Scaling Analytical Insights with Python; part 1 can be found here and part 2 can be found here. It has been several months since I wrote those, largely due to the fact that I relocated my family to Seattle to join Amazon in November; I’ve spent most of the time on my primary project determining our global rollout plan and related business intelligence roadmap.</description>
    </item>
    
    <item>
      <title>sum_by</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/sum_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/sum_by/</guid>
      <description>Returns the sum of a list, after mapping each element to a value using the provided function.
Use map() with fn to map each element to a value using the provided function, use sum() to return the sum of the values.
def sum_by(lst, fn): return sum(map(fn, lst))  sum_by([{ &#39;n&#39;: 4 }, { &#39;n&#39;: 2 }, { &#39;n&#39;: 8 }, { &#39;n&#39;: 6 }], lambda v : v[&#39;n&#39;]) # 20  </description>
    </item>
    
    <item>
      <title>symmetric_difference</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/symmetric_difference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/symmetric_difference/</guid>
      <description>Returns the symmetric difference between two iterables, without filtering out duplicate values.
Create a set from each list, then use list comprehension on each one to only keep values not contained in the previously created set of the other.
def symmetric_difference(a, b): _a, _b = set(a), set(b) return [item for item in a if item not in _b] + [item for item in b if item not in _a]  symmetric_difference([1, 2, 3], [1, 2, 4]) # [3, 4]  </description>
    </item>
    
    <item>
      <title>symmetric_difference_by</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/symmetric_difference_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/symmetric_difference_by/</guid>
      <description>Returns the symmetric difference between two lists, after applying the provided function to each list element of both.
Create a set by applying fn to each element in every list, then use list comprehension in combination with fn on each one to only keep values not contained in the previously created set of the other.
def symmetric_difference_by(a, b, fn): _a, _b = set(map(fn, a)), set(map(fn, b)) return [item for item in a if fn(item) not in _b] + [item for item in b if fn(item) not in _a]  from math import floor symmetric_difference_by([2.</description>
    </item>
    
    <item>
      <title>System font stack</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/system-font-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/system-font-stack/</guid>
      <description>Uses the native font of the operating system to get close to a native app feel.
&amp;lt;p class=&amp;quot;system-font-stack&amp;quot;&amp;gt;This text uses the system font.&amp;lt;/p&amp;gt;  .system-font-stack { font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; }  Explanation  The browser looks for each successive font, preferring the first one if possible, and falls back to the next if it cannot find the font (on the system or defined in CSS).</description>
    </item>
    
    <item>
      <title>tail</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/tail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/tail/</guid>
      <description>Returns all elements in a list except for the first one.
Return lst[1:] if the list&amp;rsquo;s length is more than 1, otherwise, return the whole list.
def tail(lst): return lst[1:] if len(lst) &amp;gt; 1 else lst  tail([1, 2, 3]) # [2,3] tail([1]) # [1]  </description>
    </item>
    
    <item>
      <title>Toggle switch</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/toggle-switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/toggle-switch/</guid>
      <description>Creates a toggle switch with CSS only.
&amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;toggle&amp;quot; class=&amp;quot;offscreen&amp;quot; /&amp;gt; &amp;lt;label for=&amp;quot;toggle&amp;quot; class=&amp;quot;switch&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;  .switch { position: relative; display: inline-block; width: 40px; height: 20px; background-color: rgba(0, 0, 0, 0.25); border-radius: 20px; transition: all 0.3s; } .switch::after { content: &#39;&#39;; position: absolute; width: 18px; height: 18px; border-radius: 18px; background-color: white; top: 1px; left: 1px; transition: all 0.3s; } input[type=&#39;checkbox&#39;]:checked + .switch::after { transform: translateX(20px); } input[type=&#39;checkbox&#39;]:checked + .switch { background-color: #7983ff; } .</description>
    </item>
    
    <item>
      <title>Transform - Detransform</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/transform-detransform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/transform-detransform/</guid>
      <description>Sets a transform on the parent element and de-transforms the child elements, so they are not affected by the transform. This allows for some neat effects such as skewed buttons.
&amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;child&amp;quot;&amp;gt;Child content&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;  :root { --transform: 10deg; } .parent { transform: skewX(var(--transform)); padding: 1rem; border: 1px solid; display: inline-block; } .child { transform: skewX(calc(-1 * var(--transform))); }  Explanation  --transform: 10deg sets a CSS variable we can later use to prevent duplicate code.</description>
    </item>
    
    <item>
      <title>Transform centering</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/transform-centering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/transform-centering/</guid>
      <description>Vertically and horizontally centers a child element within its parent element using position: absolute and transform: translate() (as an alternative to flexbox or display: table). Similar to flexbox, this method does not require you to know the height or width of your parent or child so it is ideal for responsive applications.
&amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;child&amp;quot;&amp;gt;Centered content&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;  .parent { border: 1px solid #333; height: 250px; position: relative; width: 250px; } .</description>
    </item>
    
    <item>
      <title>transpose</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/transpose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/transpose/</guid>
      <description>Returns the transpose of a two-dimensional list.
Use *lst to get the passed list as tuples. Use zip() in combination with list() to create the transpose of the given two-dimensional list.
def transpose(lst): return list(zip(*lst))  transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) # [(1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12)]  </description>
    </item>
    
    <item>
      <title>Triangle</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/triangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/triangle/</guid>
      <description>Creates a triangle shape with pure CSS.
&amp;lt;div class=&amp;quot;triangle&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;  .triangle { width: 0; height: 0; border-top: 20px solid #333; border-left: 20px solid transparent; border-right: 20px solid transparent; }  Explanation  View this link for a detailed explanation. The color of the border is the color of the triangle. The side the triangle tip points corresponds to the opposite border-* property. For example, a color on border-top means the arrow points downward.</description>
    </item>
    
    <item>
      <title>Truncate text</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/truncate-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/truncate-text/</guid>
      <description>If the text is longer than one line, it will be truncated and end with an ellipsis ….
&amp;lt;p class=&amp;quot;truncate-text&amp;quot;&amp;gt;If I exceed one line&#39;s width, I will be truncated.&amp;lt;/p&amp;gt;  .truncate-text { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; width: 200px; }  Explanation  overflow: hidden prevents the text from overflowing its dimensions (for a block, 100% width and auto height). white-space: nowrap prevents the text from exceeding one line in height.</description>
    </item>
    
    <item>
      <title>Truncate text multiline</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/truncate-text-multiline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/truncate-text-multiline/</guid>
      <description>If the text is longer than one line, it will be truncated for n lines and end with an gradient fade.
&amp;lt;p class=&amp;quot;truncate-text-multiline&amp;quot;&amp;gt; Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et. &amp;lt;/p&amp;gt;  .truncate-text-multiline { overflow: hidden; display: block; height: 109.2px; margin: 0 auto; font-size: 26px; line-height: 1.4; width: 400px; position: relative; } .truncate-text-multiline:after { content: &#39;&#39;; position: absolute; bottom: 0; right: 0; width: 150px; height: 36.</description>
    </item>
    
    <item>
      <title>Tutorial for Python Lists</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/list/tutorial-for-python-lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/list/tutorial-for-python-lists/</guid>
      <description>Tutorial for Python Lists  Home  This tutorial goes through how to work with lists in Python, including many of the built-in methods Python makes available for these data structures. Feel free to click on any of the links below to skip to a section of interest.
**
Background on lists
Referring to list elements by index
Slicing lists
Combining lists
Lists are mutable
Lists support inplace methods**</description>
    </item>
    
    <item>
      <title>unfold</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/unfold/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/unfold/</guid>
      <description>Builds a list, using an iterator function and an initial seed value.
The iterator function accepts one argument (seed) and must always return a list with two elements ([value, nextSeed]) or False to terminate. Use a generator function, fn_generator, that uses a while loop to call the iterator function and yield the value until it returns False. Use list comprehension to return the list that is produced by the generator, using the iterator function.</description>
    </item>
    
    <item>
      <title>union</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/union/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/union/</guid>
      <description>Returns every element that exists in any of the two lists once.
Create a set with all values of a and b and convert to a list.
def union(a, b): return list(set(a + b))  union([1, 2, 3], [4, 3, 2]) # [1,2,3,4]  </description>
    </item>
    
    <item>
      <title>union_by</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/union_by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/union_by/</guid>
      <description>Returns every element that exists in any of the two lists once, after applying the provided function to each element of both.
Create a set by applying fn to each element in a, then use list comprehension in combination with fn on b to only keep values not contained in the previously created set, _a. Finally, create a set from the previous result and a and transform it into a list</description>
    </item>
    
    <item>
      <title>unique_elements</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/unique_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/unique_elements/</guid>
      <description>Returns the unique elements in a given list.
Create a set from the list to discard duplicated values, then return a list from it.
def unique_elements(li): return list(set(li))  unique_elements([1, 2, 2, 3, 4, 3]) # [1, 2, 3, 4]  </description>
    </item>
    
    <item>
      <title>Use .map(), .reduce(), and .filter()</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/javascript-use-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/javascript-use-map/</guid>
      <description>Simplify your JavaScript – Use .map(), .reduce(), and .filter() Jan 29, 2018 · 7 min read
If you’re starting in JavaScript, maybe you haven’t heard of .map(), .reduce(), and .filter(). For me, it took a while as I had to support Internet Explorer 8 until a couple years ago. But if you don’t need to be compatible with this very old browser, you have to become familiar with those methods.</description>
    </item>
    
    <item>
      <title>Use a Flask Blueprint</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/flask/flask-blueprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/flask/flask-blueprint/</guid>
      <description>Use a Flask Blueprint to Architect Your Applications Flask is a very popular web application framework that leaves almost all design and architecture decisions up to the developer. In this tutorial, you’ll learn how a Flask Blueprint, or Blueprint for short, can help you structure your Flask application by grouping its functionality into reusable components.
In this tutorial, you’ll learn:
 What Flask Blueprints are and how they work How to create and use a Flask Blueprint to organize your code How to improve code reusability using your own or a third-party Flask Blueprint  This tutorial assumes that you have some experience using Flask and that you’ve built some applications before.</description>
    </item>
    
    <item>
      <title>values_only</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/values_only/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/values_only/</guid>
      <description>Returns a flat list of all the values in a flat dictionary.
Use dict.values() to return the values in the given dictionary. Return a list() of the previous result.
def values_only(flat_dict): return list(flat_dict.values())  ages = { &amp;quot;Peter&amp;quot;: 10, &amp;quot;Isabel&amp;quot;: 11, &amp;quot;Anna&amp;quot;: 9, } values_only(ages) # [10, 11, 9]  </description>
    </item>
    
    <item>
      <title>Web Scraping 101</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-101/</guid>
      <description>Web Scraping 101 in Python : overview of the tools &amp;amp; the pros and cons of each Summary:  Web Fundamentals Manually opening a socket and sending the HTTP request urllib3 &amp;amp; LXML requests &amp;amp; BeautifulSoup Scrapy Selenium &amp;amp; Chrome —headless Conclusion  Web Fundamentals The internet is really complex–there are many underlying technologies and concepts involved to view a simple web page in your browser. I&amp;rsquo;m not going to explain everything, but I will show you the most important things you have to understand in order to extract data from the web.</description>
    </item>
    
    <item>
      <title>Web Scraping and BeautifulSoup</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-and-beautifulsoup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-and-beautifulsoup/</guid>
      <description>Web Scraping and BeautifulSoup  Source  To source data for data science projects, you’ll often rely on SQL and NoSQL databases, APIs, or ready-made CSV data sets.
The problem is that you can’t always find a data set on your topic, databases are not kept current and APIs are either expensive or have usage limits.
If the data you’re looking for is on an web page, however, then the solution to all these problems is web scraping.</description>
    </item>
    
    <item>
      <title>Web Scraping Craigslist</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-craigslist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-craigslist/</guid>
      <description>Web Scraping Craigslist: A Complete Tutorial I’ve been looking to make a move recently. And what better way to know I’m getting a good price than to sample from the “population” of housing on Craigslist? Sounds like a job for…Python and web scraping!
In this article, I’m going to walk you through my code that scrapes East Bay Area Craigslist for apartments. The code here, and/or the URI parameters rather, can be modified to pull from any region, category, property type, etc.</description>
    </item>
    
    <item>
      <title>Web Scraping NBA Stats</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-nba-stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-nba-stats/</guid>
      <description>Web Scraping NBA Stats Source:
Every data analysis starts with an idea, hypothesis, problem, etc. The next step usually involves the most important element: data. Today, data is everywhere. For those of us who love diving into data, there are lots of resources to attain this part of the process. Whether it’s through Kaggle or UCI Machine Learning Repository, data is easily available. However, sometimes not all data is available to us.</description>
    </item>
    
    <item>
      <title>Web Scraping Using BeautifulSoup</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-using-beautifulsoup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-using-beautifulsoup/</guid>
      <description>Tutorial: Python Web Scraping Using BeautifulSoup When performing data science tasks, it’s common to want to use data found on the internet. You’ll usually be able to access this data in csv format, or via an Application Programming Interface (API). However, there are times when the data you want can only be accessed as part of a web page. In cases like this, you’ll want to use a technique called web scraping to get the data from the web page into a format you can work with in your analysis.</description>
    </item>
    
    <item>
      <title>when</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/when/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/when/</guid>
      <description>Tests a value, x, against a predicate function, conditionally applying a function.
Check if the value of predicate(x) is True and if so return when_true(x), otherwise return x.
def when(predicate, when_true): return lambda x: when_true(x) if predicate(x) else x  double_even_numbers = when(lambda x: x % 2 == 0, lambda x : x * 2) double_even_numbers(2) # 4 double_even_numbers(1) # 1  </description>
    </item>
    
    <item>
      <title>Working with missing data</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/missing_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/pandas/missing_data/</guid>
      <description>Working with missing data In this section, we will discuss missing (also referred to as NA) values in pandas.
 Note The choice of using NaN internally to denote missing data was largely for simplicity and performance reasons. Starting from pandas 1.0, some optional data types start experimenting with a native NA scalar using a mask-based approach. See here for more.
 See the cookbook for some advanced strategies.</description>
    </item>
    
    <item>
      <title>Working with missing data</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/git/what-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/git/what-git/</guid>
      <description>Git คืออะไร &amp;gt; Source : .
1. Git คืออะไร Git คือ Version Control แบบ Distributed ตัวหนึ่ง เป็นระบบที่ใช้จัดเก็บและควบคุมการเปลี่ยนแปลงที่เกิดขึ้นกับไฟล์ชนิดใดก็ได้ ไม่ว่าจะเป็น Text File หรือ Binary File (จากนี้จะขอเรียก Text File หรือ Binary File รวมกันว่า Source Code)
ทำไมถึงต้องใช้ Git Track version ของ Source Code ย้อนกลับได้  เมื่อจัดเก็บไฟล์เข้าไปในระบบของ Git จะเรียกว่า Git Repository ซึ่งเก็บสำรองข้อมูลและการเปลี่ยนแปลงของ Source Code ทำให้สามารถย้อนกลับไปที่เวอร์ชั่นใดๆ ก่อนหน้า และดูรายละเอียดการเปลี่ยนแปลงของแต่ละเวอร์ชั่นได้ นอกจากนั้นยังสามารถดูได้ว่าใครเป็นคนแก้ไข!!  ช่วยในการพัฒนาซอฟต์แวร์เป็นทีม  Git สามารถเก็บบันทึกการเปลี่ยนแปลงของ Source Code เวอร์ชั่นล่าสุดไว้ที่ Local Repository ซึ่งสามารถทำงานได้โดยที่ไม่ต้องต่อกับอินเตอร์เน็ต และเมื่อต้อง Update การเปลี่ยนแปลงของ Source Code เวอร์ชั่นล่าสุดให้กับเพื่อนร่วมทีมก็สามารถที่จะ Push ขึ้นไปเก็บที่ Remote Repository(Git Hosting) และเพื่อนร่วมทีมก็สามารถ Pull เวอร์ชั้นล่าสุดนั้นมารวม(Auto Merge) ที่เครื่องของเขาเอง ทำให้ Source Code ที่พัฒนาร่วมกันกับคนภายในทีมเป็นเวอร์ชั่นล่าสุดเสมอ  Git Status สถานะของ Source Code ที่เก็บอยู่ในระบบของ Git นั้นมีดั่งนี้</description>
    </item>
    
    <item>
      <title>Yahoo &amp; Google Finance API</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_1/</guid>
      <description>Python for Finance, Part I: Yahoo &amp;amp; Google Finance API, pandas, and matplotlib Getting the Data Pandas and matplotlib are included in the more popular distributions of Python for Windows, such as Anaconda.
In case it&amp;rsquo;s not included in your Python distribution, just simply use pip or conda install. Once installed, to use pandas, all one needs to do is import it. We will also need the pandas_datareader package (pip install pandas-datareader), as well as matplotlib for visualizing our results.</description>
    </item>
    
    <item>
      <title>Zebra striped list</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/zebra-striped-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/front-end/css/snippets/zebra-striped-list/</guid>
      <description>Creates a striped list with alternating background colors, which is useful for differentiating siblings that have content spread across a wide row.
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Item 01&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 02&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 03&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 04&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 05&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;  li:nth-child(odd) { background-color: #ddd; }  Explanation  Use the :nth-child(odd) or :nth-child(even) pseudo-class to apply a different background color to elements that match based on their position in a group of siblings. Note that you can use it to apply different styles to other HTML elements like div, tr, p, ol, etc.</description>
    </item>
    
    <item>
      <title>zip</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/snippets/zip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/snippets/zip/</guid>
      <description>Creates a list of elements, grouped based on the position in the original lists.
Use max combined with list comprehension to get the length of the longest list in the arguments. Loop for max_length times grouping elements. If lengths of lists vary, use fill_value (defaults to None).
zip() and itertools.zip_longest() provide similar functionality to this snippet.
def zip(*args, fill_value=None): max_length = max([len(lst) for lst in args]) result = [] for i in range(max_length): result.</description>
    </item>
    
    <item>
      <title>การจัดการวันเวลาด้วย datetime</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/python/beginer/date-and-time/python-datetime/</guid>
      <description>การจัดการวันเวลาใน python ด้วย datetime  เขียนเมื่อ 2016/06/21 19:35
 มอดูล datetime เป็นหนึ่งในมอดูลภายในตัวของไพธอน มีหน้าที่จัดการเกี่ยวกับเรื่องวันเดือนปีและเวลาต่างๆ หน้าที่มีความคล้ายคลึงกับมอดูล time (อ่านรายละเอียดใน https://phyblas.hinaboshi.com/20160610) แต่ก็มีความต่างกันอยู่ บางครั้งก็อาจใช้ร่วมกัน datetime มักถูกใช้เมื่อต้องการจัดการกับข้อมูลที่อยู่ในรูปของวันเดือนปีหรือเวลาชั่วโมงนาทีวินาที เวลาและวันเดือนปีนั้นเป็นปริมาณที่ใช้หน่วยหลากหลายในการอธิบาย และการแปลงหน่วยก็มีความยุ่งยากเพราะมีความไม่สม่ำเสมอ เช่นจำนวนวันในหนึ่งปีหรือหนึ่งเดือนเป็นต้น
การใช้ออบเจ็กต์พิเศษของ datetime จะทำให้การคำนวณทำได้โดยง่ายขึ้น อีกทั้งยังสามารถปรับเปลี่ยนรูปแบบการแสดงผลให้เป็นไปตามที่ต้องการได้ง่ายด้วย การใช้มอดูลนี้ก่อนอื่นต้องเริ่มจากทำการ import เรียกใช้ก่อน
import datetime  ออบเจ็กต์พิเศษใน datetime มอดูล datetime นั้นมีการนิยามคลาสของออบเจ็กต์สำหรับเก็บค่าวันเดือนปีและเวลาโดยเฉพาะ มีอยู่ 4 ชนิดคือ
 datetime.date ออบเจ็กต์เก็บค่าวันเดือนปี datetime.time ออบเจ็กต์เก็บค่าเวลา datetime.datetime เป็นออบเจ็กต์ที่เอา datetime.date กับ datetime.time มารวมกัน เก็บค่าทั้งวันเดือนปีและเวลา datetime.timedelta ออบเจ็กต์เก็บค่าระยะห่างระหว่างเวลาซึ่งมีหน่วยเป็นวันและวินาที   datetime.date จะเก็บค่าตัวเลขปี เดือน วัน ทั้งหมดเป็นจำนวนเต็มเอาไว้ ในการสร้าง datetime.date จะต้องใส่ค่าปี, เดือน, วัน ตามลำดับ เช่น</description>
    </item>
    
    <item>
      <title>ทำ Web Scraping ด้วย BeautifulSoup</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/equinox-blog-web-scraping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/data-science/web-scraping/equinox-blog-web-scraping/</guid>
      <description>ทำ Web Scraping ด้วย BeautifulSoup กัน สำหรับ Blog นี้เราจะมาดูวิธีการทำ Web scraping ด้วย Python3 และ BeautifulSoup ในระดับ Basic มากกกกกกกกกกกกก กันดูนะ :)
ก่อนที่เราจะเริ่มทำ web scraping เรามาเรียนรู้พื้นฐานเรื่อง website กันก่อนดีกว่า
Componenet of web page เมื่อเราเข้าไปที่ web page ซัก url นึงแล้ว web browser ของเราก็จะทำการ request ไปที่ web server เราจะเรียกการ request ประเภทนี้ว่า GET request เนื่องจากเรา request ไปที่ server แล้วเราก็จะได้ file จาก server กลับมาเพื่อที่จะบอกกับ web browser นี้ว่าเราจะแสดงหน้า web page ของเราอย่างไร ซึ่งเนื้อหาใน file ที่กลับมาก็จะมีส่วนประกอบคร่าวๆ ดังนี้
 HTML : เป็นเนื้อหาหลักของหน้านั้นๆ CSS : เป็นตัวจัดการตกแต่ง HTML ของเราให้สวยงาม ดูดีขึ้น JS : เป็นตัวจัดการ interactive ของ HTML ของเราให้ดีขึ้น Image : รูปภาพใน format เช่น JPG , PNG สำหรับแสดงบน web  หลังจาก web browser ได้รับดังกล่าวมาแล้ว ก็จะทำการ render ออกมาสวยงามตามที่เราเห็นกันเป็นปกติ</description>
    </item>
    
    <item>
      <title>รวม API สำหรับ Javascript ที่น่าสนใจในปี 2020</title>
      <link>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/api-for-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/library/tutorials/docs/articles/webapp/javascript/api-for-javascript/</guid>
      <description>รวม API สำหรับ Javascript ที่น่าสนใจในปี 2020 หากคุณอยากเขียนไซต์หรือโปรแกรมของคุณ ในหัวของคุณคงมีภาพไซต์ที่มีฟีเจอร์มากมาย แต่จะทำอย่างไรล่ะให้ไซต์ของคุณเป็นไปตามที่วาดเอาไว้ เราจึงได้รวบรวม API สำหรับ JavaScript ที่จะทำให้ไซต์ของคุณทำงานได้อย่างหลากหลายทันต่อยุคสมัยปี 2020
Youtube API Youtube เป็นหนึ่งในสิ่งที่ทุกคนใช้กันอย่างล้นหลาม และเป็นส่วนหนึ่งในชีวิตประจำวันของทุกคน จะเป็นอย่างไรถ้าเรานำยูทูปมาเป็นส่วนหนึ่งในไซต์ของเรา โดย Youtube API จะช่วยให้เราสามารถนำวิดิโอที่เราต้องการมาแปะในไซต์ของเราได้โดยไม่จำเป็นต้องเปลี่ยนหน้าไปที่ลิงค์วิดิโอของวิดิโอนั้นๆ
https://developers.google.com/youtube
Google Map API เราสามารถย่อส่วนกูเกิ้ลแมพมาใส่ไซต์ของเราได้!! ด้วย API ของ Google Map จะทำให้เราสามารถนำ service ต่างๆของ Google Map มาใส่ในไซต์ของเราได้ ไม่ว่าจะเป็นนำแผนที่มาใส่ในไซต์ หรือปักหมุดบนแผนที่ ซึ่งเป็นประโยชน์มากหากเราต้องการระบุตำแหน่งสถานที่ต่างๆบนแผนที่ ถึงแม้จะไม่สามารถทำทุกอย่างได้เหมือนกูเกิ้ลแมพหลักแต่ก็มีประโยชน์มากไม่น้อย
https://developers.google.com/maps/documentation/javascript/tutorial
Nasa API นาซ่าเองก็มี API ของตัวเอง โดย API ของนาซ่าจะทำให้เราสามารถนำข้อมูลต่างๆที่น่าสนใจของนาซ่ามาแปะไว้ในไซต์ของเราได้ ไม่ว่าจะเป็นข้อมูลทางดาราศาสตร์ต่างๆ บทคความสนุกๆของนาซ่า หรือรูปภาพสวยๆของนาซ่า ซึ่งแต่ละวันนาซ่าจะมี Picture of The Day ที่เป็นภาพที่นาซ่าคัดมาไม่ซ้ำกัน ช่วยเพิ่มความสนุกให้ในการเยี่ยมชมไซต์ของเราได้ไม่น้อย
https://api.nasa.gov/
Web Animation API อยากให้ไซต์ของเรามีอนิชั่นสวยๆ แต่CSSมันก็ใช้ยากเหลือเกิน แถมการเคลื่อนไหวก็ดูไม่ค่อยสมูท ปัญหานี้จะหมดไปเมื่อเราใช้ Web Animation API ซึ่งช่วยให้เราจัดการอนิเมชั่นของCSS animationได้ง่ายขึ้น ช่วยให้ไซต์ของเราให้มีชีวิตชีวามากขึ้น</description>
    </item>
    
  </channel>
</rss>