'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/library/tutorials/docs/articles/data-science/pandas/simple-example-based-guide/','title':"A Simple Example-Based Guide",'content':" NumPy Tutorial: A Simple Example-Based Guide  Introduction Advantages of NumPy NumPy Operations Creating a NumPy Array  The array Method The arange Method The zeros Method The ones Method The linspace Method The eye Method The random Method  Reshaping NumPy Array Finding Max/Min Values Array Indexing in NumPy  Indexing with 1-D Arrays Indexing with 2-D Arrays  Arithmetic Operations with NumPy Arrays  The log Function The exp Function The sqrt Function The sin Function  Linear Algebra Operations with NumPy Arrays  Finding the Vector Dot Product Matrix Multiplication Finding the Inverse of a Matrix Finding the Determinant of a Matrix Finding the Trace of a Matrix  Conclusion  Introduction The NumPy library is a popular Python library used for scientific computing applications, and is an acronym for \u0026ldquo;Numerical Python\u0026rdquo;. NumPy\u0026rsquo;s operations are divided into three main categories: Fourier Transform and Shape Manipulation, Mathematical and Logical Operations, and Linear Algebra and Random Number Generation. To make it as fast as possible, NumPy is written in C and Python.\nIn this article, we will provide a brief introduction to the NumPy stack and we will see how the NumPy library can be used to perform a variety of mathematical tasks.\nAdvantages of NumPy NumPy has several advantages over using core Python mathemtatical functions, a few of which are outlined here:\n NumPy is extremely fast when compared to core Python thanks to its heavy use of C extensions. Many advanced Python libraries, such as Scikit-Learn, Scipy, and Keras, make extensive use of the NumPy library. Therefore, if you plan to pursue a career in data science or machine learning, NumPy is a very good tool to master. NumPy comes with a variety of built-in functionalities, which in core Python would take a fair bit of custom code.  Regarding the last point, take a look at the following script:\nx = [2, 3, 4, 5, 6] y = [a + 2 for a in x]  Here, in order to add 2 to each element in the list x, we have to traverse the entire list and add 2 to each element individually. Now let\u0026rsquo;s see how we can perform the same task with the NumPy library:\nimport numpy as np nums = np.array([2, 3, 4, 5, 6]) nums2 = nums + 2  You can see how easy it is to add a scalar value to each element in the list via NumPy. It is not only readable, but also faster when compared to the previous code.\nThis is just the tip of the iceberg, in reality, the NumPy library is capable of performing far more complex operations in the blink of an eye. Let\u0026rsquo;s explore some of these operations.\nNumPy Operations Before we can perform any NumPy operations, we need to install the NumPy package. To install the NumPy package, you can use the pip installer. Execute the following command to install:\n$ pip install numpy  Otherwise, if you are running Python via the Anaconda distribution, you can execute the following command instead:\n$ conda install numpy  Now that NumPy is installed, let\u0026rsquo;s see some of the most common operations of the library.\nCreating a NumPy Array NumPy arrays are the building blocks of most of the NumPy operations. The NumPy arrays can be divided into two types: One-dimensional arrays and Two-Dimensional arrays.\nThere are several ways to create a NumPy array. In this section, we will discuss a few of them.\nThe array Method To create a one-dimensional NumPy array, we can simply pass a Python list to the array method. Check out the following script for an example:\nimport numpy as np x = [2, 3, 4, 5, 6] nums = np.array([2, 3, 4, 5, 6]) type(nums)  In the script above we first imported the NumPy library as np, and created a list x. We then passed this list to the array function of the NumPy library. Finally, we printed the type of the array, which resulted in the following output:\nnumpy.ndarray  If you were to print the nums array on screen, you would see it displayed like this:\narray([2, 3, 4, 5, 6])  To create a two-dimensional array, you can pass a list of lists to the array method as shown below:\nnums = np.array([[2,4,6], [8,10,12], [14,16,18]])  The above script results in a matrix where every inner list in the outer list becomes a row. The number of columns is equal to the number of elements in each inner list. The output matrix will look like this:\narray([[ 2, 4, 6], [ 8, 10, 12], [14, 16, 18]])  The arange Method Another commonly used method for creating a NumPy array is the arange method. This method takes the start index of the array, the end index, and the step size (which is optional). Take a look at the following example:\nnums = np.arange(2, 7)  Simple enough, right? The above script will return a NumPy array of size 5 with the elements 2, 3, 4, 5, and 6. Remember that the arange method returns an array that starts with the starting index and ends at one index less than the end index. The output of this code looks like this:\narray([2, 3, 4, 5, 6])  Now let\u0026rsquo;s add a step size of 2 to our array and see what happens:\nnums = np.arange(2, 7, 2)  The output now looks like this:\narray([2, 4, 6])  You can see that array starts at 2, followed by a step size of 2 and ends at 6, which is one less than the end index.\nThe zeros Method Apart from generating custom arrays with your pre-filled data, you can also create NumPy arrays with a simpler set of data. For instance, you can use the zeros method to create an array of all zeros as shown below:\nzeros = np.zeros(5)  The above script will return a one-dimensional array of 5 zeros. Print the zeros array and you should see the following:\narray([0., 0., 0., 0., 0.])  Similarly, to create a two-dimensional array, you can pass both the number of rows and columns to the zeros method, as shown below:\nzeros = np.zeros((5, 4))  The above script will return a two-dimensional array of 5 rows and 4 columns:\narray([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]])  The ones Method Similarly, you can create one-dimensional and two-dimensional arrays of all ones using the ones method as follows:\nones = np.ones(5)  array([1., 1., 1., 1., 1.])  And again, for the two-dimensional array, try out the following code:\nones = np.ones((5, 4))  Now if you print the ones array on the screen, you should see the following two-dimensional array:\n[[1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.]]  The linspace Method Another very useful method to create NumPy arrays is the linspace method. This method takes three arguments: a start index, end index, and the number of linearly-spaced numbers that you want between the specified range. For instance, if the first index is 1, the last index is 10 and you need 10 equally spaced elements within this range, you can use the linspace method as follows:\nlin = np.linspace(1, 10, 10)  The output will return integers from 1 to 10:\narray([1., 2., 3., 4., 5., 6., 7., 8., 9., 10.])  Now let\u0026rsquo;s try to create an array with 20 linearly-spaced elements between 1 and 10. Execute the following script:\nlin = np.linspace(1, 10, 20)  This will result in the following array:\narray([ 1. , 1.47368421, 1.94736842, 2.42105263, 2.89473684, 3.36842105, 3.84210526, 4.31578947, 4.78947368, 5.26315789, 5.73684211, 6.21052632, 6.68421053, 7.15789474, 7.63157895, 8.10526316, 8.57894737, 9.05263158, 9.52631579, 10. ])  Notice that the output might look like a matrix, but actually it is a one-dimensional array. Because of the spacing issue, the elements have been displayed in multiple lines.\nThe eye Method The eye method can be used to create an identity matrix, which can be very useful to perform a variety of operations in linear algebra. An identity matrix is a matrix with zeros across rows and columns except the diagonal. The diagonal values are all ones. Let\u0026rsquo;s create a 4x4 identity matrix using the eye method:\nidn = np.eye(4)  The resultant matrix looks like this:\narray([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]])  The random Method Often times you will need to create arrays with random numbers. You can use the rand function of NumPy\u0026rsquo;s random module to do so. Here is a simple example of the rand function:\nrandom = np.random.rand(2, 3)  The above script returns a matrix of 2 rows and 3 columns. The matrix contains uniform distribution of numbers between 0 and 1:\narray([[0.26818562, 0.65506793, 0.50035001], [0.527117 , 0.445688 , 0.99661 ]])  Similarly, to create a matrix of random numbers with the Gaussian distribution (or \u0026ldquo;normal\u0026rdquo; distribution), you can instead use the randn method as shown below:\nrandom = np.random.randn(2, 3)  Finally, to create an array of random integers, the randint method exists for such a case. The randint method takes the lower bound, upper bound, and the number of integers to return. For instance, if you want to create an array of 5 random integers between 50 and 100, you can use this method as follows:\nrandom = np.random.randint(50, 100, 5)  In our case, the output looked like this:\narray([54, 59, 84, 62, 74])  It is important to mention that these numbers are generated randomly every time you call the method, so you will see different numbers than in our example.\nWe saw different ways of creating Python arrays. Let\u0026rsquo;s now explore some of the other array functions.\nReshaping NumPy Array Using NumPy you can convert a one-dimensional array into a two-dimensional array using the reshape method.\nLet\u0026rsquo;s first create an array of 16 elements using the arange function. Execute the following code:\nnums = np.arange(1, 17)  The nums array is a one-dimensional array of 16 elements, ranging from 1 to 16:\narray([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])  Nos let\u0026rsquo;s convert it into a two-dimensional array of 4 rows and 4 columns:\nnums2 = nums.reshape(4, 4)  The array now looks like this:\narray([[ 1, 2, 3, 4], [ 5, 6, 7, 8], [ 9, 10, 11, 12], [13, 14, 15, 16]])  It is pertinent to mention that you cannot reshape an array if the number of elements in the one-dimensional array is not equal to the product of rows and columns of the reshaped array. For instance, if you have 45 elements in a 1-d array, you cannot reshape it into a matrix of 5 row and 10 columns since a 5x10 matrix has 50 elements and the original one only has 45.\nFinding Max/Min Values You can use min/max functions to easily find the value of the smallest and largest number in your array. For our example, let\u0026rsquo;s first create an array of 5 random integers:\nrandom = np.random.randint(1, 100, 5) print(random)  Our array of random integers looks like this:\n[51 40 84 38 1]  Remember, these numbers are generated randomly, therefore you will most likely have a different set of numbers. Let\u0026rsquo;s use min and max functions to find the minimum and maxim values from the array that we just created. To do so, execute the following code to find minimum value:\nxmin = random.min() print(xmin)  \u0026ldquo;1\u0026rdquo; will be printed in the output.\nSimilarly, for maximum value, execute the following code:\nxmax = random.max() print(xmax)  The above script will return \u0026ldquo;84\u0026rdquo; as the output.\nYou can also find the index of the maximum and minimum values using the argmax() and argmin() functions. Take a look at the following script:\nprint(random.argmax())  The above script will print \u0026ldquo;2\u0026rdquo; since 84 is the largest number in the list and it is located at the second position of the array.\nSimilarly, the argmin() will return \u0026ldquo;4\u0026rdquo; because 1 is the smallest number and is located at the 4th position.\nArray Indexing in NumPy In order to effectively use the NumPy arrays, it is very important to understand the way the arrays are indexed, which I\u0026rsquo;ll discuss in the next few sections.\nIndexing with 1-D Arrays Let\u0026rsquo;s create a simple array of 15 numbers:\nnums = np.arange(1, 16)  You can retrieve any element by passing the index number. Just like Python\u0026rsquo;s lists, NumPy\u0026rsquo;s arrays are zero-indexed. For instance, to find the element at the second index (3rd position) of the array, you can use the following syntax:\nprint(nums[2])  We have the digit 3 at the second index, therefore it will be printed on the screen.\nSubscribe to our Newsletter Get occassional tutorials, guides, and reviews in your inbox. No spam ever. Unsubscribe at any time.\nSubscribe\nYou can also print a range of numbers using indexing. To get the range, you need to pass the start index and one less than the end index, separated by a colon, inside the square brackets that follow the array name. For example, to get the elements from the first to seventh index, you can use the following syntax:\nprint(nums[1:8])  The above script will print the integers from 2 to 8:\n[2 3 4 5 6 7 8]  Here in the nums array, we have 2 at index 1 and 8 at index seven.\nYou can also slice an array and assign the elements of the sliced array to a new array:\nnums2 = nums[0:8] print(nums2)  In the script above we sliced the nums array by extracting its first 8 elements. The resultant elements are assigned to the nums2 array. We then print the nums2 array to the console. The output is a new array of the first 8 numbers:\n[1 2 3 4 5 6 7 8]  Indexing with 2-D Arrays Indexing a two-dimensional NumPy array is very similar to indexing a matrix. Let\u0026rsquo;s first create 3x3 two-dimensional NumPy array. To do so, run the following code:\nnums2d = np.array(([1,2,3],[4,5,6],[7,8,9]))  Now let\u0026rsquo;s print it out:\nprint(nums2d)  [[1 2 3] [4 5 6] [7 8 9]]  Like 1-D arrays, NumPy arrays with two dimensions also follow the zero-based index, that is, in order to access the elements in the first row, you have to specify 0 as the row index. Similarly to access elements in the first column, you need to specify 0 for the column index as well.\nLet\u0026rsquo;s retrieve an element from nums2d array, located in the first row and first column:\nprint(nums2d[0, 0])  You will see \u0026ldquo;1\u0026rdquo; in the output. Similarly, we can retrieve the element at the third row and third column as follows:\nprint(nums2d[2, 2])  You will see \u0026ldquo;9\u0026rdquo; in the output.\nIn addition to extracting a single element, you can extract the whole row by passing only the row index to the square brackets. For instance, the following script returns the first row from the nums2d array:\nprint(nums2d[0])  The output just a one-dimensional array:\n[1 2 3]  Similarly to retrieve the first column only, you can use the following syntax:\nprint(nums2d[:,0])  The output is, again, an array, but it is a combination of the first elements of each array of the two-dimensional array:\n[1 4 7]  Finally, to retrieve the elements from the first two rows and first two columns, the following syntax can be used:\nprint(nums2d[:2,:2])  The above script returns the following output:\n[[1 2] [4 5]]  Arithmetic Operations with NumPy Arrays For the examples in this section, we will use the nums array that we created in the last section.\nLet\u0026rsquo;s first add two arrays together:\nnums3 = nums + nums  You can add two arrays together with the same dimensions. For instance, the nums array contained 15 elements, therefore we can add it to itself. The elements at the corresponding indexes will be added. Now if you print the nums3 array, the output looks like this:\n[ 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30]  As you can see, each position is the sum of the 2 elements at that position in the original arrays.\nIf you add an array with a scalar value, the value will be added to each element in the array. Let\u0026rsquo;s add 10 to the nums array and print the resultant array on the console. Here is how you\u0026rsquo;d do it:\nnums3 = nums + 10 print(nums3)  And the resulting nums3 array becomes:\n[11 12 13 14 15 16 17 18 19 20 21 22 23 24 25]  Subtraction, addition, multiplication, and division can be performed in the same way.\nApart from simple arithmetic, you can execute more complex functions on the Numpy arrays, e.g. log, square root, exponential, etc.\nThe log Function The following code simply returns an array with the log of all elements in the input array:\nnums3 = np.log(nums) print(nums3)  The output looks like this:\n[0. 0.69314718 1.09861229 1.38629436 1.60943791 1.79175947 1.94591015 2.07944154 2.19722458 2.30258509 2.39789527 2.48490665 2.56494936 2.63905733 2.7080502 ]  The exp Function The following script returns an array with exponents of all elements in the input array:\nnums3 = np.exp(nums) print(nums3)  [2.71828183e+00 7.38905610e+00 2.00855369e+01 5.45981500e+01 1.48413159e+02 4.03428793e+02 1.09663316e+03 2.98095799e+03 8.10308393e+03 2.20264658e+04 5.98741417e+04 1.62754791e+05 4.42413392e+05 1.20260428e+06 3.26901737e+06]  The sqrt Function The following script returns an array with the square roots of all the elements in the input array:\nnums3 = np.sqrt(nums) print(nums3)  [1. 1.41421356 1.73205081 2. 2.23606798 2.44948974 2.64575131 2.82842712 3. 3.16227766 3.31662479 3.46410162 3.60555128 3.74165739 3.87298335]  The sin Function The following script returns an array with the sine of all the elements in the input array:\nnums3 = np.sin(nums) print(nums3)  [ 0.84147098 0.90929743 0.14112001 -0.7568025 -0.95892427 -0.2794155 0.6569866 0.98935825 0.41211849 -0.54402111 -0.99999021 -0.53657292 0.42016704 0.99060736 0.65028784]  Linear Algebra Operations with NumPy Arrays One of the biggest advantages of the NumPy arrays is their ability to perform linear algebra operations, such as the vector dot product and the matrix dot product, much faster than you can with the default Python lists.\nFinding the Vector Dot Product Computing the vector dot product for the two vectors can be calculated by multiplying the corresponding elements of the two vectors and then adding the results from the products.\nLet\u0026rsquo;s create two vectors and try to find their dot product manually. A vector in NumPy is basically just a 1-dimensional array. Execute the following script to create our vectors:\nx = np.array([2,4]) y = np.array([1,3])  The dot product of the above two vectors is (2 x 1) + (4 x 3) = 14.\nLet\u0026rsquo;s find the dot product without using the NumPy library. Execute the following script to do so:\ndot_product = 0 for a,b in zip(x,y): dot_product += a * b print(dot_product)  In the script above, we simply looped through corresponding elements in x and y vectors, multiplied them and added them to the previous sum. If you run the script above, you will see \u0026ldquo;14\u0026rdquo; printed to the console.\nNow, let\u0026rsquo;s see how we can find the dot product using the NumPy library. Look at the following script:\na = x * y print(a.sum())  We know that if we multiply the two NumPy arrays, the corresponding elements from both arrays are multiplied based on their index. In the script above, we simply multiplied the x and y vectors. We then call the sum method on the resultant array, which sums all the elements of the array. The above script will also return \u0026ldquo;14\u0026rdquo; in the output.\nThe above method is simple, however, the NumPy library makes it even easier to find the dot product via the dot method, as shown here:\nprint(x.dot(y))  For very large arrays you should also notice a speed improvement over our Python-only version, thanks to NumPy\u0026rsquo;s use of C code to implement many of its core functions and data structures.\nMatrix Multiplication Like the dot product of two vectors, you can also multiply two matrices. In NumPy, a matrix is nothing more than a two-dimensional array. In order to multiply two matrices, the inner dimensions of the matrices must match, which means that the number of columns of the matrix on the left should be equal to the number of rows of the matrix on the right side of the product. For instance, if a matrix X has dimensions [3,4] and another matrix Y has dimensions of [4,2], then the matrices X and Y can be multiplied together. The resultant matrix will have the dimensions [3,2], which is the size of the outer dimensions.\nTo multiply two matrices, the dot function can be used as shown below:\nX = np.array(([1,2,3], [4,5,6])) Y = np.array(([1,2], [4,5], [7,8])) Z = np.dot(X, Y) print(Z)  In the script above we created a 3x2 matrix named X and a 2x3 matrix named Y. We then find the dot product of the two matrices and assigned the resultant matrix to the variable Z. Finally, we print the resultant matrix to the console. In the output you should see a 2x2 matrix as shown below:\n[[30 36] [66 81]]  You can also multiply the two matrices element-wise. To do so, the dimensions of the two matrices must match, just like when we were adding arrays together. The multiply function is used for element-wise multiplication.\nLet\u0026rsquo;s try to multiply the matrices X and Y element-wise:\nZ = np.multiply(X, Y)  The following error will occur when you run the above code:\nValueError: operands could not be broadcast together with shapes (2,3) (3,2)  The error occurs due to the mismatch between the dimensions of the X and Y matrices. Now, let\u0026rsquo;s try multiplying the X matrix with itself using the multiply function:\nZ = np.multiply(X, X)  Now if you print the Z matrix, you should see the following result:\n[[ 1 4 9] [16 25 36]]  The X matrix was successfully able to multiple with itself because the dimensions of the multiplied matrices matched.\nFinding the Inverse of a Matrix Another very useful matrix operation is finding the inverse of a matrix. The NumPy library contains the ìnv function in the linalg module.\nFor our example, let\u0026rsquo;s find the inverse of a 2x2 matrix. Take a look at the following code:\nY = np.array(([1,2], [3,4])) Z = np.linalg.inv(Y) print(Z)  The output of the above code looks like this:\n[[-2. 1. ] [ 1.5 -0.5]]  Now in order to verify if the inverse has been calculated correctly, we can take the dot product of a matrix with its inverse, which should yield an identity matrix.\nW = Y.dot(Z) print(W)  [[1.00000000e+00 1.11022302e-16] [0.00000000e+00 1.00000000e+00]]  And the result was as we expected. Ones in the diagonal and zeros (or very close to zero) elsewhere.\nFinding the Determinant of a Matrix The determinant of a matrix can be calculated using the det method, which is shown here:\nX = np.array(([1,2,3], [4,5,6], [7,8,9])) Z = np.linalg.det(X) print(Z)  In the script above, we created a 3x3 matrix and found its determinant using the det method. In the output, you should see \u0026ldquo;6.66133814775094e-16\u0026rdquo;.\nFinding the Trace of a Matrix The trace of a matrix is the sum of all the elements in the diagonal of a matrix. The NumPy library contains trace function that can be used to find the trace of a matrix. Look at the following example:\nX = np.array(([1,2,3], [4,5,6], [7,8,9])) Z = np.trace(X) print(Z)  In the output, you should see \u0026ldquo;15\u0026rdquo;, since the sum of the diagonal elements of the matrix X is 1 + 5 + 9 = 15.\nConclusion Pythons NumPy library is one of the most popular libraries for numerical computing. In this article, we explored the NumPy library in detail with the help of several examples. We also showed how to perform different linear algebra operations via the NumPy library, which are commonly used in many data science applications.\nWhile we covered quite a bit of NumPy\u0026rsquo;s core functionality, there is still a lot to learn. If you want to learn more, I\u0026rsquo;d suggest you try out a course like Data Science in Python, Pandas, Scikit-learn, Numpy, Matplotlib, which covers NumPy, Pandas, Scikit-learn, and Matplotlib in much more depth than what we were able to cover here.\nI would suggest you practice the examples in this article. If you are planning to start a career as a data scientist, the NumPy library is definitely one of the tools that you must need to learn to be a successful and productive member of the field.\nReference : https://stackabuse.com/numpy-tutorial-a-simple-example-based-guide/\n"});index.add({'id':1,'href':'/library/tutorials/docs/articles/python/','title':"Aticles Python",'content':" Aticles Python "});index.add({'id':2,'href':'/library/tutorials/docs/articles/data-science/pandas/','title':"Pandas",'content':" Pandas "});index.add({'id':3,'href':'/library/tutorials/docs/articles/data-science/pandas/10_pandas_tip/','title':"10 Pandas tips",'content':" 10 Python Pandas tips to make data analysis faster Source\n1. Styling Have you ever complained about the table output looks boring when you do .head() in Jupyter notebooks? Is there a way not to display indexes (especially when there is already an ID column)? There’re ways to fix these issues.\nA. Highlight all negative values in a dataframe. (example revised from https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html)\nimport pandas as pd def color_negative_red(val): color = 'red' if val \u0026lt; 0 else 'black' return 'color: %s' % colordf = pd.DataFrame(dict(col_1=[1.53,-2.5,3.53], col_2=[-4.1,5.9,0]) ) df.style.applymap(color_negative_red)  B. Hide the index. Try df.head().style.hide_index()!\nC. Add hovering effects. (example revised from https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.io.formats.style.Styler.set_table_styles.html)\ndf = pd.DataFrame(np.random.randn(5, 3)) df.style.set_table_styles( [{'selector': 'tr:hover', 'props': [('background-color', 'yellow')]}] )  D. More CSS styles. You can use CSS to change the appearance of the table.\ndf = pd.DataFrame( dict(departure=['SFO', 'SFO', 'LAX', 'LAX', 'JFK', 'SFO'], arrival=['ORD', 'DFW', 'DFW', 'ATL', 'ATL', 'ORD'], airlines=['Delta','JetBlue','Delta',’AA','SouthWest', 'Delta']), columns=['airlines', 'departure','arrival']) df.style.set_table_styles( [{'selector': 'tr:nth-of-type(odd)', 'props': [('background', '#eee')]}, {'selector': 'tr:nth-of-type(even)', 'props': [('background', 'white')]}, {'selector': 'th', 'props': [('background', '#606060'), ('color', 'white'), ('font-family', 'verdana')]}, {'selector': 'td', 'props': [('font-family', 'verdana')]}, ] ).hide_index()  2. Pandas options The reader may have experienced the following issues when using .head(n) to check the dataframe:\n(1) There’re too many columns / rows in the dataframe and some columns / rows in the middle are omitted.\n(2) Columns containing long texts get truncated.\n(3) Columns containing floats display too many / too few digits.\nOne can set\nimport pandas as pd pd.options.display.max_columns = 50 # None -\u0026gt; No Restrictions pd.options.display.max_rows = 200 # None -\u0026gt; Be careful with this pd.options.display.max_colwidth = 100 pd.options.display.precision = 3  to solve these issues.\n3. Group by with multiple aggregations In SQL we can do aggregations like\nSELECT A, B, max(A), avg(A), sum(B), min(B), count(*) FROM table GROUP BY A, B  In Pandas it can be done with .groupby() and .agg():\nimport pandas as pd import numpy as np df = pd.DataFrame(dict(A=['coke', 'sprite', 'coke', 'sprite', 'sprite', 'coke', 'coke'], B=['alpha','gamma', 'alpha', 'beta', 'gamma', 'beta', 'beta'], col_1=[1,2,3,4,5,6,7], col_2=[1,6,2,4,7,9,3])) tbl = df.groupby(['A','B']).agg({'col_1': ['max', np.mean], 'col_2': ['sum','min','count']}) # 'count' will always be the count for number of rows in each group.  And the result will look like this:\nBoth the rows and columns are multi-indexed. A quick solution to change it to a dataframe without multi-indices is\ntbl = tbl.reset_index() tbl.columns = ['A', 'B', 'col_1_max', 'col_2_sum', 'col_2_min', 'count']  If you would like to have the column renaming process automated, you can do tbl.columns.get_level_values(0) and tbl.columns.get_level_values(1) to extract the indices in each level and combine them.\n4. Column slicing Some of you might be familiar with this already, but I still find it very useful when handling a dataframe with a ton of columns.\ndf.iloc[:,2:5].head() # select the 2nd to the 4th column df.loc[:,'column_x':].head() # select all columns starting from 'column_x'  5. Add row ID / random row ID to each group To add a row ID / random row ID for each group by A, B, one can first append an ID / random ID to all rows:\nimport numpy as np # df: target dataframe np.random.seed(0) # set random seed df['random_ID_all'] = np.random.permutation(df.shape[0]) df['ID_all'] = [i for i in range(1, df.shape[0]+1)]  To add a random ID to each group (by A, B), one can then do\ndf['ID'] = df.groupby(['A', 'B'])['ID_all'].rank(method='first',ascending=True).astype(int) df['random_ID'] = df.groupby(['A', 'B'])'random_ID_all'].rank(method='first',ascending=True).astype(int)  to get\n6. List all unique values in a group Sometimes after we performed group by, we’d like to aggregate the values in the target column as a list of unique values instead of max, min, …etc. This is how it’s done.\ndf = pd.DataFrame(dict(A=['A','A','A','A','A','B','B','B','B'], B=[1,1,1,2,2,1,1,1,2], C=['CA','NY','CA','FL','FL', 'WA','FL','NY','WA'])) tbl = df[['A', 'B', 'C']].drop_duplicates()\\ .groupby(['A','B'])['C']\\ .apply(list)\\ .reset_index() # list to string (separated by commas) tbl['C'] = tbl.apply(lambda x: (','.join([str(s) for s in x['C']])), axis = 1)  If you’d like to save the result, don’t forget to change the separator to anything other than commas.\n7. Add row total and column total to a numerical dataframe This is another common data manipulation. All you need is .apply().\ndf = pd.DataFrame(dict(A=[2,6,3], B=[2,2,6], C=[3,2,3])) df['col_total'] = df.apply(lambda x: x.sum(), axis=1) df.loc['row_total'] = df.apply(lambda x: x.sum())  8. Check memory usage **.memory_usage(deep=True)** can be used on Pandas dataframes to see the amount of memory used (in bytes) for each column. It’s useful when building machine learning models which may require a lot memory in training.\n9. Cumulative sum From time to time, cumulative sum is required when you generate some statistical outcomes. Simply do `\ndf['cumulative_sum'] = df['target_column'].cumsum()` .  10. Crosstab When you need to count the frequencies for groups formed by 3+ features, pd.crosstab() can make your life easier.\nThanks for reading! Comment below if you find bugs / better solutions.\n"});index.add({'id':4,'href':'/library/tutorials/docs/articles/python/24-trick-python/','title':"24 เคล็ดลับ การใช้งาน Python",'content':" 24 เคล็ดลับ การใช้งาน Python Python เป็นอีกหนึ่งภาษา Programming ที่ได้รับความนิยม ถูกนำไปใช้ในการเขียน Program ได้หลากหลายประเภท โดยไม่ได้จำกัดอยู่ที่งานเฉพาะทางใดทางหนึ่ง ไม่ว่าจะเป็นการพัฒนา Web หรือด้าน Data Science และ Machine Learning เป็นต้น จึงทำให้มีการนำไปใช้กันอย่างแพร่หลาย วันนี้เรามาดู 24 เคล็ดลับ การใช้งาน Python ที่จะช่วยให้คุณประหยัดเวลาและทำงานได้สะดวกขึ้น โดยดูตัวอย่างการใช้งานในแต่ละหัวข้อกันได้เลย\n1. Unpacking Array Items (http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/01.png)\n2. Swapping Variables 3. Profile And Stats Of Your Code\n3. Profile And Stats Of Your Code\n(http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/03.png)\n4. Repeat String\n(http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/04.png)\n5. Slicing\n(http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/05.png)\n6. Reversing\n\n7. Negative Index\nถ้าคุณต้องการที่จะเริ่มต้นจาก Character ตัวสุดท้าย สามารถใช้ Negative Index ได้\n\n8. Intersect Sets\nกรณีต้องการดึงสมาชิกที่ซ้ำกันของทั้ง 2 Sets\n\n9. Difference In Sets\nกรณีต้องการดึงสมาชิกของ Set ที่ไม่เป็นสมาชิกของอีก Set หนึ่ง (ในตัวอย่างนี้ ต้องการดึงสมาชิกของ a ที่ไม่ซ้ำกับสมาชิกของ b)\n\n10. Union Of Collections\nกรณีต้องการดึงสมาชิกทั้งหมดของทั้ง 2 Sets\n\n11. Optional Arguments\nเราสามารถส่งผ่าน Optional Argument โดยระบุค่า Default ให้กับ Argument ได้:\n\n12. Unknown Arguments Using *arguments\nหาก Function ของคุณสามารถรับ Argument จำนวนเท่าใดก็ได้ ให้เพิ่ม * ไว้ที่ด้านหน้าของชื่อ Parameter:\n\n13. Dictionary As Arguments Using **arguments\nจะช่วยให้คุณสามารถส่งผ่านจำนวน Keyword Arguments ที่แตกต่างกันไปยัง Function\nนอกจากนี้ คุณยังสามารถส่งผ่านค่า Dictionary เป็น Keyword Arguments ได้:\n\n14. Function With Multiple Outputs\nใช้ในกรณีที่ Function ต้องการ Return Outputs หลาย ๆ ค่า:\n](http://images.techstarthailand.com/images/blog/Article2019/TopPythonTips/14.png)\n15. One Liner For Loops\n\n16. Combining Lists Using Zip\n ใช้หลาย ๆ Collection แล้ว Return เป็น Collection ใหม่ Collection ใหม่ จะมี Items ที่แต่ละ Item ประกอบด้วย 1 Element จากแต่ละ Collection ที่ถูก Input เข้ามา ช่วยให้เราสามารถ Transverse ได้หลาย Collection ในเวลาเดียวกัน  \n17. Free up Memory\nเราสามารถเคลียร์หน่วยความจำ (Garbage Collection) แบบ Manual ได้ตามต้องการ\n\n18. Using Decorators\n Decorators สามารถเพิ่ม Function การทำงานให้กับ Code ได้ มันเป็น Function ที่เรียก Object / Function อื่น ๆ ด้วยเหตุนี้ พวกมันจึง Return Object ที่จะถูกเรียกใช้ในภายหลังจากที่ Decorated Function ถูก Invoked Decorates ก็เปรียบเหมือนการใช้แนวคิดของ Aspect-Oriented Programming เราสามารถ Wrap Class/Function จากนั้น Code นั้นจะถูก Executed เมื่อใดก็ตามที่ Function ถูกเรียกใช้  (ตัวอย่างนี้ แสดงถึงวิธีการ Print ชื่อ Function นี่เป็นเพียงตัวอย่าง Code เพื่อแสดงให้เห็นถึงวิธีที่คุณสามารถเรียกใช้ Decorator คุณสามารถใช้ Decorator เพื่อเรียก Loggers ของคุณ, perform security operations เป็นต้น)\n\nและเมื่อเราใช้มันใน Function จะเป็นลักษณะดังนี้:\n\n19. Unzipping\n\n20. Joining Collection\n\n21. Memory Footprint Of An Object\n\n22. Print Current Directory\n\n23. Print Imported Modules\n\n24. Get Current Process Id\n\nที่มา: https://medium.com/\n"});index.add({'id':5,'href':'/library/tutorials/docs/python/e-book/automate-the-boring/','title':"Automate the Boring Stuff",'content':" Automate the Boring Stuff with Python By Al Sweigart. Free to read under a Creative Commons license.\nTable of Contents  Chapter 0 – Introduction Chapter 1 – Python Basics Chapter 2 – Flow Control Chapter 3 – Functions Chapter 4 – Lists Chapter 5 – Dictionaries and Structuring Data Chapter 6 – Manipulating Strings Chapter 7 – Pattern Matching with Regular Expressions Chapter 8 – Input Validation Chapter 9 – Reading and Writing Files Chapter 10 – Organizing Files Chapter 11 – Debugging Chapter 12 – Web Scraping Chapter 13 – Working with Excel Spreadsheets Chapter 14 – Working with Google Spreadsheets Chapter 15 – Working with PDF and Word Documents Chapter 16 – Working with CSV Files and JSON Data Chapter 17 – Keeping Time, Scheduling Tasks, and Launching Programs Chapter 18 – Sending Email and Text Messages Chapter 19 – Manipulating Images Chapter 20 – Controlling the Keyboard and Mouse with GUI Automation Appendix A – Installing Third-Party Modules Appendix B – Running Programs Appendix C – Answers to the Practice Questions  (Read the 1st edition book.)\n"});index.add({'id':6,'href':'/library/tutorials/docs/python/beginer/','title':"Beginners",'content':" Python For Beginners "});index.add({'id':7,'href':'/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-1/','title':"Bootstrap 4 แบบพื้นฐาน ตอนที่ 1",'content':" สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน ตอนที่ 1 บทความนี้เป็นบทความสอนการใช้ Bootstrap เรื่องมีอยู่ว่าที่ทำงานของผมส่งผมไปเรียนคอส Web Design สอนโดย อ.กษิติ พันธุ์ถนอม คอสนี้เกี่ยวกับการใช้งาน Bootstrap4 ซึ่งผมก็พอจะรู้อยู่บ้างแล้ว การเรียนครั้งนี้เลยเหมือนการทบทวนและเพิ่มเติมเทคนิคต่างๆ ผมก็เลยได้โอกาสเขียนเป็นบล็อกนี้ขึ้นครับ\nโดยเป้าหมายคือ การใช้งาน Bootstrap ทำให้เว็บ responsive แล้วก็ใช้งาน component ของ Bootstrap ต่างๆ รวมถึงคลาสที่ใช้งานบ่อยๆ นอกจากนี้ก็มีแนะนำเทค และการใช้เครื่องมือช่วยต่างๆด้วย\nติดตั้ง VS code เครื่องมือสำหรับเขียน แนะนำ VS Code ใครไม่มีก็ติดตั้งเลย\nดาวน์โหลดได้ที่\nhttps://code.visualstudio.com/\nเริ่มต้น เริ่มจากการพิมพ์คำสั่งลัด html:5 เพื่อให้ VS Code generate code ให้อัตโนมัติ\nคำสั่ง meta UTF-8 และ viewport สำคัญสำหรับ Bootstrap ต้องใส่ทุกครั้ง ซึ่งมันก็สร้างมาให้แล้ว\n\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; อีกอันคือพิมพ์ว่า lorem มันจะ generate ประโยคที่เรียกว่า lorem ให้ มันคือคำที่ไม่มีความหมาย เอามาวางไว้เฉยๆว่านี่คือตัวอักษรจะเห็นในงานพวก design หรือตัวอย่างโค้ดบ่อยๆ\nDeprecate tag ใน HTML5 มียกเลิก tag บางอย่างไปแล้ว เปลี่ยนมาใช้อันใหม่ เช่น \u0026lt;b\u0026gt; เปลี่ยนเป็น \u0026lt;strong\u0026gt; \u0026lt;i\u0026gt; ไม่ใช่ตัวเอียง แต่เป็น icons\nทบทวน CSS ก่อนอื่นทบทวน css นิดนึง css คือภาษาสำหรับจัดแต่งหน้า HTML ในบทความนี้ การเขียน style ไม่แนะนำให้ใช้แบบ inline Style เพราะไม่ทำงานในบาง device , Framework แนะนำ external style sheet คือ เขียนแยกจาก HTML tag\nเพิ่ม css ใน html เพิ่มให้ html ขอเราใช้ไฟล์ .css ได้\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/custom.css\u0026#34;/\u0026gt; Selector สมมุติเราจะกำหนดให้ h1 เป็นสี #dd1144\nh1 {\rcolor:#d14\r} ต้องการให้ h1 ที่อยู่ใน div เป็นสีแดง เขียนแบบนี้ได้\ndiv h1{\rcolor:red;\r} การใช้ !important ปกติการทำงานจะทำแบบบนลงล่าง ทำให้คำสั่งมันทับกันได้ แต่ถ้าไม่อยากให้มันอานทับ ให้เพิ่ม !important\nh1{\rcolor:#d14 !important;\r}\rh1{\rcolor:green;\r} การใช้ id กำหนด id ให้ tag\n\u0026lt;div id=\u0026#34;first\u0026#34;\u0026gt; ใน CSS จะใช้สัญลักษณ์ #\n#first{\rbackground: lightblue;\r} การใช้ class กำหนด class ให้ tag ได้ ซึ่งใน Bootstrap จะใช้บ่อย\n\u0026lt;div class=\u0026#34;second\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Outside\u0026lt;/h1\u0026gt;\r\u0026lt;/div\u0026gt; ใน CSS จะใช้สัญลักษณ์ .\n.second{\rbackground: indianred;\r} id vs class id มีได้ element เดียว แต่ class มีได้หลาย element การใช้ id ส่วนใหญ่จะใช้เชื่อมกับ js ส่วน class จะมักเชื่อมกับ css และใน bootstrap จะเน้นใช้ class ส่วน id จะใช้เชื่อมกับของ bootstrap เอง\nรู้จัก Bootstrap Bootstrap คือ UI Framework พูดง่ายๆคือเขาเขียน CSS , JS สวยๆ มาให้แล้ว เรามีหน้าที่เรียกใช้ ซึ่งส่วนใหญ่ Bootstrap จะใช้ การเรียก class เป็นหลัก เรามาลองใช้งานกันนะ ตอนนี้ Bootstrap เวอชัน 4\nดาวน์โหลด Bootstrap ไปที่เว็บ https://getbootstrap.com/\n\nพอโหลด Bootstrap มาให้ copy มาไว้ในโปรเจค จะได้โฟลเดอร์ css กับ js มีไฟล์ด้านในประมาณนี้\nbootstarp grid จะมีเฉาะเรื่อง grid และ layout\nbootstrap reboot จะมีฟังชันก์ใหม่ ตัวที่ยังไม่ใช่ production จริง\nbootstarp.css จะเป็นแบบโค้ดสวยๆ อ่านได้\nbootstarp.min.css จะทำ minify มาแล้ว ตัด space และ ขึ้นบรรทัดใหม่ ทำให้ไฟล์เล็กลง\n[เวลาจะใช้งานจริง เราจะใช้ bootstrap.min.css ในการทำงาน\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34;/\u0026gt; MaxCDN: \u0026lt;!-- Latest compiled and minified CSS --\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\u0026#34;\u0026gt;\r\u0026lt;!-- jQuery library --\u0026gt;\r\u0026lt;script src=\u0026#34;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;!-- Popper JS --\u0026gt;\r\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;!-- Latest compiled JavaScript --\u0026gt;\r\u0026lt;script src=\u0026#34;https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; การจัด Layout แบบ GRID ใน bootstrap จะใช้ระบบ GRID ในการวาง layout ต่างๆ\nเริ่มจากใช้ div ที่มี class ชื่อว่า container \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Hello\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34;/\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\nด้านในจะมี div ย่อย แบ่งเป็น row col คล้ายกับตาราง\nแนะนำเขียน comment เอาไว้ ซึ่งใน HTML จะใช้ \u0026lt;!– –\u0026gt;\n\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close col 1.1 --\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close row 1 --\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close container --\u0026gt;\r\u0026lt;/body\u0026gt; class container จะทำให้มีพื้นที่ว่างด้านข้าง และเปลี่ยน Font เป็น Helvetica Neue\n\nเพื่อนของมันอีกตัวคือ container-fluid มันจะขายเต็มจอ\n\u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; มาลองเล่นเรื่องรูปภาพกันบ้าง\nดาวน์โหลดรูปภาพ\nเพิ่มรูปภาพใน grid col คือใช้ \n\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026gt;\r\u0026lt;img src=\u0026#34;img/banner/banner2.jpg\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt; ลองเลือกรูปภาพใหญ่ๆ เมื่อเปิดดูจะเห็นว่ารูปภาพมีขนาดใหญ่จนล้นจอ ยิ่งเปิดในมือถือก็ยิ่งล้น มันไม่ responsive\nวิธีแก้คือ เพิ่ม class ชื่อว่า img-fluid\n\u0026lt;img src=\u0026#34;img/banner/banner2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34;\u0026gt; รูปภาพจะปรับ scale อัตโนมัติ\nลองเพิ่ม col 3 อัน มันจะแบ่งหน้าจอให้เท่ากัน เป็น 3 ส่วน\n\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 1 --\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/banner/banner2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 2 --\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CEO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CTO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff3.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CFO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 3 --\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close container --\u0026gt;\r\u0026lt;/body\u0026gt; ](https://benzneststudios.com/blog/wp-content/uploads/2018/11/8.png \u0026ldquo;8\u0026rdquo;)\n1 แถวของ Bootstrap มี 12 หน่วย ถ้าเกินมันจะล่วงลงมาแถวใหม่ ถ้าใส่ไม่ถึง 12 มันจะมีช่องว่างที่เหลืออยู่\nวิธีการคือ ใช้คลาส col- ตามด้วยหน่วย เช่น ต้องการให้คอลัมภ์แรก 50% ของแถว อีกสองอันก็แบ่งอันละ 25%\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-6\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CEO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CTO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff3.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CFO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ทีนี้ลองมาดูปัญหาเมื่อเปิดในจอของโทรศัพท์ คอลัมภ์สามอันมันดูอึดอัด การดูในมือถือมันควรจะแสดงทีละอัน มันยังไม่ responsive\nวิธีการคือใช้ Grid option เช่น col-md-4 หมายถึง ถ้าหน้าจอมีขนาดมากกว่า Medium มันจะใช้หน่วยขนาด 4 แต่ถ้าไม่ใช่ มันจะใช้ 1 เป็นค่าเดิม ซึ่ง Medium มีหน้าจอขนาด \u0026gt;= 768px ซึ่งคือหน้าจอคอมนั่นเอง ดังนั้น ถ้าหน้าจอเล็กมันก็จะใช้ col-1 แทนนั่นเอง หน้าจอมือถือเลยแสดง col-1 ซึ่งคืออันเดียวเต็มจอ\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CEO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CTO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff3.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CFO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 3 --\u0026gt; พอเปิดในจอเล็กมันก็แสดงเต็มจอแล้ว\nดูรายละเอียดเรื่อง Grid Option ได้ที่\nhttps://getbootstrap.com/docs/4.0/layout/grid/\nซึ่งนอกจาก md แล้วก็มี sm , lg , xl ด้วย\n[จะได้ประมาณนี้\n[Source code https://gist.github.com/benznest/f365a2de60451b6696c78d5ce642e293\nการจัด Format ตอนนี้ เราจะเริ่มใช้  ซับซ้อนขึ้น โค้ดมันอาจจะไม่เป็นระเบียบ\nวิธีการให้มันจัดระเบียบ คือ คลิกขวาเลือก Format document หรือกด Shift + Alt + F\n[การซ้อน Grid เราสามารถนำ Grid มาซ้อนอีกชั้นได้ โดยมันจะยังใช้หน่วย 12 เหมือนเดิม\n\u0026lt;!-- Start Row 4 --\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-6 col-12\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-8\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Service\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro!\rQuisquam\rvoluptatibus nesciunt impedit\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life3.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-8\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Subscription\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro!\rQuisquam\rvoluptatibus nesciunt impedit\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-8\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;More\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro!\rQuisquam\rvoluptatibus nesciunt impedit\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-6 col-12\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/content/office12.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;About\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;!-- Close Row 4 --\u0026gt; Source code https://gist.github.com/benznest/5c13cf8292c68a89183103233f53f7bd\nClass ของรูปภาพ เพิ่มความสวยงามให้กับรูปภาพ ด้วย class ชื่อว่า rounded รุปภาพจะมีขอบมน\n\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt; หรือจะใช้ class ชื่อว่า rounded-circle ทำให้รูปเป็นวงกลม\n\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid rounded-circle\u0026#34; /\u0026gt; อีกอัน คือ class ชื่อว่า img-thumbnail ทำให้รูปมีขอบเป็นเส้นด้านนอก\n\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid img-thumbnail\u0026#34; /\u0026gt; Class ของ Width มี class ของ bootstrap ที่ใช้บ่อย เช่น การกำหนด width %\nเช่น w-50 คือกำหนด ให้มีขนาด 50% และการกำหนด mx-auto d-block คือการกำหนดตรงกลาง\n\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;w-50 mx-auto d-block\u0026#34; /\u0026gt;\r\u0026lt;h1 class=\u0026#34;text-center\u0026#34;\u0026gt;CEO\u0026lt;/h1\u0026gt; class เพื่อนๆในแก็งนี้ก็มี w-25 , w-50 , w-75 , w-100\n\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;w-50\u0026#34; /\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff2.jpg\u0026#34; class=\u0026#34;w-75\u0026#34; /\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff3.jpg\u0026#34; class=\u0026#34;w-100\u0026#34; /\u0026gt; การ Custom Bootstrap เวลาเราจะเพิ่ม css ของเราและต้องการทับกับ bootstrap ให้ไปเขียนที่ custom.css\nเช่น ต้องเปลี่ยนสีพื้นหลัง ของ class container ซึ่ง container เป็นของ bootstrap\nbody{\rbackground: #DCEBFC;\r}\r.container{\rbackground: #FFF;\r} แล้วก็เวลาเรียกใน HTML ให้ใส่ทีหลัง bootstrap.css นะ เพราะมันจะได้อ่านทับ bootstrap แล้วนั่นเอง\n\u0026lt;head\u0026gt;\r...\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/custom.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt; หน่วย rem rem คือ root element มันคือการกำหนด font-size ที่ root แล้วเอามาคูณ เช่น ถ้ากำหนด font-size 10 px\n2 rem = 16×2 = 32 px นั่นเอง\nใน Bootstrap จะใช้ font-size = 16 px ดังนั้น 1 rem = 16 px\nลองกำหนด padding ของ container 4.5rem = 16×4.5 = 72px\nbody{\rbackground: #DCEBFC;\r}\r.container{\rbackground: #FFF;\rpadding: 4.5rem\r} การ custom ค่า font-size ไม่ใช้ของ bootstrap ต้องไปเซ็ตใน html ที่เป็น root element\nhtml{\rfont-size:8px;\r} ค่า rem ก็จะเปลี่ยนมาใช้ font-size ของเราแทน\nbody{\rbackground: #DCEBFC;\r}\r.container{\rbackground: #FFF;\rpadding: 10rem\r}\rh1,h2,h3{\rcolor:#4F85D7;\r} Class สำหรับ Margin – Padding – Border เราสามารถใช้ rem มาใช้กับ class Margin Padding ได้\nmargin คือระยะห่างจาก element นี้กับอันอื่น\npadding คือระยะห่างจากเนื้อหาถึงขอบ\nborder คือ ขนาดขอบ\nวิธีการคือ {boxmodel}{position}-{rem}\nmargin-top 3 rem = mt-3 padding 5 rem = p-5 margin 2 rem = m-2 padding-bottom 3 rem= pd-3 ลองกำหนด padding-top 4 rem ซึ่งมีขนาด 16×4 = 64 px\n\u0026lt;div class=\u0026#34;row pt-4\u0026#34;\u0026gt;\r... ซึ่ง class margin padding ใช้บ่อยมากๆ\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life2.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life3.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life5.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life6.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life7.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life8.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 5 --\u0026gt; Custom font มาลองเปลี่ยน font ให้กับเว็บกัน\nเข้าไปดาวน์โหลด font ที่ Google Font\nhttps://fonts.google.com/\nเลือกอันที่ชอบ กด +\n[มันจะมีแถบด้านล่าง กดขึ้นมาเลือกแท็บ IMPORT แล้ว copy โค้ด @import\n[เอาไปวางใน custom.css ของเรา\nจากนั้นอยากใช้ font ตรงไหนก็เอา font-family ไปวางไว้ เช่นใส่ทั้งหน้าเลยก็ใส่ที่ body\n@import url(\u0026#39;https://fonts.googleapis.com/css?family=Indie+Flower\u0026#39;);\rbody{\rbackground: #DCEBFC;\rfont-family: \u0026#39;Indie Flower\u0026#39;, cursive;\r}\r.container{\rbackground: #FFF;\rpadding: 1.5rem\r}\rh1,h2,h3{\rcolor:#4F85D7;\r} ทำ Footer ลองเพิ่ม class ของเราเองชื่อ footer\nเนื้อหาใส่เป็นคำคม เพื่อลองใช้ font อีกตัว\n\u0026lt;div class=\u0026#34;row footer p-5\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-12\u0026#34;\u0026gt;\r\u0026lt;h2 class=\u0026#34;text-center\u0026#34;\u0026gt;Nothing in life is to be feared,\rit is only to be understood.\rNow is the time to understand more,\rso that we may fear less.\u0026lt;/h2\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ก็ทำเหมือนเดิม คือเพิ่มตรง @import\nแล้วก็ใส่ font-family ที่ footer\n@import url(\u0026#39;https://fonts.googleapis.com/css?family=Dancing+Script|Indie+Flower\u0026#39;);\rbody{\rbackground: #DCEBFC;\rfont-family: \u0026#39;Indie Flower\u0026#39;, cursive;\r}\r.container{\rbackground: #FFF;\rpadding: 1.5rem\r}\rh1,h2,h3{\rcolor:#4F85D7;\r}\r.footer{\rfont-family: \u0026#39;Dancing Script\u0026#39;, cursive;\r} Source code https://gist.github.com/benznest/21a5a7f2acbce4815433cd77f91c0b8e\nFontawesome fontawesome คือ ไลบรารี่เกี่ยวกับ icon ซึ่ง Bootstrap 4 ไม่มี fontawesome ติดมาอีกแล้ว เนื่องจาก fontawesome ไม่มีฟรี\nhttps://fontawesome.com/how-to-use/on-the-web/setup/getting-started?using=web-fonts-with-css\ncopy link CDN ของ Fontawesome เข้ามา\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://use.fontawesome.com/releases/v5.5.0/css/all.css\u0026#34;\rintegrity=\u0026#34;sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/custom.css\u0026#34; /\u0026gt; ในเว็บ Fontawesome ก็เลือก icon ที่ชอบ พอกดเข้าไปมันจะมีโค้ดอยู่\n[ให้นำโค้ด มาใช้ โดย  คือ icon มันต้องอยู่ภายใต้แท็กอื่นๆ\n\u0026lt;h2 class=\u0026#34;text-center\u0026#34;\u0026gt;\r\u0026lt;i class=\u0026#34;far fa-kiss-wink-heart\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\rNothing in life is to be feared,\rit is only to be understood.\rNow is the time to understand more,\rso that we may fear less.\u0026lt;/h2\u0026gt; เราสามารถนำ  มาใช้ได้เพื่อกำหนดขนาดของมัน\nเช่น custom.css กำหนดขนาดของ icon ที่ 10rem\n.front-icon{\rdisplay:block;\r}\r.front-icon i{\rfont-size: 10rem;\r} ใน html ก็เอา span มาครอบ\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-12\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;front-icon text-center\u0026#34;\u0026gt;\r\u0026lt;i class=\u0026#34;far fa-kiss-wink-heart\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\r\u0026lt;/span\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 7 --\u0026gt; icon จะมีขนาด 10rem แล้ว\n[หรือจะใช้พื้นหลังสีอื่น ไอคอนสีขาว\n.front-icon{\rdisplay:block;\rcolor:#FFFFFF;\rpadding:3rem;\rbackground:#4F85D7;\r}\r.front-icon i{\rfont-size: 10rem;\r} Class ของสี class utilities ที่ใช้บ่อยอีกตัวคือ เกี่ยวกับสี\nอ่านได้ที่ https://getbootstrap.com/docs/4.0/utilities/colors/\nหลักๆคือ มีให้เลือกใช้ดังนี้\n_primary **danger **success **info **dark \\_\\_light_ ใช้กับ class พวก bg- , text-\nเช่น\n\u0026lt;h3 class=\u0026#34;bg-primary p-2 text-white\u0026#34;\u0026gt;Service\u0026lt;/h3\u0026gt; วิธี Custom เช่นอยากเปลี่ยนสีให้ต่างจาก bootstrap ให้ใส่ !important ด้วย\n.bg-primary{\rbackground: #4F85D7 !important;\r} การใช้ Animate.css เข้าไปดาวน์โหลด css ได้ที่\nhttps://daneden.github.io/animate.css/\nแล้วเพิ่มเข้ามาใน HTML ของเรา\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/animate.css\u0026#34; /\u0026gt; วิธีการเรียกใช้ ก็แค่ใช้ class\nanimated = เรียกใช้ animated\ninfinite = ทำไปเรื่อยๆ\npulse = Animation แบบ pulse\ndelay-1s = delay 1 วินาที\n\u0026lt;h2 class=\u0026#34;text-center animated infinite pulse delay-1s\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;far fa-kiss-wink-heart\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\rNothing in life is to be feared,\rit is only to be understood.\rNow is the time to understand more,\rso that we may fear less.\u0026lt;/h2\u0026gt; Source code https://gist.github.com/benznest/ad45fd26b773e1ff47bb9727a4702494\nสรุป บทความนี้ก็สรุปคร่าวๆเกี่ยวกับการใช้ bootstrap ที่เป็นเรื่องสำคัญๆ เช่นการใช้ grid จัดวาง layout การทำให้รองรับ responsive การใช้ utility class เช่น margin padding รวมถึงพวกสี เช่น primary danger ที่เจอบ่อยมาก แล้วก็แนะนำเกี่ยวกับหน่วย rem ด้วย แถมด้วยเปลี่ยน Font กับใส่ Icon\nตอนหน้าจะเป็นเรื่องของการใช้ component อื่นๆที่ใช้งานบ่อยๆ รวมถึงเทคนิคเกี่ยวกับ bootstrap เพิ่มเติมด้วย\n Source : benzneststudios.com.\n "});index.add({'id':8,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-1/','title':"Ep.1 Your first Flask app",'content':" Your first Flask app | Learning Flask Ep. 1 In the first part of this series, you\u0026rsquo;ll learn how to create and run your very first Flask web application\nCreating a project directory and virtual environment First of all, we need to create our new project directory. We\u0026rsquo;re going to a new directory called app in our home directory.\n Tip - I advise using the same names for your project so it\u0026rsquo;s easier to follow along\n Go ahead and create the directory with the following:\nmkdir ~/app\nNext, let\u0026rsquo;s move into the app directory:\ncd ~/app\nNow we need create out Python virtual environment. Do so with the following command:\npython -m venv env\nThis will create a new virtual environment called env\nYou\u0026rsquo;ll see a new directory appear inside the app directory called env. Now we need to activate our virtual environment before we install Flask.\nGo ahead and run the following command to activate the environment:\nsource env/bin/activate\nYou should see (env) appear in front of your terminal prompt indicating the virtual environment is activated!\nUpdating pip It\u0026rsquo;s best practice to update pip (Python\u0026rsquo;s package manager) after creating a new virtual environment. We can do so with the following:\npip install --upgrade pip\nYou should see a success message like the following\nCollecting pip Using cached https://files.pythonhosted.org/packages/46/dc/7fd5df840efb3e56c8b4f768793a237ec4ee59891959d6a215d63f727023/pip-19.0.1-py2.py3-none-any.whl Installing collected packages: pip Found existing installation: pip 18.1 Uninstalling pip-18.1: Successfully uninstalled pip-18.1 Successfully installed pip-19.0.1  Now we\u0026rsquo;re ready to install Flask!\nInstalling Flask You install Flask just as you would any other Python package.\npip install flask\nIf we now run pip list, you\u0026rsquo;ll see the following:\nPackage Version ------------ ------- Click 7.0 Flask 1.0.2 itsdangerous 1.1.0 Jinja2 2.10 MarkupSafe 1.1.0 pip 19.0.1 setuptools 40.6.2 Werkzeug 0.14.1   Note - Flask comes with several other packages so don\u0026rsquo;t be alarmed when you see MarkupSafe or itsdangerous!\n Ok so we\u0026rsquo;ve got everything we need to start building our very simple application. Let\u0026rsquo;s get to it.\nCreating a Flask app This guide is just to show you the most basic Flask application possible. You\u0026rsquo;ll learn the correct way to structure a Flask application over the next couple of parts in this series.\nThe most basic Flask app can be just a single file. We\u0026rsquo;re going to call it app.py. Make sure you\u0026rsquo;re in the app directory and run the following to create it:\ntouch app.py\nLet\u0026rsquo;s write some code! Go ahead and open up app.py in your favourite editor and follow along.\nFirst of all, we need to import Flask from flask\nfrom flask import Flask\nNow we need to create our Flask application. We\u0026rsquo;re going to pass __name__ to Flask and assign it to the variable app\nDon\u0026rsquo;t worry about exactly why we\u0026rsquo;re doing this. We\u0026rsquo;ll cover it in a more advanced episode in this series.\nfrom flask import Flask app = Flask(__name__)  Next up, we need to create a route or view (route and view are used interchangeably)\nLet\u0026rsquo;s create a route and explain it line by line after:\nfrom flask import Flask app = Flask(__name__) @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world!\u0026quot;  Let\u0026rsquo;s talk through the 3 lines we just added:\n@app.route(\u0026quot;/\u0026quot;)\nRoutes in Flask are created using the @app.route decorator and passing in a URL or path.\nIn this example, we\u0026rsquo;ve passed \u0026quot;/\u0026quot; into the @app.route decorator. \u0026quot;/\u0026quot; is the root of the website or application.\nThis route will be triggered when someone goes to the root or index of our website, for example http://example.com.\ndef index(): return \u0026quot;Hello world!\u0026quot;\nUnder the @app.route decorator, we simply write a standard Python function with a return statement.\nFlask will return whatever we pass to the return statement! In this case, just a short \u0026quot;Hello world!\u0026quot; string.\nWe need to add 2 more lines of code before we can run our app. Add the following:\nfrom flask import Flask app = Flask(__name__) @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world!\u0026quot; if __name__ == \u0026quot;__main__\u0026quot;: app.run()`  Let\u0026rsquo;s take a look at what we added:\nif __name__ == \u0026quot;__main__\u0026quot;: app.run()  Again, I don\u0026rsquo;t want you to worry too much about what\u0026rsquo;s happening here. For now just know that __name__ is a special variable used by the Python interpreter to understand if a file is the main program.\nJust as we passed __name__ into the Flask() class, the special variable __name__ is equal to __main__. You\u0026rsquo;ll learn more about this principle as you advance through the series.\nRunning the Flask app Time to see the app in action! We can run our Flask app in a couple of ways.\nIn your terminal, make sure you\u0026rsquo;re in the same directory as app.py and run the following:\npython app.py\nYou\u0026rsquo;ll see the following message in your terminal to let you know Flask is running:\n* Serving Flask app \u0026quot;app\u0026quot; (lazy loading) * Environment: production WARNING: Do not use the development server in a production environment. Use a production WSGI server instead. * Debug mode: off * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) 127.0.0.1 - - [03/Feb/2019 14:35:04] \u0026quot;GET / HTTP/1.1\u0026quot; 200 - 127.0.0.1 - - [03/Feb/2019 14:35:04] \u0026quot;GET /favicon.ico HTTP/1.1\u0026quot; 404  Great, our app is running! Ignore any of the warning messages in your terminal and open up a new browser tab and head to the following URL:\nhttp://127.0.0.1:5000/\nYou should see Hello world! in your browser!\nHead back over to your terminal and stop the app by hitting Ctrl + c\nSo you\u0026rsquo;ve seen one way to run your Flask app but it\u0026rsquo;s not recommended. There\u0026rsquo;s a better way.\nFlask environment variables To make running our app even easier, we\u0026rsquo;re going to set a couple of environment variables in our shell. Run the following commands and we\u0026rsquo;ll talk through them after:\nexport FLASK_APP=app.py export FLASK_ENV=development  Running export FLASK_APP=app.py will set the FLASK_APP variable to app.py\nRunning export FLASK_ENV=development tells Flask we want to run our app in development mode\n Warning - Never run a live Flask application in production using development mode\n We\u0026rsquo;re quite a way from deploying our app to the web but I want to drill it home early, just so you know. We\u0026rsquo;ll cover the reasons why later in the series.\nWe can now run our app using the following simple command:\nflask run\nYou\u0026rsquo;ll see:\n* Serving Flask app \u0026quot;app.py\u0026quot; (lazy loading) * Environment: development * Debug mode: on * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 201-167-879  You\u0026rsquo;ll notice we don\u0026rsquo;t get any of the warnings and that Environment is set to development\nHead back to http://127.0.0.1:5000/ and you\u0026rsquo;ll see the same Hello world! message as before.\nUse Ctrl + c in your terminal to stop the app when you\u0026rsquo;re ready.\nTo deactivate your virtual environment, simply enter:\ndeactivate\nWrapping up You now know how to create and run a very basic Flask application, along with some best practices for setting environment variables and using the flask run command.\nNext up, learning how to structure your Flask application properly!\nLast modified · 28 Feb 2019\n Source : pythonise.com\n "});index.add({'id':9,'href':'/library/tutorials/docs/articles/website/html/','title':"HTML",'content':" HTML "});index.add({'id':10,'href':'/library/tutorials/docs/front-end/javascript/cheatsheet/','title':"JavaScript Cheat Sheet",'content':" JavaScript Cheat Sheet  Link  If - Else⇵ if ((age \u0026gt;= 14) \u0026amp;\u0026amp; (age \u0026lt; 19)) { // logical condition status = \u0026quot;Eligible.\u0026quot;; // executed if condition is true } else { // else block is optional status = \u0026quot;Not eligible.\u0026quot;; // executed if condition is false } Switch Statement switch (new Date().getDay()) { // input is current day case 6: // if (day == 6) text = \u0026quot;Saturday\u0026quot;; break; case 0: // if (day == 0) text = \u0026quot;Sunday\u0026quot;; break; default: // else... text = \u0026quot;Whatever\u0026quot;; }  Basics➤\nOn page script \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; ... \u0026lt;/script\u0026gt; Include external JS file \u0026lt;script src=\u0026quot;filename.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  Delay - 1 second timeout\nsetTimeout(function () {\t}, 1000); Functions function addNumbers(a, b) { return a + b; ; } x = addNumbers(1, 2); Edit DOM element document.getElementById(\u0026quot;elementID\u0026quot;).innerHTML = \u0026quot;Hello World!\u0026quot;;  Output\nconsole.log(a); // write to the browser console document.write(a); // write to the HTML alert(a); // output in an alert box confirm(\u0026quot;Really?\u0026quot;); // yes/no dialog, returns true/false depending on user click prompt(\u0026quot;Your age?\u0026quot;,\u0026quot;0\u0026quot;); // input dialog. Second argument is the initial value Comments /* Multi line comment */ // One line  "});index.add({'id':11,'href':'/library/tutorials/docs/python/flask/learning-flask/','title':"Learning Flask",'content':" Learning Flask "});index.add({'id':12,'href':'/library/tutorials/docs/python/flask/primer-jinja-templating/','title':"Primer on Jinja Templating",'content':" Primer on Jinja Templating Flask comes packaged with the powerful Jinja templating language.\nFor those who have not been exposed to a templating language before, such languages essentially contain variables as well as some programming logic, which when evaluated (or rendered into HTML) are replaced with actual values.\nThe variables and/or logic are placed between tags or delimiters. For example, Jinja templates use {% ... %} for expressions or logic (like for loops), while {{ ... }} is used for outputting the results of an expression or a variable to the end user. The latter tag, when rendered, is replaced with a value or values, and is seen by the end user.\nNote: Jinja Templates are just .html files. By convention, they live in the /templates directory in a Flask project. If you’re familiar with string formatting or interpolation, templating languages follow a similar type of logic—just on the scale of an entire HTML page.\nFree Bonus: Click here to get access to a free Jinja Templating Resources Guide (PDF) that shows you tips and tricks as well as common pitfalls to avoid when working with the Jinja 2 templating language.\nRemove ads\nQuick Examples Make sure you have Jinja installed before running these examples (pip install jinja2):\nthon\rfrom jinja2 import Template\rt = Template(\u0026#34;Hello {{ something }}!\u0026#34;)\rt.render(something=\u0026#34;World\u0026#34;) Hello World!\u0026rsquo;\nt = Template(\u0026#34;My favorite numbers: {% for n in range(1,10) %}{{n}} \u0026#34; \u0026#34;{% endfor %}\u0026#34;)\rt.render() My favorite numbers: 1 2 3 4 5 6 7 8 9 \u0026#39;\nNotice how the actual output rendered to the user falls within the tags.\nFlask Examples The code can be found here.\nCreate the following project structure:\n├── requirements.txt ├── run.py └── templates\nActivate a virtualenv, then install flask: $ pip install flask Add the following code to run.py: from flask import Flask, render_template\rapp = Flask(__name__)\r@app.route(\u0026#34;/\u0026#34;)\rdef template_test():\rreturn render_template(\u0026#39;template.html\u0026#39;, my_string=\u0026#34;Wheeeee!\u0026#34;, my_list=[0,1,2,3,4,5])\rif __name__ == \u0026#39;__main__\u0026#39;:\rapp.run(debug=True) Here, we are establishing the route /, which renders the template template.html via the function render_template(). This function must have a template name. Optionally, you can pass in keyword arguments to the template, like in the example with my_string and my_list.\nAdd the template: \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;Flask Template Example\u0026lt;/title\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;link href=\u0026#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;screen\u0026#34;\u0026gt;\r\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;\r.container {\rmax-width: 500px;\rpadding-top: 100px;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;My string: {{my_string}}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;Value from the list: {{my_list[3]}}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;Loop through the list:\u0026lt;/p\u0026gt;\r\u0026lt;ul\u0026gt;\r{% for n in my_list %}\r\u0026lt;li\u0026gt;{{n}}\u0026lt;/li\u0026gt;\r{% endfor %}\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;script src=\u0026#34;http://code.jquery.com/jquery-1.10.2.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Save this as template.html in the templates directory. Notice the template tags. Can you guess the output before you run the app?\nRun the following: $ python run.py You should see the following:\n\nNote: It’s worth noting that Jinja only supports a few control structures: if-statements and for-loops are the two primary structures.\nThe syntax is similar to Python, differing in that no colon is required and that termination of the block is done using an endif or endfor instead of whitespace.\nYou can also complete the logic within your controller or views and then pass each value to the template using the template tags. However, it is much easier to perform such logic within the templates themselves.\nTemplate Inheritance Templates usually take advantage of inheritance, which includes a single base template that defines the basic structure of all subsequent child templates. You use the tags {% extends %} and {% block %} to implement inheritance.\nThe use case for this is simple: as your application grows, and you continue adding new templates, you will need to keep common code (like an HTML navigation bar, Javascript libraries, CSS stylesheets, and so forth) in sync, which can be a lot of work. Using inheritance, we can move those common pieces to a parent/base template so that we can create or edit such code once, and all child templates will inherent that code.\nNote: You should always add as much recurring code as possible to your base template to save yourself time in the future, which will far outweigh the initial time investment.\nLet’s add inheritance to our example.\nCreate the base (or parent) template:\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;Flask Template Example\u0026lt;/title\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;link href=\u0026#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;screen\u0026#34;\u0026gt;\r\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;\r.container {\rmax-width: 500px;\rpadding-top: 100px;\r}\rh2 {color: red;}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;h2\u0026gt;This is part of my base template\u0026lt;/h2\u0026gt;\r\u0026lt;br\u0026gt;\r{% block content %}{% endblock %}\r\u0026lt;br\u0026gt;\r\u0026lt;h2\u0026gt;This is part of my base template\u0026lt;/h2\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;script src=\u0026#34;http://code.jquery.com/jquery-1.10.2.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Save this as layout.html.\nDid you notice the {% block %} tags? This defines a block (or area) that child templates can fill in. Further, this just informs the templating engine that a child template may override the block of the template.\nNote: Think of these as placeholders to be filled in by code from the child template(s).\nLet’s do that.\nUpdate template.html: {% extends \u0026#34;layout.html\u0026#34; %}\r{% block content %}\r\u0026lt;h3\u0026gt; This is the start of my child template\u0026lt;/h3\u0026gt;\r\u0026lt;br\u0026gt;\r\u0026lt;p\u0026gt;My string: {{my_string}}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;Value from the list: {{my_list[3]}}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;Loop through the list:\u0026lt;/p\u0026gt;\r\u0026lt;ul\u0026gt;\r{% for n in my_list %}\r\u0026lt;li\u0026gt;{{n}}\u0026lt;/li\u0026gt;\r{% endfor %}\r\u0026lt;/ul\u0026gt;\r\u0026lt;h3\u0026gt; This is the end of my child template\u0026lt;/h3\u0026gt;\r{% endblock %} So, the {% extends %} informs the templating engine that this template “extends” another template, layout.html. This establishes the link between the templates.\nRun it. You should see this:\n\nOne common use case is to add a navigation bar.\nAdd the following code to the base template, just after the opening \u0026lt;body\u0026gt; tag: \u0026lt;nav class=\u0026#34;navbar navbar-inverse\u0026#34; role=\u0026#34;navigation\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt;\r\u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;navbar-toggle\u0026#34; data-toggle=\u0026#34;collapse\u0026#34; data-target=\u0026#34;#bs-example-navbar-collapse-1\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;sr-only\u0026#34;\u0026gt;Toggle navigation\u0026lt;/span\u0026gt;\r \u0026lt;span class=\u0026#34;icon-bar\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\r \u0026lt;span class=\u0026#34;icon-bar\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\r \u0026lt;span class=\u0026#34;icon-bar\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\r \u0026lt;/button\u0026gt;\r \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt;Jinja!\u0026lt;/a\u0026gt;\r \u0026lt;/div\u0026gt;\r \u0026lt;div class=\u0026#34;collapse navbar-collapse\u0026#34; id=\u0026#34;bs-example-navbar-collapse-1\u0026#34;\u0026gt;\r\u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt;\r\u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r \u0026lt;/ul\u0026gt;\r \u0026lt;form class=\u0026#34;navbar-form navbar-left\u0026#34; role=\u0026#34;search\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; placeholder=\u0026#34;Search\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-default\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt;\r \u0026lt;/form\u0026gt;\r \u0026lt;ul class=\u0026#34;nav navbar-nav navbar-right\u0026#34;\u0026gt;\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r \u0026lt;li class=\u0026#34;dropdown\u0026#34;\u0026gt;\r\u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;dropdown-toggle\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34;\u0026gt;Dropdown \u0026lt;b class=\u0026#34;caret\u0026#34;\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;\r \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt;\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Another action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Something else here\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r \u0026lt;li class=\u0026#34;divider\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\r \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Separated link\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r \u0026lt;/ul\u0026gt;\r \u0026lt;/li\u0026gt;\r \u0026lt;/ul\u0026gt;\r \u0026lt;/div\u0026gt;\u0026lt;!-- /.navbar-collapse --\u0026gt;\r\u0026lt;/div\u0026gt;\u0026lt;!-- /.container-fluid --\u0026gt;\r\u0026lt;/nav\u0026gt;  Now, every single child template that extends from the base will have the same navigation bar. To steal a line from Java philosophy: “Write once, use anywhere.”\n\nSuper Blocks If you need to render a block from the base template, use a super block: {{ super() }} Add a footer to the base template: \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt;\r{% block footer %}\rWatch! This will be added to my base and child templates using the super powerful super block!\r\u0026lt;br\u0026gt;\r\u0026lt;br\u0026gt;\r{% endblock %}\r\u0026lt;/div\u0026gt;  Here’s the updated code: \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;Flask Template Example\u0026lt;/title\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;link href=\u0026#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;screen\u0026#34;\u0026gt;\r\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;\r.container {\rmax-width: 500px;\rpadding-top: 100px;\r}\rh2 {color: red;}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;h2\u0026gt;This is part of my base template\u0026lt;/h2\u0026gt;\r\u0026lt;br\u0026gt;\r{% block content %}{% endblock %}\r\u0026lt;br\u0026gt;\r\u0026lt;h2\u0026gt;This is part of my base template\u0026lt;/h2\u0026gt;\r\u0026lt;br\u0026gt;\r\u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt;\r{% block footer %}\rWatch! This will be added to my base and child templates using the super powerful super block!\r\u0026lt;br\u0026gt;\r\u0026lt;br\u0026gt;\r\u0026lt;br\u0026gt;\r{% endblock %}\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;script src=\u0026#34;http://code.jquery.com/jquery-1.10.2.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Run the app. You should see that the footer is just part of the base:\n\nNow, add the super block to template.html: {% extends \u0026#34;layout.html\u0026#34; %}\r{% block content %}\r\u0026lt;h3\u0026gt; This is the start of my child template\u0026lt;/h3\u0026gt;\r\u0026lt;br\u0026gt;\r\u0026lt;p\u0026gt;My string: {{my_string}}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;Value from the list: {{my_list[3]}}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;Loop through the list:\u0026lt;/p\u0026gt;\r\u0026lt;ul\u0026gt;\r{% for n in my_list %}\r\u0026lt;li\u0026gt;{{n}}\u0026lt;/li\u0026gt;\r{% endfor %}\r\u0026lt;/ul\u0026gt;\r\u0026lt;h3\u0026gt; This is the end of my child template\u0026lt;/h3\u0026gt;\r{% block footer %}\r{{super()}}\r{% endblock %}\r{% endblock %} Check it out in your browser:\n\nThe super block is used for common code that both the parent and child templates share, such as the \u0026lt;title\u0026gt;, where both templates share part of the title. Then, you would just need to pass in the other part. It could also be used for a heading.\nHere’s an example:\nParent {% block heading %}\r\u0026lt;h1\u0026gt;{% block page %}{% endblock %} - Flask Super Example\u0026lt;/h1\u0026gt;\r{% endblock %}\r**Child**\r{% block page %}Home{% endblock %}\r{% block heading %}\r{{ super() }}\r{% endblock %} Let’s see that in action:\n\nSee what happens when you remove {% block page %}Home{% endblock %} from the child template.\nChallenge: Try to update the \u0026lt;title\u0026gt; using the same method with the super block. Check out my code if you need help.\nInstead of hard coding the name of the template, let’s make it dynamic.\nUpdate the two code snippets in template.html: {% block title %}{{title}}{% endblock %}\r{% block page %}{{title}}{% endblock %} Now, we need to pass in a title variable to our template from our controller, run.py: @app.route(\u0026#34;/\u0026#34;)\rdef template_test():\rreturn render_template(\r\u0026#39;template.html\u0026#39;, my_string=\u0026#34;Wheeeee!\u0026#34;, my_list=[0,1,2,3,4,5], title=\u0026#34;Home\u0026#34;)\nMacros In Jinja, we can use macros to abstract commonly used code snippets that are used over and over to not repeat ourselves. For example, it’s common to highlight the link of the current page on the navigation bar (active link). Otherwise, we’d have to use if/elif/else statements to determine the active link. Using macros, we can abstract out such code into a separate file.\nAdd a macros.html file to the templates directory: {% macro nav_link(endpoint, name) %}\r{% if request.endpoint.endswith(endpoint) %}\r\u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ url_for(endpoint) }}\u0026#34;\u0026gt;{{name}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r {% else %}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ url_for(endpoint) }}\u0026#34;\u0026gt;{{name}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r {% endif %}\r{% endmacro %}  Here, we’re using Flask’s request object, which is part of Jinja by default, to check the requested endpoint, and then assigning the active class to that endpoint.\nUpdate the unordered list with the nav navbar-nav class in the base template: \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt;\r{{ nav_link(\u0026#39;home\u0026#39;, \u0026#39;Home\u0026#39;) }}\r{{ nav_link(\u0026#39;about\u0026#39;, \u0026#39;About\u0026#39;) }}\r{{ nav_link(\u0026#39;contact\u0026#39;, \u0026#39;Contact Us\u0026#39;) }}\r\u0026lt;/ul\u0026gt;  Also, make sure to add the import at the top of the template: {% from \u0026quot;macros.html\u0026quot; import nav_link with context %}.\nNotice how we’re calling the nav-link macro and passing it two arguments: the endpoint (which comes from our controller) and the text we want displayed.\nFinally, let’s add three new endpoints to the controller: @app.route(\u0026#34;/home\u0026#34;)\rdef home():\rreturn render_template(\r\u0026#39;template.html\u0026#39;, my_string=\u0026#34;Wheeeee!\u0026#34;, my_list=[0,1,2,3,4,5], title=\u0026#34;Home\u0026#34;)\r@app.route(\u0026#34;/about\u0026#34;)\rdef about():\rreturn render_template(\r\u0026#39;template.html\u0026#39;, my_string=\u0026#34;Wheeeee!\u0026#34;, my_list=[0,1,2,3,4,5], title=\u0026#34;About\u0026#34;)\r@app.route(\u0026#34;/contact\u0026#34;)\rdef contact():\rreturn render_template(\r\u0026#39;template.html\u0026#39;, my_string=\u0026#34;Wheeeee!\u0026#34;, my_list=[0,1,2,3,4,5], title=\u0026#34;Contact Us\u0026#34;) Refresh the page. Test out the links at the top. Does the current page get highlighted? It should.\n\nCustom Filters Jinja uses filters to modify variables, mostly for formatting purposes.\nHere’s an example:\n{{ num | round }}\nThis will round the num variable. So, if we pass the argument num=46.99 into the template, then 47.0 will be outputted.\nAs you can tell, you specify the variable and then a pipe (|), followed by the filter. Check out this link for the list of filters already included within Jinja. In some cases, you can specify optional arguments in parentheses.\nHere’s an example: {{ list|join(\u0026#39;, \u0026#39;) }}\rThis will join a list by the comma delimiter.\rTest this out. Add the following line to _template.html_\r\u0026lt;p\u0026gt;Same list with a filter: {{ my_list|join(\u0026#39;, \u0026#39;) }}\u0026lt;/p\u0026gt;  Now, besides the built-in filters, we can create our own.\nLet’s add one of our own. One common example is a custom datetime filter.\nAdd the following code to our controller after we create the app, app = Flask(__name__): @app.template_filter()\rdef datetimefilter(value, format=\u0026#39;%Y/%m/%d%H:%M\u0026#39;):\r\u0026#34;\u0026#34;\u0026#34;Convert a datetime to a different format.\u0026#34;\u0026#34;\u0026#34;\rreturn value.strftime(format)\rapp.jinja_env.filters[\u0026#39;datetimefilter\u0026#39;] = datetimefilter Using the @app.template_filter() decorator, we are registering the datetimefilter() function as a filter.\nNote: The default name for the filter is just the name of the function. However, you can customize it by passing in an argument to the function, such as @app.template_filter(formatdate).\nNext, we are adding the filter to the Jinja environment, making it accessible. Now it’s ready for use.\nAdd the following code to our child template: \u0026lt;h4\u0026gt;Current date/time: {{ current_time | datetimefilter }}\u0026lt;/h4\u0026gt; Finally, just pass in the datetime to our template:\ncurrent_time = datetime.datetime.now()\nTest it.\n\nRef : https://realpython.com/primer-on-jinja-templating/\n"});index.add({'id':13,'href':'/library/tutorials/docs/python/','title':"Python",'content':" Python ประวัติและความสำคัญของคอมพิวเตอร์ คอมพิวเตอร์ถูกพัฒนาขึ้นมาโดยมีจุดประสงค์หลักคือเพื่อไว้เป็นอุปกรณ์ในการคำนวณ การคำนวณนั้นที่จริงแล้วมนุษย์ก็ทำได้ แต่หากต้องคำนวณตัวเลขจำนวนมากๆคำนวณซ้ำๆไปเรื่อยๆไม่ว่าใครก็คงจะเบื่อและอาจเริ่มมีการคำนวณผิดพลาดขึ้นได้ เช่นสมมุติว่าต้องการหาค่าแฟ็กทอเรียล 100! = 1×2×3×\u0026hellip;×100 กว่าเราจะคูณเสร็จก็คงใช้เวลาหลายนาที แต่คอมพิวเตอร์สามารถทำได้ภายในพริบตา อะไรก็ตามที่เป็นการคำนวณที่มีรูปแบบตายตัวอย่างเป็นระบบเราสามารถสั่งให้คอมพิวเตอร์ทำแทนได้ มันสามารถทำได้อย่างไม่รู้จักเบื่อ รวดเร็วแถมไม่มีข้อผิดพลาดด้วย (ยกเว้นคนจะป้อนคำสั่งให้มันผิดเอง)\nที่จริงแล้วแนวคิดเกี่ยวกับเรื่องการคำนวณอย่างเป็นระบบนั้นมีมาตั้งแต่โบราณก่อนที่จะมีคอมพิวเตอร์ใช้กันแล้ว ดังจะเห็นได้จากที่ชื่อระเบียบวิธีการเชิงตัวเลขมีชื่อนักคณิตศาสตร์สมัยก่อนติดอยู่ เช่นระเบียบวิธีของนิวตัน, ระเบียบวิธีของออยเลอร์ ซึ่งเอาไว้คำนวณแบบวนซ้ำๆเพื่อหาคำตอบของสมการหรือค่าที่ต้องการ แนวคิดพวกนี้มีมานานแล้วแต่สมัยแรกๆเขาได้แต่คำนวณด้วยตัวเอง คำนวณซ้ำๆไปเรื่อยๆ ถ้าผิดเมื่อไหร่ก็อาจต้องคำนวณใหม่\nต่อมาจึงได้เริ่มมีแนวคิดที่จะใช้เครื่องจักรเพื่อช่วยในการคำนวณ ซึ่งเรียกว่าเครื่องคำนวณเชิงกล เครื่องแรกถูกสร้างโดยเบลซ ปาสกาล (Blaise Pascal) เมื่อปี 1642 ชื่อว่า ปาสกาลีน (pascaline) เครื่องคำนวณเชิงกลช่วยให้การคำนวณอย่างเป็นระบบสามารถเป็นไปได้ ในยุคแรกใช้เฟืองและแรงคน ต่อมาก็เริ่มมีการนำพลังงานธรรมชาติเช่นพลังไอน้ำเข้าช่วย แล้วก็ถูกพัฒนาขึ้นมาเรื่อยๆอย่างช้าๆ อุปกรณ์ที่ใช้ก็ค่อยๆเปลี่ยนไป และคำนวณได้ดีมากขึ้น ในที่สุดก็เริ่มมีการนำวงจรอิเล็กทรอนิกส์มาใช้สร้างเป็นเครื่องคำนวณเป็นครั้งแรกในช่วงสงครามโลกครั้งที่สอง และนั่นก็เป็นจุดกำเนิดของคอมพิวเตอร์ในปัจจุบัน\nในยุคแรกๆคอมพิวเตอร์ใช้หลอดสุญญากาศ เป็นส่วนประกอบ ซึ่งทำให้มีขนาดใหญ่มาก แต่ต่อมาก็ได้เปลี่ยนมาใช้สารกึ่งตัวนำ ทำให้ขนาดเล็กลง และยิ่งพัฒนาต่อมาก็ยิ่งเล็กลงเรื่อยๆ กลายเป็นคอมพิวเตอร์แบบที่ใช้กันอยู่ในปัจจุบัน เมื่อคอมพิวเตอร์ เริ่มเล็กและมีราคาถูกก็ทำให้คนทั่วไปเริ่มสามารถใช้กันได้ คอมพิวเตอร์จึงไม่ได้เป็นแค่อุปกรณ์คำนวณอีกต่อไปแต่ถูกใช้ในอีกหลายด้าน เช่นเพื่อการบันเทิง นำไปสู่การสร้างเกมต่างๆมากมายให้พวกเราได้เล่นกัน\nการเขียนโปรแกรม เราได้รู้กันไปแล้วว่าคอมพิวเตอร์ถูกสร้างขึ้นมาเพื่อคำนวณ แต่ว่าต้องทำยังไงมันถึงจะทำการคำนวณสิ่งที่เราต้องการให้?\nการจะให้คอมทำงานนั้นเราต้องป้อนคำสั่งให้เพื่อให้มันทำงาน และชุดของคำสั่งจำนวนมากที่ถูกกำหนดขึ้นเพื่อให้คอมทำงานเป็นระบบตามที่ ต้องการนั้นเรียกว่าโปรแกรมคอมพิวเตอร์ ดังนั้นการกำหนดติดตั้งคำสั่งที่จะให้คอมพิวเตอร์ทำงานนั้นเป็นระบบตามที่ต้องการจึงเรียกว่าการเขียนโปรแกรม (programming) แล้วการป้อนคำสั่งนั้นทำได้อย่างไร? ที่จริงแล้วการทำงานของคอมพิวเตอร์นันซับซ้อนมาก และมีตรรกะการทำงานที่ต่างจากมนุษย์ ภาษาที่ใช้สั่งการคอมนั้นเรียกว่าภาษาเครื่อง ซึ่งยากที่มนุษย์จะทำความเข้าใจ ทำให้ในยุคแรกๆผู้ที่จะใช้คอมพิวเตอร์ต้องมีความเชี่ยวชาญเฉพาะทางอย่างมาก เพื่อให้ง่ายต่อการใช้งานมากขึ้นจึงมีการสร้างภาษาที่ใกล้เคียงกับที่มนุษย์ใช้ กันมากขึ้นตั้งแต่ปี 1950 กว่าๆ คือภาษาแอสเซมบลี (assembly) แต่ภาษาแอสเซมบลีก็ยังยากต่อการใช้งานอยู่ จึงมีการคิดค้นภาษาที่เข้าใจง่ายขึ้น ซึ่งถูกเรียกว่าภาษาระดับสูง ภาษาเหล่านี้เวลาที่ทำงานต้องไปแปลงเป็นภาษาเครื่องอีกทีเพื่อให้คอมเข้าใจ จึงทำให้ช้าลงบ้าง แต่ก็สะดวกในการเขียนมากขึ้น เหมาะสำหรับให้คนทั่วไปใช้งานได้โดยไม่ต้องมีความรู้ด้านคอมพิวเตอร์มากนัก\nภาษาระดับสูงในยุคแรกๆ ได้แก่ ฟอร์แทรน (fortran), ปาสกาล (pascal) และ ซี \u0026copy; เป็นต้น และเวลาผ่านไปก็มีคนคิดภาษาระดับสูงใหม่ๆขึ้นมาเรื่อยๆจนปัจจุบันมีอยู่ จำนวนมากมายนับไม่ถ้วน ในจำนวนนั้น หนึ่งในภาษาที่ได้รับความนิยมก็คือภาษาไพธอน (python) ปัจจุบันภาษาที่ได้รับความนิยมสูงสุดสำหรับเรียนในมหาวิทยาลัยในไทยน่าจะยังคงเป็น ภาษาซี อย่างไรก็ตาม มีบางแห่งเริ่มหันมาสอนภาษาไพธอนแทนกันแล้ว ภาษาไพธอนมีแนวโน้มที่จะเป็นที่นิยมสูงขึ้นเรื่อยๆ ดังนั้นจึงเป็นภาษาหนึ่งที่น่าศึกษาไว้\nไพธอน (Python) ไพธอน หรือ Python เป็นภาษาเขียนโปรแกรมระดับสูง (high-level language) ที่ใช้กันอย่างกว้างขวางในการเขียนโปรแกรมเพื่อวัตถุประสงค์ทั่วไป ภาษาไพธอนนั้นเป็นภาษาแบบการตีความ (interprete) ที่ถูกออกแบบโดยมีปรัญชาที่จะทำให้โค๊ดหรือรหัสทางภาษานั้นอ่านได้ง่ายขึ้น และทำให้โปรแกรมเมอร์สามารถเข้าใจโครงสร้างของภาษาและแนวคิดการเขียนโค๊ดโดยใช้บรรทัดที่น้อยลงกว่าภาษาอื่น เช่น C, C++ และ Java\nไพธอนนั้นมีคุณสมบัติเป็นภาษาเขียนโปรแกรมแบบไดนามิกส์และมีระบบการจัดการหน่วยความจำอัตโนมัติและสนับสนุนการเขียนโปรแกรมหลายรูปแบบ ที่ประกอบไปด้วย การเขียนโปรแกรมเชิงวัตถุ imperative การเขียนโปรแกรมแบบฟังก์ชัน และการเขียนโปรแกรมแบบขั้นตอน ภาษาไพธอนมีไลบรารี่ที่ครอบคลุมการทำงานอย่างหลากหลาย ตัวแปรในภาษาไพธอนนั้นมีให้ใช้ในหลายระบบปฏิบัติการ ทำให้โค๊ดของภาษาไพธอน สามารถทำงานในระบบต่าง ๆ ได้อย่างกว้างขวาง ซึ่งแรกเริ่มนั้นไพธอนถูกพัฒนามาจาก CPython ซึ่งเป็นโปรแกรมแบบเปิด (open source) และมีชุมชนสำหรับเป็นต้นแบบในการพัฒนา เนื่องจากมันได้มีการนำไปพัฒนากระจายไปอย่างหลากหลาย CPython นั้นจึงถูกจัดการโดยองค์กรไม่แสวงหาผลกำไรซึ่งในเวลาต่อมาได้มีชื่ออย่างเป็นทางการว่า Python Software Foundation (PSF)\nภาษาไพธอนนั้นถูกสร้างขึ้นโดยโปรแกรมเมอร์ที่ชื่อว่า Guido van Rossum ที่ Centrum Wiskunde \u0026amp; Informatica (CWI) ในประเทศเนเธอร์แลนด์ เนื่องในผู้ประสบความสำเร็จในการสร้างภาษา ABC ที่มีความสามารถสำหรับการรับมือกับข้อยกเว้น (exception handling) และการติดต่อผสานกับระบบปฏิบัติการ Amoeba ซึ่ง Van Rossum นั้นเป็นผู้เขียนหลักการของภาษาไพธอน และเขาทำหน้าเป็นกลางในการตัดสินใจสำหรับทิศทางการพัฒนาของภาษาไพธอน\nGuido van Rossum - ศาสดาของไพธอน\nปรัชญาของไพธอน หลักปรัชญาของไพธอนสามารถอธิบายได้ด้วย The Zen of Python ซึ่งบัญญัติโดย\nหากรันคำสั่งไปต่อนี้ใน Python interactive\nimport this  ซึ่งจะแสดงผล The Zen of Python ให้เราได้แบบนี้\nThe Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!  แท้จริงแล้วหลักปรัชญาของไพธอนก็คือไพธอนเป็นภาษาที่สามารถสร้างงานได้หลากหลายกระบวนทัศน์ (Multi-paradigm language) โดยจะมองอะไรที่มากกว่าการเขียนโปรแกรมเพื่อนำมาใช้งานตามรูปแบบเดิม ๆ แต่จะเป็นการนำเอาหลักการของกระบวนทัศน์ (Paradigm) แบบเชิงวัตถุ (Object-oriented programming), แบบเชิงโครงสร้าง (Structured programming), แบบฟังก์ชันแนล (Functional programming) และแบบเชิงมุม (Aspect-oriented programming) นำเอามาใช้ทั้งแบบแยกและนำมาใช้ร่วมกัน ซึ่งไพธอนนั้นเป็นภาษาที่มีการตรวจสอบชนิดตัวแปรแบบยืดหยุ่น (dynamically type-checked) และใช้ Garbage collection ในการจัดการหน่วยความจำ\nทำไมต้องไพธอน 1. ง่ายต่อการเรียนรู้\nไพธอนเป็นภาษาโปรแกรมระดับสูง (High-level programming) มีโครงสร้างที่ไม่ซับซ้อน ทำให้ง่ายต่อการเรียนรู้เมื่อเปรียบเทียบกับภาษาโปรแกรมอื่นๆ ไม่ว่าจะเป็นเด็กวัยประถมหรือผู้ใหญ่วัยทำงานก็สามารถที่จะเรียนรู้ได้ ข้อดีดังกล่าวทำให้เราเน้นความสนใจไปกับการแก้ปัญหาจริงๆ มากขึ้น และช่วยลดเวลาสำหรับการตรวจสอบโครงสร้างและสัญลักษณต่างๆ ของภาษาให้น้อยลง ดังนั้นการเลือกภาษาไพธอนเป็นภาษาแรก จะทำให้ผู้ที่เริ่มต้นศึกษาการเขียนโปรแกรมสามารถใช้เวลาตั้งแต่การเรียนรู้ไปจนถึงการเขียนโปรแกรมเพื่อใช้งานจริงในระยะเวลาที่เร็วขึ้นได้\n2. นำไปใช้งานจริงได้\nนอกจากไพธอนจะเป็นภาษาโปรแกรมที่นำมาใช้เพื่อศึกษาการเขียนโปรแกรมแล้ว แต่เราก็สามารถนำไปใช้งานได้จริงและมีประสิทธิภาพได้ ทำให้บริษัทและองค์กรใหญ่ระดับโลก เช่น Google, Facebook, YouTube, Netflix, Dropbox, Agoda และ NASA เลือกที่จะนำภาษาไพธอนมาใช้ในการพัฒนาเพื่อสร้างผลิตภัณฑ์ซอฟต์แวร์ โดยมีผู้ใช้งานจริงหลายล้านคนทั่วโลก\n3. มีไลบรารีครอบคลุมการใช้งานต่าง ๆ\nเนื่องจากภาษาโปรแกรมไพธอนสามารถนำไปพัฒนาซอฟต์แวร์เพื่อตอบสนองความต้องการในงานทางด้านต่างๆ ได้ ทำให้มีนักพัฒนาจำนวนมากต้องการแบ่งปันผลงานร่วมกับนักพัฒนาคนอื่นๆ เพื่อให้ภาษาไพธอนมีความสามารถมากขึ้น โดยมี Python Package Index (PyPI) ซึ่งเป็นแหล่งรวบรวมโมดูลและไลบรารีครอบคลุมการใช้งานทางด้านต่างๆ เช่น วิทยาศาสตร์ วิทยาศาสตร์ข้อมูล พัฒนาเว็บไซต์ ระบบคอมพิวเตอร์ฝังตัว ระบบเครือข่าย และอื่นๆ อีกมากมาย โดยสามารถเข้าไปค้นหาและดาวน์โหลดโมดูลที่ต้องการได้ที่ https://pypi.org/ หลังจากนั้นก็สามารถนำมาใช้งานในโปรแกรมของเราได้ทันที ภาษาไพธอนมีไลบรารีสำหรับงานทางด้านวิทยาศาสตร์ข้อมูล\n4. งานทางด้านวิทยาศาสตร์ข้อมูล\nในปัจจุบันงานทางด้านวิทยาศาสตร์ข้อมูล (Data Science) ได้รับความสนใจเป็นอย่างมาก เนื่องจากบนอินเทอร์เน็ตมีข้อมูลใหม่เกิดขึ้นตลอดเวลา และมีปริมาณข้อมูลระดับมหาศาล (Big Data) ดังนั้นหากเรานำข้อมูลเหล่านี้มาทำวิเคราะห์ในรูปแบบต่างๆ เพื่อเป็นประโยชน์ทางด้านธุรกิจหรือด้านอื่นๆ จะทำให้องค์กรสามารถสร้างความได้เปรียบเหนือคู่แข่งได้ สำหรับภาษาโปรแกรมไพธอนมีไลบรารีที่ครอบคลุมการทำงานทางด้านวิทยาศาสตร์ข้อมูลที่มีคุณภาพ เป็นที่นิยม และพร้อมใช้งานอยู่จำนวนมาก โดยสามารถแสดงข้อมูลดังตารางด้านล่างนี้\n5. เขียนโปรแกรมได้หลายกระบวนทัศน์ (Multi-paradigms programming)\nกระบวนทัศน์การเขียนโปรแกรม (Programming Paradigm) คือแนวคิดหรือสไตล์ในการเขียนโปรแกรม โดยภาษาไพธอนสนับสนุนการเขียนโปรแกรมได้หลายกระบวนทัศน์ เช่น 1) Imperative programming 2) Event driving programming 3) Object Oriented Programming (OOP) และ 4) Functional programming เป็นต้น ทำให้นักพัฒนาซอฟต์แวร์สามารถเขียนโปรแกรมในรูปแบบที่เหมาะสมกับงานประเภทต่างๆ ได้\n6. มีชุมชนนักพัฒนาที่แข็งแกร่ง\nในปัจจุบันภาษาไพธอนได้รับความนิยมสูงอย่างต่อนื่อง ไพธอนมีชุมชนนักพัฒนาจำนวนมาก นอกจากนั้นการเขียนโปรแกรมไม่ได้จำกัดอยู่เฉพาะในแวดวงของวิทยาศาสตร์คอมพิวเตอร์ (Computer Science) เท่านั้น แต่ผู้ที่ทำงานสาขาอื่นก็อาจมีความต้องการจะนำไปใช้ประโยชน์ในงานทางด้านอื่นๆ ด้วย ทำให้มีชุมชนนักพัฒนาที่ใช้งานภาษาไพธอนเกิดขึ้นบนอินเทอร์เน็ตจำนวนมาก หากต้องการศึกษาหาความรู้เพิ่มเติม ก็มีเนื้อหาที่มีคุณภาพในรูปแบบต่างๆ เช่น วิดีโอ หนังสือ บทความ และเอกสารบนอินเทอร์เน็ตให้ค้นคว้าเพิ่มเติมได้ ถ้าหากติดปัญหาใดๆ ก็สามารถค้นหาวิธีการแก้ปัญหาของคนที่เคยพบปัญหามาก่อน หรืออาจจะขอความช่วยเหลือจากสังคมนักพัฒนาที่ชอบแบ่งปันข้อมูลความรู้ระหว่างกันและกันบนอินเทอร์เน็ต เช่น Stack Overflow และ Quora\n7. ทำงานได้หลายแพลตฟอร์ม\nแม้ว่าในช่วงแรกภาษาไพธอนได้ถูกออกแบบมาให้ทำงานบนระบบปฏิบัติการ Unix เพียงอย่างเดียว อย่างไรก็ตามได้มีการพัฒนาให้สามารถนำไปใช้งานได้หลายระบบปฏิบัติการอื่นๆ ได้ด้วย เช่น Windows Mac และ Linux ดังนั้นนักพัฒนาสามารถเขียนโปรแกรมเพียงครั้งเดียว แต่สามารถนำไปใช้งานบนคอมพิวเตอร์เครื่องใดก็ได้ ทำให้ช่วยลดระยะเวลาและค่าใช้จ่ายในการพัฒนา ทดสอบ และบำรุงรักษาซอฟต์แวร์ให้สามารถใช้งานเป็นปกติได้ทุกระบบปฏิบัติการ นักพัฒนาภาษาไพธอนมีรายได้ดีและเป็นที่ต้องการขององค์กรต่างๆ 8.รายได้ดีและเป็นที่ต้องการขององค์กรต่างๆ นักพัฒนาโปรแกรมด้วยภาษาไพธอนเป็นที่ต้องการในสายงานทางด้านพัฒนาซอฟต์แวร์อย่างมาก โดยข้อมูลล่าสุดของเว็บไซต์ https://indeed.com (ข้อมูลเดือนตุลาคม ปี 2018) ในประเทศสหรัฐอเมริกา มีอัตราการจ้างงานนักพัฒนาด้วยภาษาไพธอนจำนวนมาก โดยมีรายได้เฉลี่ยสูงถึงประมาณ $120,432 เหรียญ/ปี ดังนั้นผู้ที่เขียนโปรแกรมด้วยภาษาไพธอนได้ ก็จะสามารถสร้างรายได้ให้กับตัวเอง และมีโอกาสในการทำงานกับองค์กรทุกระดับได้\n8. สามารถนำไปใช้งานได้ฟรี\nภาษาไพธอนยังเป็นซอฟต์แวร์ประเภทโอเพนซอร์ส (Opensource) หมายความว่าเราสามารถนำซอร์สโค้ด (Source code) มาดัดแปลง แก้ไขได้ทั้งหมด โดยไม่จำเป็นต้องขออนุญาต และที่สำคัญเราสามารถนำไปใช้งานได้ฟรี โดยไม่มีค่าใช้จ่ายเรื่องค่าลิขสิทธิ์ใดๆ\nที่มาของชื่อ \u0026ldquo;ไพธอน\u0026rdquo; คำว่าไพธอน (python) เป็นชื่องูสกุลหนึ่ง ซึ่งในภาษาไทยเรียกว่า \u0026ldquo;งูเหลือม\u0026rdquo; หรือ \u0026ldquo;งูหลาม\u0026rdquo; เป็นงูไม่มีพิษ มีชื่อทางวิทยาศาสตร์ว่าสกุล Pythonidae รากศัพท์เดิมมาจากภาษากรีกคำว่า πύθων อ่านแบบกรีกโบราณว่า \u0026ldquo;ปือทอน\u0026rdquo; อ่านแบบกรีกสมัยใหม่ว่า \u0026ldquo;พีโธน\u0026rdquo; แต่พอมาใช้ในภาษาอังกฤษก็แผลงเป็น \u0026ldquo;ไพธอน\u0026rdquo;\n\u0026ldquo;ปือทอน\u0026rdquo; เป็นชื่อของงูยักษ์รูปร่างคล้ายมังกร ซึ่งปรากฏตัวในเทพปกรณัมกรีก แต่ตอนหลังถูกนำมาใช้เป็นชื่อเรียกงูที่มีอยู่จริง อนึ่ง อักษร \u0026ldquo;ธ\u0026rdquo; ในการเขียนทับศัพท์คำว่า \u0026ldquo;ไพธอน\u0026rdquo; ในที่นี้ไม่ได้แทนเสียง \u0026ldquo;ท\u0026rdquo; แต่แทนเสียง th ในภาษาอังกฤษ ซึ่งไม่เหมือน th ในภาษาไทย แต่เป็นเสียงที่ไม่มีอยู่ในภาษาไทย เสียงนี้จริงๆแล้วใกล้เคียง \u0026ldquo;ซ\u0026rdquo; มากกว่า \u0026ldquo;ท\u0026rdquo; เสียอีก ในภาษากรีกใช้อักษร θ \u0026ldquo;เธตา\u0026rdquo; อย่างไรก็ตามกรีกโบราณไม่มีเสียงนี้ แต่ออกเสียง θ เป็นเสียง \u0026ldquo;ท\u0026rdquo; แทน\nสัญลักษณ์ของภาษาไพธอนใช้เป็นรูปงูสองตัวพันกัน ตัวหนึ่งสีเหลือง อีกตัวหนึ่งสีน้ำเงิน\nเวอร์ชันของไพธอน หลังจากที่เริ่มถูกปล่อยออกมาให้ใช้ ภาษาไพธอนก็พัฒนาขึ้นมาเรื่อยๆ มีการปรับปรุงเวอร์ชันใหม่อยู่บ่อยๆ ปัจจุบันออกมาถึงเวอร์ชัน 3. กว่า ๆ อย่างไรก็ตามเวอร์ชัน 2. กว่าๆก็ยังคงเป็นที่นิยมมากกว่า ดังนั้นจึงควรจะทำความรู้จักไว้ทั้งสองแบบ\nไพธอน 2 นั้นเริ่มถูกปล่อยออกมาในปี 2000 ส่วนไพธอน 3 เริ่มถูกปล่อยออกมาในปี 2008 เวอร์ชัน 3 มีการปรับปรุงอะไรต่างๆให้ดีขึ้นจาก 2 ไปพอสมควร แต่เนื่องจากสูญเสียความเข้ากันได้กับเวอร์ชัน 2 หมายความว่าคนที่เคยเขียนไพธอน 2 มาพอจะเปลี่ยนมาไพธอน 3 จำเป็นจะต้องแก้ไขโค้ด ไม่เช่นนั้นจะไม่สามารถอ่านได้ หรือแสดงผลผิดพลาด นั่นทำให้ยังมีผู้ที่ใช้ไพธอน 2 มานานและไม่อยากจะเปลี่ยนอีกเป็นจำนวนมาก แม้จะผ่านมาหลายปีแล้วแนวโน้มก็ยังคงเป็นเช่นนี้อยู่ ภายหลังจากที่มีการออกเวอร์ชัน 3. ไปแล้ว เวอร์ชัน 2. ก็ยังคงมีการปรับปรุงพัฒนาต่อเนื่องมา โดยมีเวอร์ชัน 2.7 ออกมาในปี 2010 โดยนำเอาความสามารถบางส่วนจากไพธอน 3 มาใช้ และถูกวางให้เป็นรุ่นสุดท้ายที่ขึ้นต้นด้วย 2.\nปัจจุบันไพธอน 2.7 ได้รับความนิยมอย่างมาก เพราะในปัจจุบันโปรแกรมต่าง ๆ ที่ใช้ภาษาไพธอนยังสนับสนุนเวอร์ชัน 2.x เป็นหลักอยู่ อย่างไรก็ตาม แนวโน้มในอนาคตเวอร์ชัน 3.x จะได้รับการสนับสนุนมากขึ้นเรื่อยๆ ผู้ฝึกใช้ใหม่ๆมักถูกแนะนำให้ใช้ 3.x มากกว่า ดังนั้นบทความนี้จะเน้นเวอร์ชัน 3.x เป็นหลัก แต่เพื่อให้คนที่ต้องการใช้ไพธอน 2 สามารถอ่านแล้วอ้างอิงตามได้ด้วย จึงได้เขียนสรุปเรื่องความแตกต่างตรงนี้แยกเอาไว้ สามารถอ่านได้ที่ https://phyblas.hinaboshi.com/20151217\nไพธอนถูกใช้เพื่อสร้างอะไรมาแล้วบ้าง  โปรแกรมฟรี เช่น BitTorrent, Dropbox, Blender ส่วนประกอบของเว็บไซต์ต่างๆเช่น Google, Yahoo!, YouTube โปรแกรมที่ใช้ในหน่วยงานวิจัย เช่น NASA, องค์กรวิจัยเครื่องเร่งพลังงานสูงของญี่ปุ่น (高エネルギー加速器研究機構) ฯลฯ  การใช้งานภาษาไพธอน ไม่ว่าจะเป็นภาษาอะไรก็ตาม การที่จะทำงานได้นั้นต้องประกอบไปด้วยโปรแกรมที่ใช้ในการอ่านตีความหมายของ สิ่งที่เราเขียนลงไปให้กลายเป็นภาษาเครื่องเพื่อให้มันทำงานตามที่เราต้องการ หากให้เปรียบเทียบก็เหมือนกับการแปลงภาษามนุษย์นั่นเอง สมมุติว่ามีนายทุนคนหนึ่งไปเปิดโรงงานในต่างประเทศ โรงงานจะทำงานได้ต้องใช้คนงาน แต่พวกคนงานที่นั่นเขาไม่รู้ภาษาไทย และนายทุนก็ไม่รู้ภาษาอังกฤษ นายทุนจะสั่งงานพวกคนงานให้ทำงานอย่างที่ตัวเองต้องการก็ต้องทำผ่านล่ามให้ ช่วยแปลเป็นภาษาอังกฤษเพื่อจะได้สั่งคนงานได้\nในกรณีนี้ภาษาไพธอนก็เทียบได้กับภาษาไทย คือเป็นภาษาง่ายๆที่เราเข้าใจดีอยู่แล้ว แต่ว่าไม่สามารถนำไปสั่งงานได้โดยตรง ส่วนภาษาอังกฤษก็เทียบได้กับภาษาเครื่อง คือเป็นภาษาที่สามารถนำไปใช้งานได้จริงแต่เราไม่เข้าใจ โดยคนงานก็เทียบได้กับคอมพิวเตอร์ นายทุนเปรียบได้กับผู้เขียนโปรแกรม ส่วนล่ามก็เปรียบได้กับตัวแปรภาษาในคอมพิวเตอร์ ตัวที่ทำหน้าที่ตีความภาษาจะเรียกว่าคอมไพเลอร์ (compiler)\nนอกจากคอมไพเลอร์แล้ว ส่วนประกอบที่สำคัญอีกอย่างรองลงมาก็คือส่วนที่เอาไว้ใช้สำหรับเขียนข้อความลงไป ซึ่งเรียกว่าอีดิเตอร์ (editor) เหมือนกับเราเขียนข้อความในกระดาษบอกล่ามไปทีเดียวเลยว่าต้องการให้ทำอะไรบ้าง แล้วล่ามก็เอาไปบอกคนงานทีเดียว ไม่ต้องคอยสั่งทีละประโยค อีดิเตอร์กับคอมไพเลอร์อาจไม่จำเป็นต้องอยู่ภายในโปรแกรมเดียวกัน เราอาจเขียนโค้ดผ่านโปรแกรมง่ายๆเช่น notepad จากนั้นค่อยนำไปรันก็ได้ ดังนั้น ดังนั้นอีดิเตอร์จึงไม่มีความสำคัญเท่าคอมไพเลอร์\nอย่างไรก็ตาม โปรแกรมที่ใช้ทำงานกับภาษาไพธอนนั้นมักจะประกอบไปด้วยอีดิเตอร์ที่ช่วยอำนวยความสะดวกให้การเขียนง่ายขึ้น เช่นมีการใส่สีให้ข้อความสำคัญ และมีตัวตรวจไวยากรณ์ทำให้มีการฟ้องเวลาเจอข้อผิดพลาดทางวากยสัมพันธ์ (syntax error) ในขณะที่หากเขียนใน notepad จะไม่มีทางรู้ได้เลยว่าผิดตรงไหน นอกจากนี้ยังมีตัวตรวจบั๊ก (debugger) ซึ่งมีไว้ค้นหาข้อผิดพลาดในการทำงานของโปรแกรม\nนอกจากการเขียนโปรแกรมและให้คอมไพเลอร์อ่านแล้ว ในบางภาษาซึ่งรวมถึงภาษาไพธอนด้วยนั้นยังมีอีกวิธีหนึ่งในการใช้งาน นั่นคือการสั่งให้ทำงานแบบคำต่อคำ ซึ่งก็เทียบได้กับการที่นายทุน สั่งล่ามแล้วล่ามก็ไปสั่งคนงานทันทีโดยตรง แล้วคนงานก็เริ่มทำงาน พอทำเสร็จนายทุนก็สั่งงานต่อไปอีกทันที ส่วนที่ใช้สั่งงานโปรแกรมแบบคำต่อคำนั้นเรียกว่า เชลโต้ตอบ (interactive shell) และในกรณีนี้ตัวประมวลผลจะถูกเรียกว่าอินเทอร์พรีเตอร์ (interpreter) ข้อดีคือเห็นผลทันทีอย่างรวดเร็ว ไม่จำเป็นต้องเซฟแล้วค่อยสั่งรัน แต่ข้อเสียคือใส่คำสั่งได้ทีละนิดและต้องสั่งไปเรื่อยๆ ไม่สามารถสั่งงานทิ้งไว้แล้วให้ทำงานยาวๆได้\nสรุปโดยรวม สิ่งที่ต้องมีเพื่อจะทำงานกับภาษาไพธอนก็คือ\n คอมไพเลอร์ ไว้ตีความโค้ดที่เราเขียนเพื่อสั่งให้คอมทำงาน อีดิเตอร์ เอาไว้เขียนโค้ดยาวๆเพื่อให้คอมไพเลอร์อ่านแล้วสั่งคอมอีกที เชลโต้ตอบ เอาไว้ป้อนโค้ดเพื่อสั่งการคอมทันที  ควรจะเริ่มต้นยังไงดี ก่อนอื่นต้องตั้งเป้าว่าจะเรียนไปเพื่ออะไร ถ้าเรียนรู้แล้วไปได้ไกลจริงๆก็สามารถเขียนโปรแกรมอะไรต่างๆได้แทบทุกอย่าง เช่นสร้างโปรแกรมออกมาใช้เองหรือแจกคนอื่น หรือจะสร้างเกมก็สร้างได้ และถ้าทำได้ดีอาจทำขายได้ แล้วก็ดัง\u0026hellip;! อาจดูเพ้อฝันไปสักหน่อย แต่มองเป้าหมายไกลๆไว้ก่อนก็ไม่มีอะไรเสียหาย เพียงแต่ต้องรู้ว่ากว่าจะถึงตอนนั้นต้องผ่านขั้นตอนอะไรมาบ้าง ไม่ว่าอะไรก็ตามต้องเริ่มต้นจากศูนย์กันหมด หากมีพื้นฐานมาแล้วก็ไปได้เร็วขึ้น\n โอกาส ที่วิเศษนั้นอาจซ่อนแฝงอยู่ภายในปรากฏการณ์ที่ดูเหมือนกับว่าไม่มีอะไร แต่มันจะปรากฏให้เห็นได้เฉพาะคนที่มีเป้าหมายในใจอย่างแรงกล้าเท่านั้น\n แหล่งศึกษาสำหรับผู้เริ่มต้น  Official Document\n MascusCode\n เว็บไซต์ MarcusCode มีบทเรียนในการเขียนโปรแกรมในภาษา Python ในพื้นฐานจนถึงระดับสูงแยกตามบท ซึ่งเนื้อหาที่เว็บไซต์นี้สอนนั้นจะกระชับและตรงประเด็น ทำให้ผู้ที่ศึกษาตามสามารถเข้าใจถึงหลักการของภาษาไพธอนได้อย่างรวดเร็ว ตัวอย่างของเนื้อหาที่สอน เช่น โครงสร้างของภาษาไพธอน ตัวแปรและประเภทข้อมูล ตัวดำเนินการ อาเรย์และฟังก์ชัน Link: http://marcuscode.com/lang/python  Google for Education\n เรียนไพธอนที่กูเกิลสำหรับการศึกษา (Google for Education) ก็เป็นอีกช่องทางหนึ่งที่น่าสนใจ ศึกษาไพธอนกับองค์กรระดับโลกอย่างกูเกิล มีทั้งตัวอย่างของโค๊ดและวิดีโอสอน นอกจากนี้ยังช่วยให้เราฝึกภาษาอังกฤษอีกด้วย Link: https://developers.google.com/edu/python/  เว็บไซต์ Dot Python\n เว็บไซต์สอนภาษาไพธอนที่แบ่งเนื้อหาออกเป็นหมวดหมู่ สามารถอ่านและศึกษาตามได้อย่างง่าย ๆ สอนโดยคุณทวีรัตน์ นวลช่วย คณะวิทยาศาสตร์และเทคโนโลยี มหาวิทยาลัยราชภัฏสงขลา Link: https://sites.google.com/site/dotpython/    เว็บบล็อก PhyBlas\n เว็บไซต์ที่สอนเนื้อหาไพธอนที่อธิบายและยกตัวอย่างได้เห็นภาพ เหมาะกับผู้เริ่มต้นเป็นอย่างยิ่ง Link: https://phyblas.hinaboshi.com/saraban/python   บล็อก python3.wannaphong\n สอนพื้นฐานภาษาไพธอน โดย วรรณพงษ์ ภัททิยไพบูลย์ Link: https://python3.wannaphong.com/p/blog-page_7.html  Free Code Camp ได้เผยแพร่ไว้ในบทความ \u0026ldquo;# The Best Python Tutorials\u0026rdquo; ดังนี้\n Python Practice Book: http://anandology.com/python-practice-book/index.html\n Think Python: http://greenteapress.com/thinkpython/html/index.html\n Practical Business Python: http://pbpython.com/\n Another course: https://realpython.com/?utmsource=fsp\u0026amp;utmmedium=promo\u0026amp;utm_campaign=bestresources\n General: https://www.fullstackpython.com/\n Learn the Basics: https://www.codecademy.com/learn/learn-python\n Computer science using Python: https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-11?ref=hackernoon#!\n List of more resources for learning python: https://github.com/vinta/awesome-python\n Interactive Python: http://interactivepython.org/runestone/static/thinkcspy/index.html\n Developer’s Guide to Python: https://devguide.python.org/\n  Reference :\n https://phyblas.hinaboshi.com/tsuchinoko01 Python Thailand - แหล่งเรียนรู้ภาษาไพธอนสำหรับคนไทย  แหล่งความรู้เพิ่มเติม  Python Tips  "});index.add({'id':14,'href':'/library/tutorials/docs/articles/python/python-101/','title':"Python 101",'content':" Python 101 ฉบับรวบลัด การแสดงผล และรับข้อมูล เริ่มแรกลอง print “hello world” กันก่อน\nprint(\u0026quot;hello_world\u0026quot;)  Data type (ประเภทข้อมูล) 1. String String ก็เป็นตัวแปรที่เก็ยตัวอักษร หรือข้อความ คราวนี้เรามาลองรับ input เป็นชื่อเก็บใส่ตัวแปรที่ชื่อว่า name แล้ว print ออกมากันครับ\nในที่นี้ตัวแปร name ก็จะมี data type คือ string นั้นเอง\nname = input(\u0026quot;What is your name? \u0026quot;) print(\u0026quot;Hello \u0026quot;,name)  2. Numeric    Type Description     Integer จำนวนเต็ม เช่น 10, 20   Float ทศนิยม เช่น 10.0, 20.5    ต่อมาลองรับ input เป็น integer 1 ตัว และ float 1 ตัว แล้วเอามาบวกกันแสดงผลรับเป็น integer\nnum1 = input() # Cast string to integer num1 = int(num1) num2 = input() # Cast string to float num2 = float(num2) total = num1 + num2 # Cast to integer total = int(total) print(\u0026quot;total:\u0026quot;,total)  3. List List ก็คือตัวแปรที่คล้ายๆกับ array ใน C/C++ หรือภาษาอื่นๆนั้นเอง สำหรับใครที่เขียน python เป็นภาษาแรก ให้นึกถึง ตารางที่เก็บข้อมูล\nสมมติ เรามีข้อมูลคะแนนนักเรียนอยู่ 5 คน ดังนี้ 20, 40, 30, 50, 35 เราก็จะสร้างตัวแปรชื่อ score ขึ้นมา\nโดยที่ List จะเก็บค่าไว้ใน [] แต่ละข้อมูลคั่นด้วย comma (,)\nscore = [20, 40, 30, 50, 35]  แล้วถ้าเรา อยากเก็บว่าเพื่อนในห้องเรียนนั่งตรงไหนกันบ้าง ให้เรามีเพื่อน 12 คน\nมีเก้าอี้อยู่ 4 แถว แถวละ 3 ตัว เราก็วาดตารางขึ้นมาก่อน\n    คอลัมน์ 1 คอลัมน์ 2 คอลัมน์ 3     0 แถว1 A J   1 แถว2 F B   2 แถว3 D C   3 แถว4 G E    เราก็จะสร้าง List แบบนี้\ntable = [ ['A','J','L'], # row 1 ['F','B','I'], # row 2 ['D','C','H'], # row 3 ['G','E','K'], # row 4 ] print(table)  แต่ในการเขียน Program เราจะเริ่มนับแถว กับคอลัมน์ ตั้งแต่ 0 ใช้คำว่า Index ในการบอกตำแน่ง\n่เช่น อยากรู้ว่า K นั่งอยู่ตรงไหน ก็คือ แถว 4 คอลัมน์ 3 พอเป็นในทาง programming เราก็จะบอกว่า K อยู่ที่ Index 3,2\nและถ้าทุกคนสังเกต 2 ตัวอย่างผ่านมาจะรู้ว่า List สามารถเก็บตัวแปรประเภทใดก็ได้ สามารถเก็บตัวแปรคนละชนิด ไว้ใน List เดียวกันก็ได้ เช่น\nperson = [\u0026quot;sk\u0026quot;, \u0026quot;conan\u0026quot;, \u0026quot;20\u0026quot;] print(\u0026quot;Name:\u0026quot;, person[0], \u0026quot; Lastname:\u0026quot;, person[1], \u0026quot; Age:\u0026quot;, person[2])  4. Numpy array อันนี้ผมอยากให้ทุกคนได้รู้จักเพราะว่า blog ของผมก็เป็น blog เกี่ยวกับ image processing กับ Computer vision เนอะ แล้วมันเกี่ยวกันยังไงใช่มั้ยครับ\nเพราะว่า Library OpenCV ที่เราใช้ในการทำ Image processing กันเนี่ยมันจะเก็บข้อมูลรูปภาพไว้ใน Numpy array\nNumpy array คือ ตารางหรือ array ที่เก็บค่าข้อมูลที่มี Data type เหมือนกัน ถ้าเป็นรูป ก็จะต้องมี Data type เป็น uint8 มาลองใช้งานกันเลยดีกว่าครับ\nimport numpy as np # Covert list to numpy array that have a datatype is uint8 a = np.array([1,2,3,4], np.uint8) print(a) # Show type of variable a print(type(a)) # Show Data type in variable a print(a.dtype)  Operators (ตัวดำเนินการ) มันก็จะถูกแบ่งแยกย่อยไปอีก เราจะดูเฉพาะตัวที่สำคัญๆนะครับ\n1. Arithmetic Operators จะเป็นตัวดำเนินเกี่ยวกับ Math โดยจะสรุปไว้ตามตารางข้างล่างนะครับ กำหนดให้ a = 10, b = 7\n    Operator Description Example Result     0 + การบวก a + b 17.0   1 - การลบ a - b 3.0   2 * การคูณ a * b 70.0   3 / การหาร a / b 1.4285714   4 % การหาเศษ จากการหาร a % b 3.0   5 ** การยกกำลัง a**b 10000000.0   6 // การหารแบบไม่เอาเศษ a//b 1.0    2. Assignment Operators จะเป็นการให้ค่าตัวแปร กำหนดให้ a = 10\n   Operator Example Result of a     += a += 3 13.0   -= a -= 3 7.0   *= a *= 3 30.0   / a / b 1.4285714   % a %= 3 1.0   ** = a** = 3 1000.0   //= a//=3 1.0    3. Comparison Operators จะเป็นการเปรียบเทียบ กำหนดให้ a = 10, b = 10 | |Operator|Description|Example|Result| |:\u0026mdash;\u0026ndash;:|:\u0026mdash;\u0026mdash;-:|:\u0026mdash;\u0026mdash;\u0026mdash;:|:\u0026mdash;\u0026mdash;\u0026mdash;:|:\u0026mdash;\u0026mdash;\u0026mdash;:| |0|==|ความเท่ากัน|a == b|True| |1|!=|ความไม่เท่ากัน|a != b|False| |2|\u0026gt;|มากกว่า|a \u0026gt; b|False| |3|\u0026lt;|น้อยกว่า|a \u0026lt; b|False| |4|\u0026gt;=|มากกว่าเท่ากับ|a \u0026gt;= b|True| |5|\u0026lt;=|น้อยกว่าเท่ากับ|a \u0026lt;= b|True|\n4. Logical Operators เป็นการเปรียบเทียบทางตรรกศาสตร์ กำหนดให้ a = True, b = False\n   Operator Description Example Result     and ต้องจริงทั้ง 2 ค่า ถึงจะเป็นจริง นอกนั้นเป็นเท็จ a and b False   or ต้องเท็จ 2 ค่า ถึงจะเป็นเท็จ นอกนั้นเป็นจริง a or b True   not ให้ค่าตรงข้าม not (a and a) False    If-Else Condition เป็นการเขียนเพื่อควบคุมการทำงานของโปรแกรมให้เป็นไปตาม ทางเลือก ที่เราตั้งไว้ เช่น ตัวอย่างที่ฮิตก็เป็นการตัดเกรด 80 มากกว่าเท่ากับได้ A, 70 -\u0026gt; B, 60 -\u0026gt; C, 40 -\u0026gt; D และต่ำกว่า 40 ได้ F\nโดยรูปแบบการเขียนก็มี 3 แบบ\n1. if condition ถ้า if เป็นจริงก็ทำ statement1\nif condition: statement 1  2. if-else condition ในส่วนของ if else ก็แปลตรงตัวเลยครับ ถ้า if เป็นจริงก็ทำ statement1 ถ้าไม่จริงก็ทำ statement2 ใน else\nif condition: statement 1 else: statement 2  3. if-elif-else condition ในส่วนนี้ก็ถ้า if เป็นจริงก็ทำ statement1 ถ้าไม่จริงก็ไล่ check ทีละ elif ถ้า codition ไหนเป็นจริงก็เข้าไปทำ statement นั้น โดย elif จะมีมากกว่า 2 อันก็ได้ สุดท้ายถ้าไม่มี condition ไหนที่เป็นจริงเลยก็ทำ else\nif condition 1: statement 1 elif condition 2: statement 2 elif condition 3: statement 3 else: statement 4  มาดูโค้ดตัดเกรดกันครับ\nscore = int(input()) if score \u0026gt;= 80: print(\u0026quot;You got A\u0026quot;) elif score \u0026gt;= 70: print(\u0026quot;You got B\u0026quot;) elif score \u0026gt;= 60: print(\u0026quot;You got C\u0026quot;) elif score \u0026gt;= 40: print(\u0026quot;You got D\u0026quot;) else: print(\u0026quot;You got F\u0026quot;)  While Loop เป็นการทำอะไรที่ต้องวนหลายๆรอบจน กระทั่ง เงื่อนไขที่ตั้งไว้เป็น False เช่น ให้แสดงเลข 1 ถึง n\nn = int(input()) i = 1 while i \u0026lt;= n: print(i) i += 1  จากโค้ดข้างบนเราจะเห็นว่ามีการตั้ง Condition ไว้ว่า ถ้า i \u0026lt;= n ก็ยังให้ loop ทำงานอยู่ ซึ่งในการทำงานแต่ละรอบ ค่า i ก็จะถูกเพิ่มค่าทีละ 1 เราจะเห็นว่าเมื่อค่า i เพิ่มค่าเป็น n+1 Loop ก็จะไม่ทำงาน\nFor Loops การทำงานคล้ายๆ กับ while loop ต่างกันที่ for มีการกำหนดตัวแปร และเพิ่มค่าตรงส่วนของ Condition เลย โดยการเขียน for มีลักษณะ ดังนี้\n# Loop 1 for i in range(start, stop, step): statement # Loop 2 for i in range(start, stop) statement  อันนี้เป็นการสรุปคร่าวๆนะครับ เนื่องจากว่าช่วงนี้ต้องสอน Python ในรุ่นน้องด้วยเวลาที่จำกัดก็เลยลองเขียนบทความนี้ขึ้นมา เดี๋ยวจะมาอัพเดทเรื่อยๆครับ\nที่มาบทความ : skconan.com.  "});index.add({'id':15,'href':'/library/tutorials/docs/python/pythonthailand/','title':"Python Thailand",'content':" Python Thailand Python Thailand - แหล่งเรียนรู้ภาษาไพธอนสำหรับคนไทย print(\u0026quot;Hello Thai Pythonista!\u0026quot;)  ยินดีต้อนรับเข้าสู่ Python Thailand เว็บไซต์ที่เปรียบเสมือนเป็นประตูบานแรกสำหรับคนที่ต้องการก้าวเข้ามาสู่จักรวาลของภาษาไพธอน เว็บไซต์นี้ได้รวบรวมแหล่งข้อมูลที่เกี่ยวข้องกับภาษาไพธอนที่ถูกเขียนขึ้นในภาษาไทย ไม่ว่าจะเป็นทั้งการสอนไพธอน เว็บบล็อกไพธอน รวมถึงวิดีโอที่เกี่ยวกับไพธอนต่าง ๆ ไพธอนนั้นมีประโยชน์มากมาย ไพธอนเปรียบเสมือนไม้กายสิทธิ์ที่สามารถช่วยให้เราสร้างสรรค์นวัตกรรมหรือสิ่งใหม่ ๆ ให้กับมวลมนุษยชาติได้\nด้วยเนื้อหาที่รวบรวมในเว็บไซต์นี้ คุณจะสามารถเขียนโปรแกรมด้วยภาษาไพธอนได้ เริ่มตั้งแต่การสร้างแอพพลิเคชันอย่างง่ายไปจนถึงโปรแกรมการคำนวณที่ซับซ้อน คุณจะเข้าใจหลักการสำคัญในการเขียนโปรแกรมทั้งในพื้นฐานทั้งหมดและในขั้นสูงที่เป็นการเขียนโปรแกรมแบบเชิงวัตถุ คุณจะได้รู้จักกับเครื่องมือที่ใช้ในการพัฒนาโปรแกรมหลากหลายรูปแบบ ซึ่งเนื้อหาเหล่านี้เป็นพื้นฐานที่สำคัญที่จะทำให้คุณสามารถนำไปพัฒนาทักษะการเขียนโปรแกรมภาษาไพธอน ของคุณในขั้นสูงต่อไป เช่น การพัฒนาเว็บไซต์ การสร้างเกม ฐานข้อมูล เน็ตเวิร์ค การจัดการกราฟฟิค\nภาษาไพธอน  ประวัติและต้นกำเนิด ตราสัญลักษณ์ของภาษาไพธอน ปรัชญาของไพธอน เกร็ดความรู้เกี่ยวกับไพธอน ทำไมต้องไพธอน ความสำเร็จของไพธอน   ดาวน์โหลดไพธอนและเครื่องมืออื่น ๆ  เริ่มต้นใช้งานไพธอน ระบบปฏิบัติการที่รองรับ ดาวน์โหลดไพธอน การติดตั้งไพธอน โปรแกรมแก้ไขข้อความสำหรับเขียนภาษาไพธอน ไลบรารี่และแพคเกจ   เนื้อหาไพธอน เลือกระดับความยากของเนื้อหา\n เริ่มต้น (Beginner) ปานกลาง (Intermediate) ขั้นสูง (Advanced)   โจทย์และการแก้ปัญหา  ระดับพื้นฐาน ระดับปานกลาง ระดับยาก โจทย์แข่งขัน คำถามสอบสัมภาษณ์งาน   หนังสือแนะนำ  Python ๑๐๑ คณะวิศวกรรมศาสตร์ จุฬา ฯ เชี่ยวชาญการเขียนโปรแกรมด้วยไพธอน ผศ.ดร. สุชาติ คุ้มมะณี Text books ต่างประเทศอื่น ๆ ที่แนะนำ   แชนแนลยูทูปแนะนำ  SIPA programming prasertcbs Kong Ruksiam Piyanop Nuchanat AI บ้านบ้าน Rangsiman Uncle Engineer   ทอล์คและพอดแคสต์น่าสนใจ  PyCon Thailand 2019 PyCon Thailand 2018 ทำไมเราต้องเรียน Python (ไพธอน) by CodeKids อื่น ๆ   บทความ แบ่งตามหมวดหมู่\n ทั่วไป การพัฒนาเว็บไซต์และอินเทอร์เน็ต การพัฒนาซอฟต์แวร์ การพัฒนาแอพพลิเคชันแบบ Desktop GUI การประยุกต์ใช้ทางคณิตศาสตร์และวิทยาศาสตร์ การประยุกต์ใช้ทางการศึกษา การประยุกต์ใช้ทางศิลปะ การประยุกต์ใช้ทางภาษา การประยุกต์ใช้ทางธุรกิจ เกมส์และ 3D กราฟฟิก ปัญญาประดิษฐ์ (AI) การเรียนรู้แบบลึก (DL) การเรียนรู้ของเครื่องจักร (ML) การจัดการและการเข้าถึงฐานข้อมูล การวิเคราะห์ข้อมูล การประมวลผมภาพ การประยุกต์ใช้ทางมัลติมีเดีย   ผลงานของคนไทยที่สร้างสรรค์ด้วยไพธอน  PyThaiNLP   ชุมชนและสื่อออนไลน์  Python-Thailand สมาคม Python Dev แห่งประเทศไทย ThaiPy Bangkok Thailand Machine Learning \u0026amp; Artificial Intelligence Data Science BKK Colab Thailand เขียนงูให้วัวกลัว   งานประชุมและสัมมนา  PyCon Thailand ThaiPy Bangkok Meetup Code Mania TECHJAM PySomTum   แหล่งเรียนรู้ต่างประเทศ  คอร์สเรียนฟรีไพธอนของต่างประเทศที่น่าสนใจ   ฟอรั่ม  Python Wiki Python Forum r/learnpython/   เบ็ดเตล็ด  เอกสารรวบรวมคำสั่ง   ร่วมเป็นหนึ่งในทีมพัฒนา ใครที่สนใจพัฒนาเว็บไซต์ไม่ว่าจะเป็นการอัพเดทเนื้อหาใหม่หรือการแก้ไขปรับปรุงเนื้อหาเดิมให้มีความถูกต้องมากขึ้น สามารถดูรายละเอียดเพิ่มเติมได้ที่นี่ หรือติดต่อมาทางผู้พัฒนาได้ตามช่องทางต่อไปนี้\n เพจ สมาคม Python Dev แห่งประเทศไทย กลุ่ม Python-Thailand GitHub https://github.com/python-thailand  "});index.add({'id':16,'href':'/library/tutorials/docs/python/beginer/variable/','title':"ตัวแปรและประเภทข้อมูล",'content':" Variable \u0026amp; Data Types (ตัวแปรและประเภทข้อมูล) ตัวแปรและประข้อมูลในภาษา Python เราจะพูดถึงการประกาศตัวแปรและการนำตัวแปรไปใช้งานในโปรแกรม และเราจะอธิบายถึงข้อมูลประเภทต่างๆ ที่เป็น Primitive datatype ในภาษา Python และรวมทั้งฟังก์ชันสำหรับการใช้งานกับตัวแปร\nตัวแปร ตัวแปร (variable) คือชื่อหรือเครื่องหมายที่กำหนดขึ้นสำหรับใช้เก็บค่าในหน่วยความจำ ตัวแปรจะมีชื่อ (identifier) สำหรับใช้ในการอ้างถึงข้อมูลของมัน ในการเขียนโปรแกรม ค่าของตัวแปรสามารถที่จะกำหนดได้ใน run-time หรือเปลี่ยนแปลงอยู่ตลอดเวลาในขณะที่โปรแกรมทำงาน (executing)\nในการเขียนโปรแกรมคอมพิวเตอร์นั้น ตัวแปรจะแตกต่างจากตัวแปรในทางคณิตศาสตร์ ค่าของตัวแปรนั้นไม่จำเป็นต้องประกอบไปด้วยสูตรหรือสมการที่สมบูรณ์เหมือนกับในคณิตศาสตร์ ในคอมพิวเตอร์ ตัวแปรนั้นอาจจะมีการทำงานซ้ำๆ เช่น การกำหนดค่าในที่หนึ่ง และนำไปใช้อีกที่หนึ่งในโปรแกรม และนอกจากนี้ยังสามารถกำหนดค่าใหม่ให้กับตัวแปรได้ตลอดเวลา ต่อไปเป็นตัวอย่างของการประกาศตัวแปรในภาษา Python\na = 3 b = 4.92 c = \u0026quot;marcuscode.com\u0026quot; c = 10.5  ในตัวอย่าง เราได้ทำการประกาศ 3 ตัวแปร ในการประกาศตัวแปรในภาษา Python คุณไม่จำเป็นต้องระบุประเภทของตัวแปรในตอนที่ประกาศเหมือนในภาษา C ในตัวแปร a มีค่าเป็น 3 และเป็นประเภทเป็น Integer ตัวแปร b มีค่าเป็น 4.92 และเป็นประเภทเป็น Float และตัวแปร c มีค่าเป็น \u0026ldquo;marcuscode.com\u0026rdquo; และเป็นประเภท String ภายหลังเราได้เปลี่ยนค่าของตัวแปร c เป็น 10.5 ตัวแปรกลายเป็นประเภท Float\na, b = 1, 2 x = y = z = 10 print(\u0026quot;a = \u0026quot; , a) print(\u0026quot;b = \u0026quot; , b) print(\u0026quot;x = \u0026quot; , x) print(\u0026quot;y = \u0026quot; , y) print(\u0026quot;z = \u0026quot; , z)  ในภาษา Python นั้นสนับสนุนการกำหนดค่าให้กับตัวแปรหลายค่าในคำสั่งเดียว ในตัวอย่าง เป็นการกำหนดค่า 1 และ 2 กับตัวแปร a และ b ตามลำดับ และในคำสั่งต่อมาเป็นการกำหนดค่า 10 ให้กับตัวแปร x y และ z ซึ่งทำให้การเขียนโปรแกรมสะดวกและรวดเร็วมากขึ้น\na = 1 b = 2 x = 10 y = 10 z = 10  นี่เป็นผลลัพธ์การทำงานของโปรแกรม\nต่อไปจะเป็นการพูดถึงประเภทข้อมูลชนิดต่างๆ ที่ภาษา Python สนับสนุน ซึ่งจะมีอยู่สามประเภทใหญ่ๆ คือ ข้อมูลแบบตัวเลข นั้นจะแบ่งย่อยออกเป็น Integer และ Float ข้อมูลประเภท String และข้อมูลแบบลำดับ เช่น List และ Tuple ประเภทข้อมูลทั้งหมดนี้เป็น Built-in type ในภาษา Python\nNumbers ในภาษา Python นั้นสนับสนุนข้อมูลแบบตัวเลข ซึ่งข้อมูลประเภทนี้จะแบ่งออกเป็น Integer Float Decimal และ Complex อย่างไรก็ตามเราจะเน้นย้ำใน Integer ซึ่งเป็นการเก็บข้อมูลแบบจำนวนเต็ม และ Float เป็นข้อมูลแบบจำนวนจริง สำหรับประเภทแบบ Decimal นั้นแตกต่างไปจาก Float คือสามารถเก็บความละเอียดของจุดทศนิยมได้มากกว่า นอกจากนี้ Python ยังสนุนตัวเลขในรูปแบบ Complex ที่แสดงในแบบ a +bj ต่อไปเป็นตวอย่างในการประกาศและใช้งานตัวแปรแบบตัวเลขในภาษา Python\n# Integer a = 7 b = 3 c = a + b d = a / b print ('a = %d' % a) print ('b = %d' % b) print ('c = %d' % c) print ('d = ', d)  ในตัวอย่าง เป็นการประกาศและใช้งานตัวแปรประเภท Integer เราได้ทำการประกาศตัวแปรและกำหนดค่าให้กับ a และ b ในการแสดงผลในรูปแบบของ String format กับฟังก์ชัน print() นั้นจะใช้ specifier เป็น %d เราสามารถกำหนดค่าให้กับตัวแปรได้โดย Literal หรือ Expression และการหารตัวเลขในภาษา Python นั้นจะได้ค่าเป็น Float เสมอ ถึงแม้ตัวเลขทั้งสองจะเป็น Integer ก็ตาม เช่นในตัวแปร d\na = 7 b = 3 c = 10 d = 2.3333333333333335  นี่เป็นผลลัพธ์การทำงานของโปรแกรม\n# Floating point number speed = 34.12 pi = 22 / 7 height = 2.31E5 length = 1.3E-3 print ('speed = %f' % speed) print ('pi = %f' % pi) print ('height = %f' % height) print ('length = %f' % length) print (pi)  ต่อไปเป็นการประกาศและใช้งานตัวแปรประเภท Float หรือตัวเลขที่มีจุดทศนิยม ในการกำหนดค่าใก้กับตัวแปรนั้นเมื่อคุณกำหนดค่าที่มีจุดนั้นตัวเลขจะเป็นประเภท Float อัตโนมัติ เราสามารถกำหนดค่าโดยตรงหรือในรูปแบบของ Expression ได้ และนอกจากนี้ในภาษา Python ยังสามารถกำหนดในรูปแบบสัญกรณ์วิทยาศาสตร์ได้เหมือนในตัวแปร height ซึ่งหมายถึง 2.31 x 10 ^ 5 และในตัวแปร length ซึ่งหมายถึง 1.3 x 10 ^ -3\nspeed = 34.120000 pi = 3.142857 height = 231000.000000 length = 0.001300 3.142857142857143  นี่เป็นผลลัพธ์การทำงานของโปรแกรม ซึ่งในการแสดงผลของข้อมูลประเภท Float กับการจัดรูปแบบของตัวเลขนั้นจะใช้ %f สำหรับการดูค่าเต็มของตัวเลขจริงๆ นั้นเราจะแสดงค่าของตัวเลขโดยเหมือนในคำสั่งแสดงผลค่าของ pi ในคำสั่งบรรทัดสุดท้าย\nStrings Strings นั้นเป็นประเภทข้อมูลที่สำคัญและใช้งานทั่วไปในการเขียนโปรแกรม ในภาษาเขียนโปรแกรมส่วนมากแล้วจะมีประเภทข้อมูลแบบ String และในภาษา Python เช่นกัน String เป็นลำดับของตัวอักษรหลายตัวเรียงต่อกัน ซึ่งในภาษา Python นั้น String จะอยู่ในเครื่องหมาย Double quote หรือ Single quote เท่านั้น นอกจากนี้ในภาษา Python ยังมีฟังก์ชันในการจัดการกับ String มากมายซึ่งเราจะพูดอีกครั้งในบทของ String ในบทนี้มาทำความรู้จักกับ String เบื้องต้นกันก่อน\nname = \u0026quot;Mateo\u0026quot; country = \u0026quot;Ukrain\u0026quot; language = 'Python' interest = 'Mountain Everest'  ในตัวอย่าง เป็นการประกาศตัวแปรประเภท String สองตัวแปรแรกเป็นการประโดยการใช้ Double quote และสองตัวแปรต่อม่เป็นการใช้ Single quote ซึ่งคุณสามารถใช้แบบไหนก็ได้ แต่มีสิ่งที่แตกต่างกันเล็กน้อยคือเกี่ยวกับการกำหนดตัวอักพิเศษหรือเรียกว่า Escape character\nsentent1 = \u0026quot;What's your name?\u0026quot; sentent2 = 'I\\'m Mateo.' sentent3 = \u0026quot;He said \\\u0026quot;I would learn Python first\\\u0026quot;.\u0026quot; sentent4 = 'His teach replied \u0026quot;Oh well!\u0026quot;' print (sentent1) print (sentent2) print (sentent3) print (sentent4)  ในตัวอย่าง เป็นสิ่งที่แตกต่างของการประกาศ String ทั้งสองแบบกับ Escape character ตัวอักษร \u0026lsquo; และ \u0026ldquo; นั้นเป็น Escape character ดังนั้นในการใช้งานตัวอักษรเหล่านี้ เราจะต้องทำการใส่เครื่องหมาย \\ ลงไปข้างหน้าเสมอ แต่ในภาษา Python เมื่อคุณใช้ Double quote ในการประกาศ String คุณไม่ต้องทำการ Escape character สำหรับ Single quote และในทางกลับกัน อย่างไรก็ตามเราจะพูดอีกครั้งในบทของ String\nWhat's your name? I'm Mateo. He said \u0026quot;I would learn Python first\u0026quot;. His teach replied \u0026quot;Oh well!\u0026quot;  นี่เป็นผลลัพธ์การทำงานของโปรแกรมในการใช้งาน Escape character ในภาษา Python\nsite = 'marcuscode' + '.com' tutorial = 'Python' ' Language' print(site) print(tutorial)  การทำงานอย่างหนึ่งที่สำคัญเกี่ยวกับ String ก็คือการเชื่อมต่อ String ซึ่งเป็นการนำ String ตั้งต่อสองอันขึ้นไปมาต่อกัน ในภาษา Python คุณสามารถต่อ String ได้โดยการใช้เครื่องหมาย + หรือคั่นด้วยช่องว่างหรือบรรทัดใหม่เหมือนในตัวอย่างข้างบน\nmarcuscode.com Python Language  นี่เป็นผลลัพธ์การทำงานของโปรแกรม\nอย่างไรก็ตาม นี่เป็นการแนะนำเกี่ยวกับ String ในเบื้องต้นเท่านั้น เพราะว่า String นั้นมีเนื้อหาเป็นจำนวนมาก คุณจะได้เรียนรู้เกี่ยวกับ String อย่างละเอียด อีกครั้งในบทของ String\nLists Lists เป็นประเภทข้อมูลที่เก็บข้อมูลแบบเป็นชุดและลำดับ กล่าวคือมันสามารถเก็บข้อมูลได้หลายค่าในตัวแปรเดียว และมี Index สำหรับเข้าถึงข้อมูล ในภาษา Python นั้น List จะเป็นเหมือนอาเรย์ในภาษา C มันสามารถเก็บข้อมูลได้หลายตัวและยังสามารถเป็นประเภทข้อมูลที่แตกต่างกันได้อีกด้วย มาดูการประกาศและใช้งาน List ในเบื้องต้น\n# Declare lists numbers = [1, 2, 4, 6, 8, 19] names = [\u0026quot;Mateo\u0026quot;, \u0026quot;Danny\u0026quot;, \u0026quot;James\u0026quot;, \u0026quot;Thomas\u0026quot;, \u0026quot;Luke\u0026quot;] mixed = [-2, 5, 84.2, \u0026quot;Mountain\u0026quot;, \u0026quot;Python\u0026quot;] # Display lists print(numbers) print(names) print(mixed) # Display lists using the for loops for n in numbers: print(n, end=\u0026quot; \u0026quot;) print() for n in names: print(n, end=\u0026quot; \u0026quot;) print() for n in mixed: print(n, end=\u0026quot; \u0026quot;) print()  ในตัวอย่าง เราได้ทำการประกาศ 3 Lists โดยตัวแปรแรกนั้นเป็น List ของตัวเลข และตัวแปรที่สองเป็น List ของ String และตัวแปรสุดท้ายเป็น List แบบรวมกันของประเภทข้อมูล เราใช้ฟังก์ชัน print() ในการแสดงผลข้อมูลใน List และใช้คำสั่ง For loop ในการอ่านค่าในลิสต์และนำมาแสดงผลเช่นกัน\n[1, 2, 4, 6, 8, 19] ['Mateo', 'Danny', 'James', 'Thomas', 'Luke'] [-2, 5, 84.2, 'Mountain', 'Python'] 1 2 4 6 8 19 Mateo Danny James Thomas Luke -2 5 84.2 Mountain Python  นี่เป็นผลการทำงานของโปรแกรม\nlanguages = [\u0026quot;C\u0026quot;, \u0026quot;C++\u0026quot;, \u0026quot;Java\u0026quot;, \u0026quot;Python\u0026quot;, \u0026quot;PHP\u0026quot;] print(\u0026quot;Index at 0 = \u0026quot;, languages[0]) print(\u0026quot;Index at 3 = \u0026quot;, languages[3]) languages[0] = \u0026quot;Scalar\u0026quot; print(\u0026quot;Index at 0 = \u0026quot;, languages[0])  Lists นั้นทำงานกับ Index ดังนั้นเราสามารถเข้าถึงข้อมูลของ List โดยการใช้ Index ของมันได้ ในตัวอย่างเป็นการเข้าถึงข้อมูบภายใน Index ซึ่ง Index ของ List นั้นจะเริ่มจาก 0 ไปจนถึงจำนวนทั้งหมดของมันลบด้วย 1 ในตัวอย่างเราได้แสดงผลข้อมูลของสอง List ในตำแหน่งแรกและในตำแหน่งที่ 4 ด้วย Index 0 และ 3 ตามลำดับ หลังจากนั้นเราเปลี่ยนค่าของ List ที่ตำแหน่งแรกเป็น \u0026ldquo;Scalar\u0026rdquo;\nIndex 0 = C Index 3 = Python Index 0 = Scalar  นี่เป็นผลลัพธ์การทำงานของโปรแกรม ซึ่งคุณได้ทำความรู้จักกับ List ในเบื้องต้น คุณจะได้เรียนรู้เกี่ยวกับ List ในภาษา Python อย่างละเอียดอีกครั้งในบทของ List ซึ่งเราจะพูดเกี่ยวกับการดำเนินการและการใช้ฟังก์ชันของ List นอกจากนี้ Python ยังมีประเภทข้อมูลแบบ Tuple และ Dictionary ซึ่งมีรูปแบบการเก็บข้อมูลคล้ายกับ List จึงคุณจะได้เรียนในบทต่อไป\nฟังก์ชันที่ใช้กับตัวแปร ในภาษา Python นั้นมีฟังก์ชันที่สร้างมาเพื่อให้ใช้งานกับตัวแปร เช่น ฟังก์ชันสำหรับหาขนาดของตัวแปร ฟังก์ชันในการหาประเภทของตัวแปร ฟังก์ชันลบตัวแปรออกไปในหน่วยความจำ และฟังก์ชันในการตรวจสอบว่าตัวแปรมีอยู่หรือไม่ ซึ่งในบางครั้งการเขียนโปรแกรมก็จำเป็นที่คุณอาจจะต้องมีการตรวจสอบสิ่งเหล่านี้ในขณะที่โปรแกรมทำงาน นี่เป็นตัวอย่างการใช้งาน\nimport sys a = 8 b = 13.4 c = \u0026quot;Python\u0026quot; d = [1, 2, 3, 4] print('Size of a = ', sys.getsizeof(a)) print('Type of a = ', type(a)) print('Size of b = ', sys.getsizeof(b)) print('Type of b = ', type(b)) print('Size of c = ', sys.getsizeof(c)) print('Type of c = ', type(c)) print('Size of d = ', sys.getsizeof(d)) print('Type of d = ', type(d)) del a del b, c, d if 'a' in locals(): print(\u0026quot;a is exist\u0026quot;) else: print(\u0026quot;a is not exist\u0026quot;)  ในตัวอย่าง เราได้ประกาศตัวแปรกับประเภทต่างๆ เราได้ฟังก์ชัน getsizeof() สำหรับหาขนาดของตัวแปรที่มีหน่วยเป็น Byte และฟังก์ชัน type() สำหรับประเภทของตัวแปรว่าอยู่ในคลาสไหน ฟังก์ชัน del() สำหรับยกเลิกหรือลบการประกาศตัวแปรออกไปจากหน่วยความจำ และสุดท้ายเป็นการตรวจสอบว่าตัวแปรถูกประกาศและหรือยังในฟังก์ชัน locals() สำหรับตรวจสอบตัวแปรในโมดูลปัจจึบัน หรือ globals() สำหรับตรวจสอบตัวแปรในโปรแกรมทั้งหมด\nSize of a = 14 Type of a = \u0026lt;class 'int'\u0026gt; Size of b = 16 Type of b = \u0026lt;class 'float'\u0026gt; Size of c = 31 Type of c = \u0026lt;class 'str'\u0026gt; Size of d = 52 Type of d = \u0026lt;class 'list'\u0026gt; a is not exist  นี่เป็นผลลัพธ์การทำงานของโปรแกรมในการใช้ฟังก์ชันที่จำเป็นกับตัวแปร\nในบทนี้ คุณได้เรียนรู้เกี่ยวกับตัวแปรและประเภทข้อมูลในภาษา Python เราได้พูดถึงการประกาศและการใช้งานตัวแปร รวมถึงข้อมูลประเภทต่างๆ ในภาษา Python เช่น ตัวเลข String และ List และนอกจากนี้เรายังแนะนำให้คุณรู้จักกับฟังก์ชันที่มีความจำเป็นในการทำงานกับตัวแปร\n"});index.add({'id':17,'href':'/library/tutorials/docs/articles/data-science/finance/','title':"Finance",'content':" Finance "});index.add({'id':18,'href':'/library/tutorials/docs/articles/python/from-zero/','title':"From Zero to Hero",'content':" Learning Python: From Zero to Hero First of all, what is Python? According to its creator, Guido van Rossum, Python is a:\n “high-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.”\n For me, the first reason to learn Python was that it is, in fact, a beautiful programming language. It was really natural to code in it and express my thoughts.\nAnother reason was that we can use coding in Python in multiple ways: data science, web development, and machine learning all shine here. Quora, Pinterest and Spotify all use Python for their backend web development. So let’s learn a bit about it.\nThe Basics 1. Variables You can think about variables as words that store a value. Simple as that.\nIn Python, it is really easy to define a variable and set a value to it. Imagine you want to store number 1 in a variable called “one.” Let’s do it:\none = 1  How simple was that? You just assigned the value 1 to the variable “one.”\ntwo = 2 some_number = 10000  And you can assign any other value to whatever other variables you want. As you see in the table above, the variable “two” stores the integer 2, and “some_number” stores 10,000.\nBesides integers, we can also use booleans (True / False), strings, float, and so many other data types.\n# booleans true_boolean = True false_boolean = False # string my_name = \u0026quot;Leandro Tk\u0026quot; # float book_price = 15.80  2. Control Flow: conditional statements “If” uses an expression to evaluate whether a statement is True or False. If it is True, it executes what is inside the “if” statement. For example:\nif True: print(\u0026quot;Hello Python If\u0026quot;) if 2 \u0026gt; 1: print(\u0026quot;2 is greater than 1\u0026quot;)  2 is greater than 1, so the “print” code is executed.\nThe “else” statement will be executed if the “if” expression is false.\nif 1 \u0026gt; 2: print(\u0026quot;1 is greater than 2\u0026quot;) else: print(\u0026quot;1 is not greater than 2\u0026quot;)  1 is not greater than 2, so the code inside the “else” statement will be executed.\nYou can also use an “elif” statement:\nif 1 \u0026gt; 2: print(\u0026quot;1 is greater than 2\u0026quot;) elif 2 \u0026gt; 1: print(\u0026quot;1 is not greater than 2\u0026quot;) else: print(\u0026quot;1 is equal to 2\u0026quot;)  3. Looping / Iterator In Python, we can iterate in different forms. I’ll talk about two: while and for.\nWhile Looping: while the statement is True, the code inside the block will be executed. So, this code will print the number from 1 to 10.\nnum = 1 while num \u0026lt;= 10: print(num) num += 1  The while loop needs a “loop condition.” If it stays True, it continues iterating. In this example, when num is 11 the loop condition equals False.\nAnother basic bit of code to better understand it:\nloop_condition = True while loop_condition: print(\u0026quot;Loop Condition keeps: %s\u0026quot; %(loop_condition)) loop_condition = False  The loop condition is True so it keeps iterating — until we set it to False.\nFor Looping: you apply the variable “num” to the block, and the “for” statement will iterate it for you. This code will print the same as while code: from 1 to 10.\nfor i in range(1, 11): print(i)  See? It is so simple. The range starts with 1 and goes until the 11th element (10 is the 10th element).\nList: Collection | Array | Data Structure Imagine you want to store the integer 1 in a variable. But maybe now you want to store 2. And 3, 4, 5 …\nDo I have another way to store all the integers that I want, but not in millions of variables? You guessed it — there is indeed another way to store them.\nList is a collection that can be used to store a list of values (like these integers that you want). So let’s use it:\nmy_integers = [1, 2, 3, 4, 5]  It is really simple. We created an array and stored it on my_integer.\nBut maybe you are asking: “How can I get a value from this array?”\nGreat question. List has a concept called index. The first element gets the index 0 (zero). The second gets 1, and so on. You get the idea.\nTo make it clearer, we can represent the array and each element with its index. I can draw it:\nUsing the Python syntax, it’s also simple to understand:\nmy_integers = [5, 7, 1, 3, 4] print(my_integers[0]) # 5 print(my_integers[1]) # 7 print(my_integers[4]) # 4  Imagine that you don’t want to store integers. You just want to store strings, like a list of your relatives’ names. Mine would look something like this:\nrelatives_names = [ \u0026quot;Toshiaki\u0026quot;, \u0026quot;Juliana\u0026quot;, \u0026quot;Yuji\u0026quot;, \u0026quot;Bruno\u0026quot;, \u0026quot;Kaio\u0026quot; ] print(relatives_names[4]) # Kaio  It works the same way as integers. Nice.\nWe just learned how Lists indices work. But I still need to show you how we can add an element to the List data structure (an item to a list).\nThe most common method to add a new value to a List is append. Let’s see how it works:\nbookshelf = [] bookshelf.append(\u0026quot;The Effective Engineer\u0026quot;) bookshelf.append(\u0026quot;The 4 Hour Work Week\u0026quot;) print(bookshelf[0]) # The Effective Engineer print(bookshelf[1]) # The 4 Hour Work Week  append is super simple. You just need to apply the element (eg. “The Effective Engineer”) as the append parameter.\nWell, enough about Lists. Let’s talk about another data structure.\nDictionary: Key-Value Data Structure Now we know that Lists are indexed with integer numbers. But what if we don’t want to use integer numbers as indices? Some data structures that we can use are numeric, string, or other types of indices.\nLet’s learn about the Dictionary data structure. Dictionary is a collection of key-value pairs. Here’s what it looks like:\ndictionary_example = { \u0026quot;key1\u0026quot;: \u0026quot;value1\u0026quot;, \u0026quot;key2\u0026quot;: \u0026quot;value2\u0026quot;, \u0026quot;key3\u0026quot;: \u0026quot;value3\u0026quot; }  The key is the index pointing to the value. How do we access the Dictionary value? You guessed it — using the key. Let’s try it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot; } print(\u0026quot;My name is %s\u0026quot; %(dictionary_tk[\u0026quot;name\u0026quot;])) # My name is Leandro print(\u0026quot;But you can call me %s\u0026quot; %(dictionary_tk[\u0026quot;nickname\u0026quot;])) # But you can call me Tk print(\u0026quot;And by the way I'm %s\u0026quot; %(dictionary_tk[\u0026quot;nationality\u0026quot;])) # And by the way I'm Brazilian  I created a Dictionary about me. My name, nickname, and nationality. Those attributes are the Dictionary keys.\nAs we learned how to access the List using index, we also use indices (keys in the Dictionary context) to access the value stored in the Dictionary.\nIn the example, I printed a phrase about me using all the values stored in the Dictionary. Pretty simple, right?\nAnother cool thing about Dictionary is that we can use anything as the value. In the Dictionary I created, I want to add the key “age” and my real integer age in it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot;, \u0026quot;age\u0026quot;: 24 } print(\u0026quot;My name is %s\u0026quot; %(dictionary_tk[\u0026quot;name\u0026quot;])) # My name is Leandro print(\u0026quot;But you can call me %s\u0026quot; %(dictionary_tk[\u0026quot;nickname\u0026quot;])) # But you can call me Tk print(\u0026quot;And by the way I'm %i and %s\u0026quot; %(dictionary_tk[\u0026quot;age\u0026quot;], dictionary_tk[\u0026quot;nationality\u0026quot;])) # And by the way I'm Brazilian  Here we have a key (age) value (24) pair using string as the key and integer as the value.\nAs we did with Lists, let’s learn how to add elements to a Dictionary. The key pointing to a value is a big part of what Dictionary is. This is also true when we are talking about adding elements to it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot; } dictionary_tk['age'] = 24 print(dictionary_tk) # {'nationality': 'Brazilian', 'age': 24, 'nickname': 'Tk', 'name': 'Leandro'}  We just need to assign a value to a Dictionary key. Nothing complicated here, right?\nIteration: Looping Through Data Structures As we learned in the Python Basics, the List iteration is very simple. We Python developers commonly use For looping. Let’s do it:\nbookshelf = [ \u0026quot;The Effective Engineer\u0026quot;, \u0026quot;The 4-hour Workweek\u0026quot;, \u0026quot;Zero to One\u0026quot;, \u0026quot;Lean Startup\u0026quot;, \u0026quot;Hooked\u0026quot; ] for book in bookshelf: print(book)  So for each book in the bookshelf, we (can do everything with it) print it. Pretty simple and intuitive. That’s Python.\nFor a hash data structure, we can also use the for loop, but we apply the key :\ndictionary = { \u0026quot;some_key\u0026quot;: \u0026quot;some_value\u0026quot; } for key in dictionary: print(\u0026quot;%s --\u0026gt; %s\u0026quot; %(key, dictionary[key])) # some_key --\u0026gt; some_value  This is an example how to use it. For each key in the dictionary , we print the key and its corresponding value.\nAnother way to do it is to use the iteritems method.\ndictionary = { \u0026quot;some_key\u0026quot;: \u0026quot;some_value\u0026quot; } for key, value in dictionary.items(): print(\u0026quot;%s --\u0026gt; %s\u0026quot; %(key, value)) # some_key --\u0026gt; some_value  We did name the two parameters as key and value, but it is not necessary. We can name them anything. Let’s see it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot;, \u0026quot;age\u0026quot;: 24 } for attribute, value in dictionary_tk.items(): print(\u0026quot;My %s is %s\u0026quot; %(attribute, value)) # My name is Leandro # My nickname is Tk # My nationality is Brazilian # My age is 24  We can see we used attribute as a parameter for the Dictionary key, and it works properly. Great!\nClasses \u0026amp; Objects A little bit of theory: Objects are a representation of real world objects like cars, dogs, or bikes. The objects share two main characteristics: data and behavior.\nCars have data, like number of wheels, number of doors, and seating capacity They also exhibit behavior: they can accelerate, stop, show how much fuel is left, and so many other things.\nWe identify data as attributes and behavior as methods in object-oriented programming. Again:\nData → Attributes and Behavior → Methods\nAnd a Class is the blueprint from which individual objects are created. In the real world, we often find many objects with the same type. Like cars. All the same make and model (and all have an engine, wheels, doors, and so on). Each car was built from the same set of blueprints and has the same components.\nPython Object-Oriented Programming mode: ON Python, as an Object-Oriented programming language, has these concepts: class and object.\nA class is a blueprint, a model for its objects.\nSo again, a class it is just a model, or a way to define attributes and behavior (as we talked about in the theory section). As an example, a vehicle class has its own attributes that define what objects are vehicles. The number of wheels, type of tank, seating capacity, and maximum velocity are all attributes of a vehicle.\nWith this in mind, let’s look at Python syntax for classes:\nclass Vehicle: pass  We define classes with a class statement — and that’s it. Easy, isn’t it?\nObjects are instances of a class. We create an instance by naming the class.\ncar = Vehicle() print(car) # \u0026lt;__main__.Vehicle instance at 0x7fb1de6c2638\u0026gt;  Here car is an object (or instance) of the class Vehicle.\nRemember that our vehicle class has four attributes: number of wheels, type of tank, seating capacity, and maximum velocity. We set all these attributes when creating a vehicle object. So here, we define our class to receive data when it initiates it:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity  We use the init method. We call it a constructor method. So when we create the vehicle object, we can define these attributes. Imagine that we love the Tesla Model S, and we want to create this kind of object. It has four wheels, runs on electric energy, has space for five seats, and the maximum velocity is 250km/hour (155 mph). Let’s create this object:\ntesla_model_s = Vehicle(4, 'electric', 5, 250)  Four wheels + electric “tank type” + five seats + 250km/hour maximum speed.\nAll attributes are set. But how can we access these attributes’ values? We send a message to the object asking about them. We call it a method. It’s the object’s behavior. Let’s implement it:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity def number_of_wheels(self): return self.number_of_wheels def set_number_of_wheels(self, number): self.number_of_wheels = number  This is an implementation of two methods: number_of_wheels and set_number_of_wheels. We call it getter \u0026amp; setter. Because the first gets the attribute value, and the second sets a new value for the attribute.\nIn Python, we can do that using @property (decorators) to define getters and setters. Let’s see it with code:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity @property def number_of_wheels(self): return self.__number_of_wheels @number_of_wheels.setter def number_of_wheels(self, number): self.__number_of_wheels = number  And we can use these methods as attributes:\ntesla_model_s = Vehicle(4, 'electric', 5, 250) print(tesla_model_s.number_of_wheels) # 4 tesla_model_s.number_of_wheels = 2 # setting number of wheels to 2 print(tesla_model_s.number_of_wheels) # 2  This is slightly different than defining methods. The methods work as attributes. For example, when we set the new number of wheels, we don’t apply two as a parameter, but set the value 2 to number_of_wheels. This is one way to write pythonic getter and setter code.\nBut we can also use methods for other things, like the “make_noise” method. Let’s see it:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity def make_noise(self): print('VRUUUUUUUM')  When we call this method, it just returns a string _“_VRRRRUUUUM.”\ntesla_model_s = Vehicle(4, 'electric', 5, 250) tesla_model_s.make_noise() # VRUUUUUUUM  Encapsulation: Hiding Information Encapsulation is a mechanism that restricts direct access to objects’ data and methods. But at the same time, it facilitates operation on that data (objects’ methods).\n “Encapsulation can be used to hide data members and members function. Under this definition, encapsulation means that the internal representation of an object is generally hidden from view outside of the object’s definition.” — Wikipedia\n All internal representation of an object is hidden from the outside. Only the object can interact with its internal data.\nFirst, we need to understand how public and non-public instance variables and methods work.\nPublic Instance Variables For a Python class, we can initialize a public instance variable within our constructor method. Let’s see this:\nWithin the constructor method:\nclass Person: def __init__(self, first_name): self.first_name = first_name  Here we apply the first_name value as an argument to the public instance variable.\ntk = Person('TK') print(tk.first_name) # =\u0026gt; TK  Within the class:\nclass Person: first_name = 'TK'  Here, we do not need to apply the first_name as an argument, and all instance objects will have a class attribute initialized with TK.\ntk = Person() print(tk.first_name) # =\u0026gt; TK  Cool. We have now learned that we can use public instance variables and class attributes. Another interesting thing about the public part is that we can manage the variable value. What do I mean by that? Our object can manage its variable value: Get and Set variable values.\nKeeping the Person class in mind, we want to set another value to its first_name variable:\ntk = Person('TK') tk.first_name = 'Kaio' print(tk.first_name) # =\u0026gt; Kaio  There we go. We just set another value (kaio) to the first_name instance variable and it updated the value. Simple as that. Since it’s a public variable, we can do that.\nNon-public Instance Variable  We don’t use the term “private” here, since no attribute is really private in Python (without a generally unnecessary amount of work). — PEP 8\n As the public instance variable , we can define the non-public instance variable both within the constructor method or within the class. The syntax difference is: for non-public instance variables , use an underscore (_) before the variable name.\n “‘Private’ instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member)” — Python Software Foundation\n Here’s an example:\nclass Person: def __init__(self, first_name, email): self.first_name = first_name self._email = email  Did you see the email variable? This is how we define a non-public variable :\ntk = Person('TK', 'tk@mail.com') print(tk._email) # tk@mail.com   We can access and update it. Non-public variables are just a convention and should be treated as a non-public part of the API.\n So we use a method that allows us to do it inside our class definition. Let’s implement two methods (email and update_email) to understand it:\nclass Person: def __init__(self, first_name, email): self.first_name = first_name self._email = email def update_email(self, new_email): self._email = new_email def email(self): return self._email  Now we can update and access non-public variables using those methods. Let’s see:\ntk = Person('TK', 'tk@mail.com') print(tk.email()) # =\u0026gt; tk@mail.com # tk._email = 'new_tk@mail.com' -- treat as a non-public part of the class API print(tk.email()) # =\u0026gt; tk@mail.com tk.update_email('new_tk@mail.com') print(tk.email()) # =\u0026gt; new_tk@mail.com   We initiated a new object with first_name TK and email tk@mail.com Printed the email by accessing the non-public variable with a method Tried to set a new email out of our class We need to treat non-public variable as non-public part of the API Updated the non-public variable with our instance method Success! We can update it inside our class with the helper method  Public Method With public methods, we can also use them out of our class:\nclass Person: def __init__(self, first_name, age): self.first_name = first_name self._age = age def show_age(self): return self._age  Let’s test it:\ntk = Person('TK', 25) print(tk.show_age()) # =\u0026gt; 25  Great — we can use it without any problem.\nNon-public Method But with non-public methods we aren’t able to do it. Let’s implement the same Person class, but now with a show_age non-public method using an underscore (_).\nclass Person: def __init__(self, first_name, age): self.first_name = first_name self._age = age def _show_age(self): return self._age  And now, we’ll try to call this non-public method with our object:\ntk = Person('TK', 25) print(tk._show_age()) # =\u0026gt; 25   We can access and update it. Non-public methods are just a convention and should be treated as a non-public part of the API.\n Here’s an example for how we can use it:\nclass Person: def __init__(self, first_name, age): self.first_name = first_name self._age = age def show_age(self): return self._get_age() def _get_age(self): return self._age tk = Person('TK', 25) print(tk.show_age()) # =\u0026gt; 25  Here we have a _get_age non-public method and a show_age public method. The show_age can be used by our object (out of our class) and the _get_age only used inside our class definition (inside show_age method). But again: as a matter of convention.\nEncapsulation Summary With encapsulation we can ensure that the internal representation of the object is hidden from the outside.\nInheritance: behaviors and characteristics Certain objects have some things in common: their behavior and characteristics.\nFor example, I inherited some characteristics and behaviors from my father. I inherited his eyes and hair as characteristics, and his impatience and introversion as behaviors.\nIn object-oriented programming, classes can inherit common characteristics (data) and behavior (methods) from another class.\nLet’s see another example and implement it in Python.\nImagine a car. Number of wheels, seating capacity and maximum velocity are all attributes of a car. We can say that an ElectricCar class inherits these same attributes from the regular Car class.\nclass Car: def __init__(self, number_of_wheels, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity  Our Car class implemented:\nmy_car = Car(4, 5, 250) print(my_car.number_of_wheels) print(my_car.seating_capacity) print(my_car.maximum_velocity)  Once initiated, we can use all instance variables created. Nice.\nIn Python, we apply a parent class to the child class as a parameter. An ElectricCar class can inherit from our Car class.\nclass ElectricCar(Car): def __init__(self, number_of_wheels, seating_capacity, maximum_velocity): Car.__init__(self, number_of_wheels, seating_capacity, maximum_velocity)  Simple as that. We don’t need to implement any other method, because this class already has it (inherited from Car class). Let’s prove it:\nmy_electric_car = ElectricCar(4, 5, 250) print(my_electric_car.number_of_wheels) # =\u0026gt; 4 print(my_electric_car.seating_capacity) # =\u0026gt; 5 print(my_electric_car.maximum_velocity) # =\u0026gt; 250  Beautiful.\nThat’s it! We learned a lot of things about Python basics:\n How Python variables work How Python conditional statements work How Python looping (while \u0026amp; for) works How to use Lists: Collection | Array Dictionary Key-Value Collection How we can iterate through these data structures Objects and Classes Attributes as objects’ data Methods as objects’ behavior Using Python getters and setters \u0026amp; property decorator Encapsulation: hiding information Inheritance: behaviors and characteristics  Ref : FreeCodeCamp\n"});index.add({'id':19,'href':'/library/tutorials/docs/python/awesome/','title':"Awesome Python",'content':" Awesome Python A curated list of awesome Python frameworks, libraries, software and resources.\nInspired by awesome-php.\n Awesome Python  Admin Panels Algorithms and Design Patterns Audio Authentication Build Tools Built-in Classes Enhancement Caching ChatOps Tools CMS Code Analysis Command-line Interface Development Command-line Tools Compatibility Computer Vision Concurrency and Parallelism Configuration Cryptography Data Analysis Data Validation Data Visualization Database Database Drivers Date and Time Debugging Tools Deep Learning DevOps Tools Distributed Computing Distribution Documentation Downloader E-commerce Editor Plugins and IDEs Email Environment Management Files Foreign Function Interface Forms Functional Programming Game Development Geolocation GUI Development Hardware HTML Manipulation HTTP Clients Image Processing Implementations Interactive Interpreter Internationalization Job Scheduler Logging Machine Learning Miscellaneous Natural Language Processing Network Virtualization Networking News Feed ORM Package Management Package Repositories Permissions Processes Queue Recommender Systems RESTful API Robotics RPC Servers Science Search Serialization Serverless Frameworks Specific Formats Processing Static Site Generator Tagging Template Engine Testing Text Processing Third-party APIs URL Manipulation Video Web Asset Management Web Content Extracting Web Crawling Web Frameworks WebSocket WSGI Servers  Services  Code Quality Continuous Integration  Resources  Podcasts Twitter Websites Weekly  Contributing  [](https://github.com/vinta/awesome-python#admin-panels)Admin Panels Libraries for administrative interfaces.\n ajenti - The admin panel your servers deserve. django-grappelli - A jazzy skin for the Django Admin-Interface. django-jet - Modern responsive template for the Django admin interface with improved functionality. django-suit - Alternative Django Admin-Interface (free only for Non-commercial use). django-xadmin - Drop-in replacement of Django admin comes with lots of goodies. flask-admin - Simple and extensible administrative interface framework for Flask. flower - Real-time monitor and web admin for Celery. wooey - A Django app which creates automatic web UIs for Python scripts.  [](https://github.com/vinta/awesome-python#algorithms-and-design-patterns)Algorithms and Design Patterns Python implementation of algorithms and design patterns.\n algorithms - Minimal examples of data structures and algorithms in Python. PyPattyrn - A simple yet effective library for implementing common design patterns. python-patterns - A collection of design patterns in Python. sortedcontainers - Fast, pure-Python implementation of SortedList, SortedDict, and SortedSet types.  [](https://github.com/vinta/awesome-python#audio)Audio Libraries for manipulating audio and its metadata.\n Audio  audioread - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding. dejavu - Audio fingerprinting and recognition. mingus - An advanced music theory and notation package with MIDI file and playback support. pyAudioAnalysis - Audio feature extraction, classification, segmentation and applications. pydub - Manipulate audio with a simple and easy high level interface. TimeSide - Open web audio processing framework.  Metadata  beets - A music library manager and MusicBrainz tagger. eyeD3 - A tool for working with audio files, specifically MP3 files containing ID3 metadata. mutagen - A Python module to handle audio metadata. tinytag - A library for reading music meta data of MP3, OGG, FLAC and Wave files.   [](https://github.com/vinta/awesome-python#authentication)Authentication Libraries for implementing authentications schemes.\n OAuth  authlib - JavaScript Object Signing and Encryption draft implementation. django-allauth - Authentication app for Django that \u0026ldquo;just works.\u0026rdquo; django-oauth-toolkit - OAuth 2 goodies for Django. oauthlib - A generic and thorough implementation of the OAuth request-signing logic. python-oauth2 - A fully tested, abstract interface to creating OAuth clients and servers. python-social-auth - An easy-to-setup social authentication mechanism.  JWT  pyjwt - JSON Web Token implementation in Python. python-jose - A JOSE implementation in Python. python-jwt - A module for generating and verifying JSON Web Tokens.   [](https://github.com/vinta/awesome-python#build-tools)Build Tools Compile software from source code.\n BitBake - A make-like build tool for embedded Linux. buildout - A build system for creating, assembling and deploying applications from multiple parts. PlatformIO - A console tool to build code with different development platforms. pybuilder - A continuous build tool written in pure Python. SCons - A software construction tool.  [](https://github.com/vinta/awesome-python#built-in-classes-enhancement)Built-in Classes Enhancement Libraries for enhancing Python built-in classes.\n dataclasses - (Python standard library) Data classes. attrs - Replacement for __init__, __eq__, __repr__, etc. boilerplate in class definitions. bidict - Efficient, Pythonic bidirectional map data structures and related functionality.. Box - Python dictionaries with advanced dot notation access. DottedDict - A library that provides a method of accessing lists and dicts with a dotted path notation.  [](https://github.com/vinta/awesome-python#cms)CMS Content Management Systems.\n wagtail - A Django content management system. django-cms - An Open source enterprise CMS based on the Django. feincms - One of the most advanced Content Management Systems built on Django. Kotti - A high-level, Pythonic web application framework built on Pyramid. mezzanine - A powerful, consistent, and flexible content management platform. plone - A CMS built on top of the open source application server Zope. quokka - Flexible, extensible, small CMS powered by Flask and MongoDB.  [](https://github.com/vinta/awesome-python#caching)Caching Libraries for caching data.\n beaker - A WSGI middleware for sessions and caching. django-cache-machine - Automatic caching and invalidation for Django models. django-cacheops - A slick ORM cache with automatic granular event-driven invalidation. dogpile.cache - dogpile.cache is next generation replacement for Beaker made by same authors. HermesCache - Python caching library with tag-based invalidation and dogpile effect prevention. pylibmc - A Python wrapper around the libmemcached interface. python-diskcache - SQLite and file backed cache backend with faster lookups than memcached and redis.  [](https://github.com/vinta/awesome-python#chatops-tools)ChatOps Tools Libraries for chatbot development.\n errbot - The easiest and most popular chatbot to implement ChatOps.  [](https://github.com/vinta/awesome-python#code-analysis)Code Analysis Tools of static analysis, linters and code quality checkers. Also see awesome-static-analysis.\n Code Analysis  coala - Language independent and easily extendable code analysis application. code2flow - Turn your Python and JavaScript code into DOT flowcharts. prospector - A tool to analyse Python code. pycallgraph - A library that visualises the flow (call graph) of your Python application.  Code Linters  flake8 - A wrapper around pycodestyle, pyflakes and McCabe. pylint - A fully customizable source code analyzer. pylama - A code audit tool for Python and JavaScript.  Code Formatters  black - The uncompromising Python code formatter. yapf - Yet another Python code formatter from Google.  Static Type Checkers  mypy - Check variable types during compile time. pyre-check - Performant type checking.  Static Type Annotations Generators  MonkeyType - A system for Python that generates static type annotations by collecting runtime types   [](https://github.com/vinta/awesome-python#command-line-interface-development)Command-line Interface Development Libraries for building command-line applications.\n Command-line Application Development  cement - CLI Application Framework for Python. click - A package for creating beautiful command line interfaces in a composable way. cliff - A framework for creating command-line programs with multi-level commands. clint - Python Command-line Application Tools. docopt - Pythonic command line arguments parser. python-fire - A library for creating command line interfaces from absolutely any Python object. python-prompt-toolkit - A library for building powerful interactive command lines.  Terminal Rendering  asciimatics - A package to create full-screen text UIs (from interactive forms to ASCII animations). bashplotlib - Making basic plots in the terminal. colorama - Cross-platform colored terminal text. tqdm - Fast, extensible progress bar for loops and CLI.   [](https://github.com/vinta/awesome-python#command-line-tools)Command-line Tools Useful CLI-based tools for productivity.\n Productivity Tools  cookiecutter - A command-line utility that creates projects from cookiecutters (project templates). doitlive - A tool for live presentations in the terminal. howdoi - Instant coding answers via the command line. PathPicker - Select files out of bash output. percol - Adds flavor of interactive selection to the traditional pipe concept on UNIX. thefuck - Correcting your previous console command. tmuxp - A tmux session manager. try - A dead simple CLI to try out python packages - it\u0026rsquo;s never been easier.  CLI Enhancements  httpie - A command line HTTP client, a user-friendly cURL replacement. kube-shell - An integrated shell for working with the Kubernetes CLI. mycli - A Terminal Client for MySQL with AutoCompletion and Syntax Highlighting. pgcli - Postgres CLI with autocompletion and syntax highlighting. saws - A Supercharged aws-cli.   [](https://github.com/vinta/awesome-python#compatibility)Compatibility Libraries for migrating from Python 2 to 3.\n python-future - The missing compatibility layer between Python 2 and Python 3. python-modernize - Modernizes Python code for eventual Python 3 migration. six - Python 2 and 3 compatibility utilities.  [](https://github.com/vinta/awesome-python#computer-vision)Computer Vision Libraries for computer vision.\n OpenCV - Open Source Computer Vision Library. pytesseract - Another wrapper for Google Tesseract OCR. SimpleCV - An open source framework for building computer vision applications.  [](https://github.com/vinta/awesome-python#concurrency-and-parallelism)Concurrency and Parallelism Libraries for concurrent and parallel execution. Also see awesome-asyncio.\n concurrent.futures - (Python standard library) A high-level interface for asynchronously executing callables. multiprocessing - (Python standard library) Process-based parallelism. eventlet - Asynchronous framework with WSGI support. gevent - A coroutine-based Python networking library that uses greenlet. uvloop - Ultra fast implementation of asyncio event loop on top of libuv. scoop - Scalable Concurrent Operations in Python.  [](https://github.com/vinta/awesome-python#configuration)Configuration Libraries for storing and parsing configuration options.\n configobj - INI file parser with validation. configparser - (Python standard library) INI file parser. profig - Config from multiple formats with value conversion. python-decouple - Strict separation of settings from code.  [](https://github.com/vinta/awesome-python#cryptography)Cryptography  cryptography - A package designed to expose cryptographic primitives and recipes to Python developers. paramiko - The leading native Python SSHv2 protocol library. passlib - Secure password storage/hashing library, very high level. pynacl - Python binding to the Networking and Cryptography (NaCl) library.  [](https://github.com/vinta/awesome-python#data-analysis)Data Analysis Libraries for data analyzing.\n Blaze - NumPy and Pandas interface to Big Data. Open Mining - Business Intelligence (BI) in Pandas interface. Orange - Data mining, data visualization, analysis and machine learning through visual programming or scripts. Pandas - A library providing high-performance, easy-to-use data structures and data analysis tools. Optimus - Agile Data Science Workflows made easy with PySpark.  [](https://github.com/vinta/awesome-python#data-validation)Data Validation Libraries for validating data. Used for forms in many cases.\n Cerberus - A lightweight and extensible data validation library. colander - Validating and deserializing data obtained via XML, JSON, an HTML form post. jsonschema - An implementation of JSON Schema for Python. schema - A library for validating Python data structures. Schematics - Data Structure Validation. valideer - Lightweight extensible data validation and adaptation library. voluptuous - A Python data validation library.  [](https://github.com/vinta/awesome-python#data-visualization)Data Visualization Libraries for visualizing data. Also see awesome-javascript.\n Altair - Declarative statistical visualization library for Python. Bokeh - Interactive Web Plotting for Python. bqplot - Interactive Plotting Library for the Jupyter Notebook Dash - Built on top of Flask, React and Plotly aimed at analytical web applications.  awesome-dash  plotnine - A grammar of graphics for Python based on ggplot2. Matplotlib - A Python 2D plotting library. Pygal - A Python SVG Charts Creator. PyGraphviz - Python interface to Graphviz. PyQtGraph - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets. Seaborn - Statistical data visualization using Matplotlib. VisPy - High-performance scientific visualization based on OpenGL.  [](https://github.com/vinta/awesome-python#database)Database Databases implemented in Python.\n pickleDB - A simple and lightweight key-value store for Python. tinydb - A tiny, document-oriented database. ZODB - A native object database for Python. A key-value and object graph database.  [](https://github.com/vinta/awesome-python#database-drivers)Database Drivers Libraries for connecting and operating databases.\n MySQL - awesome-mysql  mysqlclient - MySQL connector with Python 3 support (mysql-python fork). PyMySQL - A pure Python MySQL driver compatible to mysql-python.  PostgreSQL - awesome-postgres  psycopg2 - The most popular PostgreSQL adapter for Python. queries - A wrapper of the psycopg2 library for interacting with PostgreSQL.  Other Relational Databases  pymssql - A simple database interface to Microsoft SQL Server.  NoSQL Databases  cassandra-driver - The Python Driver for Apache Cassandra. happybase - A developer-friendly library for Apache HBase. kafka-python - The Python client for Apache Kafka. py2neo - Python wrapper client for Neo4j\u0026rsquo;s restful interface. pymongo - The official Python client for MongoDB. redis-py - The Python client for Redis.  Asynchronous Clients  motor - The async Python driver for MongoDB. Telephus - Twisted based client for Cassandra. txpostgres - Twisted based asynchronous driver for PostgreSQL. txRedis - Twisted based client for Redis.   [](https://github.com/vinta/awesome-python#date-and-time)Date and Time Libraries for working with dates and times.\n Chronyk - A Python 3 library for parsing human-written times and dates. dateutil - Extensions to the standard Python datetime module. delorean - A library for clearing up the inconvenient truths that arise dealing with datetimes. moment - A Python library for dealing with dates/times. Inspired by Moment.js. Pendulum - Python datetimes made easy. PyTime - A easy-use Python module which aims to operate date/time/datetime by string. pytz - World timezone definitions, modern and historical. Brings the tz database into Python. when.py - Providing user-friendly functions to help perform common date and time actions. maya - Datetimes for Humans.  [](https://github.com/vinta/awesome-python#debugging-tools)Debugging Tools Libraries for debugging code.\n pdb-like Debugger  ipdb - IPython-enabled pdb. pdb++ - Another drop-in replacement for pdb. pudb - A full-screen, console-based Python debugger. wdb - An improbable web debugger through WebSockets.  Tracing  lptrace - strace for Python programs. manhole - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt. pyringe - Debugger capable of attaching to and injecting code into Python processes. python-hunter - A flexible code tracing toolkit.  Profiler  line_profiler - Line-by-line profiling. memory_profiler - Monitor Memory usage of Python code. profiling - An interactive Python profiler. py-spy - A sampling profiler for Python programs. Written in Rust. pyflame - A ptracing profiler For Python. vprof - Visual Python profiler.  Others  icecream - Inspect variables, expressions, and program execution with a single, simple function call. django-debug-toolbar - Display various debug information for Django. django-devserver - A drop-in replacement for Django\u0026rsquo;s runserver. flask-debugtoolbar - A port of the django-debug-toolbar to flask. pyelftools - Parsing and analyzing ELF files and DWARF debugging information.   [](https://github.com/vinta/awesome-python#deep-learning)Deep Learning Frameworks for Neural Networks and Deep Learning. Also see awesome-deep-learning.\n caffe - A fast open framework for deep learning.. keras - A high-level neural networks library and capable of running on top of either TensorFlow or Theano. mxnet - A deep learning framework designed for both efficiency and flexibility. pytorch - Tensors and Dynamic neural networks in Python with strong GPU acceleration. SerpentAI - Game agent framework. Use any video game as a deep learning sandbox. tensorflow - The most popular Deep Learning framework created by Google. Theano - A library for fast numerical computation.  [](https://github.com/vinta/awesome-python#devops-tools)DevOps Tools Software and libraries for DevOps.\n ansible - A radically simple IT automation platform. cloudinit - A multi-distribution package that handles early initialization of a cloud instance. cuisine - Chef-like functionality for Fabric. docker-compose - Fast, isolated development environments using Docker. fabric - A simple, Pythonic tool for remote execution and deployment. fabtools - Tools for writing awesome Fabric files. honcho - A Python clone of Foreman, for managing Procfile-based applications. OpenStack - Open source software for building private and public clouds. pexpect - Controlling interactive programs in a pseudo-terminal like GNU expect. psutil - A cross-platform process and system utilities module. saltstack - Infrastructure automation and management system. supervisor - Supervisor process control system for UNIX.  [](https://github.com/vinta/awesome-python#distributed-computing)Distributed Computing Frameworks and libraries for Distributed Computing.\n Batch Processing  PySpark - Apache Spark Python API. dask - A flexible parallel computing library for analytic computing. luigi - A module that helps you build complex pipelines of batch jobs. mrjob - Run MapReduce jobs on Hadoop or Amazon Web Services. Ray - A system for parallel and distributed Python that unifies the machine learning ecosystem.  Stream Processing  faust - A stream processing library, porting the ideas from Kafka Streams to Python. streamparse - Run Python code against real-time streams of data via Apache Storm.   [](https://github.com/vinta/awesome-python#distribution)Distribution Libraries to create packaged executables for release distribution.\n dh-virtualenv - Build and distribute a virtualenv as a Debian package. Nuitka - Compile scripts, modules, packages to an executable or extension module. py2app - Freezes Python scripts (Mac OS X). py2exe - Freezes Python scripts (Windows). PyInstaller - Converts Python programs into stand-alone executables (cross-platform). pynsist - A tool to build Windows installers, installers bundle Python itself.  [](https://github.com/vinta/awesome-python#documentation)Documentation Libraries for generating project documentation.\n sphinx - Python Documentation generator.  awesome-sphinxdoc  pdoc - Epydoc replacement to auto generate API documentation for Python libraries. pycco - The literate-programming-style documentation generator.  [](https://github.com/vinta/awesome-python#downloader)Downloader Libraries for downloading.\n s3cmd - A command line tool for managing Amazon S3 and CloudFront. s4cmd - Super S3 command line tool, good for higher performance. you-get - A YouTube/Youku/Niconico video downloader written in Python 3. youtube-dl - A small command-line program to download videos from YouTube.  [](https://github.com/vinta/awesome-python#e-commerce)E-commerce Frameworks and libraries for e-commerce and payments.\n alipay - Unofficial Alipay API for Python. Cartridge - A shopping cart app built using the Mezzanine. django-oscar - An open-source e-commerce framework for Django. django-shop - A Django based shop system. merchant - A Django app to accept payments from various payment processors. money - Money class with optional CLDR-backed locale-aware formatting and an extensible currency exchange. python-currencies - Display money format and its filthy currencies. forex-python - Foreign exchange rates, Bitcoin price index and currency conversion. saleor - An e-commerce storefront for Django. shoop - An open source E-Commerce platform based on Django.  [](https://github.com/vinta/awesome-python#editor-plugins-and-ides)Editor Plugins and IDEs  Emacs  elpy - Emacs Python Development Environment.  Sublime Text  anaconda - Anaconda turns your Sublime Text 3 in a full featured Python development IDE. SublimeJEDI - A Sublime Text plugin to the awesome auto-complete library Jedi.  Vim  jedi-vim - Vim bindings for the Jedi auto-completion library for Python. python-mode - An all in one plugin for turning Vim into a Python IDE. YouCompleteMe - Includes Jedi-based completion engine for Python.  Visual Studio  PTVS - Python Tools for Visual Studio.  Visual Studio Code  Python - The official VSCode extension with rich support for Python.  IDE  PyCharm - Commercial Python IDE by JetBrains. Has free community edition available. spyder - Open Source Python IDE.   [](https://github.com/vinta/awesome-python#email)Email Libraries for sending and parsing email.\n envelopes - Mailing for human beings. flanker - A email address and Mime parsing library. imbox - Python IMAP for Humans. inbox.py - Python SMTP Server for Humans. lamson - Pythonic SMTP Application Server. Marrow Mailer - High-performance extensible mail delivery framework. modoboa - A mail hosting and management platform including a modern and simplified Web UI. Nylas Sync Engine - Providing a RESTful API on top of a powerful email sync platform. yagmail - Yet another Gmail/SMTP client.  [](https://github.com/vinta/awesome-python#environment-management)Environment Management Libraries for Python version and virtual environment management.\n pyenv - Simple Python version management. pipenv - Python Development Workflow for Humans. poetry - Python dependency management and packaging made easy. virtualenv - A tool to create isolated Python environments.  [](https://github.com/vinta/awesome-python#files)Files Libraries for file manipulation and MIME type detection.\n mimetypes - (Python standard library) Map filenames to MIME types. path.py - A module wrapper for os.path. pathlib - (Python standard library) An cross-platform, object-oriented path library. PyFilesystem2 - Python\u0026rsquo;s filesystem abstraction layer. python-magic - A Python interface to the libmagic file type identification library. Unipath - An object-oriented approach to file/directory operations. watchdog - API and shell utilities to monitor file system events.  [](https://github.com/vinta/awesome-python#foreign-function-interface)Foreign Function Interface Libraries for providing foreign function interface.\n cffi - Foreign Function Interface for Python calling C code. ctypes - (Python standard library) Foreign Function Interface for Python calling C code. PyCUDA - A Python wrapper for Nvidia\u0026rsquo;s CUDA API. SWIG - Simplified Wrapper and Interface Generator.  [](https://github.com/vinta/awesome-python#forms)Forms Libraries for working with forms.\n Deform - Python HTML form generation library influenced by the formish form generation library. django-bootstrap3 - Bootstrap 3 integration with Django. django-bootstrap4 - Bootstrap 4 integration with Django. django-crispy-forms - A Django app which lets you create beautiful forms in a very elegant and DRY way. django-remote-forms - A platform independent Django form serializer. WTForms - A flexible forms validation and rendering library.  [](https://github.com/vinta/awesome-python#functional-programming)Functional Programming Functional Programming with Python.\n Coconut - Coconut is a variant of Python built for simple, elegant, Pythonic functional programming. CyToolz - Cython implementation of Toolz: High performance functional utilities. fn.py - Functional programming in Python: implementation of missing features to enjoy FP. funcy - A fancy and practical functional tools. Toolz - A collection of functional utilities for iterators, functions, and dictionaries.  [](https://github.com/vinta/awesome-python#gui-development)GUI Development Libraries for working with graphical user interface applications.\n curses - Built-in wrapper for ncurses used to create terminal GUI applications. Eel - A library for making simple Electron-like offline HTML/JS GUI apps. enaml - Creating beautiful user-interfaces with Declaratic Syntax like QML. Flexx - Flexx is a pure Python toolkit for creating GUI\u0026rsquo;s, that uses web technology for its rendering. Gooey - Turn command line programs into a full GUI application with one line. kivy - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS. pyglet - A cross-platform windowing and multimedia library for Python. PyGObject - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3). PyQt - Python bindings for the Qt cross-platform application and UI framework. PySimpleGUI - Wrapper for tkinter, Qt, WxPython and Remi. pywebview - A lightweight cross-platform native wrapper around a webview component. Tkinter - Tkinter is Python\u0026rsquo;s de-facto standard GUI package. Toga - A Python native, OS native GUI toolkit. urwid - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc. wxPython - A blending of the wxWidgets C++ class library with the Python.  [](https://github.com/vinta/awesome-python#game-development)Game Development Awesome game development libraries.\n Cocos2d - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications. Harfang3D - Python framework for 3D, VR and game development. Panda3D - 3D game engine developed by Disney. Pygame - Pygame is a set of Python modules designed for writing games. PyOgre - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D. PyOpenGL - Python ctypes bindings for OpenGL and it\u0026rsquo;s related APIs. PySDL2 - A ctypes based wrapper for the SDL2 library. RenPy - A Visual Novel engine.  [](https://github.com/vinta/awesome-python#geolocation)Geolocation Libraries for geocoding addresses and working with latitudes and longitudes.\n django-countries - A Django app that provides a country field for models and forms. GeoDjango - A world-class geographic web framework. GeoIP - Python API for MaxMind GeoIP Legacy Database. geojson - Python bindings and utilities for GeoJSON. geopy - Python Geocoding Toolbox. pygeoip - Pure Python GeoIP API.  [](https://github.com/vinta/awesome-python#html-manipulation)HTML Manipulation Libraries for working with HTML and XML.\n BeautifulSoup - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML. bleach - A whitelist-based HTML sanitization and text linkification library. cssutils - A CSS library for Python. html5lib - A standards-compliant library for parsing and serializing HTML documents and fragments. lxml - A very fast, easy-to-use and versatile library for handling HTML and XML. MarkupSafe - Implements a XML/HTML/XHTML Markup safe string for Python. pyquery - A jQuery-like library for parsing HTML. untangle - Converts XML documents to Python objects for easy access. WeasyPrint - A visual rendering engine for HTML and CSS that can export to PDF. xmldataset - Simple XML Parsing. xmltodict - Working with XML feel like you are working with JSON.  [](https://github.com/vinta/awesome-python#http-clients)HTTP Clients Libraries for working with HTTP.\n grequests - requests + gevent for asynchronous HTTP requests. httplib2 - Comprehensive HTTP client library. requests - HTTP Requests for Humans™. treq - Python requests like API built on top of Twisted\u0026rsquo;s HTTP client. urllib3 - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.  [](https://github.com/vinta/awesome-python#hardware)Hardware Libraries for programming with hardware.\n ino - Command line toolkit for working with Arduino. keyboard - Hook and simulate global keyboard events on Windows and Linux. mouse - Hook and simulate global mouse events on Windows and Linux. Pingo - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc. PyUserInput - A module for cross-platform control of the mouse and keyboard. scapy - A brilliant packet manipulation library. wifi - A Python library and command line tool for working with WiFi on Linux.  [](https://github.com/vinta/awesome-python#image-processing)Image Processing Libraries for manipulating images.\n hmap - Image histogram remapping. imgSeek - A project for searching a collection of images using visual similarity. nude.py - Nudity detection. pagan - Retro identicon (Avatar) generation based on input string and hash. pillow - Pillow is the friendly PIL fork. pyBarcode - Create barcodes in Python without needing PIL. pygram - Instagram-like image filters. python-qrcode - A pure Python QR Code generator. Quads - Computer art based on quadtrees. scikit-image - A Python library for (scientific) image processing. thumbor - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images. wand - Python bindings for MagickWand, C API for ImageMagick.  [](https://github.com/vinta/awesome-python#implementations)Implementations Implementations of Python.\n CPython - Default, most widely used implementation of the Python programming language written in C. Cython - Optimizing Static Compiler for Python. CLPython - Implementation of the Python programming language written in Common Lisp. Grumpy - More compiler than interpreter as more powerful CPython2.7 replacement (alpha). IronPython - Implementation of the Python programming language written in C#. Jython - Implementation of Python programming language written in Java for the JVM. MicroPython - A lean and efficient Python programming language implementation. Numba - Python JIT compiler to LLVM aimed at scientific Python. PeachPy - x86-64 assembler embedded in Python. Pyjion - A JIT for Python based upon CoreCLR. PyPy - A very fast and compliant implementation of the Python language. Pyston - A Python implementation using JIT techniques. Stackless Python - An enhanced version of the Python programming language.  [](https://github.com/vinta/awesome-python#interactive-interpreter)Interactive Interpreter Interactive Python interpreters (REPL).\n bpython - A fancy interface to the Python interpreter. Jupyter Notebook (IPython) - A rich toolkit to help you make the most out of using Python interactively.  awesome-jupyter  ptpython - Advanced Python REPL built on top of the python-prompt-toolkit.  [](https://github.com/vinta/awesome-python#internationalization)Internationalization Libraries for working with i18n.\n Babel - An internationalization library for Python. PyICU - A wrapper of International Components for Unicode C++ library (ICU).  [](https://github.com/vinta/awesome-python#job-scheduler)Job Scheduler Libraries for scheduling jobs.\n APScheduler - A light but powerful in-process task scheduler that lets you schedule functions. django-schedule - A calendaring app for Django. doit - A task runner and build tool. gunnery - Multipurpose task execution tool for distributed systems with web-based interface. Joblib - A set of tools to provide lightweight pipelining in Python. Plan - Writing crontab file in Python like a charm. schedule - Python job scheduling for humans. Spiff - A powerful workflow engine implemented in pure Python. TaskFlow - A Python library that helps to make task execution easy, consistent and reliable. Airflow - Airflow is a platform to programmatically author, schedule and monitor workflows.  [](https://github.com/vinta/awesome-python#logging)Logging Libraries for generating and working with logs.\n Eliot - Logging for complex \u0026amp; distributed systems. logbook - Logging replacement for Python. logging - (Python standard library) Logging facility for Python. raven - Python client for Sentry, a log/error tracking, crash reporting and aggregation platform for web applications.  [](https://github.com/vinta/awesome-python#machine-learning)Machine Learning Libraries for Machine Learning. Also see awesome-machine-learning.\n H2O - Open Source Fast Scalable Machine Learning Platform. Metrics - Machine learning evaluation metrics. NuPIC - Numenta Platform for Intelligent Computing. scikit-learn - The most popular Python library for Machine Learning. Spark ML - Apache Spark\u0026rsquo;s scalable Machine Learning library. vowpal_porpoise - A lightweight Python wrapper for Vowpal Wabbit. xgboost - A scalable, portable, and distributed gradient boosting library.  [](https://github.com/vinta/awesome-python#microsoft-windows)Microsoft Windows Python programming on Microsoft Windows.\n Python(x,y) - Scientific-applications-oriented Python Distribution based on Qt and Spyder. pythonlibs - Unofficial Windows binaries for Python extension packages. PythonNet - Python Integration with the .NET Common Language Runtime (CLR). PyWin32 - Python Extensions for Windows. WinPython - Portable development environment for Windows 7\u0026frasl;8.  [](https://github.com/vinta/awesome-python#miscellaneous)Miscellaneous Useful libraries or tools that don\u0026rsquo;t fit in the categories above.\n blinker - A fast Python in-process signal/event dispatching system. boltons - A set of pure-Python utilities. itsdangerous - Various helpers to pass trusted data to untrusted environments. pluginbase - A simple but flexible plugin system for Python. tryton - A general purpose business framework.  [](https://github.com/vinta/awesome-python#natural-language-processing)Natural Language Processing Libraries for working with human languages.\n General  gensim - Topic Modelling for Humans. langid.py - Stand-alone language identification system. nltk - A leading platform for building Python programs to work with human language data. pattern - A web mining module for the Python. polyglot - Natural language pipeline supporting hundreds of languages. pytext - A natural language modeling framework based on PyTorch. PyTorch-NLP - A toolkit enabling rapid deep learning NLP prototyping for research. spacy - A library for industrial-strength natural language processing in Python and Cython. stanfordnlp - The Stanford NLP Group\u0026rsquo;s official Python library, supporting 50+ languages.  Chinese  jieba - The most popular Chinese text segmentation library. pkuseg-python - A toolkit for Chinese word segmentation in various domains. snownlp - A library for processing Chinese text. funNLP - A collection of tools and datasets for Chinese NLP.   [](https://github.com/vinta/awesome-python#network-virtualization)Network Virtualization Tools and libraries for Virtual Networking and SDN (Software Defined Networking).\n mininet - A popular network emulator and API written in Python. pox - A Python-based SDN control applications, such as OpenFlow SDN controllers.  [](https://github.com/vinta/awesome-python#networking)Networking Libraries for networking programming.\n asyncio - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.  awesome-asyncio  pulsar - Event-driven concurrent framework for Python. pyzmq - A Python wrapper for the ZeroMQ message library. Twisted - An event-driven networking engine. napalm - Cross-vendor API to manipulate network devices.  [](https://github.com/vinta/awesome-python#news-feed)News Feed Libraries for building user\u0026rsquo;s activities.\n django-activity-stream - Generating generic activity streams from the actions on your site. Stream Framework - Building newsfeed and notification systems using Cassandra and Redis.  [](https://github.com/vinta/awesome-python#orm)ORM Libraries that implement Object-Relational Mapping or data mapping techniques.\n Relational Databases  Django Models - A part of Django. SQLAlchemy - The Python SQL Toolkit and Object Relational Mapper.  awesome-sqlalchemy  dataset - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL. orator - The Orator ORM provides a simple yet beautiful ActiveRecord implementation. peewee - A small, expressive ORM. pony - ORM that provides a generator-oriented interface to SQL. pydal - A pure Python Database Abstraction Layer.  NoSQL Databases  hot-redis - Rich Python data types for Redis. mongoengine - A Python Object-Document-Mapper for working with MongoDB. PynamoDB - A Pythonic interface for Amazon DynamoDB. redisco - A Python Library for Simple Models and Containers Persisted in Redis.   [](https://github.com/vinta/awesome-python#package-management)Package Management Libraries for package and dependency management.\n pip - The Python package and dependency manager.  PyPI pip-tools - A set of tools to keep your pinned Python dependencies fresh.  conda - Cross-platform, Python-agnostic binary package manager.  [](https://github.com/vinta/awesome-python#package-repositories)Package Repositories Local PyPI repository server and proxies.\n warehouse - Next generation Python Package Repository (PyPI). bandersnatch - PyPI mirroring tool provided by Python Packaging Authority (PyPA). devpi - PyPI server and packaging/testing/release tool. localshop - Local PyPI server (custom packages and auto-mirroring of pypi).  [](https://github.com/vinta/awesome-python#permissions)Permissions Libraries that allow or deny users access to data or functionality.\n django-guardian - Implementation of per object permissions for Django 1.2+ django-rules - A tiny but powerful app providing object-level permissions to Django, without requiring a database.  [](https://github.com/vinta/awesome-python#processes)Processes Libraries for starting and communicating with OS processes.\n delegator.py - Subprocesses for Humans™ 2.0. sarge - Yet another wrapper for subprocess. sh - A full-fledged subprocess replacement for Python.  [](https://github.com/vinta/awesome-python#queue)Queue Libraries for working with event and task queues.\n celery - An asynchronous task queue/job queue based on distributed message passing. huey - Little multi-threaded task queue. mrq - Mr. Queue - A distributed worker task queue in Python using Redis \u0026amp; gevent. rq - Simple job queues for Python.  [](https://github.com/vinta/awesome-python#recommender-systems)Recommender Systems Libraries for building recommender systems.\n annoy - Approximate Nearest Neighbors in C++/Python optimized for memory usage. fastFM - A library for Factorization Machines. implicit - A fast Python implementation of collaborative filtering for implicit datasets. libffm - A library for Field-aware Factorization Machine (FFM). lightfm - A Python implementation of a number of popular recommendation algorithms. spotlight - Deep recommender models using PyTorch. Surprise - A scikit for building and analyzing recommender systems. tensorrec - A Recommendation Engine Framework in TensorFlow.  [](https://github.com/vinta/awesome-python#restful-api)RESTful API Libraries for developing RESTful APIs.\n Django  django-rest-framework - A powerful and flexible toolkit to build web APIs. django-tastypie - Creating delicious APIs for Django apps.  Flask  eve - REST API framework powered by Flask, MongoDB and good intentions. flask-api-utils - Taking care of API representation and authentication for Flask. flask-api - Browsable Web APIs for Flask. flask-restful - Quickly building REST APIs for Flask. flask-restless - Generating RESTful APIs for database models defined with SQLAlchemy.  Pyramid  cornice - A RESTful framework for Pyramid.  Framework agnostic  apistar - A smart Web API framework, designed for Python 3. falcon - A high-performance framework for building cloud APIs and web app backends. hug - A Python 3 framework for cleanly exposing APIs. restless - Framework agnostic REST framework based on lessons learned from Tastypie. ripozo - Quickly creating REST/HATEOAS/Hypermedia APIs. sandman - Automated REST APIs for existing database-driven systems.   [](https://github.com/vinta/awesome-python#robotics)Robotics Libraries for robotics.\n PythonRobotics - This is a compilation of various robotics algorithms with visualizations. rospy - This is a library for ROS (Robot Operating System).  [](https://github.com/vinta/awesome-python#rpc-servers)RPC Servers RPC-compatible servers.\n SimpleJSONRPCServer - This library is an implementation of the JSON-RPC specification. SimpleXMLRPCServer - (Python standard library) Simple XML-RPC server implementation, single-threaded. zeroRPC - zerorpc is a flexible RPC implementation based on ZeroMQ and MessagePack.  [](https://github.com/vinta/awesome-python#science)Science Libraries for scientific computing. Also see Python-for-Scientists\n astropy - A community Python library for Astronomy. bcbio-nextgen - Providing best-practice pipelines for fully automated high throughput sequencing analysis. bccb - Collection of useful code related to biological analysis. Biopython - Biopython is a set of freely available tools for biological computation. cclib - A library for parsing and interpreting the results of computational chemistry packages. Colour - Implementing a comprehensive number of colour theory transformations and algorithms. NetworkX - A high-productivity software for complex networks. NIPY - A collection of neuroimaging toolkits. NumPy - A fundamental package for scientific computing with Python. Open Babel - A chemical toolbox designed to speak the many languages of chemical data. ObsPy - A Python toolbox for seismology. PyDy - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion. PyMC - Markov Chain Monte Carlo sampling toolkit. QuTiP - Quantum Toolbox in Python. RDKit - Cheminformatics and Machine Learning Software. SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering. statsmodels - Statistical modeling and econometrics in Python. SymPy - A Python library for symbolic mathematics. Zipline - A Pythonic algorithmic trading library. SimPy - A process-based discrete-event simulation framework.  [](https://github.com/vinta/awesome-python#search)Search Libraries and software for indexing and performing search queries on data.\n elasticsearch-py - The official low-level Python client for Elasticsearch. elasticsearch-dsl-py - The official high-level Python client for Elasticsearch. django-haystack - Modular search for Django. pysolr - A lightweight Python wrapper for Apache Solr. whoosh - A fast, pure Python search engine library.  [](https://github.com/vinta/awesome-python#serialization)Serialization Libraries for serializing complex data types\n marshmallow - A lightweight library for converting complex objects to and from simple Python datatypes. pysimdjson - A Python bindings for simdjson. python-rapidjson - A Python wrapper around RapidJSON.  [](https://github.com/vinta/awesome-python#serverless-frameworks)Serverless Frameworks Frameworks for developing serverless Python code.\n python-lambda - A toolkit for developing and deploying Python code in AWS Lambda. Zappa - A tool for deploying WSGI applications on AWS Lambda and API Gateway.  [](https://github.com/vinta/awesome-python#specific-formats-processing)Specific Formats Processing Libraries for parsing and manipulating specific text formats.\n General  tablib - A module for Tabular Datasets in XLS, CSV, JSON, YAML.  Office  openpyxl - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files. pyexcel - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files. python-docx - Reads, queries and modifies Microsoft Word 2007\u0026frasl;2008 docx files. python-pptx - Python library for creating and updating PowerPoint (.pptx) files. unoconv - Convert between any document format supported by LibreOffice/OpenOffice. XlsxWriter - A Python module for creating Excel .xlsx files. xlwings - A BSD-licensed library that makes it easy to call Python from Excel and vice versa. xlwt / xlrd - Writing and reading data and formatting information from Excel files.  PDF  PDFMiner - A tool for extracting information from PDF documents. PyPDF2 - A library capable of splitting, merging and transforming PDF pages. ReportLab - Allowing Rapid creation of rich PDF documents.  Markdown  Mistune - Fastest and full featured pure Python parsers of Markdown. Python-Markdown - A Python implementation of John Gruber’s Markdown.  YAML  PyYAML - YAML implementations for Python.  CSV  csvkit - Utilities for converting to and working with CSV.  Archive  unp - A command line tool that can unpack archives easily.   [](https://github.com/vinta/awesome-python#static-site-generator)Static Site Generator Static site generator is a software that takes some text + templates as input and produces HTML files on the output.\n mkdocs - Markdown friendly documentation generator. pelican - Static site generator that supports Markdown and reST syntax. lektor - An easy to use static CMS and blog engine. nikola - A static website and blog generator.  [](https://github.com/vinta/awesome-python#tagging)Tagging Libraries for tagging items.\n django-taggit - Simple tagging for Django.  [](https://github.com/vinta/awesome-python#template-engine)Template Engine Libraries and tools for templating and lexing.\n Jinja2 - A modern and designer friendly templating language. Genshi - Python templating toolkit for generation of web-aware output. Mako - Hyperfast and lightweight templating for the Python platform.  [](https://github.com/vinta/awesome-python#testing)Testing Libraries for testing codebases and generating test data.\n Testing Frameworks  pytest - A mature full-featured Python testing tool. hypothesis - Hypothesis is an advanced Quickcheck style property based testing library. nose2 - The successor to nose, based on `unittest2. Robot Framework - A generic test automation framework. unittest - (Python standard library) Unit testing framework.  Test Runners  green - A clean, colorful test runner. mamba - The definitive testing tool for Python. Born under the banner of BDD. tox - Auto builds and tests distributions in multiple Python versions  GUI / Web Testing  locust - Scalable user load testing tool written in Python. PyAutoGUI - PyAutoGUI is a cross-platform GUI automation Python module for human beings. Selenium - Python bindings for Selenium WebDriver. sixpack - A language-agnostic A/B Testing framework. splinter - Open source tool for testing web applications.  Mock  mock - (Python standard library) A mocking and patching library. doublex - Powerful test doubles framework for Python. freezegun - Travel through time by mocking the datetime module. httmock - A mocking library for requests for Python 2.6+ and 3.2+. httpretty - HTTP request mock tool for Python. mocket - A socket mock framework with gevent/asyncio/SSL support. responses - A utility library for mocking out the requests Python library. VCR.py - Record and replay HTTP interactions on your tests.  Object Factories  factory_boy - A test fixtures replacement for Python. mixer - Another fixtures replacement. Supported Django, Flask, SQLAlchemy, Peewee and etc. model_mommy - Creating random fixtures for testing in Django.  Code Coverage  coverage - Code coverage measurement.  Fake Data  mimesis - is a Python library that help you generate fake data. fake2db - Fake database generator. faker - A Python package that generates fake data. radar - Generate random datetime / time.   [](https://github.com/vinta/awesome-python#text-processing)Text Processing Libraries for parsing and manipulating plain texts.\n General  chardet - Python 2\u0026frasl;3 compatible character encoding detector. difflib - (Python standard library) Helpers for computing deltas. ftfy - Makes Unicode text less broken and more consistent automagically. fuzzywuzzy - Fuzzy String Matching. Levenshtein - Fast computation of Levenshtein distance and string similarity. pangu.py - Paranoid text spacing. pyfiglet - An implementation of figlet written in Python. pypinyin - Convert Chinese hanzi (漢字) to pinyin (拼音). textdistance - Compute distance between sequences with 30+ algorithms. unidecode - ASCII transliterations of Unicode text.  Slugify  awesome-slugify - A Python slugify library that can preserve unicode. python-slugify - A Python slugify library that translates unicode to ASCII. unicode-slugify - A slugifier that generates unicode slugs with Django as a dependency.  Unique identifiers  hashids - Implementation of hashids in Python. shortuuid - A generator library for concise, unambiguous and URL-safe UUIDs.  Parser  ply - Implementation of lex and yacc parsing tools for Python. pygments - A generic syntax highlighter. pyparsing - A general purpose framework for generating parsers. python-nameparser - Parsing human names into their individual components. python-phonenumbers - Parsing, formatting, storing and validating international phone numbers. python-user-agents - Browser user agent parser. sqlparse - A non-validating SQL parser.   [](https://github.com/vinta/awesome-python#third-party-apis)Third-party APIs Libraries for accessing third party services APIs. Also see List of Python API Wrappers and Libraries.\n apache-libcloud - One Python library for all clouds. boto3 - Python interface to Amazon Web Services. django-wordpress - WordPress models and views for Django. facebook-sdk - Facebook Platform Python SDK. google-api-python-client - Google APIs Client Library for Python. gspread - Google Spreadsheets Python API. twython - A Python wrapper for the Twitter API.  [](https://github.com/vinta/awesome-python#url-manipulation)URL Manipulation Libraries for parsing URLs.\n furl - A small Python library that makes parsing and manipulating URLs easy. purl - A simple, immutable URL class with a clean API for interrogation and manipulation. pyshorteners - A pure Python URL shortening lib. webargs - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks.  [](https://github.com/vinta/awesome-python#video)Video Libraries for manipulating video and GIFs.\n moviepy - A module for script-based movie editing with many formats, including animated GIFs. scikit-video - Video processing routines for SciPy.  [](https://github.com/vinta/awesome-python#wsgi-servers)WSGI Servers WSGI-compatible web servers.\n bjoern - Asynchronous, very fast and written in C. gunicorn - Pre-forked, partly written in C. uWSGI - A project aims at developing a full stack for building hosting services, written in C. waitress - Multi-threaded, powers Pyramid. werkzeug - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.  [](https://github.com/vinta/awesome-python#web-asset-management)Web Asset Management Tools for managing, compressing and minifying website assets.\n django-compressor - Compresses linked and inline JavaScript or CSS into a single cached file. django-pipeline - An asset packaging library for Django. django-storages - A collection of custom storage back ends for Django. fanstatic - Packages, optimizes, and serves static file dependencies as Python packages. fileconveyor - A daemon to detect and sync files to CDNs, S3 and FTP. flask-assets - Helps you integrate webassets into your Flask app. webassets - Bundles, optimizes, and manages unique cache-busting URLs for static resources.  [](https://github.com/vinta/awesome-python#web-content-extracting)Web Content Extracting Libraries for extracting web contents.\n html2text - Convert HTML to Markdown-formatted text. lassie - Web Content Retrieval for Humans. micawber - A small library for extracting rich content from URLs. newspaper - News extraction, article extraction and content curation in Python. python-readability - Fast Python port of arc90\u0026rsquo;s readability tool. requests-html - Pythonic HTML Parsing for Humans. sumy - A module for automatic summarization of text documents and HTML pages. textract - Extract text from any document, Word, PowerPoint, PDFs, etc. toapi - Every web site provides APIs.  [](https://github.com/vinta/awesome-python#web-crawling)Web Crawling Libraries to automate web scraping.\n cola - A distributed crawling framework. feedparser - Universal feed parser. grab - Site scraping framework. MechanicalSoup - A Python library for automating interaction with websites. pyspider - A powerful spider system. robobrowser - A simple, Pythonic library for browsing the web without a standalone web browser. scrapy - A fast high-level screen scraping and web crawling framework. portia - Visual scraping for Scrapy.  [](https://github.com/vinta/awesome-python#web-frameworks)Web Frameworks Full stack web frameworks.\n Django - The most popular web framework in Python.  awesome-django  Flask - A microframework for Python.  awesome-flask  Masonite - The modern and developer centric Python web framework. Pyramid - A small, fast, down-to-earth, open source Python web framework.  awesome-pyramid  Sanic - Web server that\u0026rsquo;s written to go fast. Vibora - Fast, efficient and asynchronous Web framework inspired by Flask. Tornado - A Web framework and asynchronous networking library.  [](https://github.com/vinta/awesome-python#websocket)WebSocket Libraries for working with WebSocket.\n autobahn-python - WebSocket \u0026amp; WAMP for Python on Twisted and asyncio. crossbar - Open-source Unified Application Router (Websocket \u0026amp; WAMP for Python on Autobahn). django-channels - Developer-friendly asynchrony for Django. django-socketio - WebSockets for Django. WebSocket-for-Python - WebSocket client and server library for Python 2 and 3 as well as PyPy.  [](https://github.com/vinta/awesome-python#services)Services Online tools and APIs to simplify development.\n[](https://github.com/vinta/awesome-python#continuous-integration)Continuous Integration Also see awesome-CIandCD.\n CircleCI - A CI service that can run very fast parallel testing. Travis CI - A popular CI service for your open source and private projects. (GitHub only) Vexor CI - A continuous integration tool for private apps with pay-per-minute billing model. Wercker - A Docker-based platform for building and deploying applications and microservices.  [](https://github.com/vinta/awesome-python#code-quality)Code Quality  Codacy - Automated Code Review to ship better code, faster. Codecov - Code coverage dashboard. CodeFactor - Automated Code Review for Git. Landscape - Hosted continuous Python code metrics. PEP 8 Speaks - GitHub integration to review code style.  [](https://github.com/vinta/awesome-python#resources)Resources Where to discover new Python libraries.\n[](https://github.com/vinta/awesome-python#podcasts)Podcasts  From Python Import Podcast Podcast.init Python Bytes Python Testing Radio Free Python Talk Python To Me Test and Code  [](https://github.com/vinta/awesome-python#twitter)Twitter  @codetengu @getpy @importpython @planetpython @pycoders @pypi @pythontrending @PythonWeekly @TalkPython @realpython  [](https://github.com/vinta/awesome-python#websites)Websites  /r/CoolGithubProjects /r/Python Awesome Python @LibHunt Django Packages Full Stack Python Python Cheatsheet Python Hackers Python ZEEF Python 开发社区 Real Python Trending Python repositories on GitHub today Сообщество Python Программистов  [](https://github.com/vinta/awesome-python#weekly)Weekly  CodeTengu Weekly 碼天狗週刊 Import Python Newsletter Pycoder\u0026rsquo;s Weekly Python Weekly Python Tricks   Source : https://github.com/vinta/awesome-python\n "});index.add({'id':20,'href':'/library/tutorials/docs/front-end/bootstrap/basic-bootstap/ep-2/','title':"Bootstrap 4 แบบพื้นฐาน ตอนที่ 2",'content':" สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน ตอนที่ 2 Table สร้างไฟล์ใหม่ชื่อ portal.html\nใส่โค้ดพื้นฐาน html ลงไปแล้วก็เพิ่ม bootstrap.css ด้วย\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Portal\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; ใส่ตารางลงไปใน container\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Portal\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Portal\u0026lt;/h1\u0026gt;\r\u0026lt;table\u0026gt;\r\u0026lt;thead\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;No...\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Status\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Age\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Address\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Department\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/thead\u0026gt;\r\u0026lt;tbody\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Benz\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Normal\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;35\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Bangkok 10000\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;IT\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Namnueng\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;NA\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;35\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Bangkok 10000\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;IT\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Pare\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;NA\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;35\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Bangkok 10000\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;IT\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/tbody\u0026gt;\r\u0026lt;/table\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; จะได้แบบนี้\nBootstrap มี class ชื่อว่า table ทำให้ตารางสวยขึ้น\n\u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; ปรับแต่งหัวตารางโดยใช้ utility class คือ bg- และ text-\n\u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt;\r\u0026lt;thead\u0026gt;\r\u0026lt;tr class=\u0026#34;bg-primary text-white\u0026#34;\u0026gt;\r... ทำให้ตารางสลับสี ใช้ table-striped เพิ่มเข้าไป\n\u0026lt;table class=\u0026#34;table table-striped\u0026#34;\u0026gt; ทำให้ตารางเลื่อสีไปตาม cursor ใช้ table-hover เพิ่มเข้าไป\n\u0026lt;table class=\u0026#34;table table-hover\u0026#34;\u0026gt; ใส่ขอบให้ตารางใช้ table-bordered\n\u0026lt;table class=\u0026#34;table table-hover table-bordered\u0026#34;\u0026gt; ลองย่อหน้าต่างให้เล็กเป็นมุมมองมือถือ จะพบว่าตารางไม่รองรับ responsive\n[วิธีการแก้ก็คือเอาตารางไปใส่ใน div class table-responsive\n\u0026lt;div class=\u0026#34;table-responsive\u0026#34;\u0026gt;\r\u0026lt;table class=\u0026#34;table table-hover table-bordered\u0026#34;\u0026gt;\r...\r\u0026lt;/table\u0026gt;\r\u0026lt;/div\u0026gt; มันจะสามารถเลื่อน ซ้ายขวาได้\nใน VS Code ตรงไหนโค้ดยาวก็ย่อโค้ดได้นะ\n[Source code https://gist.github.com/benznest/d7b07ec41ffef49429ec4c95112c1dcb\nForm สร้างไฟล์ใหม่ login.html จะลองทำหน้า login กัน อย่าลืมเพิ่ม boostrap.css เข้ามาด้วย\nฟอร์มล้อคอินที่จะทำ หน้าตาประมาณนี้\nลองใส่ฟอร์มล็อกอิน แบบง่ายๆ\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Portal\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;form action=\u0026#34;#\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;usernmae\u0026#34;\u0026gt;Username: \u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt;Password: \u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; name=\u0026#34;pwd\u0026#34;\u0026gt;\r\u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Sign in\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; ให้ใช้ class form-group จัดการแถวของฟอร์ม\n\u0026lt;form action=\u0026#34;#\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;usernmae\u0026#34;\u0026gt;Username: \u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt;Password: \u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; name=\u0026#34;pwd\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt; ใช้ class form-control ให้กับ input เพื่อให้มันรองรับ responsive และความสวยงาม\n\u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt; ส่วนปุ่มใช้ class ชื่อว่า btn และอยากได้ส้มๆก็ใส่ btn-warning\n\u0026lt;button class=\u0026#34;btn btn-warning text-white\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt; ถ้าต้องการให้ปุ่มแสดงตามขนาดจอ ก็ใช้ btn-block\n\u0026lt;button class=\u0026#34;btn btn-block btn-warning text-white\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt; ถ้าต้องการให้แสดงแบบแถวเดียวใช้ form-inline\n\u0026lt;form action=\u0026#34;#\u0026#34; class=\u0026#34;form-inline\u0026#34;\u0026gt; ฟอร์มมันชิดไป ไม่สวยก็สามารถใช้ class margin มาร่วมได้\n\u0026lt;form action=\u0026#34;#\u0026#34; class=\u0026#34;form-inline mt-3\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\r\u0026lt;label class=\u0026#34;mr-2\u0026#34; for=\u0026#34;usernmae\u0026#34;\u0026gt;Username: \u0026lt;/label\u0026gt;\r\u0026lt;input class=\u0026#34;form-control mr-3\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\r\u0026lt;label class=\u0026#34;mr-2\u0026#34; for=\u0026#34;pwd\u0026#34;\u0026gt;Password: \u0026lt;/label\u0026gt;\r\u0026lt;input class=\u0026#34;form-control mr-3\u0026#34; type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; name=\u0026#34;pwd\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;button class=\u0026#34;btn btn-warning text-white\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt; Source code https://gist.github.com/benznest/1d77e1a799253e5546b8d4c836cd2f1c\nCard อีกอันที่ใช้บ่อยๆ คือ card มันคือการทำเนื้อหาเป็นบล็อกๆ\nสร้างไฟล์ใหม่ชื่อว่า news.html ทำ grid ไว้ 2 คอลัมภ์\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;News\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;!-- Col 1 --\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;!-- Col 2 --\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Card โครงสร้างจะเป็นประมาณนี้\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;card-header\u0026#34;\u0026gt;\r\u0026lt;h4\u0026gt;Hot news\u0026lt;/h4\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Dolorem minus accusantium rerum suscipit, commodi sapiente, saepe doloremque beatae quod architecto voluptatibus. Nobis ratione excepturi omnis incidunt laboriosam quidem quae quibusdam!\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;card-footer\u0026#34;\u0026gt;\rBy Benznest\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;!-- Col 2 --\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; สามารถจัดแต่งโดยใช้ utilities class ได้ตามปกติ เช่น bg และ text\n\u0026lt;div class=\u0026#34;card-header bg-danger text-white\u0026#34;\u0026gt; สามารถนำรูปมาเป็น Header ได้ โดยใช้ class ชือว่า card-img-top\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r...\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;card-img-top\u0026#34; src=\u0026#34;img/staffs/staff4.jpg\u0026#34; \u0026gt;\r\u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt;\r\u0026lt;h4 class=\u0026#34;card-title\u0026#34;\u0026gt;Our Staff\u0026lt;/h4\u0026gt;\r\u0026lt;p class=\u0026#34;card-text\u0026#34;\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolores excepturi modi voluptate animi repellat? Animi accusantium numquam iste non voluptatem ipsum totam, odio sequi. Fuga amet qui vitae atque. Illo.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; เพิ่มปุ่มใน card ให้ดูสวยงาม\n\u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Read more\u0026lt;/a\u0026gt; ซึ่งถ้าจะทำสวยๆ ก็ต้องมีรูป และเนื้อหาที่เหมาะสมกัน\nสามารถนำรูปมาวางด้านล่างแทนได้ โดยใช้ class ชื่อว่า card-img-bottom\n\u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt;\r...\r\u0026lt;/div\u0026gt; Source code https://gist.github.com/benznest/bb45d6f0affd79d462a837055408f3c8\nการใช้ Media การนำคลิป youtube embed มาใช้ใน bootstrap\nไปที่ youtube คลิกขวาที่คลิป \u0026gt; Copy embed code\nมันจะเป็น iframe ถ้ามี width height ให้ลบออก เพราะ เราจะทำให้ responsive\n\u0026lt;iframe src=\u0026#34;https://www.youtube.com/embed/5nLWk7kzXgI?ecver=1\u0026#34;\rframeborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; encrypted-media;\rgyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; เพิ่ม \u0026lt;div\u0026gt;ครอบตัว video โดยเพิ่ม class ชื่อว่า embed-responsive embed-responsive-4by3 4by3 คือขนาด 4:3 สามารถใช้ตัวอื่นได้เช่น 16by9, 21by9, 1by1และที่ iframe เพิ่ม class ชื่อว่า embed-responsive-item\nโดยจะลองเพิ่มแถวเข้าไปต่อจากเดิม\n\u0026lt;div class=\u0026#34;row mt-5\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Video gallery\u0026lt;/h3\u0026gt;\r\u0026lt;div class=\u0026#34;embed-responsive embed-responsive-4by3\u0026#34;\u0026gt;\r\u0026lt;iframe class=\u0026#34;embed-responsive-item\u0026#34; src=\u0026#34;https://www.youtube.com/embed/5nLWk7kzXgI?ecver=1\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ลองเพิ่มคอมลัมภ์อีกอันเพื่อทำ photo gallery ด้านขวาของ video\nซึ่งสามารถใช้ class ชื่อว่า media การทำงานของมันจะเรียงไปแนวนอน\n\u0026lt;div class=\u0026#34;row mt-5\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt;\r...\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Photo gallery\u0026lt;/h3\u0026gt;\r\u0026lt;div class=\u0026#34;media\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;w-50\u0026#34; src=\u0026#34;img/content/office10.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;media-body pl-3\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque aliquam nisi officiis aut\rbeatae. Voluptas, aliquid! Nostrum quam architecto \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; การจะเพิ่มแถวของเนื้อหาที่ใช้ class media สามารถใช้ \u0026lt;ul class=”list-unstyled”\u0026gt; และ \u0026lt;li\u0026gt; เข้ามาได้\n\u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Photo gallery\u0026lt;/h3\u0026gt;\r\u0026lt;ul class=\u0026#34;list-unstyled\u0026#34;\u0026gt;\r\u0026lt;li\u0026gt;\r\u0026lt;div class=\u0026#34;media\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;w-50\u0026#34; src=\u0026#34;img/content/office1.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;media-body pl-3\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque aliquam nisi\rofficiis aut\rbeatae. Voluptas, aliquid! Nostrum quam architecto \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;\r\u0026lt;div class=\u0026#34;media\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;w-50\u0026#34; src=\u0026#34;img/content/office3.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;media-body pl-3\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque aliquam nisi\rofficiis aut\rbeatae. Voluptas, aliquid! Nostrum quam architecto \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;\r\u0026lt;div class=\u0026#34;media\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;w-50\u0026#34; src=\u0026#34;img/content/office2.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;media-body pl-3\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque aliquam nisi\rofficiis aut\rbeatae. Voluptas, aliquid! Nostrum quam architecto \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt; Source code https://gist.github.com/benznest/17e5753cff346c5ed5ba8f4689377801\nNavigation เพิ่ม row ไปที่บนสุดของ container ข้างในใช้ list คือ \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt; … \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\n\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ใน bootstrap จะใช้ class ชื่อ nav ใน \u0026lt;ul\u0026gt; class ชื่อ nav-item ใน \u0026lt;li\u0026gt; class ชื่อ nav-link ใน \u0026lt;a\u0026gt; ที่เป็นป้ายลิงค์ \u0026lt;div class=\u0026#34;row pt-3 pb-3\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;ul class=\u0026#34;nav\u0026#34;\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Service\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; เพิ่ม ให้เมนูนึงถูกเลือกใช้ class ชื่อว่า active\n\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link active\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; เพิ่ม class nav-pills ให้กับ \u0026lt;ul\u0026gt;\n\u0026lt;ul class=\u0026#34;nav nav-pills\u0026#34;\u0026gt; หรือจะใช้ class nav-tabs\n\u0026lt;ul class=\u0026#34;nav nav-tabs\u0026#34;\u0026gt; รายละเอียด\nhttps://getbootstrap.com/docs/4.1/components/navs/\nการใช้ Javascript ของ Bootstrap Bootstrap ต้องใช้ library เพิ่มคือ jquery กับ popper ถึงจะใช้งานได้เต็มประสิทธิภาพ ซึ่ง bootstrap ไม่มีติดมาให้ เพราะ ติด license จำเป็นต้องไปดาวน์ดหลดมาจากต้นทางผู้พัฒนา\nให้ดาวน์โหลด jquery js กับ popper js มาติดตั้งไว้ในโปรเจค ในโฟลดเดอร์ js\n[เพิ่ม jquery , popper , bootstrap ไปที่ท้าย body โดยใช้คำสั่ง \u0026lt;script\u0026gt;\u0026lt;/script\u0026gt; โดยให้ jquery และ popper อยู่ด้านบนของ bootstrap.js เพราะการอ่านโค้ดจะอ่านจากบนลงล่าง วึ่ง bootstrap เรียกใช้งาน jquery\nจึงจำเป็นต้องอ่าน jquery มาก่อนนั่นเอง\n\u0026lt;script src=\u0026#34;js/jquery-3.3.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;js/popper_1_14_3.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; ถ้าใส่ผิด สามารถ Inspect ดูที่เมนู console\nการทำ dropdown เพิ่ม dropdown ให้เมนู ได้ โดยใช้ dropdown-menu\n\u0026lt;li class=\u0026#34;nav-item dropdown\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;nav-link dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34;\u0026gt;Service\u0026lt;/a\u0026gt;\r\u0026lt;div class=\u0026#34;dropdown-menu\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;App\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Website\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Desktop\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;IoT\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt; ปัญหาที่ตามมาคือ เมนูแบบนี้ไม่รองรับ responsive ดังนั้นต้องไปใช้ Navbar แบบใหม่\nติตดั้ง extension ติดตั้ง Bootstrap v4 Snippets\n[Navbar responsive พิมพ์ b-navbar มันจะ generate โค้ดมาให้\nซึ่งเยอะมาก เรามีหน้าที่แก้เนื้อหาก็พอ นี่คือการใช้เครื่องมือให้เป็นประโยชน์\n\u0026lt;nav class=\u0026#34;navbar navbar-expand-lg navbar-light bg-light fixed-top\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;navbar-brand\u0026#34;\u0026gt;Benznest\u0026#39;s blog\u0026lt;/a\u0026gt;\r\u0026lt;button class=\u0026#34;navbar-toggler\u0026#34; data-target=\u0026#34;#my-nav\u0026#34; data-toggle=\u0026#34;collapse\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;navbar-toggler-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\r\u0026lt;/button\u0026gt;\r\u0026lt;div id=\u0026#34;my-nav\u0026#34; class=\u0026#34;collapse navbar-collapse\u0026#34;\u0026gt;\r\u0026lt;ul class=\u0026#34;navbar-nav mr-auto\u0026#34;\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link active\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item dropdown\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;nav-link dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34;\u0026gt;Service\u0026lt;/a\u0026gt;\r\u0026lt;div class=\u0026#34;dropdown-menu\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;App\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Website\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Desktop\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;IoT\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Android\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;iOS\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Windows\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Linux\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/nav\u0026gt; Navbar อันใหม่จะรองรับ responsive\nปรับสีของ Navbar โดยใช้ class uitility\n\u0026lt;nav class=\u0026#34;navbar navbar-expand-lg navbar-dark bg-primary fixed-top\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;navbar-brand text-white\u0026#34;\u0026gt;Benznest\u0026#39;s blog\u0026lt;/a\u0026gt; และเนื่องจาก Navbar มันใช้ Fix-top มันจะทำให้กินเนื้อด้านบน ก็ให้เนื้อหาของเราเว้นว่างด้านบนนิดนึง โดยใช้ pt-5 ก็คือ padding top 5 rem\n\u0026lt;/nav\u0026gt;\r\u0026lt;div class=\u0026#34;container pt-5\u0026#34;\u0026gt; แนะนำ Bootswatch bootswatch เป็นเว็บที่รวมแหล่งธีม css ของ bootstrap มาไว้ในที่เดียว เราสามารถดาวน์โหลดธีมที่ชอบมาใช้ได้ ซึ่งมันคือ css ของ bootstrap ดังนั้นสามารถนำมาใช้กับ bootstrap ได้เลย\nhttps://bootswatch.com/\nกดดาวน์โหลดธีมที่ชอบ แล้วจะได้ไฟล์ .css\n[เอาไฟล์ .css ไปไว้ในโฟลเดอร์ css แนะนำเปลี่ยนชื่อเป็นชื่อธีม ไม่ควรใช้ชื่อ bootstrap ทับอันเดิม\nใน html ให้เปลี่ยนการใช้ bootstrap.min.css มาใช้ธีมอันใหม่\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/minty.min.css\u0026#34; /\u0026gt; Refresh หน้าเว็บ\nการใช้ Carousel carousel คือ ตัวสไลด์รูปภาพ\nใช้โค้ดลัด พิมพ์ว่า b-carousel เลือก carousel-full\nจากนั้นก็ปรับแต่ง carousel จะมีสามส่วน คือ\nindicator ที่เป็นจุด ว่ารูปภาพเราคือรูปไหน\nSlide คือรูปภาพ\nButton คือปุ่มซ้าย ขวา\nactive คืออันที่ถูกเลือกอยู่\n\u0026lt;div class=\u0026#34;container-fluid mt-5 p-0\u0026#34;\u0026gt;\r\u0026lt;div id=\u0026#34;my-carousel\u0026#34; class=\u0026#34;carousel slide\u0026#34; data-ride=\u0026#34;carousel\u0026#34; data-interval=\u0026#34;500\u0026#34;\u0026gt;\r\u0026lt;ol class=\u0026#34;carousel-indicators\u0026#34; \u0026gt;\r\u0026lt;li class=\u0026#34;active\u0026#34; data-target=\u0026#34;#my-carousel\u0026#34; data-slide-to=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;\u0026#34; data-target=\u0026#34;#my-carousel\u0026#34; data-slide-to=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;\u0026#34; data-target=\u0026#34;#my-carousel\u0026#34; data-slide-to=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;/ol\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-inner\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-item active\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;d-block w-100\u0026#34; src=\u0026#34;img/banner/banner3.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt;\r\u0026lt;h5\u0026gt;Hello , world\u0026lt;/h5\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ullam aliquid doloremque, \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;d-block w-100\u0026#34; src=\u0026#34;img/banner/banner4.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt;\r\u0026lt;h5\u0026gt;Hello , world\u0026lt;/h5\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ullam aliquid doloremque, \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;d-block w-100\u0026#34; src=\u0026#34;img/banner/banner5.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt;\r\u0026lt;h5\u0026gt;Hello , world\u0026lt;/h5\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ullam aliquid doloremque, \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;a class=\u0026#34;carousel-control-prev\u0026#34; href=\u0026#34;#my-carousel\u0026#34; data-slide=\u0026#34;prev\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;carousel-control-prev-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\r\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;carousel-control-next\u0026#34; href=\u0026#34;#my-carousel\u0026#34; data-slide=\u0026#34;next\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;carousel-control-next-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\r\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt; การปรับเวลาในการเลื่อนอัตโนมัติ ทำได้โดยใช้ data-interval หน่วยเป็นมิลลิวินาที\n\u0026lt;div id=\u0026#34;my-carousel\u0026#34; class=\u0026#34;carousel slide\u0026#34; data-ride=\u0026#34;carousel\u0026#34;\rdata-interval=\u0026#34;500\u0026#34;\u0026gt; Source code https://gist.github.com/benznest/a2c5683a2f19ddd26617415821a2b141\nModal Modal คือป๊อบอัพแบบสวยๆ อันนี้ก็ใช้บ่อยมากๆ\nใช้โค้ดลัดสร้าง Modal คือพิมพ์ว่ b-modal แล้วเลือก modal-full\n[Modal ปกติมันจะถูกซ่อนเอาไว้ รอให้เรียกใช้งาน\nให้เพิ่ม id ให้กับ div modal หลัก\n\u0026lt;div class=\u0026#34;modal fade\u0026#34; id=\u0026#34;myModal\u0026#34;\u0026gt; ปรับแต่ง modal ตามใจ โดยภายในก็แบ่งเป็น header, content , footer\n\u0026lt;div class=\u0026#34;modal fade\u0026#34; id=\u0026#34;myModal\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;modal-dialog\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;modal-content\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;modal-header\u0026#34;\u0026gt;\r\u0026lt;h5 class=\u0026#34;modal-title\u0026#34;\u0026gt;Hello Modal\u0026lt;/h5\u0026gt;\r\u0026lt;button class=\u0026#34;close\u0026#34; data-dismiss=\u0026#34;modal\u0026#34;\u0026gt;\r\u0026lt;span\u0026gt;\u0026amp;times;\u0026lt;/span\u0026gt;\r\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;modal-body\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Content\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;modal-footer\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;btn btn-danger text-white\u0026#34; data-dismiss=\u0026#34;modal\u0026#34;\u0026gt;Close\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;btn btn-success text-white\u0026#34; data-dismiss=\u0026#34;modal\u0026#34;\u0026gt;Save\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ปุ่มไหนที่อยากให้กดแล้วแสดง modal ก็เพิ่ม **data-toggle=”modal” data-target=”#myModal”\n**โดย target คือ id ของ modal\n\u0026lt;a class=\u0026#34;btn btn-primary text-white\u0026#34; data-toggle=\u0026#34;modal\u0026#34; data-target=\u0026#34;#myModal\u0026#34;\u0026gt;Read more\u0026lt;/a\u0026gt; แนะนำ bootsnipp bootsnipp จะเป็นเว็บที่รวม code หรือ component ต่างๆ เอาไว้สำหรับ bootstrap\nhttps://bootsnipp.com\nเช่นอยากลองใช้ตัวที่ชื่อว่า Timeline vertical ในเว็บของเรา\nกดเข้าไป ข้างในจะมีรายละเอียด เช่น HTML , CSS\nให้ copy โค้ด HTML มาไว้ในที่ต้องการ และ copy CSS ของมันมาด้วย โดยเอาไปวางไว้ใน custom.css ของเรา\nจากนั้น มาเพิ่ม custom.css\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/custom.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt; แนะนำ Startbootstrap.com ตัวนี้เป็นแหล่งรวมธีมของ Bootstrap แบบมาทั้ง pack เลย เช่น ธีมสำหรับทำเว็บบริษัท ธีมสำหรับแสดงผลงาน\nhttps://startbootstrap.com/\n[การใช้ class display อันนี้เป็นความสามารถใหม่ใน ฺbootstrap4 เช่น อยากให้หน้าจอใหญ่แสดง Carousel แต่ในจอเล็กให้ซ่อน\nใน Bootstrap 4 สามารถใช้ class d-\n\u0026lt;div class=\u0026#34;container-fluid mt-5 p-0 d-none d-sm-none d-md-block\u0026#34;\u0026gt; Media query Media query คือการระบุเงื่อนไขเจาะจงสำหรับ css เช่น ถ้าหน้าจอขนาดมากกว่า 700px ให้ h1 , h2, h3 ขนาด 1 rem\n@media (max-width:700px){\rh1,h2,h3{\rfont-size:1rem;\r}\r} สิ่งที่ใช้ร่วมกับ Bootstrap ไม่ได้ เช่น คู่แข่ง ชื่อว่า Foundation เพราะใช้ชื่อ class เหมือนกัน ตัว Foundation มีความสามารถมากกว่า Bootstrap ทำอะไร Advance ได้มากกว่า แต่ก็ต้องเรียนรู้มากกว่า\n[สรุป บทความนี้ก็พาไปทำ component ที่ใช้งานบ่อย เช่น Table , Form , Carousel , Modal , Navbar รวมทั้งแนะนำเว็บที่เกี่ยวกับ bootstrap ที่จะช่วยให้ใช้งานได้ง่ายขึ้นอีกด้วย\n Written with StackEdit.\n "});index.add({'id':21,'href':'/library/tutorials/docs/articles/data-science/','title':"Data Sciene",'content':" Data Sciene "});index.add({'id':22,'href':'/library/tutorials/docs/python/e-book/','title':"e-Book",'content':" e-Book "});index.add({'id':23,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-2/','title':"Ep.2 Flask application structure",'content':" Flask application structure | Learning Flask Ep. 2 Structuring your Flask application for\nIn this part of the Learning Flask series, you\u0026rsquo;ll learn how to structure files and directories in your Flask application.\nFlask is a very flexible framework and doesn\u0026rsquo;t enforce that you follow any specific pattern for structuring your application. However there are some best practices and tips to make sure you don\u0026rsquo;t run into issues down the line as your application grows!\nLike I said, there\u0026rsquo;s many ways to setup your structure. This is a pattern I\u0026rsquo;ve been using for the last couple of years and has worked very well for me.\nLet\u0026rsquo;s get started.\nYou application as a package By far the most popular way to structure your application is by using the package method, where we define our Flask application as a package and can import it! Just like we would any other Python package.\nThe package method allows you much more flexibility, as we can split our application up into multiple logical files, making working with our app much cleaner and easier to navigate.\nAs this is a beginner series, we\u0026rsquo;re going to expand from our simple, single file application and break it up into multiple files and package it up.\nIn the last part of this series, we created a single directory called app in our home directory containing a single file called app.py.\nLet\u0026rsquo;s take a look at how our new project structure is going to look from inside our app project directory:\n├── app │ ├── __init__.py │ └── views.py ├── env ├── requirements.txt └── run.py`  We\u0026rsquo;re going to go through each file step by step. But for now, let\u0026rsquo;s go ahead and create our structure!\nMake your way to the app directory you created in your home folder:\ncd ~/app\nRunning the ls command, your should see the single app.py file along with the virtual environment direcory named env\nWe\u0026rsquo;re going to keep our virtual environment but delete app.py and start from scratch. Delete the file with the following:\nrm app.py\nWhile we\u0026rsquo;re here in the root of our app directory. Go ahead and create a file called run.py\nWe\u0026rsquo;ll use this file as the entrypoint to our Flask app.\nNow create another directory called app and move into it. This is going to contain our Flask application and become our package\nmkdir app cd app\nOnce we\u0026rsquo;re in our newly created app directory, we need to create the __init__.py and views.py files:\ntouch __init__.py views.py\nGreat, we\u0026rsquo;ve created our basic application structure. Let\u0026rsquo;s go through each file, add some code and explain what we\u0026rsquo;ve done.\nWe\u0026rsquo;ll start with the __init__.py file. Go ahead and open it up in an editor and enter the following:\napp/app/init.py\nfrom flask import Flask app = Flask(__name__) from app import views`  You\u0026rsquo;ll be familiar with the first 2 lines, just like we did in the last episode we\u0026rsquo;re importing Flask and setting our app variable, however you\u0026rsquo;ll noticed we\u0026rsquo;ve added from app import views at the bottom.\nUsing this method, we can import multiple python files into our Flask app (as you\u0026rsquo;ll see later)\nThink of the __init__.py file as a contructor that pulls all of the parts of our application together into a package and then tells Python to treat it as a package!\nNow, let\u0026rsquo;s add some views in views.py\napp/app/views.py\nfrom app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot;  Just like in our first app, we\u0026rsquo;re creating a new view using the @app.route decorator and passing it a URL. The only difference is the from app import app statement at the top of the file.\nWe\u0026rsquo;re actually importing the app variable we created in the __init__.py. Meaning we can access it anywhere in our package!\nLet\u0026rsquo;s add another view and pass it a different URL:\napp/app/views.py\nfrom app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot; @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;All about Flask\u0026quot;  We\u0026rsquo;ve added another route with the URL \u0026quot;/about\u0026quot;, changed the function name to about and then told it to return \u0026quot;All about Flask\u0026quot;\n Tip - Routes in Flask must always start with a / slash\n You\u0026rsquo;ll learn more about routing in the next few parts of this series!\nBefore we can run our app, we need to create an entrypoint. This is where we\u0026rsquo;ll instruct our app to run.\nGo back up one directory into the parent app folder, open up run.py and add the following:\napp/run.py\nfrom app import app if __name__ == \u0026quot;__main__\u0026quot;: app.run()  We\u0026rsquo;re importing the app variable from the app package that we\u0026rsquo;ve just created.\nWe\u0026rsquo;re then calling the app.run() method, just like in the previous tutorial by wrapping it in an if __name__ == \u0026quot;__main__\u0026quot;: block.\nBefore we run our app, we need to set our environment variables\nFlask environment variables  Tip - If you deactivated the virtual environment. Go ahead and re-activate it with source env.bin/activate from within the parent app directory\n Just like last time, we\u0026rsquo;re going to set 2 environment variables:\npain export FLASK_APP=run.py export FLASK_ENV=development  We\u0026rsquo;ve set the FLASK_APP variable to run.py which is our Flask entry point.\nRunning our app Run the app with the following:\nflask run\nYou\u0026rsquo;ll see the following message, just like last time:\n* Serving Flask app \u0026quot;run.py\u0026quot; (lazy loading) * Environment: development * Debug mode: on * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 306-421-612  Open up a new browser tab and head to:\nhttp://127.0.0.1:5000/\nYou\u0026rsquo;ll see our \u0026ldquo;Hello world!\u0026rdquo; message just as before.\nNow head over to the other route we created at http://127.0.0.1:5000/about\nYou should see \u0026ldquo;All about Flask\u0026rdquo;\nBoom! We\u0026rsquo;re up and running with our application as a package.\nLet\u0026rsquo;s add some more views in another file and import them into our __init__.py file.\nSplitting up views Let\u0026rsquo;s say we want an admin section of our app. Rather than stuffing all of our views into one folder, let\u0026rsquo;s separate them out into their own seperate file.\nStop your app by hitting Ctrl + c in your terminal.\nMove into the app package directory\ncd app\nCreate a new file called admin_views.py\ntouch admin_views.py\nYour project file structure should now look like this:\n├── app │ ├── __init__.py │ ├── admin_views.py │ └── views.py └── run.py`  Open up admin_views.py and add the following:\napp/app/admin_views.py\nfrom app import app @app.route(\u0026quot;/admin/dashboard\u0026quot;) def admin_dashboard(): return \u0026quot;Admin dashboard\u0026quot;  We\u0026rsquo;ve done exactly the same as what we did in views.py. Imported app from app and declared a new route.\nYou\u0026rsquo;ll also notice the URL is longer and contains 2 parts! You\u0026rsquo;ll learn all about routing in detail later on in this series.\nBut before we can access this new route, we need to import admin_views.py in out __init__.py file.\nGot ahead and open up __init__.py and from app import admin_views down at the bottom. It should then look like this:\napp/app/init.py\nfrom flask import Flask app = Flask(__name__) from app import views from app import admin_views  Save the file and head back to the root app directory containing run.py. It\u0026rsquo;s time to run our app again.\nOnce there, run the following command to run the app:\nflask run\nOpen up your browser. Let\u0026rsquo;s check out our new admin route.\nhttp://127.0.0.1:5000/admin/dashboard\nYou\u0026rsquo;ll see \u0026ldquo;Admin dashboard\u0026rdquo;, just like we told the view to return!\nWe\u0026rsquo;re still missing our requirements.txt file from our original structure. Let\u0026rsquo;s go ahead and generate it with pip\nHit Ctrl + c to stop your application.\nRequirements From the root app directory, run the following command:\npip freeze \u0026gt; requirements.txt\nThis command will create a requirements.txt file and place it in our current directory, listing all of the packages we\u0026rsquo;ve installed.\nIt will look like this:\nClick==7.0 Flask==1.0.2 itsdangerous==1.1.0 Jinja2==2.10 MarkupSafe==1.1.0 Werkzeug==0.14.1`   Tip - To install packages from a requirements.txt file, run pip install -r requirements.txt\n Wrapping up Awesome. You\u0026rsquo;ve learned how to structure your Flask application as a package, break out your code into separate files and work with requirements.txt files.\nNext up, You\u0026rsquo;ll learn how to build a website and render HTML files!\nLast modified · 28 Feb 2019\n Source : pythonise.com.\n "});index.add({'id':24,'href':'/library/tutorials/docs/python/flask/','title':"Flask",'content':" Flask "});index.add({'id':25,'href':'/library/tutorials/docs/articles/website/javascript/','title':"Java Script Programming",'content':" Java Script Programming test "});index.add({'id':26,'href':'/library/tutorials/docs/python/beginer/list/','title':"Lists",'content':" Lists ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูลแบบ List ในภาษา Python เราจะพูดถึงการสร้างและใช้งาน List ในเบื้องต้น การใช้งานเมธอดและฟังก์ชันเพื่อจัดการข้อมูลภายใน List และการใช้งานคำสั่ง For loop กับ List รวมถึงการ slicing\nList (ลิสต์) คือโครงสร้างข้อมูลชนิดหนึ่งในภาษา Python ที่ใช้เก็บข้อมูลแบบลำดับ (Sequence) โดยมี Index เป็นตัวระบุตำแหน่งในการเข้าถึงข้อมูล เราสามารถใช้ List เพื่อเก็บข้อมูลจำนวนมากและหลากหลายประเภทในเวลาเดียวกัน List เป็นประเภทข้อมูลที่ใช้อย่างหลากหลายในการเขียนโปรแกรม นอกจากนี้ ในภาษา Python ยังมี built-in function ที่สามารถทำงานกับ List และใน List ออบเจ็คเองก็มีเมธอดต่างๆ เป็นจำนวนมากที่ช่วยอำนวยความสะดวกในการเขียนโปรแกรม\nการประกาศและใช้งาน List List นั้นเป็นตัวแปรประเภทหนึ่ง การใช้งานของมันจะเหมือนกันอาเรย์ในภาษาอื่นๆ ในการประกาศ List นั้นข้อมูลของมันจะอยู่ภายในเครื่องหมาย [] และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา , มาดูตัวอย่างการประกาศ List ในภาษา Python\nnumbers = [-1, 2, 5, 8, 10, 13] names = ['Mateo', 'Danny', 'James', 'Thomas', 'Luke'] mixed_type = [-2, 5, 84.2, \u0026quot;Mountain\u0026quot;, \u0026quot;Python\u0026quot;]  ในตัวอย่าง เราได้สร้างตัวแปร List สามตัวแปร numbers เป็นตัวแปร List ที่มีสมาชิกเป็นตัวเลขจำนวนเต็ม 6 ตัว names เป็น List ของ String ที่สำหรับเก็บชื่อและมี 5 รายชื่อ และสุดท้ายตัวแปร mixed_type เป็น List ที่เก็บข้อมูลประเภทต่างๆ แบบรวมกันในตัวแปรเดียวซึ่งมีสมาชิกทั้งหมด 5 ตัว ซึ่งทั้งหมดนี้เป็นการกำหนดสมาชิกให้กับ List พร้อมกับการประกาศตัวแปร ในภาษา Python เราสามารถกำหนดค่าให้กับ List หลังจากประกาศตัวแปรแล้วได้ มาดูตัวอย่าง\nnumbers = [] numbers.append(-1) numbers.append(2) numbers.append(5) numbers.append(8) numbers.append(10) numbers.append(13) names = ['Mateo', 'Danny'] names.append('James') names.append('Thomas') names.append('Luke') print(numbers) print(names) print('numbers count = ', len(numbers)) print('names count = ', len(names))  ในตัวอย่าง เป็นการกำหนดค่าให้กับ List หลังจากที่มันถูกสร้างแล้ว เราใช้เมธอด append() เพื่อเพิ่มข้อมูลใหม่เข้าไปใน List ซึ่งข้อมูลที่เพิ่มเข้าจะอยู่ท้ายสุดและเรียง Index เพิ่มขึ้นไปเรื่อยๆ โดยเริ่มจาก 0 ในตัวแปร numbers เราได้เพิ่ม 5 จำนวนเต็มเข้าไปใน List และในตัวแปร names ในตอนแรกได้ประกาศและกำหนดสองชื่อให้กับตัวแปร และเพิ่มเข้าไปภายหลังอีก 3 ชื่อ และฟังก์ชัน len() ใช้เพื่อนับจำนวนสมาชิกภายใน List\n[-1, 2, 5, 8, 10, 13] ['Mateo', 'Danny', 'James', 'Thomas', 'Luke'] numbers count = 6 names count = 5  การเข้าถึงข้อมูลภายใน List List นั้นใช้ Index สำหรับการเข้าถึงข้อมูล โดย Index ของ List จะเป็นจำนวนเต็มที่เริ่มจาก 0 และเพิ่มขึ้นทีละ 1 ไปเรื่อยๆ ดังนั้น เราจึงสามารถเข้าถึงข้อมูลภายใน List เพื่ออ่านหรืออัพเดทค่าได้โดยตรงผ่าน Index ของมัน นี่เป็นโค้ดการเข้าถึงข้อมูลภายใน List ในภาษา Python\nnames = ['Mateo', 'Danny', 'James', 'Thomas', 'Luke'] print('names[0] = ', names[0]) print('names[3] = ', names[3]) print('names[-1] = ', names[-1]) # update value names[0] = 'Bob' print('names[0] = ', names[0])  ในตัวอย่าง เรามีตัวแปร List ที่ชื่อว่า names ดังนั้น เพือเข้าถึงสมาชิกตัวแรกภายใน List ซึ่งก็คือ \u0026ldquo;Mateo\u0026rdquo; นั้นจะใช้คำสั่ง names[0] และสมาชิกที่มีค่าเป็น \u0026ldquo;Thomas\u0026rdquo; ซึ่งอยู่ตำแหน่งที่ 4 จะใช้คำสั่ง names[3] สังเกตว่า Index จะลดลงหนึ่งเพราะ Index ของ List นั้นเริ่มต้นจาก 0\nprint('names[-1] = ', names[-1])  นอกจากนี้ เราสามารถเข้าถึงข้อมูลภายใน List โดยการใช้ Index เป็นจำนวนลบได้ โดยเริ่มจาก -1 ซึ่งเป็นสมาชิกตัวสุดท้ายของ List และ -2 สมาชิกตัวถัดมาและลดลงไปทีละ 1\nnames[0] = 'Bob' print('names[0] = ', names[0])  นี่เป็นการอัพเดทค่าของสมาชิกภายใน List ในตัวอย่างเราได้เปลี่ยนค่าของสมาชิกในตำแหน่งแรกของ List จากเดิมที่เป็น \u0026ldquo;Mateo\u0026rdquo; ให้เป็น \u0026ldquo;Bob\u0026rdquo;\nnames[0] = Mateo names[3] = Thomas names[-1] = Luke names[0] = Bob  การอ่านค่าใน List ด้วยคำสัง For loop เนื่องจาก List นั้นเก็บข้อมูลเป็นแบบลำดับและใช้ Index ในการเข้าถึงข้อมูล ดังนั้น เราจึงมักจะใช้คำสั่งวนซ้ำสำหรับการเขียนโปรแกรมที่ทำงานกับ List เพราะทำให้การทำงานรวดเร็วและง่ายขึ้น เช่น การใช้คำสั่งวนซ้ำวนอ่านค่าใน List ที่มีข้อมูลเป็นจำนวนมาก เป็นต้น ต่อไปมาดูตัวอย่างการใช้งานคำสั่ง For loop กับ List ในภาษา Python\nnumbers = [10, 20, 30, 40, 50, 60, 70] sum = 0 for n in numbers: print(n, end =' ') sum += n print('sum = ', sum) names = ['Mateo', 'Danny', 'James', 'Thomas', 'Luke'] for i in range(0, len(names)): print(names[i].upper(), end =' ')  ในตัวอย่าง เป็นการวนอ่านค่าภายใน List ด้วยการใช้คำสั่ง For loop โดยเราได้แยกการทำงานออกเป็นสองลูป ในลูปแรกเป็นการใช้งานคำสั่ง For loop เพื่อวนอ่านค่าภายใน List numbers โดยตรง โปรแกรมจะวนอ่านค่าไปทีละค่าและนำค่าในแต่ละรอบที่ได้มาใส่ในตัวแปร n เราได้ทำการแสดงผลตัวเลขภายใน List และหาผลรวมของตัวเลขภายใน List โดยเก็บไว้ในตัวแปร sum\nในลูปที่สอง เป็นการใช้คำสั่ง For loop เช่นกัน แต่ในตอนนี้เราจะสร้าง Index ขึ้นมาโดยการใช้ตัวแปร i เป็นตัวรัน Index จาก 0 ถึงขนาดตัวสุดท้ายของ List ที่สร้างจากฟังก์ชัน range() และเราแสดงผลชื่อในตัวพิมพ์ใหญ่ด้วยเมธอด upper() ของ String\n10 20 30 40 50 60 70 sum = 280 MATEO DANNY JAMES THOMAS LUKE  List slicing ในภาษา Python เราสามารถตัดข้อมูลจาก List หนึ่งแล้วนำไปสร้างเป็น List ใหม่ได้ โดยวิธีดังกล่าวนั้นเรียกกว่า slicing ในการตัดข้อมูลใน List นั้นจะทำในรูปแบบ [a:b] เมื่อ a เป็น Index เริ่มต้นและ b เป็น Index ก่อนสมาชิกตัวสุดท้ายที่ต้องการตัด มาดูตัวอย่างของ list slicing\nch = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] a = ch[0:4] # a - d b = ch[4:9] # e - h c = ch[:3] # a - c d = ch[3:] # c - h e = ch[:] # copy all list, or equivalent to e = ch f = ch[0:2] + ch[6:8] # a - b and g - h print(a) print(b) print(c) print(d) print(e) print(f)  ในตัวอย่าง เรามีตัวแปร ch ซึ่งมีสมาชิกเป็นตัวอักษรในภาษาอังกฤษจาก a ถึง h หลังจากนั้นเราได้ทำการ slice ข้อมูลจาก List ดังกล่าว ในตัวแปร a นั้นเป็นการตัดเอาข้อมูลจากตำแหน่งที่ 0 ถึง 3 มา ในตัวแปร b นั้นตัดเอาตำแหน่งที่ 4 ถึง 8 ถัดมาเป็นตัวแปร c d และ e เป็นการเว้นว่างตำแหน่งข้างหน้าและข้างหลัง ซึ่งถ้าตำแหน่งข้างหน้าถูกเว้นว่างไว้ เป็นการตัดเอาสมาชิกตั้งแต่ตำแหน่งเริ่มต้นของ List และถ้าตำแหน่งสิ้นสุดถูกเว้นว่างไว้ เป็นการตัดเอาจนถึงสมาชิกตัวสุดท้ายของ List และในตัวแปร f เป็นการตัดเอาสองส่วนของ List มาต่อกัน ในการนำสอง List มาต่อกันนั้นเราจะใช้ตัวดำเนินการ +\n['a', 'b', 'c', 'd'] ['e', 'f', 'g', 'h'] ['a', 'b', 'c'] ['d', 'e', 'f', 'g', 'h'] ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] ['a', 'b', 'g', 'h']  การใช้งานคำสั่ง del เพื่อลบข้อมูลใน List คำสั่ง del เป็นคำสั่งที่ใช้สำหรับลบตัวแปรใดๆ ออกไปจากหน่วยความจำหรือใช้ยกเลิกตัวแปรที่เคยประกาศไปแล้ว เราสามารถใช้คำสั่ง del เพื่อลบสมาชิกภายใน List ได้เช่นเดียวกัน มาดูตัวอย่างการใช้งานคำสั่ง del ในภาษา Python\nch = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] del ch[0] # delete a print(ch) del ch[0] # delete b print(ch) del ch[2:4] # delete e, f print(ch) del ch[:] # delete all print(ch)  ในตัวอย่าง เป็นการใช้งานคำสั่ง del สำหรับลบสมาชิกภายใน List ในตอนแรก เราได้ลบอักษร a ออกไปจาก List ซึ่งสมาชิกตัวแรกนั้นจะมี Index เป็น 0 ดังนั้น เมื่อการลบเสร็จสิ้น List จะทำการเลื่อนตัวอักษร b มายัง Index 0 แทน ซึ่งสิ่งนี้เป็นสภาวะการสูญเสียตำแหน่งของ List หรือ Index lose หลังจากนั้น เราได้ลบโดยการใช้วิธีการกำหนด Index แบบ slicing เราได้ทำการลบค่าจาก Index 0 ถึง 3 ซึ่งเป็นการลบตัวอักษรจาก e ถึง f และในคำสั่งสุดท้ายเป็นการลบข้อมูลภายใน List ทั้งหมด\n['b', 'c', 'd', 'e', 'f', 'g', 'h'] ['c', 'd', 'e', 'f', 'g', 'h'] ['c', 'd', 'g', 'h'] []  Warning: จากตัวอย่างข้างต้นนั้น เมื่อคุณต้องการลบข้อมูลทั้งหมดภายใน List เราจะใช้ del ch[:] เพราะว่าเป็นการลบแบบ slicing จากตำแหน่งแรกถึงตำแหน่งสุดท้ายและจะทำให้มันกลายเป็น List ว่างปล่าว เมื่อคุณใช้คำสั่ง del ch จะหมายความว่าลบตัวแปรออกไปจากหน่วยความจำแทน\nในบทนี้ คุณได้เรียนรู้เกี่ยวกับการประกาศและใช้งาน List ในภาษา Python นอกจากนี้เรายังใช้คำสัง For loop เพื่อให้ง่ายในการอ่านข้อมูลภายใน List รวมทั้งการตัดข้อมูลใน List ด้วยการ slicing และการใช้คำสั่ง del เพื่อลบข้อมูลภายใน List ออกไป ในบทต่อไป เราจะเป็นการใช้งานฟังก์ชันและเมธอดของ List\nReference :\n http://marcuscode.com/lang/python/lists  "});index.add({'id':27,'href':'/library/tutorials/docs/articles/python/python-dictionaries/','title':"Dictionaries",'content':" Python Dictionaries Data structures are basically containers that store data in predefined layouts, optimized for certain operations — like apples in a box, ready for picking😉.\nThe Python programming language natively implements a number of data structures. Lists, tuples, sets, dictionaries are but some of them. We will be looking at the dictionary data type in subsequent sections.\nWhat are dictionaries ? key-value mapping  A dictionary in python is a mapping object that maps keys to values, where the keys are unique within a collection and the values can hold any arbitrary value. In addition to being unique, keys are also required to be hashable.\nAn object is said to be hashable if it has a hash value (implemented by a __hash__() method) that does not change during the object’s lifetime. Most commonly, we use immutable data types such as strings, integers, and tuples (only if they contain similarly immutable types) as dictionary keys.\nA dictionary’s data is always enclosed by a pair of curly braces { }, and would normally look like this:\nmy_dict = {\u0026quot;first_name\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;last_name\u0026quot;:\u0026quot;Snow\u0026quot;, \u0026quot;age\u0026quot;:16, \u0026quot;gender\u0026quot;:\u0026quot;Male\u0026quot;}  We have created a dictionary named my_dict where each key-value pair is separated by a full colon, with the key-value pairs as:\nfirst_name - John last_name - Snow age - 16 gender - Male  Typically dictionaries store associative data, i.e data that is related. Examples of such data include the attributes of an object, SQL query results and csv-formatted information. Throughout this article, we will be using dictionaries to store job listing details from Kaggle.\nComparisons Dictionaries are an implementation of Associative Arrays. All Associative arrays have a structure of (key, value) pairs, where each key is unique for every collection. Other languages also have similar implementations, such as:\n- Maps in Go - std::map in C++ - Maps in Java - JavaScript objects  Unlike sequenced data types like lists and tuples, where indexing is achieved using positional indices, dictionaries are indexed using their keys. Therefore, individual values can be accessed using these keys.\nDictionary Operations 1. Creation  We initialize an empty dictionary using a pair of curly braces. This approach is often used when we expect to store some data at later stages of our operation.\nempty_dict = {}  In the line above, we have created an empty dictionary named empty_dict.\n For instances when we have our data beforehand, we use curly braces with the key-value pairs. We can now create a dictionary to represent the second row of data in the jobs.csv file.\njob1 = {\u0026quot;title\u0026quot;:\u0026quot;Production Manager\u0026quot;, \u0026quot;location\u0026quot;:\u0026quot;Rest of Kenya\u0026quot;, \u0026quot;job_type\u0026quot;:\u0026quot;Full Time\u0026quot;, \u0026quot;employer\u0026quot;:\u0026quot;The African Talent Company (TATC)\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;Farming\u0026quot;}  We just created a dictionary with the keys title,location, job_type, employer, category and assigned it to the variable job1.\n Dictionaries can also be created using the dict() constructor. To do this we pass the constructor a sequence of key-value pairs. We could also pass in named arguments.\nLet\u0026rsquo;s create a dictionary to represent the third row of data in the jobs.csv file, using both of these methods.\n# create an empty dictionary empty_property = dict() # create dictionary using a list of key-value tuples job2 = dict([ (\u0026quot;title\u0026quot;,\u0026quot;Marketing \u0026amp; Business Development Manager\u0026quot;),(\u0026quot;location\u0026quot;,\u0026quot;Mombasa\u0026quot;), (\u0026quot;job_type\u0026quot;,\u0026quot;Full Time\u0026quot;), (\u0026quot;employer\u0026quot;,\u0026quot;KUSCCO Limited (Kenya Union of Savings \u0026amp; Credit Co-operatives Limited)\u0026quot;), (\u0026quot;category\u0026quot;,\u0026quot;Marketing \u0026amp; Communications\u0026quot;) ])  Creating dictionary with list of key-value tuples\n  We passed a sequence, in this case a list of key-value tuples, to the dict() constructor to create our dictionary, and assigned it to the variable job2.\n# Using keyword arguments dict( title=\u0026quot;Marketing \u0026amp; Business Development Manager\u0026quot;, location=\u0026quot;Mombasa\u0026quot;,job_type=\u0026quot;Full Time\u0026quot;, employer=\u0026quot;KUSCCO Limited (Kenya Union of Savings \u0026amp; Credit Co-operatives Limited)\u0026quot;, category=\u0026quot;Marketing \u0026amp; Communications\u0026quot; )  Creating dictionary with dict( )\nHere, we created a dictionary using named arguments. The keys are the argument names, while the values are the argument values. It is however important to note that this method is only suitable when our keys are just simple strings.\n2. Accessing Items As we mentioned earlier on, dictionaries are indexed using their keys.\nTo access a particular value in a dictionary we use the indexing operator (key inside square brackets). However, to use this method, we need to make sure the key we intend to retrieve exists, lest we get a KeyError. Checking for availability of a key is as easy as using the in operator.\n# Check existence of title \u0026quot;title\u0026quot; in job2 # returns True \u0026quot;salary\u0026quot; in job2 # returns False # Using key indexing job2[\u0026quot;title\u0026quot;] # return 'Marketing \u0026amp; Business Development Manager'  Indexing\n In the example above we use indexing to access the title from job2 after making sure it is available using in. If you are like me, this is probably a lot of work. The good news, however, is that we have a better tool — the get() method. This method works by giving out a value if the key exists, or returning None. None sounds better than an error, right?\nWhat if we want to go even further, and return something, a placeholder of sorts? get() takes a second argument, a default value to be used in place of None. Now let\u0026rsquo;s use in to check if title exists in job2, then we can use indexing to retrieve its value. We\u0026rsquo;ll also go ahead and use get() to retrieve salary from job2.\n# Using keyword arguments dict( title=\u0026quot;Marketing \u0026amp; Business Development Manager\u0026quot;, location=\u0026quot;Mombasa\u0026quot;,job_type=\u0026quot;Full Time\u0026quot;, employer=\u0026quot;KUSCCO Limited (Kenya Union of Savings \u0026amp; Credit Co-operatives Limited)\u0026quot;, category=\u0026quot;Marketing \u0026amp; Communications\u0026quot; )  Accessing items\n  Here, we use get() to access the title and salary.\nHowever, job2 doesn\u0026rsquo;t have a salary key so the return value is None. Adding a second argument, to get() now gives us 5000 instead of None.\n3. Modification Dictionaries can be modified directly using the keys or using the update() method. update() takes in a dictionary with the key-value pairs to be modified or added. For our demonstration, let\u0026rsquo;s:\n Add a new item (salary) to job2 with a value of 10000. Modify the job_type to be \u0026ldquo;Part time\u0026rdquo;. Update the salary to 20000. Update the dictionary to include a new item (available) with a value of True.\n# Adding a new entry for salary using the index job2[\u0026quot;salary\u0026quot;] = 10000 # Modifying the entry for job_type using the index job2[\u0026quot;job_type\u0026quot;] = \u0026quot;Part time\u0026quot; # Modifying the salary entry using update job2.update({\u0026quot;salary\u0026quot;:20000}) # Adding the available entry using update job2.update({\u0026quot;available\u0026quot;:True})   Updating dictionaries\nTo add a new entry, we use syntax similar to indexing. If the key exists, then the value will be modified, however, if the key doesn’t exist, a new entry will be created with the specified key and value.\n Initially, we assigned a value of 10000 to the salary key, but since salary doesn\u0026rsquo;t exist, a new entry is created, with that value. For our second example, the job_type key exists, the value is modified to \u0026ldquo;Part time\u0026rdquo;. Next, we use the update() method to change the salary value to 20000, since salary is already a key in the dictionary. Finally, we apply update() to the dictionary, a new entry is created with a key of available and value of True.  A particularly nice use case for update() is when we need to merge two dictionaries. Say we have another dictionary extra_info containing extra fields for a job, and we would like to merge this with job2.\nextra_info = { \u0026quot;verified\u0026quot;:True, \u0026quot;qualification\u0026quot;:\u0026quot;Undergraduate Degree\u0026quot;, \u0026quot;taxable\u0026quot;:True} # Merge extra_info with job2 job2.update(extra_info)  Merging dictionaries\n4. Deletion We can now remove the just created salary entry from job2, and remove everything from job1.\ndel job2[\u0026quot;salary\u0026quot;] del job2[\u0026quot;available\u0026quot;] print(job2) #return a dictionary without 'salary' and 'available' entries job1.clear() print(job1) #return an empty dictionary del job1 print(job1) # return NameError  Deletion\nTo remove the entries associated with the salary and available keys from job2, we use the del keyword. Now if we go ahead and print job2, the salary and available entries are gone.\nRemoving all items from job1 entails using the clear() method, which leaves us with an empty dictionary. If we don\u0026rsquo;t need a dictionary anymore, say job1, we use the del keyword to delete it. Now if we try printing job1 we\u0026rsquo;ll get a NameErrorsince job1 is no longer defined.\n6. Iteration A dictionary by itself is an iterable of its keys. Moreover, we can iterate through dictionaries in 3 different ways:\n dict.values() - this returns an iterable of the dictionary\u0026rsquo;s values. dict.keys() - this returns an iterable of the dictionary\u0026rsquo;s keys. dict.items() - this returns an iterable of the dictionary\u0026rsquo;s (key,value) pairs.  But why would we need to iterate over a dictionary?\nOur dataset has about 860 listings, suppose we wanted to display the properties of all these on our website, it wouldn’t make sense to write the same markup 860 times. It would be efficient to dynamically render the data using a loop.\nLet’s iterate over job2 using a for-loop using all the three methods. Furthermore we\u0026rsquo;ll use the csv module to read our csv-formatted data in to a list of dictionaries, then we\u0026rsquo;ll iterate through all the dictionaries and print out the keys and values.\n# Iterating through the dictionary itself for x in job2: print(x) # prints the keys of job2 # Using keys() for key in job2.keys(): print(key) # prints the keys of job2 # Using values() for val in job2.values(): print(val) # prints the values of job2 # Dictionary iteration use case import csv with open('jobs.csv','r') as csv_file: reader = csv.DictReader(csv_file) for job in reader: # Using items() for key,val in job.items(): # Apply any additional processing print(key, val) #print the keys and values of each job  Dictionary Iteration\n First, we loop through the dictionary as it is. This is similar in output to stepping through the job2.keys() iterable. Secondly, we iterate through job2.values() while printing out the value. Finally, we step through the list of dictionaries, and for each one, loop through the keys and values simultaneously.\nWe include both key and value in the for-loop constructor since job.items() yields a tuple of key and value during each iteration. We can now apply any kind of operation to our data at this point. Our implementation simply prints out the pair at each step.  7. Sorting Borrowing from our description of dictionaries earlier, this data type is meant to be unordered, and doesn’t come with the sorting functionality baked in. Calling the sorted() function and passing it a dictionary only returns a list of the keys in a sorted order, since the dictionary is an iterable of its keys.\nIf we use the items() iterable we could sort the items of our dictionary as we please. However, this doesn\u0026rsquo;t give us our original dictionary, but a list of key-value tuples in a sorted order.\nSay we wanted to display the job details in the above example in alphabetical order, We would need to alter our iteration to give sorted results. Lets walk through the example again an see how we would achieve that functionality.\nith open('jobs.csv','r') as csv_file: reader = csv.DictReader(csv_file) for job in reader: # Using sorted() to sort a dictionary's items on the keys for key,val in sorted(job.items(),key=lambda item:item[0]): # Apply any additional processing print(key, val) #print the keys and values of each job  Iteration\n In this example we use python’s inbuilt sorted() function which takes in an iterable (our dictionary\u0026rsquo;s items). The key argument of the sorted()function instructs sorted() to use the value at index 0 for sorting. This named argument points to a lambda function which takes in an item, say (“a”, “b”) and returns the value at the item’s first index, in this case “a”.\nSimilarly, to sort by the values, we use index 1 instead of index 0.  Other Methods Dictionaries have other methods that could be used on demand. To read up further on these, please consult the python documentation. Here are some other useful methods:\n pop(key,default) - deletes the key key and returns it, or returns an optional default when the key doesn\u0026rsquo;t exist. copy() - returns a shallow copy of the original. This shallow copy has similar references to the original, and not copies of the original\u0026rsquo;s items. setdefault(key,default) - returns the value of key if in the dictionary, or sets the new key with an optional default as its value then returns the value.  Speeding Up your Code Dictionary unpacking can greatly speed up our code. It involves destructuring a dictionary into individual keyword arguments with values.\nThis is especially useful for cases that involve supplying multiple keyword arguments, for example in function calls.\nTo implement this functionality we use the iterable unpacking operator (**).\nWhat if we needed Job objects to work with, instead of dictionaries? We shouldn\u0026rsquo;t have to do some heavy lifting to get our data reorganized in to objects.\nLet\u0026rsquo;s see how we could translate our dictionaries into objects, by again tweaking our previous code.\nDefine a Job Class class Job: def __init__(self, title=\u0026quot;Job Title\u0026quot;, location=\u0026quot;Job Location\u0026quot;, job_type=\u0026quot;Job Type\u0026quot;, employer=\u0026quot;Job Employer\u0026quot;, category=\u0026quot;Job Category\u0026quot;,): self.title = title self.location = location self.job_type = job_type self.employer = employer self.category = category def __str__(self): return self.title # Creating a job object without unpacking Job(\u0026quot;Marketing \u0026amp; Business Development Manager\u0026quot;,\u0026quot;Mombasa\u0026quot;,\u0026quot;Full Time\u0026quot;, \u0026quot;KUSCCO Limited (Kenya Union of Savings \u0026amp; Credit Co-operatives Limited)\u0026quot;, \u0026quot;Marketing \u0026amp; Communications\u0026quot;) with open('jobs.csv','r') as csv_file: reader = csv.DictReader(csv_file) for job in reader: # Creating a job object with unpacking Job(**job)  Dictionary Unpacking\n To instantiate a new Job object, traditionally, we would need to pass in all the required arguments. However, with unpacking, we just pass in a dictionary with the ** operator before it.\nThe operator unpacks the dictionary in to an arbitrary number of named arguments. This approach is much cleaner and involves less code.  8. Anti-patterns: Wrong usage Compared to lists and tuples, dictionaries take up more space in memory, since they need to store both the key and value, as opposed to just values.\n Therefore, dictionaries should only be used in cases where we have associative data, that would lose meaning if stored in lists, or any other sequenced data type. Dictionaries are mutable, hence not suitable for storing data than shouldn’t be modified in place. Since dictionaries are unordered, it would not be sensible to store strictly arranged data in them.\nA possible candidate data type for this scenario would be the OrderedDict from the collections module. An OrderedDict is a subclass of the regular dict class, with the advantage of tracking the order in which keys were added. Dictionaries are well-designed to let us find a value instantly without necessarily having to search through the entire collection, hence we should not use loops for such an operation.\n# How not to search for a value and return it key_i_need = \u0026quot;location\u0026quot; target = \u0026quot;\u0026quot; for key in job2: if key == key_i_need: target = job2[key] # How to search efficiently target = job2.get(\u0026quot;location\u0026quot;)   Antipatterns\nWe have a variable key_i_need containing the key we want to search for. We have used a for loop to traverse the collection, comparing the key at each step with our variable. If we get a match, we assign that key\u0026rsquo;s value to the variable target.\nThis is the wrong approach. We should instead use get(), and pass it the desired key.\nPerformance Trade-offs Dictionary operations are heavily optimized in python, especially since they’re also extensively used within the language.\nFor instance, members of a class are internally stored in dictionaries.\nMost dictionary operations have a time complexity of O(1) — implying that the operations run in constant time relative to the size of the dictionary. This simply means that the operation only runs once irregardless of the dictionary size.\nCreating a dictionary runs in a linear time of O(N), where “N” is the number of key-value pairs.\nSimilarly, all iterations run in O(N) since the loop has to run N times.\nDictionary Operations — https://www.ics.uci.edu/~brgallar/week8_2.html\nConclusion Dictionaries come in very handy for regular python usage. They are suitable for use with unordered data that relies on relations. Caution should however be exercised to ensure we do not use dictionaries in the wrong way and end up slowing down execution of our code. For further reading please refer to the official python documentation on mapping types. \u0026gt; Written with StackEdit.\n"});index.add({'id':28,'href':'/library/tutorials/docs/python/beginer/dictionary/','title':"Dictionary",'content':" Dictionary ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูล Dictionary ในภาษา Python เราจะแนะนำให้คุณรู้จักกับ Dictionary คืออะไร และการประกาศและใช้งานสำหรับเก็บข้อมูลในการเขียนโปรแกรม นอกจากนี้ เรายังจะพูดถึงการใช้งานเมธอดและ built-in functions ของ Dictionary และตัวอย่างการใช้งานกับการเขียนโปรแกรมใบรูปแบบต่างๆ ในภาษา Python\nDictionary คือประเภทข้อมูลที่เก็บข้อมูลในรูปแบบคู่ของ Key และ Value โดยที่ Key ใช้สำหรับเป็น Index ในการเข้าถึงข้อมูลและ Value เป็นค่าข้อมูลที่สอดคล้องกับ Key ของมัน การเข้าถึงข้อมูลใน Dictionary นั้นรวดเร็วเพราะว่าข้อมูลได้ถูกทำ Index ไว้อัตโนมัติโดยใช้ Key นอกจากนี้ Dictionary ยังมีเมธอดและฟังก์ชันอำนวยความสะดวกสำหรับการทำงานทั่วไป\nการประกาศ Dictionary ในภาษา Python ในการใช้งาน Dictionary เรามักจะใช้เก็บข้อมูลที่สามารถใช้บางอย่างที่สามารถจำแนกข้อมูลออกจากกันได้ โดยกำหนดให้สิ่งนั้นเป็น Key ในการประกาศ Dictionary สมาชิกของมันจะอยู่ภายในวงเล็บปีกกา {} มาดูตัวอย่างในการประกาศ Dictionary ในภาษา Python\nscores = {'james': 1828, 'thomas': 3628, 'danny': 9310} scores['bobby'] = 4401 numbers = {1: 'One', 2: 'Two', 3: 'Three'} print(scores) print(numbers)  ในตัวอย่าง เราได้ประกาศตัวแปร Dictionary ที่มีชื่อว่า scores สำหรับเก็บคะแนนของแต่ละคนโดยใช้ชื่อเป็น Key และค่าของมันก็คือคะแนน สมาชิกของ Dictionary แต่ละตัวจะถูกกำหนดในรูปแบบ key: value และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา เราได้กำหนดค่าเริ่มต้นสามค่าให้กับ Dictionary และสามารถกำหนดค่าให้กับ Dictionary ในรูปแบบ scores['bobby'] ได้หลังจากที่ตัวแปรถูกสร้างแล้ว สังเกตว่าเราสามารถใช้ Key เป็น String หรือประเภทข้อมูลอื่นๆ ได้ ต่อมาตัวแปร numbers เป็น Dictionary ที่มี Key เป็นตัวเลข\n{'james': 1828, 'thomas': 3628, 'danny': 9310, 'bobby': 4401} {1: 'One', 2: 'Two', 3: 'Three'}  นี่เป็นผลลัพธ์ของโปรแกรมในการแสดงผลข้อมูลภายในตัวแปร Dictionary ทั้งสองที่เราได้สร้างขึ้น\nการเข้าถึงข้อมูลภายใน Dictionary หลังจากที่เราได้ประกาศ Dictionary ไปแล้ว ต่อไปจะการเข้าถึงข้อมูลเพื่ออ่านและอัพเดทข้อมูลโดยผ่านทาง Key ของมัน มาดูตัวอย่างการเข้าถึงข้อมูลใน Dictionary\nscores = {'james': 1828, 'thomas': 3628, 'danny': 9310, 'bobby': 4401} # display data print('james =\u0026gt;', scores['james']) print('thomas =\u0026gt;', scores['thomas']) print('danny =\u0026gt;', scores['danny']) print('bobby =\u0026gt;', scores['bobby']) # update data scores['james'] = scores['james'] + 1000 scores['thomas'] = 100 print('james =\u0026gt;', scores['james']) print('thomas =\u0026gt;', scores['thomas'])  ในตัวอย่าง เรามีตัวแปร scores สำหรับเก็บคะแนนของผู้เล่นโดยชื่อเป็น Key ของ Dictionary ในการเข้าถึงข้อมูลนั้นจะใช้ Key ของมัน ในส่วนแรกเป็นการเข้าถึงข้อมูลภายใน Dictionary เพื่อแสดงผลคะแนนของแต่ละ Key ออกมาทางหน้าจอ ต่อมาเป็นการอัพเดทข้อมูลใน Dictionary โดยเราได้เพิ่มค่าให้กับ Key 'james' ขึ้นไปอีก 1000 และกำหนดค่าให้กับ Key 'thomas' เป็น 100 และแสดงผลอีกครั้ง\njames =\u0026gt; 1828 thomas =\u0026gt; 3628 danny =\u0026gt; 9310 bobby =\u0026gt; 4401 james =\u0026gt; 2828 thomas =\u0026gt; 100  นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการเข้าถึงข้อมูลภายใน Dictionary เพื่ออ่านค่าและอัพเดทข้อมูล\nในการเข้าถึงข้อมูลภายใน Dictionary นั้น คุณต้องตรวจสอบให้แน่ใจว่า Key นั้นมีอยู่จริง ไม่เช่นนั้นโปรแกรมจะเกิดข้อผิดพลาดขึ้น ยกตัวอย่างเช่น\nscores = {'james': 1828, 'thomas': 3628, 'danny': 9310, 'bobby': 4401} print(scores['smith']) # Error # check if key smith exist if 'smith' in scores.keys(): print(scores['smith'])  ในตัวอย่างข้างบน โปรแกรมจะเกิดความผิดพลาดขึ้นเพราะเราได้เข้าถึง Key 'smith' ซึ่งไม่มีอยู่ใน scores อย่าไรก็ตาม เราสามารถตรวจว่า Key มีอยู่หรือไม่ได้โดยการใช้คำสั่ง in เพื่อตรวจสอบจาก Key ในเมธอด keys() ของ Dictionary\nการอ่านค่าใน Dictionary ด้วยคำสั่ง For loop คำสั่ง For loop นั้นเป็นคำสั่งที่ยืดหยุ่นและสามารถใช้งานได้อย่างหลากหลาย ในการอ่านค่าใน Dictionary นั้นเราสามารถใช้ For loop เพื่อวนอ่านค่าทั้ง Key และ Values ใน Dictionary ได้ มาดูตัวอย่างของโปรแกรม\ncountries = {'de': 'Germany', 'ua': 'Ukraine', 'th': 'Thailand', 'nl': 'Netherlands'} for k, v in countries.items(): print(k, v) # iterate through keys print('Key:', end = ' ') for k in countries.keys(): print(k, end = ' ') # iterate through values print('\\nValue:', end = ' ') for v in countries.values(): print(v, end = ' ')  ในตัวอย่าง เป็นการใช้งานคำสั่ง For loop วนอ่านค่าใน Dictionary ซึ่งมี 3 loop ด้วยกัน ในลูปแรกเป็นการอ่านค่าแบบ Key และ Value ในแต่ละรอบของการทำงานเราเอาข้อมูลใน Dictionary ด้วยเมธอด items() ซึ่งจะส่งค่ากลับเป็น Key และ Value กับมาและโหลดใส่ในตัวแปร k และ v ตามลำดับ\nในลูปที่สอง เป็นการวนอ่าน Key ทั้งหมดภายใน Dictionary โดยเมธอด keys() จะส่งค่ากลับเป็น List ของ Key ทั้งหมดและโหลดใส่ในตัวแปร k แต่ละรอบของลูป และในลูปสุดท้ายนั้นเป็นการอ่าน Value ทั้งหมด และเมธอด values() เพื่อรับค่าของ Value ทั้งหมดมาและใส่ในตัวแปร v ในแต่ละรอบของลูป\nde Germany ua Ukraine th Thailand nl Netherlands Key: de ua th nl Value: Germany Ukraine Thailand Netherlands  นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้คำสั่ง For loop เพื่ออ่านข้อมูลใน Dictionary ในภาษา Python\nPython Dictionary methods เช่นเดียวกับข้อมูลประเภทอื่นๆ Dictionary มีเมธอดที่ให้คุณสามารถทำงานกับมันได้ง่ายขึ้น โดยส่วนมากแล้วมักจะเป็นเมธอดในการอัพเดทและรับค่าข้อมูลภายใน Dictionary ต่อไปมาดูตัวอย่างการใช้งานเมธอดของ Dictionary ในภาษา Python\ncountries = {'de': 'Germany', 'ua': 'Ukraine', 'th': 'Thailand', 'nl': 'Netherlands'} print(countries.keys()) print(countries.values()) print(countries.get('de')) # equal to countries['de'] countries.setdefault('tr', 'Turkey') print(countries.popitem()) print(countries.popitem()) print(countries.items())  ในตัวอย่าง เป็นโปรแกรมในการใช้งานเมธอดของ Dictionary ตัวแปรของเรา countries มาจากตัวอย่างก่อนหน้าที่มี Key เป็นชื่อย่อของประเทศและ Value เป็นชื่อเต็มของประเทศ เมธอด keys() ส่งค่ากลับเป็น List ของ Key ทั้งหมดภายใน Dictionary และเมธอด values() นั้นจะส่งเป็น List ของ Value\nหลังจากนั้นเป็นการเข้าถึงข้อมูลด้วยเมธอด get() โดยมี Key เป็นอาร์กิวเมนต์ซึ่งผลลัพธ์การทำงานของมันจะเหมือนกับการเข้าถึงข้อมูลโดยตรง เช่น countries['de'] และเมธอด setdefault() ใช้รับค่าจากคีย์ที่กำหนด ถ้าไม่มีจะเป็นการเพิ่มค่าดังกล่าวเข้าไปใน Dictionary และต่อมาเมธอด popitem() จะนำสมาชิกตัวสุดท้ายออกจาก Dictionary และส่งค่าดังกล่าวกลับมาเป็น Tuple ออบเจ็ค ส่วนเมธอด items() นั้นจะค่ากลับมาเป็น List ของ Tuple ของออบเจ็คของ Key และ Value ทั้งหมด\ndict_keys(['de', 'ua', 'th', 'nl']) dict_values(['Germany', 'Ukraine', 'Thailand', 'Netherlands']) Germany ('tr', 'Turkey') ('nl', 'Netherlands') dict_items([('de', 'Germany'), ('ua', 'Ukraine'), ('th', 'Thailand')])  นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้เมธอดใน Dictionary ในภาษา Python และจากในตัวอย่างนั้นเป็นเพียงส่วนหนึ่งของเมธอดที่มีเท่านั้น สำหรับเมธอดทั้งหมดใน Dictionary นั้นแสดงดังตารางข้างล่างนี้\n   Methods Description     clear() ลบข้อมูลทั้งหมดภายใน Dictionary   copy() คัดลอก Dictionary ทั้งหมดไปยังอันใหม่   get(key[, default]) ส่งค่าข้อมูลใน Dictionary จาก Key ที่กำหนด ถ้าหากไม่มี Key อยู่และไม่ได้กำหนด default จะทำให้เกิดข้อผิดพลาด KeyError   items() ส่งค่ากลับเป็นออบเจ็คของ Key และ Value   keys() ส่งค่ากลับเป็น List ของ Key ทั้งหมดใน Dictionary   pop(key[, default]) ส่งค่ากลับเป็นค่าสุดท้ายใน Dictionary   popitem() ส่งค่ากลับเป็น Tuple ออบเจ็คของ Key และ Value   setdefault(key[, default]) ส่งค่ากลับเป็นค่าของ Key ที่กำหนด ถ้าหากไม่มี Key อยู่ใส่ข้อมูลเข้าไปใน Dictionary   update([other]) อัพเดท Dictionary กับคู่ของ Key และ Value จากออบเจ็คอื่น และเขียนทับ Key ที่มีอยู่   values() ส่งค่ากลับเป็น List ของ Value ทั้งหมดใน Dictionary    Python Dictionary functions ฟังก์ชันที่เป็นพื้นฐานและสามารถใช้ได้กับโครงสร้างข้อมูลทุกประเภทคือฟังก์ชัน len() เป็นฟังก์ชันที่ใช้สำหรับนับจำนวนสมาชิกของเจ็ค และ Dictionary ยังมีฟังก์ชัน iter() ที่ทำงานเหมือนกับเมธอด items() นี่เป็นตารางของฟังก์ชันที่สามารถใช้ได้กับ Dictionary\n   Function Description     len(dict) ส่งค่ากลับเป็นจำนวนของออบเจ็คใน Dictionary   iter(dict) ส่งค่ากลับเป็นออบเจ็คของ Key และ Value    คุณสามารถใช้คำสั่ง del เพื่อลบข้อมูลภายใน Dictionary ได้ เช่น คำสั่ง del countries['de'] เพื่อลบสมาชิกที่มี Key ที่กำหนดออกไป และคำสั่ง del countries นั้นเป็นการลบทั้งตัวแปร\nในบทนี้ คุณได้เรียนรู้เกี่ยวกับ Dictionary ในภาษา Python คุณได้ทราบวิธีการสร้างและใช้งาน Dictionary และสถานการณ์ที่เหมาะสมที่จะใช้ข้อมูลประเภทนี้ เราได้แสดงให้เห็นถึงการเข้าถึงข้อมูลภายใน Dictionary แบบพื้นฐานและด้วยการใช้คำสั่งวนซ้ำ For loop รวมถึงการใช้งานเมธอดและฟังก์ชันสำหรับจัดการ Dictionary\nReference : http://marcuscode.com/lang/python/dictionary\n"});index.add({'id':29,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-3/','title':"Ep.3 Serving HTML files",'content':" Serving HTML files | Learning Flask Ep. 3 How to render HTML files and structure template directories with Flask\nIn this part of the Learning Flask series, you\u0026rsquo;ll learn how to work with and serve HTML files.\nFlask provides a fast and easy way for us to serve static files! So building a simple website is a breeze.\nWe\u0026rsquo;re going to pick up the same application we created in the last episode and build upon it. If you haven\u0026rsquo;t read the last part of this series, I\u0026rsquo;d suggest doing so. If not, this is how our current application structure looks:\n├── app │ ├── __init__.py │ ├── admin_views.py │ └── views.py ├── requirements.txt └── run.py`  Ready to code? Fire up a new terminal and browser windows and let\u0026rsquo;s get started.\nLaunch your app From the root app directory, start Flask with the following command:\nflask run\nIn your browser, head to http://127.0.0.1:5000/ to see \u0026ldquo;Hello world!\u0026rdquo; at our app index route\nOk so the app is up and running. Now let\u0026rsquo;s start rendering some HTML.\nBefore we start working with any HTML files, I want to show you how we can return HTML from a flask view.\nGo ahead and open up views.py in your favourite editor. You should see the following:\napp/app/views.py\nfrom app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot; @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;All about Flask\u0026quot;`  Let\u0026rsquo;s modify the about route to return some HTML by simple passing an HTML string to return\nfrom app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot; @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;\u0026lt;h1 style='color: red;'\u0026gt;I'm a red H1 heading!\u0026lt;/h1\u0026gt;\u0026quot;   Tip - Flask will automatically reload when we make changes to any of the Python files assosiated with our app!\n Go to /about in your browser to see the changes. You\u0026rsquo;ll see a big red H1 heading at the top of the page!\nWe can also pass a multi line string of HTML to return, let\u0026rsquo;s do that now:\nfrom app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot; @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;\u0026quot;\u0026quot; \u0026lt;h1 style='color: red;'\u0026gt;I'm a red H1 heading!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is a lovely little paragraph\u0026lt;/p\u0026gt; \u0026lt;code\u0026gt;Flask is \u0026lt;em\u0026gt;awesome\u0026lt;/em\u0026gt;\u0026lt;/code\u0026gt; \u0026quot;\u0026quot;\u0026quot;  Cool right? But not very practical.\nTo make things a bit more fun, let\u0026rsquo;s learn how to serve HTML files with Flask.\nServing HTML files Flask provides a very simple way for us to return HTML files to the client/browser, using the render_template function.\nHowever, before we start using this function, we need to create some new files and directories.\nFlask looks for a directory called templates in the root of the Flask application package. Let\u0026rsquo;s go ahead and create it now.\nStop the app with Ctrl + c\nMove into the app directory with:\ncd app\nCreate the templates directory and move into it:\nmkdir templates cd templates  Let\u0026rsquo;s create a template called index.html:\ntouch index.html\nOpen up index.html in your editor and add the following:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Index\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 style=\u0026quot;color: blue\u0026quot;\u0026gt;Index\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is an HTML file served up by Flask\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  It\u0026rsquo;s not going to win any design awards but will illustrate how to render HTML files!\nSave and close the file.\nYour project file structure should now look like the following:\n├── app │ ├── __init__.py │ ├── admin_views.py │ ├── templates │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py  In your terminal, navigate back to the root app directory containing run.py and run the flask run command to restart the app.\nBefore we can start serving up any HTML files, we need to import render_template from Flask. Go ahead and add the following import to the top of views.py\napp/app/views.py\nfrom flask import render_template\n Tip - Flask provides many useful functions that you\u0026rsquo;ll be learning about throughout this series\n Next up, we need to tell our view to serve up the HTML file we just created. Let\u0026rsquo;s serve index.html using the index route.\nTo return an HTML template, we use the following syntax:\nreturn render_template(\u0026quot;index.html\u0026quot;)\nFlask will look in the templates directory we\u0026rsquo;ve just created for index.html (It\u0026rsquo;s the default place Flask will go to look for HTML files when the render_template function is called)\nYour views.py file should now look like this:\nfrom app import app from flask import render_template @app.route(\u0026quot;/\u0026quot;) def index(): return render_template(\u0026quot;index.html\u0026quot;) @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;\u0026quot;\u0026quot; \u0026lt;h1 style='color: red;'\u0026gt;I'm a red H1 heading!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is a lovely little paragraph\u0026lt;/p\u0026gt; \u0026lt;code\u0026gt;Flask is \u0026lt;em\u0026gt;awesome\u0026lt;/em\u0026gt;\u0026lt;/code\u0026gt; \u0026quot;\u0026quot;\u0026quot;`  Go to /index in your browser at http://127.0.0.1:5000/ to see your HTML masterpiece.\nNice work. You\u0026rsquo;ve rendered your first HTML page with Flask!\nJust like how we split our views into multiple files, we can do something similar to our HTML template directories to make our life easier and working with our files more manegable.\nIn the last episode, we created an admin_views.py file to contain all of our admin routes.\nLet\u0026rsquo;s refactor our template directories and files to reflect that change.\nTemplate directories Our new file structure is going to look like the following:\n├── app │ ├── __init__.py │ ├── admin_views.py │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py`  We\u0026rsquo;re going to create 2 new directories within our templates directory:\n public - Will contain all of the HTML files we want to serve from views.py admin - Will contain any HTML files we\u0026rsquo;ll serve from our admin routes in admin_views.py  This keeps things separated and easy for us to navigate and work with.\nIn the terminal, stop the app with Ctrl + c and move into the templated directory with:\ncd app/templates/\nNow we\u0026rsquo;ll create our 2 new directories:\nmkdir public admin\nWe then need to move our index.html file into the public directory. Do so with:\nmv index.html /public\nWhilst we\u0026rsquo;re here, let\u0026rsquo;s create a new file in admin called dashboard.html\ncd admin touch dashboard.html\nOnce again, your app structure should now look like this:\n├── app │ ├── __init__.py │ ├── admin_views.py │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py`  Before we add any HTML to dashboard.html. Let\u0026rsquo;s refactor our view in views.py to serve index.html from the newly created directory.\nOpen up views.py. We\u0026rsquo;re going to change the path to the file we want to serve in render_template.\nChange this:\napp/app/views.py\n`@app.route(\u0026quot;/\u0026quot;) def index(): return render_template(\u0026quot;index.html\u0026quot;)`  To this:\napp/app/views.py\n`@app.route(\u0026quot;/\u0026quot;) def index(): return render_template(\u0026quot;public/index.html\u0026quot;)`  We\u0026rsquo;ve changed \u0026quot;index.html\u0026quot; to \u0026quot;public/index.html\u0026quot; to reflect our new directory structure.\nStart up your app and reload your browser to test everything works.\nAwesome! We\u0026rsquo;ve separated our HTML templates into something more logical and easy to manage.\nLet\u0026rsquo;s add some HTML to dashboard.html and refactor our admin_views.py file. Just like we just did with views.py\nOpen up dashboard.html and add the following:\napp/app/templates/admin/dashboard.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dashboard\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 style=\u0026quot;color: green\u0026quot;\u0026gt;Admin dashboard\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This HTML file is served from the admin templates directory\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Save and close the file.\nWe now need to refactor the route in admin_views.py. Open the file and make the following changes.\nFirst up, we need to import render_template. Add the following to the top of admin_views.py\napp/app/admin_views.py\nfrom flask import render_template\nWe then need to change our file path in the render_template function.\nFrom this:\n@app.route(\u0026quot;/admin/dashboard\u0026quot;) def admin_dashboard(): return render_template(\u0026quot;dashboard.html\u0026quot;)  To this:\n@app.route(\u0026quot;/admin/dashboard\u0026quot;) def admin_dashboard(): return render_template(\u0026quot;admin/dashboard.html\u0026quot;)  Save the file and go to admin/dashboard in your browser to see the changes.\nAnd we\u0026rsquo;re done! We\u0026rsquo;ve split up our app and created a logical file structure within our app.\nIf you\u0026rsquo;re feeling adventurous, I want you to try the following:\n Create a new Python file containing a new view Import that file into the __init__.py file Create a new template directory for those views Add an HTML template to it Render that template  If you\u0026rsquo;re not feeling ready for that just yet, it\u0026rsquo;s no worries! Contunie working your way through the series and you\u0026rsquo;ll soon be building Flask apps of your own.\nWrapping up A Flask application can be as simple or as complex as you want it to be.\nYou can put all of your views into a single file or break them up into separate logical files, likewise with templates, you can keep them all together of split them up into corresponding directories.\nThe beauty of Flask is that it\u0026rsquo;s all up to you.\nIn the next part of this series, you\u0026rsquo;ll be learning how to serve static files including images, CSS and Javascript.\nLast modified · 28 Feb 2019\n Source : pythonise.com.\n "});index.add({'id':30,'href':'/library/tutorials/docs/python/cheat-sheet/','title':"Python Cheat sheet",'content':" Python Cheat sheet Useful tricks # Terminate a Python script early.\r quit()\r# For 1 statement on multiple lines,  # use line continuation character (\\).\r # Good for blog post.\r def __str__(self):\rreturn \u0026#34;Name={}, Title={}, Hourly rate={}.\u0026#34;\\\r.format( self.name, self.title, self.__hourly_rate ) String # Concatenation\r s1 = \u0026#39;Open\u0026#39;\rs2 = \u0026#39;Writings.net\u0026#39;\rprint( s1+s2 ) # Output: OpenWritings.net\r # Object to string: Use str() function\r import datetime\rnow_str = \u0026#34;Today is \u0026#34; + str(datetime.datetime.now())\rprint(now_str)\r# Find and replace  string.replace(old_str, new_str, maxreplace) # maxreplace: Replace N occurrences matched.\r # Replace using regular expression\r import re\rstr=\u0026#34;Example regex\u0026#34;\rtest = re.sub(r\u0026#34;[Ee]\u0026#34;, \u0026#34;a\u0026#34;, str) # axampla ragax\r # Join: string.join(iterable); iterable = list, string \u0026amp; tuple\r my_list = [\u0026#39;1\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;]\rseparator = \u0026#39;,\u0026#39;\rprint( separator.join(my_list) ) # 1,3,4,5 If statement # Conditions\r # Comparison operators\r # == : Values are equal.\r # != : Values are NOT equal.\r # \u0026lt;\u0026gt; : Values are NOT equal.\r # \u0026gt;= : Value is greater or equal.\r # \u0026lt;= : Value is less or equal.\r # is : Is the same object.\r if True and b \u0026gt; a:\rprint(\u0026#34;b is greater than a\u0026#34;)\relif a == b and b is not None:\rprint(\u0026#34;a and b are equal\u0026#34;)\r# Modulo\r if i%2==0:\rprint(\u0026#39;even\u0026#39;)\relse:\rprint(\u0026#39;odd\u0026#39;) List my_list=[] # Empty list.\r my_list=[1,2,3] # Create a list with some values.\r print( len(my_list) ) # Size of my_list.\r my_list[2] # Access the third element(Index starts at 0)\r my_list[-1] # Get last element.\r my_list.append(\u0026#39;a\u0026#39;) # Append a new value to my_list\r my_list.insert(0, \u0026#39;first\u0026#39;) # Insert \u0026#39;first\u0026#39; at position 0\r del my_list[1] # Delete element at position 1.\r my_list.remove(\u0026#39;a\u0026#39;) # Remove first element with value \u0026#39;a\u0026#39;.  # Loop through a list.\r for item in my_list:\rprint(item)\r# Loop through a list using range.\r for i in range(0, len(my_list)):\rprint(my_list[i])\r# Loop through a list and at the same time, get the index too.\r my_list = [1,3,5]\rfor (i, item) in enumerate(my_list):\rprint(i, item)\r# Slicing\r first_two = my_list[:2] # Get the first two items.\r last_two = my_list[-2:] # Get the last two items.\r portion_of_list= my_list[2:4] # Get items from position 2 to 4.\r # For sorting, data type has to be the same. Can\u0026#39;t mix int and string.\r my_list=[1,2,3]\rmy_list.sort() # Sort list permanently in alphabetical order.\r my_list.sort(reverse=True) # Sort list permanently in reverse alphabetical order.\r my_list.reverse() # Reverse the order of the list.  Loop # Loop through a list \u0026amp; get index at the same time.\r my_list = [1,3,5]\rfor (i, item) in enumerate(my_list):\rprint(i, item) Date \u0026amp; Time import datetime\rtoday = datetime.date.today()\rprint(today) # 2018-12-31\r print(\u0026#34;{}-{}-{}\u0026#34;.format(today.year, today.month, today.day))\rprint(datetime.date(2011, 4, 13)) # 2011-04-13\r print(datetime.date.fromtimestamp(1326244364)) # 2012-01-10\r a_datetime = datetime.datetime(2011, 4, 13, 23, 33, 59)\rprint(\u0026#34;{}-{}-{}\u0026#34;.format(a_datetime.year, a_datetime.month, a_datetime.day))\rprint(\u0026#34;{}:{}:{}\u0026#34;.format(a_datetime.hour, a_datetime.minute, a_datetime.second))\rprint(a_datetime.timestamp())\r# Convert date to string.\r now = datetime.datetime.now()\rprint(now.strftime(\u0026#34;%m/%d/%Y, %H:%M:%S\u0026#34;)) # 04/04/2019, 12:45:08\r # Convert string to date: string should match date representation.\r # All directives(%): https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\r a_date = datetime.datetime.strptime(\u0026#34;21 June, 2018\u0026#34;, \u0026#34;%d%B, %Y\u0026#34;)\rprint(a_date) # 2018-06-21 00:00:00\r a_date = datetime.datetime.strptime(\u0026#34;12/11/2018 09:15:32\u0026#34;, \u0026#34;%d/%m/%Y %H:%M:%S\u0026#34;)\rprint(a_date) # 2018-11-12 09:15:32\r # Add / Substract date\r # timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)\r today = datetime.datetime.now()\rdays_ago_delta = datetime.timedelta(days = 5)\rdays_ago_5 = today - days_ago_delta\rprint(days_ago_5) Function def sum(a,b):\rreturn (a, b, a+b)\rprint( sum(3,4) ) # Output: (3, 4, 7) ที่มาบทความ : https://openwritings.net/pg/python/python-cheat-sheet\n"});index.add({'id':31,'href':'/library/tutorials/docs/articles/data-science/web-scraping/','title':"Web Scraping",'content':" Web Scraping "});index.add({'id':32,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-4/','title':"Ep.4 Serving static files",'content':" Serving static files | Learning Flask Ep. 4 Linking stylesheets, javascript files and serving images with Flask\nIn this episode of the Learning Flask series, we\u0026rsquo;ll be making our HTML look prettier with some images, CSS and JavaScript, along with a few extra tips on working with static files.\nFlask provides a few useful ways for working with static files so let\u0026rsquo;s get started.\nCreating stylesheets If you\u0026rsquo;ve worked with HTML and CSS before, you\u0026rsquo;ll know that we have to import a stylesheet in the \u0026lt;head\u0026gt; tag of our HTML.\nIt\u0026rsquo;s no dirrefent in Flask, however we need to cover a few bases before we try and import and stylesheets into our HTML files.\nFlask requires a static directory. Just like the templates directory we created in the last episode.\nLet\u0026rsquo;s go ahead and create a static directory, a css directory and a stylesheet.\nWe\u0026rsquo;ll create the static directory next to our templates directory. From the root app directory, enter the following:\ncd app mkdir static cd static mkdir css cd css touch style.css  Your application filestructure should now look loike this:\napp ├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ └── css │ │ └── style.css │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py  Open up style.css in your editor and add the following:\napp/app/static/css/style.css\nbody { background-color: #f1f1f1; }  Save and close the file for now.\nNext up, we\u0026rsquo;ll import our new stylesheet into our index.html file in the public directory.\nTypically you would provide a relative path to your stylesheet in the \u0026lt;head\u0026gt;, for example:\n\u0026lt;head\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;path/to/your/stylesheet.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt;  You can use relative paths in Flask, but it\u0026rsquo;ll get complicated real fast as we\u0026rsquo;ve split our HTML templates up into sub-directories.\nThankfully, there\u0026rsquo;s a better way!\nLinking stylesheets Flask has a function called url_for which can be used in our HTML to provide a path to any static files we want to fetch.\nGo ahead and open up index.html in your editor and in the \u0026lt;head\u0026gt; tag, add the following:\napp/app/templates/public/index.html\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/style.css') }}\u0026quot;\u0026gt;   Notice the double curly braces {{ }}\n These double curly braces are part of the Jinja templating engine that Flask uses to render our HTML templates.\nYou\u0026rsquo;ll learn all about Jinja in the next couple of episodes in this series! Just know for now, that before any of our HTML files are rendered in the browser, Flask will pass our HTML files through the Jinja templating engine and parse anything we provide in between the sets of curly braces.\nIn this case, Jinja will replace {{ url_for('static', filename='css/style.css') }} with the path to the CSS file.\nThe url_for function takes 2 arguments, and endpoint and some values. In this case, we\u0026rsquo;ve providing static as the endpoint and css/style.css as the filename value.\nIn this case, Flask will render the stylesheet we just created at static/css/style.css.\nSave the file and reload your browser to see the subtle changes to the background color.\nNext up, you\u0026rsquo;ll learn how to do something very similar with JavaScript files.\nJavascript files We\u0026rsquo;re going to create a Javascript directory and a JavaScript file and link them to our HTML templates in the exact same way as we did with the CSS.\nWe\u0026rsquo;ll create a js directory inside our static directory, along with creating a new file called app.js in the js folder.\nOur new app file structure will look like this:\napp ├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ ├── css │ │ │ └── style.css │ │ └── js │ │ └── app.js │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py  From the app root directory, we\u0026rsquo;ll run the following:\ncd app cd static mkdir js cd js touch app.js  Open up the app.js file and add the following:\nconsole.log(\u0026quot;Hello from app.js!\u0026quot;);  Let\u0026rsquo;s link our js file to our HTML template.\nOpen up index.htmlin your editor, and at the bottom of the page, just before the closing \u0026lt;/body\u0026gt; tag, add the following:\n\u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/app.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  Your index.html file should now look something like this:\napp/app/templates/public/index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/style.css') }}\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Index\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 style=\u0026quot;color: blue\u0026quot;\u0026gt;Index\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is an HTML file served up by Flask\u0026lt;/p\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/app.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Just like we did with the stylesheet, we use url_for to provide a directory and a path to our filename.\nSave the file, make sure your app is running with the flask run command and reload your browser.\n Tip - You must run the flask run command from the root directory of your application, in the same directory as run.py\n Open up the developer tools and click on the console tab to see the message from your JavaScript file.\nHello from app.js!\nPerfect! We\u0026rsquo;ve linked our stylesheet and our Javascript file. Let\u0026rsquo;s talk about serving images in Flask.\nServing images Any guesses on how we\u0026rsquo;re going to serve images?\nWe\u0026rsquo;re going to do exactly what we did with our CSS and JavaScript files and create a new img directory in our static directory and place all of our pictures in there.\nOur new app file structure will look like this:\napp ├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ ├── css │ │ │ └── style.css │ │ ├── img │ │ │ └── my-image.png │ │ └── js │ │ └── app.js │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py  From the root app directory, we\u0026rsquo;ll create our new directories with the following commands:\ncd app cd static mkdir img  Go ahead and drop any image into the img directory.\nNext up, let\u0026rsquo;s put an \u0026lt;img\u0026gt; tag in our index.html file and render an image to the browser.\nopen up index.html and add the following just under the \u0026lt;p\u0026gt; tag in the \u0026lt;body\u0026gt;:\napp/app/templates/public/index.html\n\u0026lt;img src=\u0026quot;{{ url_for('static', filename='img/TEST-IMG.png') }}\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt;  Your index.html should now look like this:\napp/app/templates/public/index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/style.css') }}\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Index\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 style=\u0026quot;color: blue\u0026quot;\u0026gt;Index\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is an HTML file served up by Flask\u0026lt;/p\u0026gt; \u0026lt;img src=\u0026quot;{{ url_for('static', filename='img/TEST-IMG.png') }}\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/app.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  We\u0026rsquo;re using the exact same url_for function to point to the path of our image.\nSave the file, make sure your app is running and reload the browser windows to see your image rendered!\nWrapping up You\u0026rsquo;ve learned how to create the static directory, CSS, JavaScript and image directories and link static files to HTML templates, along with rendering images using the url_for function.\nurl_for provides some other powerful uses that you\u0026rsquo;ll learn about very soon.\nAt this point, your armed with the tools to be able to create a simple static website! If you\u0026rsquo;re feeling confident, go ahead and create a few more pages, add some CSS and JavaScript and have some fun.\nIn the next part of this series, you\u0026rsquo;ll be learning more about the Jinja templating engine, along with passing variables and objects into your HTML from Flask views.\nLast modified · 28 Feb 2019\n Source : pythonise.com.\n "});index.add({'id':33,'href':'/library/tutorials/docs/python/list-python-basics/','title':"List for Tutorial",'content':" List Python Tutorial Python is one of the most popular programming languages. In the last few years, it has gained a lot of popularity due to the increasing interest in Data Science, Deep Learning, Machine Learning, and Artificial Intelligence.\nJust have a look at the Google Trends chart for interest in Python programming language. It’s increasing continuously and it will keep on increasing over time.\nPython Interest Over Time\nWhy to learn Python Programming?  Python programming is very simple, elegant, and English like. So it’s very easy to learn and a good programming language to start your IT career. Python is open source and you are free to extend it and make something beautiful out of it. Python has vast community support. There are over a million questions on StackOverflow in Python category. There are tons of free modules and packages to help you in every area of development. Most of the Machine Learning, Data Science, Graphs, Artificial Intelligence APIs are built on top of Python. So if you want to work in the area of cutting-edge technologies then it’s a great choice for you. Python is used by almost every major company in the world. So the chances of getting a job are much better if you know Python programming. If you are applying for any Python job, please go through Python Interview Questions. There are no limitations to Python programming, you can use it in IoT, web applications, game development, cryptography, blockchain, scientific calculations, graphs and many other areas.  Python Tutorial Python Tutorial can be broadly divided into the following categories.\n Python Basics – syntax, data types, variables, loops, functions, numbers, strings, classes, objects etc. Python Built-in Functions – format(), len(), super(), range(), slice(), tuple(), list() etc. Python Modules – collections, json, xml, io, os, sys, time, datetime etc. Web Applications Frameworks – Django, Flask Advanced Topics – Graphs, AI, ML modules such as Matplotlib, NumPy, TensorFlow, SciKit, Pandas etc.  Python Tutorial Important Points  If you are completely new to Python, spend enough time to go through basics. If your basics in Python won’t be strong then your code won’t be pythonic in nature. Python has two running major versions – Python-2 and Python-3. Python-3 is not backward compatible with Python-2. However, Python 3 is the recommended version to use. That’s why all the Python tutorials here are based on Python 3. While reading through the Python tutorials, please follow the examples and run them in your IDE for better understanding. PyCharm from JetBrains is the perfect IDE for Python programming. Its community edition is free to use. Most of our examples are present in our GitHub Repository. You can download them and look at the examples. I would recommend you to fork the project and then play around with the code. We have covered extensively on Python if you think we have missed some important topic. Please feel free to comment here and I will include them too.  Python Basics    Topic Description     Python Tutorial for Beginners Brief information about Python programming language and its advantages. Learn how to install Python on Windows, Linux/Ubuntu and Mac OS operating systems.   Python Keywords \u0026amp; Identifiers An article about keywords, identifiers and variables in Python. Learn about the rules for writing valid identifiers.   Python comments and statements Quick introduction to different types of comments and statements with example code.   Python Data Types Numeric, String, List, Tuple and Dict data types introduction.   Python Operators Arithmetic, Comparison, Bitwise, Logical, and Assignment Operators. Learn about the operator precedence in Python programming.   Python for loop Python for loop examples. Also, learn about nested for loops in Python.   Python while loop Python while loop, nested while loop and infinite while loop examples.   Python break continue A brief tutorial on Python break keyword and continue statement.   Python pass statement Learn about pass statement and the best practices to use them in your code.   Python loop Learn how to loop over a sequence, reverse looping, traversing through multiple sequences at once.   Python functions Learn how to define a function in Python, different types of arguments   Python Recursion How to implement recursion in Python, printing Fibonacci series using recursion.   Python Modules Understand what is a module in Python. Difference between module and package and how to import a module in your program.   Python Package Quick introduction to Python packages and how to use them.   Python Numbers Different types of numbers, type conversion and complex numbers in Python   Python List Python List functions – create, update, delete, append and iterate through elements.   Python Tuple Learn about accessing tuple elements, update and delete tuple, important tuple functions.   Python String A brief introduction of String in Python and important Python string functions.   Python set Learn how to work with Set in Python.   Python Dictionary Python dictionary operations, accessing key-value pairs, deleting dict elements.   Python File Python file operations – read, open, write, delete and copy file.   Python Directory How to create, rename and delete a directory in Python.    Python sort list\nLearn how to sort a List elements in Python, sort in decending order and with custom logic.\nPython List Comprehension\nLearn about Python List Comprehension to create list from some source sequence, string or list.\nPython try except\nLearn how to perform exception handling in Python using try-except block.\nPython Custom Exception\nHow to create custom exception in Python.\nPython namespace\nPython namespace and variable scope\nPython Class\nEverything about Python Classes, how to define them with variables, constructors, and functions.\nPython Inheritance\nLearn about inheritance in Python, method overloading, super class and sub class.\nPython Multiple Inheritance\nPython Multiple Inheritance Example. What is the difference between Multiple Inheritance and Multi-level Inheritance, Method Resolution Order (MRO) and logic to resolve the Conflicts with python multiple inheritance.\nPython Operator Overloading\nPython allows us to overload operators to work with custom object. Learn how to use operator overloading in Python.\nPython Iterator\nPython Iterator protocol, iterable elements, creating custom iterator example program.\nPython Generator\nLearn about yield keyword in Python to create generator functions that returns a series of arguments and work as an iterator.\nPython Closure\nA slightly complex topic with nested functions where outer function returns the nested function and nested function does some work on the enclosed function arguments.\nPython Decorator\nPython decorator is a function that helps to add some additional functionalities to an already defined function.\nPython Array\nPython Array contains a sequence of data. In python programming, there is no exclusive array object because we can perform all the array operations using list.\nPython list append\nShort example for using list append() function in Python.\nPython string to int\nLearn about different ways to convert string to int and vice versa in Python.\nPython variables\nA look into Python variable declaration and their scope.\nPython lambda\nA brief introduction to Python lambda keyword to create anonymous functions.\nPython metaclass\nPyton metaclass introduction and how to create a metaclass.\nPython switch case\nUnlike many other famous programming languages, Python doesn’t have switch-case statement. However, we can write code using dictionary to simulate the same behavior.\nPython modulo\nPython modulo operation is used to get the reminder of a division. The basic syntax of Python Modulo is a % b. Here a is divided by b and the remainder of that division is returned.\nPython assert statement\nPython assert statement takes a condition, the condition needs to be true. If the condition is true, then the program will run smoothly and the next statements will be executed. But, if the condition is false then it raises an exception.\nPython yield\nPython yield has almost same purpose as return keyword except that it returns the values one by one. This is very useful keyword when you need to return a huge number of values.\nPython Stack\nPython doesn’t provide any implementation of Stack data structure. This example shows how to implement stack data structure in Python.\nPython PIP\nPIP is a package management system used to install and manage software packages written in Python.\nPython self\nA brief article on the ‘self’ argument present in Python class constructors.\nPython ternary operator\nLearn how to effectively use Python ternary operator to reduce boiler plate code.\nPython print format\nIn this lesson, we will study about various ways for Python print format, through which we can print our data on the console and interpolate it.\nPython Command Line Arguments\nPython Command line arguments are input parameters passed to the script when executing them. Learn how to effectively read and parse command line parameters in Python.\nPython main function\nLearn the special technique to define main method in python program, so that it gets executed only when the program is run directly and not executed when imported as a module.\nPython Garbage Collection\nPython garbage collection is the memory management mechanism in python.\nPython XML Parser\nPython ElementTree XML API provides us easy way to read XML file and extract useful data.\nPython Join List to String\nWe can use String join() function to concatenate a list of string with specified delimiter to create a new string.\nPython init() function\nA complete tutorial for Python class init() function.\nPython print to file\nLearn how to route Python print() function output to a file.\nPython static method\nIn this Python tutorial, we will learn how to create Python static method. We will also look at advantages and disadvantages of static methods and comparison with the instance methods.\nPython Calculator Program\nIn this Python tutorial, we will learn how to create a very simple python calculator program. We will take input from the user about the operation he wants to perform and show the result on its basis.\nPython classmethod\nLearn how to use @classmethod annotation to create Python class methods.\nPython counter\nPython Counter class is part of Collections module. Counter is a subclass of Dictionary and used to keep track of elements and their count.\nPython OrderedDict\nPython OrderedDict is a dict subclass that maintains the items insertion order. When we iterate over an OrderedDict, items are returned in the order they were inserted.\nPython namedtuple\nPython namedtuple object is part of collections module. Python namedtuple is an extension of tuple.\nPython Catch Multiple Exceptions\nSometimes we call a function that may throw multiple types of exceptions depending on the arguments, processing logic etc. In this tutorial, we will learn how to catch multiple exceptions in python.\nPython add to dictionary\nThere is no explicitly defined method to add a new key to the dictionary. If you want to add a new key to the dictionary, then you can use assignment operator with dictionary key.\nPython Current Date Time\nWe can use Python datetime module to get the current date and time of the local system. Python pytz is one of the popular module to get the timezone aware date time objects.\nPython strftime()\nPython strftime() function is present in datetime and time modules to create a string representation based on the specified format string.\nPython timedelta\nPython timedelta object is used to perform datetime manipulations in an easy way. The timedelta class is part of datetime module.\nPython date\nPython date class is part of datetime module.\nPython wait for specific time\nSometimes we want our python program to wait for a specific time before executing the next steps. We can use time module sleep() function to pause our program for specified seconds.\nPython string to datetime – strptime()\nWe can convert a string to datetime using strptime() function. This function is available in datetime and time modules to parse a string to datetime and time objects respectively.\nPython Complex Numbers\nA complex number is created from two real numbers. Python complex number can be created using complex() function as well as using direct assignment statement.\nPython Set Intersection\nPython Set Difference\nPython Set Union\nPython Set to List\nPython Reverse List\nPython Set Environment Variable\nPython *args and **kwargs\nPython Division\nPython Not Equal Operator\nPython Return statement\nPython and operator\nPython logical operators\nPython Bitwise Operators\nPython Comparison Operators\nPython Built-In Functions Topic\nDescription\nPython input()\nPython input() function is used to get the user input from the console.\nPython zip()\nPython zip function takes iterable elements as input, and returns iterator.\nPython super()\nPython super() function allows us to refer to the parent class explicitly. It’s useful in case of inheritance where we want to call super class functions.\nPython getattr()\nPython getattr() function is used to get the value of an object’s attribute and if no attribute of that object is found, default value is returned.\nPython type\nPython type() function example to determine the type of the object.\nPython range()\nPython range() function examples to generate list of numbers.\nPython enumerate()\nPython enumerate takes a sequence, and then make each element of the sequence into a tuple.\nPython float()\nThis built-in function is used to create a floating point number. We can convert a string to floating point number using this function.\nPython print()\nOne of the most widely used Python function to print the values to a stream, or to sys.stdout by default.\nPython hash()\nPython hash() function returns the hash value of the object, which is a fixed size integer which identifies a particular value.\nPython str() and repr()\nPython str() function returns the string representation of the object. This method is called when print() or str() function is invoked on an object. Python repr() function returns the object representation. It could be any valid python expression such as tuple, dictionary, string etc.\nPython eval() function\nPython eval() function is used to parse an expression string as python expression and then execute it.\nPython exec()\nPython exec() function provides support for dynamic code execution.\nPython import\nPython abs()\nPython all()\nPython any()\nPython ascii()\nPython bin()\nPython bool()\nPython breakpoint()\nPython bytearray()\nPython bytes()\nPython callable()\nPython chr(), ord()\nPython classmethod()\nPython compile()\nPython complex()\nPython delattr()\nPython dir()\nPython divmod()\nPython filter()\nPython format()\nPython frozenset()\nPython globals()\nPython hasattr()\nPython help()\nPython hex()\nPython id()\nPython int()\nPython isinstance()\nPython issubclass()\nPython iter()\nPython len()\nPython locals()\nPython map()\nPython max()\nPython min()\nPython object()\nPython oct()\nPython open()\nPython pow()\nPython property()\nPython reversed()\nPython round()\nPython set()\nPython setattr()\nPython slice()\nPython sorted()\nPython staticmethod()\nPython sum()\nPython vars()\nPython String Functions Topic\nDescription\nPython String join()\nPython string join() function is used to concatenate a sequence of strings to create a new string.\nPython string to Uppercase – str.upper()\nWe can convert a string to uppercase in Python using str.upper() function.\nPython String to Lowercase – str.lower()\nWe can convert a string to lowercase in Python using str.lower() function. In this short tutorial, we will learn how to convert python string to lowercase.\nPython String contains\nPython String class has contains() function that we can use to check if it contains another string or not.\nPython String split\nPython string split() function is used to split a string into the list of strings based on a delimiter.\nPython String replace()\nPython string replace() function is used to create a string by replacing some parts of another string.\nPython String format()\nPython String format() function is used to create a formatted string from the template string and the supplied values.\nPython String Template\nPython String Template class is used to create a simple template string, where fields can be replaced later on to create a string object.\nPython String to bytes\nLearn how to convert String to bytes and then bytes to String in Python.\nPython Check Variable is String\nWe can use isinstance() function to verify that a variable is string or not.\nPython String Comparison\nPython String comparison can be performed using equality (==) and comparison (\u0026lt;, \u0026gt;, !=, \u0026lt;=, \u0026gt;=) operators.\nPython String join()\nPython String join() function returns a string that is the concatenation of the strings in iterable with string object as a delimiter.\nPython String Concatenation\nLearn about five different ways to concatenate Strings in Python.\nPython slice string\nPython string supports slicing to create substring. Note that Python string is immutable, slicing creates a new substring from the source string and original string remains unchanged.\nf-strings in Python\nPython f-strings or formatted strings are the new way to format strings. This feature was introduced in Python 3.6 under PEP-498. It’s also called literal string interpolation.\nPython Raw String\nPython raw string is created by prefixing a string literal with ‘r’ or ‘R’. Python raw string treats backslash () as a literal character.\nPython String equals\nPython strings equality can be checked using == operator or eq() function. Python strings are case sensitive, so these equality check methods are also case sensitive.\nPython String encode() decode()\nPython string encode() function is used to encode the string using the provided encoding. This function returns the bytes object. Python bytes decode() function is used to convert bytes to string object.\nPython Trim String\nPython provides three methods that can be used to trim whitespaces from the string object.\nPython String Length\nPython String length can be determined by using built-in len() function.\nPython Concatenate String and int\nLearn about different ways to concatenate String and int to create a new string.\nPython Reverse String\nPython String doesn’t have a built-in reverse() function. However, there are various ways to reverse a string in Python.\nPython List to String\nLearn how to convert a list to string in a Python program.\nPython String find()\nPython String find() method is used to find the index of a substring in a string.\nPython Remove Character from String\nLearn how to remove character from a string using replace() and translate() functions.\nPython String Append\nLearn the best way to append multiple strings to create a new string.\nPython String translate()\nPython String translate() function returns a new string with each character in the string replaced using the given translation table.\nPython String to float\nWe can convert a string to float in Python using float() function.\nPython String to List\nWe can convert a string to list in Python using split() function.\nPython String count()\nPython String count() function returns the number of occurrences of a substring in the given string.\nPython Find String in List\nWe can use Python in operator to check if a string is present in the list or not. There is also a not in operator to check if a string is not present in the list.\nPython Remove Spaces from String\nLearn about the five ways to remove spaces from a string in Python.\nPython Substring\nPython string provides various methods to create a substring, check if it contains a substring, index of substring etc. In this tutorial, we will look into various operations related to substrings.\nPython Generate Random String\nSometimes we want to generate a random string for unique identifiers, session id or to suggest a password. Learn how to generate a random string in Python.\nPython String Module\nPython String module contains some constants, utility function, and classes for string manipulation.\nString contains substring?\nPython provides two common ways to check if a string contains another string.\nPython String startswith()\nPython string startswith() function returns True if the string starts with the given prefix, otherwise it returns False.\nPython String endswith()\nPython string endswith() function returns True if the string ends with the given suffix, otherwise it returns False.\nPython Multiline String\nSometimes we have a very long string and we want to write it into multiple lines for better code readability. Python provides various ways to create multiline strings.\nPython String capitalize()\nPython String capitalize() function returns the capitalized version of the string. The first character of the returned string is converted to uppercase and rest of the characters are changed to lowercase.\nPython String center()\nPython string center() function returns a centered string of specified size.\nPython String casefold()\nPython string casefold() function returns a casefolded copy of the string. This function is used to perform case-insensitive string comparison.\nPython String expandtabs()\nPython string expandtabs() function returns a new string with tab characters (\\t) replaced with one or more whitespaces.\nPython String index()\nPython String index() function returns the lowest index where the specified substring is found. If the substring is not found then ValueError is raised.\nPython String format_map()\nPython string format_map() function returns a formatted version of the string using substitutions from the mapping provided.\nPython String isalnum()\nPython String isalpha()\nPython String isdecimal()\nPython String isdigit()\nPython String isidentifier()\nPython String islower()\nPython String isnumeric()\nPython String isprintable()\nPython String isspace()\nPython String istitle()\nPython String isupper()\nPython String ljust(), rjust()\nPython String swapcase()\nPython String partition()\nPython String splitlines()\nPython String title()\nPython String zfill()\nPython String Functions\nPython Modules Topic\nDescription\nPython os module\nPython OS module provides easy functions that allow us to interact and get Operating System related information and even control processes up to a limit.\nPython sys module\nPython sys module provides easy functions that allow us to interact with the interpreter directly.\nPython time\nPython time module helps us in working with local system date and time. The article also covers calendar module to get data in the calendar format.\nPython MySQL\nPython pymysql module is used to connect to MySQL database and execute database queries.\nPython CSV\nPython csv module allows us to easily read and write CSV files.\nPython multiprocessing\nPython multiprocessing module allows us to write code for parallel processing across multiple CPU. Process, Queue, and Lock are the most important classes in the multiprocessing module.\nPython pickle\nPython pickle module is used to serialize and deserialize a python object structure. Any object on python can be pickled so that it can be saved on disk.\nPython time sleep\nPython time sleep() function is used to add delay in the execution of a program. We can use python sleep function to halt the execution of the program for given time in seconds.\nPython queue\nPython queue module provides the implementation of different kinds of Queue data structures such as Queue, LifoQueue, and Priority Queue.\nPython unittest\nPython unittest module is used to test a unit of source code.\nPython socket\nPython socket module helps us in implementing socket server and client programs in Python code.\nPython SimpleHTTPServer\nPython SimpleHTTPServer module is a very handy tool. You can use Python SimpleHTTPServer to turn any directory into a simple HTTP web server.\nPython json\nPython json module is used to convert object to JSON data and vice versa.\nPython signal\nPython signal module is required for almost all the basic signal handling operations in python.\nPython random\nPython random module is used to generate random numbers.\nPython System Command\nWe can use os.system() function or subprocess.call() function to run shell commands from Python programs.\nPython Daemon Thread\nLearn how to create daemon thread using Python threading module.\nPython Copy\nPython copy module allows us to perform shallow and deep copy of objects.\nPython threading module\nPython threading module is used to implement multithreading in python programs.\nPython struct\nPython struct module is capable of performing the conversions between the Python values and C structs, which are represented as Python Strings.\nPython logging\nPython logging module defines functions and classes that provide a flexible event logging system for python applications.\nPython subprocess\nPython subprocess module provides easy functions that allow us to spawn a new process and get their return codes.\nPython argparse\nPython argparse module is the preferred way to parse command line arguments.\nPython functools\nPython functools module provides us various tools which allows and encourages us to write reusable code.\nPython itertools\nPython itertools module provide us various ways to manipulate the sequence while we are traversing it.\nPython getopt\nPython getopt module is one of the option to parse python command line arguments.\nPython ftp\nPython ftp module helps us in connecting to a FTP server, upload, and download files.\nPython tarfile\nPython tarfile module is used to read and write tar archives.\nPython lxml\nPython lxml is the most feature-rich and easy-to-use library for processing XML and HTML data.\nPython ConfigParser\nTo provide a quick summary, using configparser module, we can keep the configuration related to our application in a configuration file, anywhere in the system and access it inside our application.\nPython datetime\nPython datetime module manipulating dates and times. We can also format date and create naive or timezone aware date and time objects.\nPython decimal module\nPython decimal module helps us in division with proper precision and rounding of numbers.\nPython collections\nPython collections module comes with with a number of container data types such as OrderedDict, defaultdict, counter, namedtuple, and deque.\nPython zipfile\nPython zipfile module helps us in working with zip files. In this article, we will learn how to read zip archive details, create and extract zip files using zipfile module.\nPython pdb\nPython pdb module provides an interactive debugging environment for Developers to debug Python programs.\nPython io\nPython io module allows us to manage the file-related input and output operations. The advantage of using IO module is that the classes and functions available allows us to extend the functionality to enable writing to the Unicode data.\nPython fractions\nPython fractions module allows us to manage fractions in our Python programs.\nPython AST\nAbstract Syntax Tree is a very strong features in Python. Python AST module allows us to interact with Python code itself and modify it.\nPython HTTP\nPython HTTP module defines the classes which provide the client-side of the HTTP and HTTPS protocols. In this article, we will learn how to use a Python HTTP client to fire HTTP request and then parse response status and get response body data.\nPython xmltodict\nWe can use python xmltodict module to read XML file and convert it to Dict or JSON data. We can also stream over large xml files and convert them to Dictionary.\nPython gzip\nPython gzip module provides a very simple way to compress and decompress files and work in a similar manner to GNU programs gzip and gunzip.\nPython HTML Parser\nPython html.parser module provides us with the HTMLParser class, which can be sub-classed to parse HTML-formatted text files.\nPython inspect module\nPython inspect module is a very useful module which is used to introspect live objects in a program and look at the source code of modules, classes and functions which are used throughout a program.\nPython Send Email\nSending email is a very common task in any software program, we can use python smtplib module for sending email in the python program.\nPython tempfile\nPython tempfile module provides easy functions through which we can make temporary files and directories and access them easily as well.\nPython SQLite\nPython sqlite3 is an excellent module with which you can perform all possible DB operations with in-memory and persistent database in your applications.\nPython shutil\nPython shutil module enables us to operate with file objects easily and without diving into file objects a lot. It takes care of low-level semantics like creating file objects, closing the files once they are copied and allows us to focus on the business logic of our program.\nPython timeit\nPython timeit module helps us in measuring the time of execution for a piece of Python code. The timeit module runs a piece of code 1 million times (default value) and takes into account the minimum amount of time it took to run that piece of code.\nPython getpass module\nPython getpass module is the perfect choice when we want user to enter secret keys, pass-phrases or password through terminal.\nPython urllib\nPython urllib module allows us to access URL data programmatically. Some of the common usage are calling REST web services and making HTTP requests and read response data.\nPython pytz\nPython pytz module allows us to create timezone aware datetime instances.\nPython pendulum\nPython Pendulum module is a drop-in replacement for the built-in datetime module. Python pendulum module supports timezones and provides useful methods to format, parse and date time manipulations.\nPython arrow module\nPython Arrow module is a replacement library for datetime. It’s a simple module with a human-friendly approach to creating, manipulating, formatting and converting dates, times, and timestamps.\nPython Web Application Frameworks Topic\nDescription\nPython Flask\nPython flask module allows us to create web applications in Python.\nPython Django Tutorial\nLearn how to get started with Django framework to create a simple web application.\nDjango Templates\nDjango Models\nDjango Forms\nDjango ModelForms\nPython Advanced Topics Topic\nDescription\nPython NumPy\nPython NumPy is the core library for scientific computing in Python. NumPy provides a high-performance multidimensional array object and tools for working with these arrays.\nPython Matrix\nMatrix are used a lot in scientific and mathematical equations. Python NumPy module provides support for matrix creation, addition, multiplication, inverse, and transpose operations.\nPython math\nPython math module provides access to the mathematical functions defined by the C standard. So, we can do many complex mathematical operations with the help of the Python Math functions.\nPython hashlib\nWe can use python hashlib module to generate message digest or secure hash from the source message. Python hashlib hashing function takes variable length of bytes and converts it into a fixed length sequence. This is a one way function.\nPython Plotly\nPlotly’s Python graphing library makes interactive graphs online and allows us to save them offline if need be.\nPython Matplotlib\nPython matplotlib library helps us to plot data on graphs in its simplest terms. If you are familiar with MATLAB plotting, then Matplotlib will be easy to use for basic plotting.\nPython SciPy\nPython SciPy library is a set of convenience functions built on NumPy and mathematical algorithms.\nPython TensorFlow\nTensorFlow is a library for dataflow programming. It’s a symbolic math library and is also used for application of machine learning such as neural network.\nKeras Deep Learning\nKeras is a high-level neural networks API. It is written in Python and can run on top of Theano, TensorFlow or CNTK.\nPython SciKit-learn\nScikit-learn is a machine learning library for Python. It features several regression, classification and clustering algorithms including SVMs, gradient boosting, k-means, random forests and DBSCAN.\nPython Seaborn\nSeaborn is a library for making statistical infographics in Python. It is built on top of matplotlib and also supports numpy and pandas data structures. It also supports statistical units from SciPy.\nPython StatsModels\nPython StatsModels allows users to explore data, perform statistical tests and estimate statistical models. It is supposed to complement to SciPy’s stats module.\nPython Gensim Word2Vec\nGensim is an open-source vector space and topic modelling toolkit. It is implemented in Python and uses NumPy \u0026amp; SciPy. It also uses Cython for performance.\nNetworkX – Python Graph Library\nNetworkX is a Python package that allows us to create, manipulate, and study structure, functions and dynamics of complex networks.\nBokeh Python Data Visualization\nBokeh is an interactive Python data visualization library which targets modern web browsers for presentation.\nReferences:\n Python Built-In Functions Python Built-in Types Python 3 Official Documentation Python Wikipedia Page Python GitHub Source Code Python Package Index (PyPI) Python Reddit Community   Source journaldev.com.\n "});index.add({'id':34,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-5/','title':"Ep.5 Jinja template inheritance",'content':" Jinja template inheritance | Learning Flask Ep. 5 Creating reusable base HTML templates and extending them throughout your Flask app\nIn this firth part of the Learning Flask series, you\u0026rsquo;ll learn how to use the powerful Jinja templating engine to make working with our HTML files much more efficient.\nTemplate inheritance works by creating a series of \u0026ldquo;base templates\u0026rdquo; and importing them into \u0026ldquo;child templates\u0026rdquo;, minimising the amount of repetitive code we need to write and allowing us to reuse elements effectively and reliably.\nJinja templating can be a bit confusing at first but quickly becomes fun to work with and a joy to use!\nWe\u0026rsquo;ll pick up where we left off from the last episode.\nLet\u0026rsquo;s get coding!\nCreating base templates If you\u0026rsquo;ve been following along with this series, you\u0026rsquo;ll be familiar enough with the concept of breaking up our Flask app into sub-directories and seperate files to maintain good readibility and create a clear separation of the different elements of our app.\nLet\u0026rsquo;s take a quick at our application structure:\n`app ├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ ├── css │ │ │ └── style.css │ │ ├── img │ │ │ └── flask.png │ │ └── js │ │ └── app.js │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py`   Tip - I\u0026rsquo;m generating these directory maps using the tree command in my terminal\n We\u0026rsquo;re going to create 2 new templates directories.\n One at templates/admin/templates One at templates/public/templates  Let\u0026rsquo;s create them now from the root app directory:\nmkdir /app/templates/admin/templates mkdir app/templates/public/templates\nLet\u0026rsquo;s also create some HTML templates in those directories:\ntouch app/templates/admin/templates/admin_template.html touch app/templates/public/templates/admin_template.html\nNow let\u0026rsquo;s take a quick glance at our file structure:\n`app ├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ ├── css │ │ │ └── style.css │ │ ├── img │ │ │ └── flask.png │ │ └── js │ │ └── app.js │ ├── templates │ │ ├── admin │ │ │ ├── dashboard.html │ │ │ └── templates │ │ │ └── admin_template.html │ │ └── public │ │ ├── index.html │ │ └── templates │ │ └── public_template.html │ └── views.py ├── requirements.txt └── run.py`  We\u0026rsquo;ve added our 2 base HTML template files to the 2 directories.\n Note - To make things a little more interesting, we\u0026rsquo;re going to use the Bootstrap CSS \u0026amp; JS library. Head over to the the Bootstrap webside to download the source files or feel free to use the Bootstrap CDN (Recommended).\n If you\u0026rsquo;re using the Bootstrap starter template found here. You don\u0026rsquo;t need to download any of the source files, otherwise, go ahead and download the Bootstrap library and jQuery library and do the following:\nYou can get the jQuery source code here. Just copy and paste it into a file called jquery.slim.min.js\n Place bootstrap.min.css in the static/css directory Place bootstrap.bundle.min.js in the static/js directory place jquery.slim.min.js in the static/js directory  Go ahead and open up public_template.html in your editor and add the following:\napp/app/templates/public/templates/public_template.html\n`\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1, shrink-to-fit=no\u0026quot;\u0026gt; \u0026lt;!-- Import the Bootstrap stylesheet --\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/bootstrap.min.css') }}\u0026quot;\u0026gt; \u0026lt;!-- Import our custom stylesheet --\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/style.css') }}\u0026quot;\u0026gt; \u0026lt;title\u0026gt;{% block title %}{% endblock %}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;main\u0026gt; {% block main %}{% endblock %} \u0026lt;/main\u0026gt; \u0026lt;!-- Import jquery 3.3.1 slim min --\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/jquery.slim.min.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Import Bootstrap bundle --\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/bootstrap.bundle.min.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Import our custom JavaScript --\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/app.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; {% block script %}{% endblock %} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;`  Ok so we\u0026rsquo;ve added quite a lot of new code to this HTML file. Let\u0026rsquo;s step through what we\u0026rsquo;ve done:\n Tip - If you used the Bootstrap starter template, don\u0026rsquo;t worry about importing any of the Bootstrap or jQuery CSS or JS files as they\u0026rsquo;ll be delivered through the CDN\n  We import the bootstrap.min.css file in the \u0026lt;head\u0026gt; We then import our custom stylesheet as we did in the last episode We added the {% block title %} and {% endblock %} tags between the \u0026lt;title\u0026gt; \u0026lt;/title\u0026gt; tags We added the {% block main %} and {% endblock %} tags between the \u0026lt;main\u0026gt; \u0026lt;/main\u0026gt; tags We imported the jquery.slim.min library We imported the bootstrap.bundle.min.js library We imported out custom JavaScript file down at the bottom just like in the last part of the series Finally, we added the {% block script %} and {% endblock %} tags just before the closing \u0026lt;/body\u0026gt; tag  You\u0026rsquo;ll notice we use the syntax {% block something %} {% endblock %} to declare our blocks.\nWe\u0026rsquo;ll later fill in these blocks when we import this template into our child templates.\nYou can name a block whatever you like, however you can only use a block name once.\nWe should add a navigation bar to our public_template.html template. Add the following just below the opening \u0026lt;body\u0026gt; tag:\napp/app/templates/public/templates/public_template.html\n`\u0026lt;nav class=\u0026quot;navbar navbar-expand-lg navbar-light bg-light mb-3\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;navbar-brand\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt;Flask\u0026lt;/a\u0026gt; \u0026lt;button class=\u0026quot;navbar-toggler\u0026quot; type=\u0026quot;button\u0026quot; data-toggle=\u0026quot;collapse\u0026quot; data-target=\u0026quot;#navbarNav\u0026quot; aria-controls=\u0026quot;navbarNav\u0026quot; aria-expanded=\u0026quot;false\u0026quot; aria-label=\u0026quot;Toggle navigation\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;navbar-toggler-icon\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;div class=\u0026quot;collapse navbar-collapse\u0026quot; id=\u0026quot;navbarNav\u0026quot;\u0026gt; \u0026lt;ul class=\u0026quot;navbar-nav\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; href=\u0026quot;/\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; href=\u0026quot;/about\u0026quot;\u0026gt;About\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;collapse navbar-collapse\u0026quot; id=\u0026quot;navbarNav\u0026quot;\u0026gt; \u0026lt;ul class=\u0026quot;navbar-nav ml-auto\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; href=\u0026quot;/admin/dashboard\u0026quot;\u0026gt;Admin\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt;`  Ok great, now we\u0026rsquo;ve got a nice navbar! Let\u0026rsquo;s create a child template and put our blocks to use.\nChild templates A child template will inherit all of the HTML from the base template and fill in the areas where we declared our blocks.\nLet\u0026rsquo;s refactor index.html to be our first child template. Go ahead and open it up in an your editor and enter the following:\napp/app/templates/public/index.html\n`{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Home{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Home\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}`  Let\u0026rsquo;s look at what we\u0026rsquo;ve done.\n We use the {% extends \u0026quot;path/to/our/template.html\u0026quot; %} syntax to import a base template {% block title %}Home{% endblock %} will set the page title Then we fill in the blocks we declared in our base template by once again, using the {% block something %} {% endblock %} syntax  Anything inside our named blocks will be plugged into our base template!\nLet\u0026rsquo;s throw in some JavaScript into the {% block script %} tags and see what happens.\nAt the bottom of index.html add the following:\n`{% block script %} \u0026lt;script\u0026gt; alert(\u0026quot;Template inheritance is awesome\u0026quot;); \u0026lt;/script\u0026gt; {% endblock %}`  Save the file and reload your browser window.\nYou should see the JavaScript alert dialogue pop up! Go ahead and close it and remove the {% block script %} and containing JavaScript we just added.\n Tip - Inspect the page HTML by hitting Ctrl + u to open up a new tab showing the source code to get a better understanding of what\u0026rsquo;s happening\n As you can see, our index.html file doesn\u0026rsquo;t contain any of the boilerplate HTML we added in our base template. That\u0026rsquo;s because index.html inherits all the contents of the base template, in our case it\u0026rsquo;s inheriting everything from public_template.html\nSo we\u0026rsquo;ve got our base template for our public views. Let\u0026rsquo;s do the same with our admin views by creating a new base template and refactoring our dashboard.html file to become a new child template.\nAdditional templates Open up admin_template.html and add the following:\napp/app/templates/admin/templates/admin_template.html\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1, shrink-to-fit=no\u0026quot;\u0026gt; \u0026lt;!-- Import the Bootstrap stylesheet --\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/bootstrap.min.css') }}\u0026quot;\u0026gt; \u0026lt;!-- Import our custom stylesheet --\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/style.css') }}\u0026quot;\u0026gt; \u0026lt;title\u0026gt;{% block title %}{% endblock title %}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav class=\u0026quot;navbar navbar-expand-lg navbar-light bg-light mb-3\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;navbar-brand\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt;Admin\u0026lt;/a\u0026gt; \u0026lt;button class=\u0026quot;navbar-toggler\u0026quot; type=\u0026quot;button\u0026quot; data-toggle=\u0026quot;collapse\u0026quot; data-target=\u0026quot;#navbarNav\u0026quot; aria-controls=\u0026quot;navbarNav\u0026quot; aria-expanded=\u0026quot;false\u0026quot; aria-label=\u0026quot;Toggle navigation\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;navbar-toggler-icon\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;div class=\u0026quot;collapse navbar-collapse\u0026quot; id=\u0026quot;navbarNav\u0026quot;\u0026gt; \u0026lt;ul class=\u0026quot;navbar-nav\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; href=\u0026quot;/admin/dashboard\u0026quot;\u0026gt;Dashboard\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; href=\u0026quot;/admin/profile\u0026quot;\u0026gt;Profile\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;collapse navbar-collapse\u0026quot; id=\u0026quot;navbarNav\u0026quot;\u0026gt; \u0026lt;ul class=\u0026quot;navbar-nav ml-auto\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; href=\u0026quot;/\u0026quot;\u0026gt;Return to site\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;main\u0026gt; {% block main %}{% endblock main %} \u0026lt;/main\u0026gt; \u0026lt;!-- Import jquery 3.3.1 slim min --\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/jquery.slim.min.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Import Bootstrap bundle --\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/bootstrap.bundle.min.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Import our custom JavaScript --\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/app.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; {% block script %}{% endblock %} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;`  We haven\u0026rsquo;t changed much here, just a few tweaks to the navbar.\nNow we need to refactor our dashboard.html file in the templates/admin directory to become a new child template.\nOpen up dashboard.html in your browser and change it to the following:\napp/app/templates/admin/templates/admin_template.html\n`{% extends \u0026quot;admin/templates/admin_template.html\u0026quot; %} {% block title %}Admin dashboard{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Admin dashboard\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}`  Save the file and head back to your browser window.\nIf you now click on the Admin link in the top right of the navbar, you\u0026rsquo;ll be taken to the admin dashboard page where you\u0026rsquo;ll see our new base and child templates in action!\nCode challenge If you\u0026rsquo;re feeling comfortable, go ahead and create the 2 new child templates and inherit from their corresponding base templates for the 2 routes:\n The about route in views.py The profile route in admin_views.py   Tip - You\u0026rsquo;ll need to create 2 new HTML files and modify the routes!\n Key takeaways Creating base templates and extending them in child templates is a great way to streamline your HTML files and create reusable code that\u0026rsquo;s repeatable and reliable.\nKeep the following procedure in mind:\n Your base templates should contain your reusable code Declare named block sections in your base templates using the {% block something %} {% endblock %} syntax Create child templates that extends your base templates and plug the blocks with the corresponding block names  There\u0026rsquo;s still lots more to cover on Jinja! You\u0026rsquo;ll learn more about working with Python, Flask and Jinja in the next part of this series.\nLast modified · 28 Feb 2019\n Source : pythonise.com.\n "});index.add({'id':35,'href':'/library/tutorials/docs/python/modules-list/','title':"Modules List",'content':" Python Modules List Python os module\nPython sys module\nPython time\nPython MySQL\nPython CSV\nPython multiprocessing\nPython pickle\nPython time sleep\nPython queue\nPython unittest\nPython socket\nPython SimpleHTTPServer\nPython json\nPython signal\nPython random\nPython System Command\nPython Daemon Thread\nPython Copy\nPython threading module\nPython struct\nPython logging\nPython subprocess\nPython argparse\nPython functools\nPython itertools\nPython getopt\nPython ftp\nPython tarfile\nPython lxml\nPython ConfigParser\nPython datetime\nPython decimal module\nPython collections\nPython zipfile\nPython pdb\nPython io\nPython fractions\nPython AST\nPython HTTP\nPython xmltodict\nPython gzip\nPython HTML Parser\nPython inspect module\nPython Send Email\nPython tempfile\nPython SQLite\nPython shutil\nPython timeit\nPython getpass module\nPython urllib\nPython pytz\nPython pendulum\nPython arrow module\nReferences:\n https://docs.python.org/3/tutorial/modules.html https://docs.python.org/3/py-modindex.html   ที่มาบทความ : journaldev.com.\n "});index.add({'id':36,'href':'/library/tutorials/docs/articles/website/','title':"Website",'content':" Website "});index.add({'id':37,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-6/','title':"Ep.6 Jinja template design",'content':" Jinja template design | Learning Flask Ep. 6 An brief introduction to the power of the Jinja templating engine\nIn this part of the Learning Flask series, we\u0026rsquo;re going to dive deeper into the Jinja templating engine and you\u0026rsquo;ll learn more of the advanced features of this powerful library!\nIn the last part of this series, you learned how to create base templates, child templates and how to extend them. In this part you\u0026rsquo;ll learn more about template design, working with Python objects in your HTML and a few more handy tips for writing efficient, reusable code.\nThere\u0026rsquo;s a lot to cover, in fact, too much for this article. Check out the Jinja documentation for a full list of the features available.\nLet\u0026rsquo;s get started!\nCreating a new view For this example we\u0026rsquo;ll create a new view called jinja. Open up views.py and add the following route:\n@app.route(\u0026quot;/jinja\u0026quot;) def jinja(): return render_template(\u0026quot;public/jinja.html\u0026quot;)  We\u0026rsquo;ll need to create a new child template for this view. Create a file called jinja.html in the templates/public, open it in your editor and add the following:\napp/app/templates/public/jinja.html\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Jinja{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Jinja\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}  We should also add a link in our navbar so we access this view quickly! Go ahead and open up public_template.html in your editor.\nLet\u0026rsquo;s switch the About link to our new Jinja view.\nChange this:\n\u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; href=\u0026quot;/about\u0026quot;\u0026gt;About\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt;  To this:\n\u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; href=\u0026quot;/jinja\u0026quot;\u0026gt;Jinja\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt;  Reload your browser and click on the Jinja link in the nav to see our new view in action.\nPassing objects to templates We can pass any Python object to a template by passing it to the render_template function as a key/value pair. For example, let\u0026rsquo;s create a simple variable called my_name and assign it a string value (Feel free to replace the value for your own!)\nOpen up views.py and create the new my_name variable inside the jinja view:\napp/app/views.py\n@app.route(\u0026quot;/jinja\u0026quot;) def jinja(): my_name = \u0026quot;Julian\u0026quot; return render_template(\u0026quot;public/jinja.html\u0026quot;)  We pass objects to views in the render_template function as key/value pairs, like so:\nreturn render_template(\u0026quot;public/jinja.html\u0026quot;, my_name=my_name)\nGo ahead and pass the my_name key/value pair into render_template\nYour view will now look like this:\napp/app/views.py\n@app.route(\u0026quot;/jinja\u0026quot;) def jinja(): my_name = \u0026quot;Julian\u0026quot; return render_template(\u0026quot;public/jinja.html\u0026quot;, my_name=my_name)  Let\u0026rsquo;s use this variable in our jinja.html template. We access objects in Jinja with the {{ object }} syntax.\nOpen up jinja.html and add the following just under the \u0026lt;hr\u0026gt; tag:\napp/app/templates/public/jinja.html\nh4\u0026gt;Accessing an objects value\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;Hello {{ my_name }}!\u0026lt;/p\u0026gt;  Your jinja.html file should look like this:\napp/app/templates/public/jinja.html\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Jinja{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Jinja\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;h4\u0026gt;Accessing an objects value\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;Hello {{ my_name }}!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}   Tip - Going forward, we\u0026rsquo;re going to separate all of the sections in our jinja.html with a heading, description and example\n Save the file and reload the page to see Hello and the value for my_name!\nWe access an objects value in Jinja by passing it in between a pair of curly braces {{ like_so }}\nLet\u0026rsquo;s create some more objects in our jinja view and pass them into our template. Replace the contents of the jinja function with the following:\napp/app/views.py\n# Strings my_name = \u0026quot;Julian\u0026quot; # Integers my_age = 30 # Lists langs = [\u0026quot;Python\u0026quot;, \u0026quot;JavaScript\u0026quot;, \u0026quot;Bash\u0026quot;, \u0026quot;Ruby\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;Rust\u0026quot;] # Dictionaries friends = { \u0026quot;Tony\u0026quot;: 43, \u0026quot;Cody\u0026quot;: 28, \u0026quot;Amy\u0026quot;: 26, \u0026quot;Clarissa\u0026quot;: 23, \u0026quot;Wendell\u0026quot;: 39 } # Tuples colors = (\u0026quot;Red\u0026quot;, \u0026quot;Blue\u0026quot;) # Booleans cool = True # Classes class GitRemote: def __init__(self, name, description, domain): self.name = name self.description = description self.domain = domain def clone(self, repo): return f\u0026quot;Cloning into {repo}\u0026quot; my_remote = GitRemote( name=\u0026quot;Learning Flask\u0026quot;, description=\u0026quot;Learn the Flask web framework for Python\u0026quot;, domain=\u0026quot;https://github.com/Julian-Nash/learning-flask.git\u0026quot; ) # Functions def repeat(x, qty=1): return x * qty  Now we need to pass our objects into our template using the render_template function. Pass them in as key/value pairs like the following:\napp/app/views.py\nreturn render_template( \u0026quot;public/jinja.html\u0026quot;, my_name=my_name, my_age=my_age, langs=langs, friends=friends, colors=colors, cool=cool, GitRemote=GitRemote, my_remote=my_remote, repeat=repeat )  Your jinja view should now look like this:\napp/app/views.py\n@app.route(\u0026quot;/jinja\u0026quot;) def jinja(): # Strings my_name = \u0026quot;Julian\u0026quot; # Integers my_age = 30 # Lists langs = [\u0026quot;Python\u0026quot;, \u0026quot;JavaScript\u0026quot;, \u0026quot;Bash\u0026quot;, \u0026quot;Ruby\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;Rust\u0026quot;] # Dictionaries friends = { \u0026quot;Tony\u0026quot;: 43, \u0026quot;Cody\u0026quot;: 28, \u0026quot;Amy\u0026quot;: 26, \u0026quot;Clarissa\u0026quot;: 23, \u0026quot;Wendell\u0026quot;: 39 } # Tuples colors = (\u0026quot;Red\u0026quot;, \u0026quot;Blue\u0026quot;) # Booleans cool = True # Classes class GitRemote: def __init__(self, name, description, domain): self.name = name self.description = description self.domain = domain def pull(self): return f\u0026quot;Pulling repo '{self.name}'\u0026quot; def clone(self, repo): return f\u0026quot;Cloning into {repo}\u0026quot; my_remote = GitRemote( name=\u0026quot;Learning Flask\u0026quot;, description=\u0026quot;Learn the Flask web framework for Python\u0026quot;, domain=\u0026quot;https://github.com/Julian-Nash/learning-flask.git\u0026quot; ) # Functions def repeat(x, qty=1): return x * qty return render_template( \u0026quot;public/jinja.html\u0026quot;, my_name=my_name, my_age=my_age, langs=langs, friends=friends, colors=colors, cool=cool, GitRemote=GitRemote, my_remote=my_remote, repeat=repeat )  Ok so we\u0026rsquo;ve added quite a lot of code to our view function, just some standard Python objects that most of which you should be fairly familiar with.\nWe then passed them as key/value pairs into our template using the render_template function.\nLet\u0026rsquo;s put them to use in jinja.html.\nAccessing objects in templates Our template now contains all of the objects we\u0026rsquo;ve passed into it. Let\u0026rsquo;s explore what we can do with them!\nLooping Looping in Jinja is done with the following syntax:\n{% for variable in iterable %} \u0026lt;!-- Do something with the variable --\u0026gt; {{ variable }} {% endfor %}  Just like a Python for loop, we use the for variable in iterable syntax, wrapped in a pair of {% %} braces.\nWe then access the variable using the double curly brace syntax {{ variable }}\nFor loops must always be closed with {% endfor %}\nLet\u0026rsquo;s put this into practice and loop through our langs list and create a HTML list with each of the values:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Looping through an iterable\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;strong class=\u0026quot;d-block mb-3\u0026quot;\u0026gt;Programming languages\u0026lt;/strong\u0026gt; \u0026lt;ul\u0026gt; {% for lang in langs %} \u0026lt;li\u0026gt;{{ lang }}\u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt;  Reload your browser tab to see the changes.\nWe can also enumarate an iterable using {{ loop.index }}\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Looping and enumerating an iterable\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;strong class=\u0026quot;d-block mb-3\u0026quot;\u0026gt;Programming languages\u0026lt;/strong\u0026gt; \u0026lt;ul\u0026gt; {% for lang in langs %} \u0026lt;li\u0026gt;{{ loop.index }} - {{ lang }}\u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt;   Tip - loop.index starts at 1. To start enumerating at 0, use loop.index0\n Let\u0026rsquo;s loop though the key/value pairs of our friends dictionary:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Looping key/value pairs in a dict\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;strong class=\u0026quot;d-block mb-3\u0026quot;\u0026gt;Friends \u0026amp; ages\u0026lt;/strong\u0026gt; \u0026lt;ul\u0026gt; {% for name, age in friends.items() %} \u0026lt;li\u0026gt;{{ name }}: {{ age }}\u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt;  Just like in Python, we can access the dictionary methods such as .keys(), .values() and .items().\nUsing the {% for variable in iterable %} and closing it with the {% endfor %} syntax, you can loop through any iterable, including lists, tuples, dictionaries, sets etc.. and access the variable value using {{ variable }}\nCalling functions We can call any functions we pass into our template simply by doing just that!\nLet\u0026rsquo;s call our repeat function and pass it some arguments:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Calling functions\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;{{ repeat(\u0026quot;Jinja is great! \u0026quot;, 10) }}\u0026lt;/p\u0026gt;  Save and refresh the page to see Jinja is great! printed 10 times.\nPassing and calling functions from templates is useful, but an even better way is to create custom filters which you\u0026rsquo;ll learn about shortly!\nAccessing object indexes, keys and attributes Just like in Python, we can access the indexes, keys and attributes of an object.\nAccessing a list index:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;List index\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;{{ langs[0] }}\u0026lt;/p\u0026gt;  Accessing a dictionary value:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Dictionary value\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;{{ friends[\u0026quot;Tony\u0026quot;] }}\u0026lt;/p\u0026gt;  Accessing a class attribute:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Class attributes\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;{{ my_remote.description }}\u0026lt;/p\u0026gt;  As you can see, we just use the familiar Python syntax for accessing these values.\nClasses You\u0026rsquo;ve seen how to access class attributes using the class.attribute syntax. We can also call class methods from our Jinja template, just like in Python:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Class methods\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;{{ my_remote.pull() }}\u0026lt;/p\u0026gt;  Assignments Assigning new variables in Jinja is done using the {% set x = y %} syntax.\nLet\u0026rsquo;s create a new instance of our GitRemote class from within our template using the set tag:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Create a class\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; {% set new_repo = GitRemote( name=\u0026quot;Learning Flask\u0026quot;, description=\u0026quot;Learn the Flask web framework for Python\u0026quot;, domain=\u0026quot;https://github.com/Julian-Nash/learning-flask.git\u0026quot;) %} \u0026lt;p\u0026gt;{{ new_repo.description }}\u0026lt;/p\u0026gt;`  We can also unpack and set variables directly in our template, for example:\n\u0026lt;h4\u0026gt;Unpack variables\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; {% set foo, bar = colors %} \u0026lt;p\u0026gt;{{ foo }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ bar }}\u0026lt;/p\u0026gt;  Conditionals \u0026amp; comparison operators Just like in Python, Jinja gives us acccess to many of the familiar conditional operators.\nif statement:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Conditional if\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; {% if cool %} \u0026lt;p\u0026gt;Cool = {{ cool }}\u0026lt;/p\u0026gt; {% endif %}  We have to close any if conditionals with the {% endif %} syntax\nif, elif \u0026amp; else:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Conditional if/elif\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; {% if my_age \u0026lt; 18 %} \u0026lt;p\u0026gt;No entry\u0026lt;/p\u0026gt; {% elif my_age \u0026lt;= 25 %} \u0026lt;p\u0026gt;You may enter\u0026lt;/p\u0026gt; {% else %} \u0026lt;p\u0026gt;Entry denied. You're not cool enough\u0026lt;/p\u0026gt; {% endif %}  As you\u0026rsquo;ll see we threw in some Python comparison operators. You have access to all of the standard operators including:\n- == Equality - != Inequality - \u0026gt; Greater than - \u0026gt;= Greater than or equal to - \u0026lt; Less than - \u0026lt;= Less than or equal to   Tip - You must always close an {% if x %} statement with {% endif %}\n Logic \u0026amp; other operators Just like in Python, you have full access to the logic operators:\n- and Return true if the left and the right operand are true - or Return true if the left or the right operand are true. - not Negate a statement (See tip below) - (exp) Group an expression   Tip - Read more about the not operator here at the official Jinja docs\n You\u0026rsquo;ll also have access to many other operators you\u0026rsquo;ll be familiar with including:\n in Containment test. For example {{ \u0026quot;a\u0026quot; in [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;] }} will return true is Performs a test. {% foo is bar %} / {{ foo is not bar }}  Special Jinja operators Jinja features some special operators you may not be familiar with and we\u0026rsquo;ll be using later in this guide:\n | Applies a filter (Continue reading) For example {{ langs|length }} will return 6 ~ Converts all operands to strings and concatenates them, for example {{ \u0026quot;cool\u0026quot; ~ \u0026quot;==\u0026quot; ~ cool }} returns \u0026ldquo;cool==True\u0026rdquo; (**args, **kwargs) Callable. You\u0026rsquo;ve seen this used when we called class method  Math You\u0026rsquo;ll have full access to all of the Python math operators in Jinja. Not particularly useful but there if you need them.\nTemplate filters Jinja comes with a bunch of useful template filters which can be compared to funtions that take an argument or aguments and return a value or set of values.\nWe\u0026rsquo;re only going to show a few in this example, but a full list of built in filters can be found here\nThe syntax for using filters is {{ object|filter }}\nWe\u0026rsquo;ll use the length filter to return the length of a list:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Built in filters (length)\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;{{ langs|length }}\u0026lt;/p\u0026gt;  We can also use filters in conjunction with conditionals, for example:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Filters \u0026amp; conditionals\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; {% if langs|length \u0026gt; 2 %} {% for lang in langs %} {% if lang == \u0026quot;Python\u0026quot; %} \u0026lt;p\u0026gt;{{ lang|upper }}\u0026lt;/p\u0026gt; {% else %} \u0026lt;p\u0026gt;{{ lang|reverse }}\u0026lt;/p\u0026gt; {% endif %} {% endfor %} {% endif %}   Tip - You can nest loops and conditionals just like in Python. Be sure to close the conditional or loop with an {% endif %} or {% endfor %} respectively\n The upper filter will capitalize the string we pass to it whilst the reverse filter will return a reversed string.\nBe sure to read the Jinja docs for a full list of built in filters, they\u0026rsquo;re incredibly useful\nOne of the filters I find myself using a lot is the join filter. Let\u0026rsquo;s join our langs list into a single string:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Join filter\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;Unjoined: {{ langs }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Joined: {{ langs|join(\u0026quot;, \u0026quot;) }}\u0026lt;/p\u0026gt;  Custom filters Flask provides us a convenient way to build our own custom template filters.\nLet\u0026rsquo;s create a filter that takes a datetime object and returns a nicely formatted string.\nOpen up views.py and add follow along.\nFirst, we need to import the datetime library\napp/app/views.py\nfrom datetime import datetime\nLet\u0026rsquo;s create a datetime variable in our jinja view and pass it to render_template:\napp/app/views.py\ndate = datetime.utcnow() return render_template( \u0026quot;public/jinja.html\u0026quot;, my_name=my_name, my_age=my_age, langs=langs, friends=friends, colors=colors, cool=cool, GitRemote=GitRemote, my_remote=my_remote, repeat=repeat, date=date)  Let\u0026rsquo;s drop our date variable into our jinja.html file and see how it looks without formatting:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Custom filters\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;{{ date }}\u0026lt;/p\u0026gt;  Save and refresh your browser to see the raw datetime object:\n2019-02-06 17:40:58.374084\nLet\u0026rsquo;s create a custom filter and pass our date variable to it. Back in views.py, add the following:\napp/app/views.py\n@app.template_filter(\u0026quot;clean_date\u0026quot;) def clean_date(dt): return dt.strftime(\u0026quot;%d %b %Y\u0026quot;)  We create custom filters by registering them on our app using the @app.template_filter syntax and passing it the name of the filter we want to create.\nWe then pass our object into the function defined below it. It\u0026rsquo;s here we can modify the object and return it back to the template.\nThe great thing about custom template filters is that once defined, we can access them from any template in our app! In this case, we\u0026rsquo;re just formatting the datetime object and returning it as a nicely formatted string.\nGo ahead and save the file and reload the browser to see the changes take effect.\nEscaping Escaping strings is vital in any web application as we simply cannot rely on our users (or ourselves!) to ensure we\u0026rsquo;re not passing in any malicious strings that may get executed by the browser.\nIn Flask, auto escaping IS enabled by default for all templates ending in .html, .htm, .xml and .xhtml when using the render_template function.\nLet\u0026rsquo;s start by looking at when we want to insert some HTML or JavaScript into our template to be executed by the browser. This is not uncommon, in fact, you\u0026rsquo;re looking at it right now!\nLet\u0026rsquo;s create a variable in our jinja route and assign it an HTML string:\napp/app/views.py\nmy_html = \u0026quot;\u0026lt;h1\u0026gt;This is some HTML\u0026lt;/h1\u0026gt;\u0026quot;\nBe sure to pass it to render_template as my_html=my_html\nLet\u0026rsquo;s dump my_html into our jinja.html template:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Escaped\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; {{ my_html }}  Save and reload the page.\nInstinct tell us that the browser is going to parse the HTML and render it as part of our page. However, as Flask enables Jinja escaping by default, we just see a string containing the HTML, rather than the H1 heading we defined.\nLet\u0026rsquo;s escape our my_html variable and make it part of the page with the safe filter:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Marked as safe\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; {{ my_html|safe }}  You\u0026rsquo;ll see a big H1 heading which is now part of our pages actual HTML.\n Tip - Use with caution. Never pipe any values through the safe filter from untrusted sources. Especially from users!\n To illustrate this, let\u0026rsquo;s create a suspicious variables in our jinja view:\napp/app/views.py\nsuspicious = \u0026quot;\u0026lt;script\u0026gt;alert('NEVER TRUST USER INPUT!')\u0026lt;/script\u0026gt;\u0026quot;\nPass the suspicious variable to render_template and add the following to jinja.html:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Suspicious script\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; {{ suspicious|safe }}  Save and refresh your browser to see why cautious use of the safe filter is required! (Don\u0026rsquo;t worry it\u0026rsquo;s safe\u0026hellip; Get it?)\nGo ahead and comment out the last part otherwise you\u0026rsquo;ll have an annoying alert dialogue every time you reload your browser!\nLet\u0026rsquo;s move on to macros.\nmacros Jinja macros are an extremely convenient and useful way to create reusable code within your templates. They\u0026rsquo;re a bit like functions as in we can reuse them over and over again and supply arguments.\nWe define a macro with the following syntax:\n{% macro macro_name(**args, **kwargs) -%} \u0026lt;!-- We then define the code we want as part of our macro --\u0026gt; \u0026lt;!-- We have access to any args \u0026amp; kwargs passed into the macro --\u0026gt; \u0026lt;!-- We access the args and kwargs with the familiar `{{ variable }}` syntax --\u0026gt; {%- endmacro %}   Tip - Pay attention to the dashes in the opening and closing {% macro -%} \u0026amp; {%- endmacro %} tags\n A demonstration is in order!\nSay you\u0026rsquo;ve got a page with lots of input fields, we can create an input macro and pass it arguments which then get rendered within the macro.\nOpen up jinja.html and add the following:\napp/app/templates/public/jinja.html\n{% macro input(label=\u0026quot;\u0026quot;, type=\u0026quot;text\u0026quot;, id=\u0026quot;\u0026quot;, name=\u0026quot;\u0026quot;, placeholder=\u0026quot;\u0026quot;) -%} \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;{{ label }}\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;{{ type }}\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;{{ id }}\u0026quot; name=\u0026quot;{{ name }}\u0026quot; placeholder=\u0026quot;{{ placeholder }}\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; {%- endmacro %}  We\u0026rsquo;ve created an HTML input elemt inside our macro which we can pass arguments to and reuse throughout our template.\n Tip - Notice the default arguments? You can do that with macros!\n Here\u0026rsquo;s the syntax to use a macro in your templates:\n{{ macro_name(**args, **kwargs) }}\nLet\u0026rsquo;s go ahead and use our macro a few times in jinja.html. We\u0026rsquo;ll wrap our macros in a \u0026lt;form\u0026gt; tag:\napp/app/templates/public/jinja.html\n\u0026lt;h4\u0026gt;Macros\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; {% macro input(label=\u0026quot;\u0026quot;, type=\u0026quot;text\u0026quot;, id=\u0026quot;\u0026quot;, name=\u0026quot;\u0026quot;, placeholder=\u0026quot;\u0026quot;) -%} \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;{{ label }}\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;{{ type }}\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;{{ id }}\u0026quot; name=\u0026quot;{{ name }}\u0026quot; placeholder=\u0026quot;{{ placeholder }}\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; {%- endmacro %} \u0026lt;form action=\u0026quot;#\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; {{ input(label=\u0026quot;Name\u0026quot;, id=\u0026quot;name\u0026quot;, name=\u0026quot;name\u0026quot;, placeholder=\u0026quot;Enter your name\u0026quot;) }} {{ input(label=\u0026quot;Email\u0026quot;, type=\u0026quot;email\u0026quot;, id=\u0026quot;email\u0026quot;, name=\u0026quot;email\u0026quot;, placeholder=\u0026quot;Enter your email\u0026quot;) }} {{ input(label=\u0026quot;Password\u0026quot;, id=\u0026quot;password\u0026quot;, name=\u0026quot;password\u0026quot;, placeholder=\u0026quot;Enter your password\u0026quot;) }} \u0026lt;/form\u0026gt;  Save and refresh your browser.\nAwesome, we\u0026rsquo;ve got 3 \u0026lt;input\u0026gt; fields all with different labels, types, names, ids and placeholders. Notice how little code we had to white to produce these 3 input fields? That\u0026rsquo;s the power of macros!\nAnother key feature of macros, is being able to import them from other templates, similarly to how you import a Python library.\nLet\u0026rsquo;s create a macros directory at the root of our templates directory and create a new file in there called input_macros.html.\nOpen up input_macros.html and copy and paste the macro we just created:\napp/app/templates/macros/input_macros.html\n{% macro input(label=\u0026quot;\u0026quot;, type=\u0026quot;text\u0026quot;, id=\u0026quot;\u0026quot;, name=\u0026quot;\u0026quot;, placeholder=\u0026quot;\u0026quot;) -%} \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;{{ label }}\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;{{ type }}\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;{{ id }}\u0026quot; name=\u0026quot;{{ name }}\u0026quot; placeholder=\u0026quot;{{ placeholder }}\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; {%- endmacro %}  Save and close the file.\nNow back in jinja.html, we\u0026rsquo;re going to refactor our code to import and use the macro from input_macros.html.\nFirst up, we need to import the template. At the top of jinja.html, just under the {% extends %} tag, add the following:\n{% import \u0026quot;macros/input_macros.html\u0026quot; as im %}\nWe now have full access to any of the macros defined in input_macros.html! Pretty cool right.\nWe just need to refactor our existing macros and get rid of the macro we created in jinja.html just now. Go ahead and delete the macro and change the following:\nfrom this:\napp/app/templates/public/jinja.html\n\u0026lt;form action=\u0026quot;#\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; {{ input(label=\u0026quot;Name\u0026quot;, id=\u0026quot;name\u0026quot;, name=\u0026quot;name\u0026quot;, placeholder=\u0026quot;Enter your name\u0026quot;) }} {{ input(label=\u0026quot;Email\u0026quot;, type=\u0026quot;email\u0026quot;, id=\u0026quot;email\u0026quot;, name=\u0026quot;email\u0026quot;, placeholder=\u0026quot;Enter your email\u0026quot;) }} {{ input(label=\u0026quot;Password\u0026quot;, id=\u0026quot;password\u0026quot;, name=\u0026quot;password\u0026quot;, placeholder=\u0026quot;Enter your password\u0026quot;) }} \u0026lt;/form\u0026gt;  To this:\napp/app/templates/public/jinja.html\n\u0026lt;form action=\u0026quot;#\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; {{ im.input(label=\u0026quot;Name\u0026quot;, id=\u0026quot;name\u0026quot;, name=\u0026quot;name\u0026quot;, placeholder=\u0026quot;Enter your name\u0026quot;) }} {{ im.input(label=\u0026quot;Email\u0026quot;, type=\u0026quot;email\u0026quot;, id=\u0026quot;email\u0026quot;, name=\u0026quot;email\u0026quot;, placeholder=\u0026quot;Enter your email\u0026quot;) }} {{ im.input(label=\u0026quot;Password\u0026quot;, id=\u0026quot;password\u0026quot;, name=\u0026quot;password\u0026quot;, placeholder=\u0026quot;Enter your password\u0026quot;) }} \u0026lt;/form\u0026gt;  We\u0026rsquo;ve just prepend our macro calls with im after adding {% import \u0026quot;macros/input_macros.html\u0026quot; as im %} at the top of the file.\nWrapping up As you can see, Jinja provides us with some pretty useful tools for creating smart templates in our Flask application (And I can\u0026rsquo;t help but feel I\u0026rsquo;ve only touched the surface!)\nI highly suggest you have a look through the Jinja documentation to grasp even more knowledge of this awesome templating language.\nGetting to grips with Jinja early on can really make a difference. You\u0026rsquo;ll be way more efficient and reduce the amount of boilerplate code you\u0026rsquo;re writing.\nDrop a comment below if you found this guide useful or if you think I missed anything critical. This wasn\u0026rsquo;t designed to be an exhaustive or in depth guide (That\u0026rsquo;s what the docs are for!) But it should give you enough ammo to start designing smarter templates of your own!\nLast modified · 28 Feb 2019\n Source : pythonise.com\n "});index.add({'id':38,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-7/','title':"Ep.7 Working with forms in Flask",'content':" Working with forms in Flask | Learning Flask Ep. 7 Creating forms, posting data to views and working with form data in Flask\nIn this part of the Learning Flask series, You\u0026rsquo;ll learn how to post forms to a Flask view and work with the incoming data.\nForms (or input data in general) play a critical role in any kind of website or web allication as we need a way for the user to communicate with our app!\nIn this example, we\u0026rsquo;ll start with a simple account sign-up form.\nCreating a new route Let\u0026rsquo;s get started by creating a new route in views.py. We\u0026rsquo;ll give it the URL sign-up.\napp/app/views.py\n@app.route(\u0026quot;/sign-up\u0026quot;) def sign_up(): return render_template(\u0026quot;public/sign_up.html\u0026quot;)  We\u0026rsquo;re going to be accepting POST requests on this route so we need to pass another argument to @app.route\nWe do this by passing the methods argument, along with a list of methods as the value.\nFlask supports all of the common HTTP methods including:\n GET POST PUT DELETE  Let\u0026rsquo;s privide our route with the methods argument and a list of methods we want the route to handle:\napp/app/views.py\n@app.route(\u0026quot;/sign-up\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def sign_up(): return render_template(\u0026quot;public/sign_up.html\u0026quot;)   Tip - Flask routes support GET requests by default, however must be declared if the methods argument is provided\n We need to create a new template so go ahead and create a new file called sign_up.html and place it in the templates/public directory.\nOpen up sign_up.html in your editor and add the following:\napp/app/templates/public/sign_up.html\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Sign up{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Sign up\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}  Save the file and open go to the /sign-up route in your browser. You should see the new page render.\nLet\u0026rsquo;s create a form and add some input fields to our template. We\u0026rsquo;re going to add fields for username, email and pasword. Go ahead and enter the following just under the \u0026lt;hr\u0026gt; tag:\napp/app/templates/public/sign_up.html\n\u0026lt;form action=\u0026quot;/sign-up\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Username\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;username\u0026quot; name=\u0026quot;username\u0026quot; placeholder=\u0026quot;Select a username\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;email\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;email\u0026quot; name=\u0026quot;email\u0026quot; placeholder=\u0026quot;Enter your email\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;password\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;password\u0026quot; name=\u0026quot;password\u0026quot; placeholder=\u0026quot;Create a password\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt;  Lastly, we need to add a submit button. Add it just befor the closing \u0026lt;/form\u0026gt; tag:\napp/app/templates/public/sign_up.html\n\u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;Sign up\u0026lt;/button\u0026gt;\nYour template should now look something like this:\napp/app/templates/public/sign_up.html\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Sign up{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Sign up\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;form action=\u0026quot;/sign-up\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Username\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;username\u0026quot; name=\u0026quot;username\u0026quot; placeholder=\u0026quot;Select a username\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;email\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;email\u0026quot; name=\u0026quot;email\u0026quot; placeholder=\u0026quot;Enter your email\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;password\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;password\u0026quot; name=\u0026quot;password\u0026quot; placeholder=\u0026quot;Create a password\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;Sign up\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}`   Tip - To access form data in Flask, you must provide the name attribute in each of the forms input tags\n Pay attention to the opening \u0026lt;form\u0026gt; tag.\nWe pass the URL of the route we want to post the form data to in the action attribute of the form. In our case action=\u0026quot;/sign-up\u0026quot;.\nYou\u0026rsquo;ll also need to pass the request method to the method attribute in the opening \u0026lt;form\u0026gt; tag. We\u0026rsquo;ve added method=\u0026quot;POST\u0026quot; because we\u0026rsquo;re POSTing data to the server.\nSave the file and refresh the page to see your form.\nPosting form data to a route Go ahead and hit the submit button and pay attention to your terminal or console. You\u0026rsquo;ll see:\n127.0.0.1 - - [06/Feb/2019 22:00:25] \u0026quot;POST /sign-up HTTP/1.1\u0026quot; 200 -\nPerfect, our form is posting to the sign-up route on our server!\nLet\u0026rsquo;s jump back into views.py and start working with our form data.\nHandling form data Before we can access any of the request data, we need to import request from flask.\nAt the top of views.py, go ahead and import request from flask. We\u0026rsquo;ll also import redirect\napp/app/views.py\nfrom flask import request, redirect`  To access form data in our route, we use request.form.\nLet\u0026rsquo;s capture our incoming form data to a variable called req, but first, we should add a conditional to validate we\u0026rsquo;re receiving POST data.\nWe can do so by testing request.method for the \u0026quot;POST\u0026quot; method:\napp/app/views.py\n@app.route(\u0026quot;/sign-up\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def sign_up(): if request.method == \u0026quot;POST\u0026quot;: req = request.form return redirect(request.url) return render_template(\u0026quot;public/sign_up.html\u0026quot;)`  The redirect function, amongst many other things allows us to redirect the client to different parts our app. We\u0026rsquo;ll be exploring redirect in more detail in a future part of this series.\nIn this case, we\u0026rsquo;re instructing redirect to redirect the client to the URL of the request.\nIf you were to print(type(req)) you\u0026rsquo;ll see that the request.form object a special type called werkzeug.datastructures.ImmutableMultiDict which we can essentially treat it like a dictionary.\nLet\u0026rsquo;s just print(req) and inspect the results.\napp/app/views.py\n@app.route(\u0026quot;/sign-up\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def sign_up(): if request.method == \u0026quot;POST\u0026quot;: req = request.form print(req) return redirect(request.url) return render_template(\u0026quot;public/sign_up.html\u0026quot;)  Depending on whether you supplied any input, you\u0026rsquo;ll see:\nImmutableMultiDict([('username', ''), ('email', ''), ('password', '')])\nWe can treat our req object just like a normal Python dictionary, for example, to access the individual inputs from the form, we can use any of the following:\napp/app/views.py\n@app.route(\u0026quot;/sign-up\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def sign_up(): if request.method == \u0026quot;POST\u0026quot;: req = request.form username = req.get(\u0026quot;username\u0026quot;) email = req[\u0026quot;email\u0026quot;] password = request.form[\u0026quot;password\u0026quot;] # You could also use password = request.form.get(\u0026quot;password\u0026quot;) return redirect(request.url) return render_template(\u0026quot;public/sign_up.html\u0026quot;)`  You could bypass capturing and storing the form data as a variable with the following:\napp/app/views.py\n@app.route(\u0026quot;/sign-up\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def sign_up(): if request.method == \u0026quot;POST\u0026quot;: username = request.form.get(\u0026quot;username\u0026quot;) email = request.form.get(\u0026quot;email\u0026quot;) password = request.form.get(\u0026quot;password\u0026quot;) # Alternatively username = request.form[\u0026quot;username\u0026quot;] email = request.form[\u0026quot;email\u0026quot;] password = request.form[\u0026quot;password\u0026quot;] return redirect(request.url) return render_template(\u0026quot;public/sign_up.html\u0026quot;)  We\u0026rsquo;ve now got each of the form values stored as a Python variable to do as we please.\nValidating form data There\u0026rsquo;s lots of things we could do to validate, however they\u0026rsquo;re very much application specific. Let\u0026rsquo;s keep it simple and just validate that we\u0026rsquo;ve got some data for all 3 fields. We\u0026rsquo;ll cover validating a sign up form later in this series.\nLet\u0026rsquo;s iterate through the keys and values of our req object and look for missing fields, then return a response and message to the user:\napp/app/views.py\n@app.route(\u0026quot;/sign-up\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def sign_up(): if request.method == \u0026quot;POST\u0026quot;: req = request.form missing = list() for k, v in req.items(): if v == \u0026quot;\u0026quot;: missing.append(k) if missing: feedback = f\u0026quot;Missing fields for {', '.join(missing)}\u0026quot; return render_template(\u0026quot;public/sign_up.html\u0026quot;, feedback=feedback) return redirect(request.url) return render_template(\u0026quot;public/sign_up.html\u0026quot;)`  We\u0026rsquo;ll add a message in sign_up.html to give some feedback to the user. Open up sign_up.html and add the following just under the \u0026lt;button\u0026gt; tag inside the form:\napp/app/templates/public/sign_up.html\n{% if feedback %} \u0026lt;p class=\u0026quot;text-danger float-right\u0026quot;\u0026gt;{{ feedback }}\u0026lt;/p\u0026gt; {% endif %}`  Save and close the file.\nRefresh your browser and submit an empty form. You should see the error message appear to the bottom right of the form. When you submit values for all 3 fields, the feedback message doesn\u0026rsquo;t appear.\nWe could use the required attribute in the HTML form and let the browser do the validation for us but that\u0026rsquo;s not much fun is it. And besides, this series is about Flask!\nIn the next part, you\u0026rsquo;ll be learning about dynamic URL\u0026rsquo;s\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':39,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-8/','title':"Ep.8 Generating dynamic URLs in Flask",'content':" Generating dynamic URLs in Flask | Learning Flask Ep. 8 Learn how to create and work with dynamic URLs and dynamic data in Flask\nDynamic URL\u0026rsquo;s in Flask play an important role in the ability to create unique URL\u0026rsquo;s that aren\u0026rsquo;t hard-coded into our application.\nFor example, let\u0026rsquo;s say our application allows users to create an account and log into their profile, we\u0026rsquo;ll need a way to dynamically generate a route for that specific user.\nCan you imagine hard coding a unique URL for each and every user of your application?!\nLet\u0026rsquo;s dive in and learn how we can generate dynamic URL\u0026rsquo;s in Flask.\ncreating a dynamic route First up, let\u0026rsquo;s create a new route in out app. We\u0026rsquo;re going to give it the URL /profile:\napp/app/views.py\n@app.route(\u0026quot;/profile\u0026quot;) def profile(): return render_template(\u0026quot;public/profile.html\u0026quot;)  We\u0026rsquo;ll also create a new template for this route. Go ahead and create a file named profile.html in the templates/public directory (Or whatever directory contains your HTML files)\nLet\u0026rsquo;s just create a simple page for now:\napp/app/templates/public/dynamic.html\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Profile{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Profile\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}   Tip - We\u0026rsquo;re using the Bootstrap CSS library but feel free to use your own or leave it out completely\n As it is, our new route isn\u0026rsquo;t dynamic. We need to make some tweaks to the URL we\u0026rsquo;ve provided in out @app.route decorator.\nGo ahead and make the following changes to the @app.route URL:\napp/app/views.py\n@app.route(\u0026quot;/profile/\u0026lt;username\u0026gt;\u0026quot;)   We\u0026rsquo;ve added trailing slash to /profile/ We\u0026rsquo;ve provided a variable in the URL path and wrapped in with two opposing arrows \u0026lt;\u0026gt; as shown.  Essentially, we\u0026rsquo;re expecting some sort of value to be passed into the URL after /profile/. We\u0026rsquo;re then capturing that data as a variable called username.\nJust remember, to catch a a value in the URL and store it as a variable it must look \u0026lt;like_this\u0026gt; and follow a trailing slash.\nBefore we can work with the username data, we need to pass it into the routes function as an argument:\napp/app/views.py\ndef profile(username):\nWe now have access to the username variable and its data.\nFor clarity, our route now looks like this:\napp/app/views.py\n@app.route(\u0026quot;/profile/\u0026lt;username\u0026gt;\u0026quot;) def profile(username): return render_template(\u0026quot;public/profile.html\u0026quot;)  At this point, if you try to access the /profile route in your browser, Flask will throw an error because the profile function is expecting an value!\n Tip - Trailing slashes matter in Flask. If you try to access a route that\u0026rsquo;s not defined with a trailing slash in the URL, you\u0026rsquo;ll get an error.\n Capturing URL variables Go to /profile/x in your browser. You\u0026rsquo;ll see Flask returns our new profile.html page and displays /profile/x in the browser URL address bar.\nWe can now work with data that comes into our app from the URL! Let\u0026rsquo;s create a dictionary containing a few usernames and some information about our users.\nWe\u0026rsquo;ll search the dictonary for the username variable and return some basic information about that user. Let\u0026rsquo;s create our users dictionary:\napp/app/views.py\nusers = { \u0026quot;mitsuhiko\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Armin Ronacher\u0026quot;, \u0026quot;bio\u0026quot;: \u0026quot;Creatof of the Flask framework\u0026quot;, \u0026quot;twitter_handle\u0026quot;: \u0026quot;@mitsuhiko\u0026quot; }, \u0026quot;gvanrossum\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Guido Van Rossum\u0026quot;, \u0026quot;bio\u0026quot;: \u0026quot;Creator of the Python programming language\u0026quot;, \u0026quot;twitter_handle\u0026quot;: \u0026quot;@gvanrossum\u0026quot; }, \u0026quot;elonmusk\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Elon Musk\u0026quot;, \u0026quot;bio\u0026quot;: \u0026quot;technology entrepreneur, investor, and engineer\u0026quot;, \u0026quot;twitter_handle\u0026quot;: \u0026quot;@elonmusk\u0026quot; } }  We\u0026rsquo;ll add some logic to our profile route to look up the user and return their information:\napp/app/views.py\n@app.route(\u0026quot;/profile/\u0026lt;username\u0026gt;\u0026quot;) def profile(username): user = None if username in users: user = users[username] return render_template(\u0026quot;public/profile.html\u0026quot;, username=username, user=user)  Lastly, let\u0026rsquo;s refactor our profile.html to display our user information:\napp/app/templates/public/dynamic.html\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Profile{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Profile\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;div class=\u0026quot;card\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card-body\u0026quot;\u0026gt; {% if user %} \u0026lt;h5 class=\u0026quot;card-title\u0026quot;\u0026gt;{{ username }}\u0026lt;/h5\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;{{ user[\u0026quot;name\u0026quot;] }}\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026quot;color: blue\u0026quot;\u0026gt;{{ user[\u0026quot;twitter_handle\u0026quot;] }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-muted\u0026quot;\u0026gt;{{ user[\u0026quot;bio\u0026quot;] }}\u0026lt;/p\u0026gt; {% else %} \u0026lt;p\u0026gt;User {{ username }} not found\u0026lt;/p\u0026gt; {% endif %} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}  Requesting a dynamic route Save the files and head to /profile/mitsuhiko or any of the other usernames in your browser to see their profile!\nAlso, try a name that\u0026rsquo;s not in our dictionary to see how we\u0026rsquo;ve handled that with a simple {% if user %} statement in our template.\nDynamic URL\u0026rsquo;s aren\u0026rsquo;t just limited to one variable. Let\u0026rsquo;s stack some more veriables to capture in our URL string.\nMultiple URL variables In our first example, we created the profile route to expect only one variable in the URL. However, we can add as many as we like.\nLet\u0026rsquo;s create a new route with multiple variables that just prints the variables and returns a simple string to the client:\napp/app/views.py\n@app.route(\u0026quot;/multiple/\u0026lt;foo\u0026gt;/\u0026lt;bar\u0026gt;/\u0026lt;baz\u0026gt;\u0026quot;) def multiple(foo, bar, baz): print(f\u0026quot;foo is {foo}\u0026quot;) print(f\u0026quot;bar is {bar}\u0026quot;) print(f\u0026quot;baz is {baz}\u0026quot;) return f\u0026quot;foo is {foo}, bar is {bar}, baz is {baz}\u0026quot;  Go to /multiple/foo/bar/baz in your browser, you\u0026rsquo;ll see:\nfoo is foo, bar is bar, baz is baz\nAs you can see, we have full access to the variables captured in the URL and passed into our function!\nIn the next part of this series, we\u0026rsquo;ll be covering how to work with query strings in Flask.\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':40,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-9/','title':"Ep.9 Working with JSON data",'content':" Working with JSON data | Learning Flask Ep. 9 Handle incoming, parsing and returning JSON data with Flask!\nIn this part of the \u0026ldquo;Learning Flask\u0026rdquo; series, we\u0026rsquo;re going to be working with JSON data.\nJSON is an extremely popular format for sending and receiving data over the web. Flask provides us with some great tools to make light work of handling JSON data.\nIn this guide, we\u0026rsquo;re going to quickly cover how to handle incoming JSON data and return JSON data to the client.\nHandling JSON Let\u0026rsquo;s start out with a new route. This route will receive some JSON, parse the data, do some validation and return a new JSON response.\napp/app/views.py\n@app.route(\u0026quot;/json\u0026quot;) def json_example(): return \u0026quot;Thanks!\u0026quot;  We\u0026rsquo;re going to be POSTing data to the server so we need to pass the methods argument to the @app.route() decorator, along with the HTTP methods we want to allow for this route:\napp/app/views.py\n@app.route(\u0026quot;/json\u0026quot;, methods=[\u0026quot;POST\u0026quot;]) def json_example(): return \u0026quot;Thanks!\u0026quot;  Working with any kind of request in Flask requires importing the request object. Go ahead and import it:\napp/app/views.py\nfrom flask import request  Now we need a method to handle the incoming JSON. Flask provides the handy request.get_json() method, which parses any incoming JSON data into a Python dictionary.\nLet\u0026rsquo;s store our incoming JSON data in a variable called req and print it out to the terminal:\napp/app/views.py\n@app.route(\u0026quot;/json\u0026quot;, methods=[\u0026quot;POST\u0026quot;]) def json_example(): req = request.get_json() print(req) return \u0026quot;Thanks!\u0026quot;  Whilst we\u0026rsquo;re here, let\u0026rsquo;s explicitly set an HTTP response by passing it to return:\napp/app/views.py\n@app.route(\u0026quot;/json\u0026quot;, methods=[\u0026quot;POST\u0026quot;]) def json_example(): req = request.get_json() print(req) return \u0026quot;Thanks!\u0026quot;, 200  POSTing JSON Let\u0026rsquo;s post some data to our route!\n Tip - We\u0026rsquo;re going to use the free Postman app to make our requests, however, feel free to use an alternative such as curl or write a JavaScript function and call it from the browser (You\u0026rsquo;ll learn how to do this in the next episode!)\n Go ahead and create a new POST request to the following URL:\nPostman URL\nhttp://127.0.0.1:5000/json\nWe need to create some JSON data in the body of our request. Go ahead and click the raw tab and select JSON (application/json) from the dropdown list on the right.\nLet\u0026rsquo;s just create a simple JSON object with 2 fields for now:\nPostman body\n{ \u0026quot;name\u0026quot;: \u0026quot;Julian\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Posting JSON data to Flask!\u0026quot; }\nIf you\u0026rsquo;re using cURL:\ncURL request\ncurl --header \u0026quot;Content-Type: application/json\u0026quot; --request POST --data '{\u0026quot;name\u0026quot;:\u0026quot;Julian\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Posting JSON data to Flask!\u0026quot;}' http://127.0.0.1:5000/json\nGo ahead and click the Send button and look at the bottom of the app for the response body.\nYou\u0026rsquo;ll see:\nPostman response body\nThanks!\nNow take a look in your terminal, you\u0026rsquo;ll see:\nTerminal\n{'name': 'Julian', 'message': 'Posting JSON data to Flask!'}\nAwesome, We\u0026rsquo;ve posted some JSON data to Flask and received a response. You\u0026rsquo;ll also notice the response status at the bottom of the Postman app with 200 OK. Just as we told our route to do!\nParsing incoming JSON We know using the get_json() method on the request object will return a Python dictionary with our JSON fields serielized into key/value pairs.\nWe can also validate and perform some conditional testing on our incoming request to determine if the body contains JSON data or not using the is_json check provided by Flask.\nLet\u0026rsquo;s check that our response is JSON and return a response depending on what we receive:\napp/app/views.py\n@app.route(\u0026quot;/json\u0026quot;, methods=[\u0026quot;POST\u0026quot;]) def json_example(): # Validate the request body contains JSON if request.is_json: # Parse the JSON into a Python dictionary req = request.get_json() # Print the dictionary print(req) # Return a string along with an HTTP status code return \u0026quot;JSON received!\u0026quot;, 200 else: # The request body wasn't JSON so return a 400 HTTP status code return \u0026quot;Request was not JSON\u0026quot;, 400  We perform a conditional check using the if statement on the incoming request object to determine if the request body contains JSON or not.\nIf the request contains JSON, we\u0026rsquo;re printing it and returning the JSON received! string along with a 200 status code to indicate a successful transaction.\nIf the request body doesn\u0026rsquo;t contain JSON, we\u0026rsquo;re returning Request was not JSON along with a 400 HTTP status code to let the client know there was a bad request.\nGo ahead and make another POST request in the Postman app to see the updates JSON received! response.\nPostman response body\nJSON received!\nNow, change the dropdown menu in the Postman app from JSON (applicationjson) to text and click send to see the Request was not JSON message in the response, along with the 400 BAD REQUEST error.\nPostman response body\nRequest was not JSON\nAlright! So now you know how to handle incoming JSON. Let\u0026rsquo;s go ahead and return some!\nReturning JSON Again, Flask makes returning JSON a breeze using the the built in jsonify and make_response functions.\nLet\u0026rsquo;s go ahead and import them:\napp/app/views.py\nfrom flask import jsonify, make_response\nLet\u0026rsquo;s refactor our /json route to use jsonify and make_response. We\u0026rsquo;ll discuss them after:\napp/app/views.py\n@app.route(\u0026quot;/json\u0026quot;, methods=[\u0026quot;POST\u0026quot;]) def json_example(): if request.is_json: req = request.get_json() response_body = { \u0026quot;message\u0026quot;: \u0026quot;JSON received!\u0026quot;, \u0026quot;sender\u0026quot;: req.get(\u0026quot;name\u0026quot;) } res = make_response(jsonify(response_body), 200) return res else: return make_response(jsonify({\u0026quot;message\u0026quot;: \u0026quot;Request body must be JSON\u0026quot;}), 400)  We\u0026rsquo;ve created a new response_body object using a dictionary and passed it some values.\nWe then use the make_response() function to prepare a response, to which we\u0026rsquo;ve provided 2 arguments:\n jsonify(*args, **kwargs) wraps Python\u0026rsquo;s own json.dumps() method and will serialize Python strings, lists or dicts as a JSON string. 200 is the HTTP status code we want to return.   Tip - jsonify(1, 2, 3) and jsonify([1, 2, 3]) will both serialize to [1, 2, 3]\n By passing both of these arguments to the make_response() function, we can create our response ahead of returning it by storing it as a variable. In our case, the res variable.\nWe\u0026rsquo;ve also done the same under the else conditional, just with it all on one line to save some space.\nGo ahead and repeat the same process in the Postman app or cURL to see the newly formatted responses.\nPosting JSON (application/json) will return:\nPostman response body\n{ \u0026quot;message\u0026quot;: \u0026quot;JSON received!\u0026quot;, \u0026quot;sender\u0026quot;: \u0026quot;Julian\u0026quot; }  Changing the dropdown to Text and posting will return:\nPostman response body\n{ \u0026quot;message\u0026quot;: \u0026quot;Request body must be JSON\u0026quot; }  Wrapping up Flask makes working with JSON easy, providing many useful functions and methods such as is_json, get_json() and jsonify(), along with helpful functions such as make_response(). Creating API\u0026rsquo;s, webhooks and handling JSON is only a few lines of code away!\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':41,'href':'/library/tutorials/posts/creating-a-new-theme/','title':"Creating a New Theme",'content':" Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $  Some Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $  Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $  The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $  See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $  Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop  Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml  That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html]  That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $  The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot;  Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $  Update the Configuration File to Use the Theme Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $  Generate the Site Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $  Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $  Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]  If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $  The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $  The Theme Development Cycle When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose  Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms  Update the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt;  Live Reload Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $  That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $  Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $  The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $  The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html  We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html  As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq  Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html  Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq  Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html  Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot;  Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq  Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }}  versus\n{{ partial \u0026quot;header.html\u0026quot; . }}  Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}  Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"});index.add({'id':42,'href':'/library/tutorials/posts/migrate-from-jekyll/','title':"Migrate to Hugo from Jekyll",'content':" Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n Change your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public  Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }   Convert Jekyll templates to Hugo templates That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"});index.add({'id':43,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-10/','title':"Ep.10 Flask and the Fetch API",'content':" Flask and the Fetch API | Learning Flask Ep. 10 Asynchronous requests from the client to the server using the JavaScript Fetch API\nMaking asynchronus requests from the client to the server is a common feature of most modern web applications, allowing a more fluid user experience.\nIn this episode of the \u0026ldquo;Learning Flask\u0026rdquo; series, you\u0026rsquo;ll learn how to make asynchronus requests from the client to your application using some basic vanilla JavaScript and the Fetch API.\nThe Fetch API supersedes XML AJAX requests, allowing a relitively clean and simple promise based way to post and fetch data to and from the server, with a simple yet powerful feature set for catching errors and bad requests.\nCreate a new route For this example, we\u0026rsquo;re going to be building a simple guestbook, allowing our users to post their name and message along with reading other previous entries.\nWe\u0026rsquo;ll use the Fetch API to post a new entry and a JavaScript function to render the entries to our template.\nLet\u0026rsquo;s start with a new route called /guestbook:\napp/app/views.py\n@app.route(\u0026quot;/guestbook\u0026quot;) def guestbook(): return render_template(\u0026quot;public/guestbook.html\u0026quot;)  We\u0026rsquo;ll need to create a new template too. Go ahead and create guestbook.html in the public directory and add the following:\napp/app/templates/public/guestbook.html\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Guestbook{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Guestbook\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}  Save the files and head to /guestbook in the browser to see the new template.\n Note - We\u0026rsquo;re using the Bootstrap 4 library for CSS\n We\u0026rsquo;ll need some input fields for our users to fill out the guestbook.\nWe\u0026rsquo;ll add an input field for name and a textarea for message along with a button to submit their entry:\napp/app/templates/public/guestbook.html\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Guestbook{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Guestbook\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;div class=\u0026quot;mb-3\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Name\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot; id=\u0026quot;name\u0026quot; placeholder=\u0026quot;Your name\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Message\u0026lt;/label\u0026gt; \u0026lt;textarea class=\u0026quot;form-control\u0026quot; id=\u0026quot;message\u0026quot; cols=\u0026quot;30\u0026quot; rows=\u0026quot;3\u0026quot; placeholder=\u0026quot;Your message\u0026quot;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026quot;btn btn-primary\u0026quot; id=\u0026quot;submit\u0026quot; onclick=\u0026quot;submit_message();\u0026quot;\u0026gt;Submit message\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;Messages\u0026lt;/h3\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;div class=\u0026quot;mb-3\u0026quot; id=\u0026quot;messages\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %} {% block script %}  Notice we\u0026rsquo;ve set an id attribute on the input elements and the button. We\u0026rsquo;ll create a function to submit the data when the button is clicked, collecting the values from the input fields and posting it to our Flask app.\nWe\u0026rsquo;ve also added a new heading and a \u0026lt;div\u0026gt; element with the id messages. We\u0026rsquo;ll use this div to display the entries of our guestbook later.\nCollecting JSON We\u0026rsquo;re going to wrap all of our JavaScript in a set of {% block script %} {% endblock %} tags with corresponding {% block script %} {% endblock %} tags in our base template.\nLet\u0026rsquo;s create a function to collect the input values and create a new JSON object when the button is clicked:\napp/app/templates/public/guestbook.html\n{% block script %} \u0026lt;script\u0026gt; function submit_message() { var name = document.getElementById(\u0026quot;name\u0026quot;); var message = document.getElementById(\u0026quot;message\u0026quot;); var entry = { name: name.value, message: message.value }; } \u0026lt;/script\u0026gt; {% endblock %}  We need to attach this function to the submit button. Go ahead and refactor the \u0026lt;button\u0026gt; element to the following:\n\u0026lt;button class=\u0026quot;btn btn-primary\u0026quot; id=\u0026quot;submit\u0026quot; onclick=\u0026quot;submit_message();\u0026quot;\u0026gt;Submit message\u0026lt;/button\u0026gt;  We\u0026rsquo;re calling the submit_message() function when someone clicks the button, fetching the input values and storing them in a JSON object called entry.\nCreating a JSON handler in Flask Before we attempt to post any data to our app, we need to create a handler for it.\nWe\u0026rsquo;re submitting data to our app so we\u0026rsquo;ll need to import request from flask.\nWe\u0026rsquo;re also going to be creating a JSON response so go ahead and import jsonify from flask too.\nWe will also create a response object, so go ahead and import make_response from flask.\napp/app/views.py\nfrom flask import request, jsonify, make_response`  Go ahead and create the following route in your Flask app:\napp/app/views.py\n@app.route(\u0026quot;/guestbook/create-entry\u0026quot;, methods=[\u0026quot;POST\u0026quot;]) def create_entry(): req = request.get_json() print(req) res = make_response(jsonify({\u0026quot;message\u0026quot;: \u0026quot;OK\u0026quot;}), 200) return res  For now, we\u0026rsquo;ll just use the print() function to print our request data to the terminal and return a simple JSON response.\nFetch setup Let\u0026rsquo;s go back to guestbook.html and work on the submit_message() function to post some data to our app.\nOur fetch function is initially going to look like this:\nfetch(${window.origin}/guestbook/create-entry, { method: \u0026quot;POST\u0026quot;, credentials: \u0026quot;include\u0026quot;, body: JSON.stringify(entry), cache: \u0026quot;no-cache\u0026quot;, headers: new Headers({ \u0026quot;content-type\u0026quot;: \u0026quot;application/json\u0026quot; }) }) .then(function(response) { if (response.status !== 200) { console.log(`Looks like there was a problem. Status code: ${response.status}`); return; } response.json().then(function(data) { console.log(data); }); }) .catch(function(error) { console.log(\u0026quot;Fetch error: \u0026quot; + error); });  Let\u0026rsquo;s take a look at our JavaScript so far and take a quick look at what we\u0026rsquo;re doing:\n{% block script %} \u0026lt;script\u0026gt; function submit_message() { var name = document.getElementById(\u0026quot;name\u0026quot;); var message = document.getElementById(\u0026quot;message\u0026quot;); var entry = { name: name.value, message: message.value }; fetch(`${window.origin}/guestbook/create-entry`, { method: \u0026quot;POST\u0026quot;, credentials: \u0026quot;include\u0026quot;, body: JSON.stringify(entry), cache: \u0026quot;no-cache\u0026quot;, headers: new Headers({ \u0026quot;content-type\u0026quot;: \u0026quot;application/json\u0026quot; }) }) .then(function (response) { if (response.status !== 200) { console.log(`Looks like there was a problem. Status code: ${response.status}`); return; } response.json().then(function (data) { console.log(data); }); }) .catch(function (error) { console.log(\u0026quot;Fetch error: \u0026quot; + error); }); } \u0026lt;/script\u0026gt; {% endblock %}  Fetch explained fetch() takes 2 arguments, a URL or input and a set of options or init as descibed in the fetch documentation.\nWe\u0026rsquo;ve provided the URL to our Flask JSON handler using ${window.origin} followed by our URL, along with an init object containing several keys and values to setup the type of request we want to make. In our case:\n method: \u0026quot;POST\u0026quot; As we\u0026rsquo;re posting data to the server credentials: \u0026quot;include\u0026quot; To send any cookies from the current domain/client to the server body: JSON.stringify(entry) Converts our JSON object into a string cache: \u0026quot;no-cache\u0026quot; We\u0026rsquo;re not interested in any cached data headers: new Headers({\u0026quot;content-type\u0026quot;: \u0026quot;application/json\u0026quot;}) Adds a header to tell the server we\u0026rsquo;re sending JSON  You\u0026rsquo;ll then see we\u0026rsquo;ve got .then() chained to our fetch() request which does some error handling for us, depending on what status code the server responds with. We\u0026rsquo;re going to leave that as is for now.\nresponse.json() parses returned JSON from a string to a JSON object which we can access with the data variable passed into the callback function chained to it using .then()! 😅\nThe final block is a .catch() containing a callback function to catch and handle any errors with our fetch request.\n Tip - The more you use fetch the more it starts to make sense!\n Let\u0026rsquo;s post some data to our route.\nPosting with Fetch Save the file, reload the browser, fill out the name and message fields and submit the form. You should see a dictionary printed in your terminal along with a JSON response printed to the browser console.\nLet\u0026rsquo;s refactor the code in our view to return the same object send to us from the client:\napp/app/views.py\n@app.route(\u0026quot;/guestbook/create-entry\u0026quot;, methods=[\u0026quot;POST\u0026quot;]) def create_entry(): req = request.get_json() print(req) res = make_response(jsonify(req), 200) return res  All we do it pass the req variable to jsonify(), which will serialize the Python dictionary into a JSON string.\nIf you now fill out the form and send another request to the app, you\u0026rsquo;ll see down in the developer tools console our route is now just bouncing back what was sent to it!\nTakeaways The main takeaway from this episode is that asynchronously sending and receiving data betwen the client and the server is relitively simple using the Fetch API.\nIn the next part of this series, we\u0026rsquo;ll complete our guestbook app where you\u0026rsquo;ll see more of the Fetch API in action! We\u0026rsquo;ll be saving entries and reloading new entries in the background without having to reload the page.\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':44,'href':'/library/tutorials/docs/front-end/bootstrap/basic-bootstap/','title':"Bootstrap 4 แบบพื้นฐาน",'content':" สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน "});index.add({'id':45,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-11/','title':"Ep.11 Query strings in Flask",'content':" Query strings in Flask | Learning Flask Ep. 11 Creating, serializing and working with query string data in Flask\nIn this part of the \u0026ldquo;Learning Flask\u0026rdquo; series, we\u0026rsquo;re going to working with query strings. A query string is part of the URL as a string of parameters and values and are used ubiquitously across the web.\nQuery strings are essentially a string of key/value pairs sent by the client to the server.\nHere\u0026rsquo;s an example of a query string in the URL from a quick Google search for query string:\nhttps://www.google.com/search?q=query+string\nLet\u0026rsquo;s break down the URL:\n https is the protocol www.google.com is the domain /search is the path ?q=query+string is the query string  Anatomy of a query string Focusing on the query string element of the URL, we see the following components:\n ? starts the query string q is the first parameter = separates/assigns a value to the parameter query+string is the value assigned to the q parameter  You\u0026rsquo;ll notice the + substitution between \u0026ldquo;query string\u0026rdquo;. This is because the space charactes is not allowed in a URL so must be replaced with something else.\nSpaces in query strings are replaced with + or %20\nLet\u0026rsquo;s take a look at a slightly more complex query string, again from a Google search for \u0026ldquo;flask\u0026rdquo;:\nhttps://www.google.com/search?q=flask\u0026amp;oq=flask\u0026amp;sourceid=chrome\u0026amp;ie=UTF-8\nIf you take a closer look at the query string, you\u0026rsquo;ll see multiple parameters and values, separated by the \u0026amp; symbol.\nWe use \u0026amp; to separate parameters and values in the query string. Let\u0026rsquo;s create a query string below with a few sets of params \u0026amp; values:\nhttp://127.0.0.1:5000/query?foo=foo\u0026amp;bar=bar\u0026amp;baz=baz\u0026amp;title=query+strings+with+flask\nLet\u0026rsquo;s use this query string in our Flask application and learn how to work with it!\nFlask query strings First up, let\u0026rsquo;s create a new route with the URL /query:\napp/app/views.py\n@app.route(\u0026quot;/query\u0026quot;) def query(): return \u0026quot;No query string received\u0026quot;, 200  If you got to /query in your browser, you\u0026rsquo;ll see No query string received in your window.\nGo ahead and paste the query string we just created above into your browser URL bar and see what happens.\nYou\u0026rsquo;ll notice we don\u0026rsquo;t get any errors, however we\u0026rsquo;re not yet doing anything with our query string. Let\u0026rsquo;s go ahead and serialize it!\nSerializing query strings To work with any kind of request object or data, we need to import request from flask:\napp/app/views.py\nfrom flask import request  Just like we\u0026rsquo;ve used request.form for serializing form data and request.get_json() to serialize incoming JSON data, we use request.args to parse and serialize the query string into a Python object.\nLet\u0026rsquo;s store our query string object as a variable called args and print them:\napp/app/views.py\n@app.route(\u0026quot;/query\u0026quot;) def query(): args = request.args print(args) return \u0026quot;No query string received\u0026quot;, 200  Save and reload that same URL with the query string, you\u0026rsquo;ll see the following in your terminal:\nImmutableMultiDict([('foo', 'foo'), ('bar', 'bar'), ('baz', 'baz'), ('title', 'query strings with flask')])\nrequest.args has parsed our query string and conveniently converted it into an ImmutableMultiDict which we can treat just like a Python dictionary, for example, change print(args) for the following:\napp/app/views.py\nfor k, v in args.items(): print(f\u0026quot;{k}: {v}\u0026quot;)`  You\u0026rsquo;ll see our keys and values printed out to the console:\nfoo: foo bar: bar baz: baz title: query strings with flask`  Just like a dictionary, we can now pluck out values by their key:\n@app.route(\u0026quot;/query\u0026quot;) def query(): args = request.args if \u0026quot;foo\u0026quot; in args: foo = args[\u0026quot;foo\u0026quot;] if \u0026quot;bar\u0026quot; in args: bar = args.get(\u0026quot;bar\u0026quot;) if \u0026quot;baz\u0026quot; in args: baz = args[\u0026quot;baz\u0026quot;] if \u0026quot;title\u0026quot; in request.args: title = request.args.get(\u0026quot;title\u0026quot;) print(foo, bar, baz, title) return \u0026quot;No query string received\u0026quot;, 200  However at this point we\u0026rsquo;ll get an error if we don\u0026rsquo;t send a query string with values for foo, bar, baz and title.\nLet\u0026rsquo;s refactor our code to mitigate any potantial errors and return a formatted query string to the client:\n@app.route(\u0026quot;/query\u0026quot;) def query(): if request.args: # We have our query string nicely serialized as a Python dictionary args = request.args # We'll create a string to display the parameters \u0026amp; values serialized = \u0026quot;, \u0026quot;.join(f\u0026quot;{k}: {v}\u0026quot; for k, v in request.args.items()) # Display the query string to the client in a different format return f\u0026quot;(Query) {serialized}\u0026quot;, 200 else: return \u0026quot;No query string received\u0026quot;, 200  If you re-submit the URL, you\u0026rsquo;ll see:\n(Query) foo: foo, bar: bar, baz: baz, title: query strings with flask\nAnd that pretty much wraps things up for query strings with Flask!\nExtras Although I\u0026rsquo;ve not found much use for them in the past, the request object also provides us with a few more features for working with query strings.\nrequest.query_string will return the query string, for example:\n@app.route(\u0026quot;/query\u0026quot;) def query(): print(request.query_string) return \u0026quot;Thanks\u0026quot;, 200  Will return:\nb'foo=foo\u0026amp;bar=bar\u0026amp;baz=baz\u0026amp;title=query+strings+with+flask'\nrequest.values will return a CombinedMultiDict which comines args with form, for example:\n@app.route(\u0026quot;/query\u0026quot;) def query(): print(request.values) return \u0026quot;Thanks\u0026quot;, 200`  Returns:\nCombinedMultiDict([ImmutableMultiDict([('foo', 'foo'), ('bar', 'bar'), ('baz', 'baz'), ('title', 'query strings with flask')]), ImmutableMultiDict([])])  Not something I\u0026rsquo;ve used in the past but can imagine it would be useful to submit a form with query string parameters in the URL.\nWrapping up Query strings are a convenient way to pass arguments to your application and Flask makes light work of quickly parsing them into something we can work with.\nPOST requests don\u0026rsquo;t typically include a query string as they tend to include data that you want to keep within the request body, so you\u0026rsquo;ll mostly be using them with GET requests.\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':46,'href':'/library/tutorials/docs/front-end/javascript/','title':"JavaScript",'content':" JavaScript Learning Python: From Zero to Hero First of all, what is Python? According to its creator, Guido van Rossum, Python is a:\n “high-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.”\n For me, the first reason to learn Python was that it is, in fact, a beautiful programming language. It was really natural to code in it and express my thoughts.\nAnother reason was that we can use coding in Python in multiple ways: data science, web development, and machine learning all shine here. Quora, Pinterest and Spotify all use Python for their backend web development. So let’s learn a bit about it.\nThe Basics 1. Variables You can think about variables as words that store a value. Simple as that.\nIn Python, it is really easy to define a variable and set a value to it. Imagine you want to store number 1 in a variable called “one.” Let’s do it:\none = 1  How simple was that? You just assigned the value 1 to the variable “one.”\ntwo = 2 some_number = 10000  And you can assign any other value to whatever other variables you want. As you see in the table above, the variable “two” stores the integer 2, and “some_number” stores 10,000.\nBesides integers, we can also use booleans (True / False), strings, float, and so many other data types.\n# booleans true_boolean = True false_boolean = False # string my_name = \u0026quot;Leandro Tk\u0026quot; # float book_price = 15.80  2. Control Flow: conditional statements “If” uses an expression to evaluate whether a statement is True or False. If it is True, it executes what is inside the “if” statement. For example:\nif True: print(\u0026quot;Hello Python If\u0026quot;) if 2 \u0026gt; 1: print(\u0026quot;2 is greater than 1\u0026quot;)  2 is greater than 1, so the “print” code is executed.\nThe “else” statement will be executed if the “if” expression is false.\nif 1 \u0026gt; 2: print(\u0026quot;1 is greater than 2\u0026quot;) else: print(\u0026quot;1 is not greater than 2\u0026quot;)  1 is not greater than 2, so the code inside the “else” statement will be executed.\nYou can also use an “elif” statement:\nif 1 \u0026gt; 2: print(\u0026quot;1 is greater than 2\u0026quot;) elif 2 \u0026gt; 1: print(\u0026quot;1 is not greater than 2\u0026quot;) else: print(\u0026quot;1 is equal to 2\u0026quot;)  3. Looping / Iterator In Python, we can iterate in different forms. I’ll talk about two: while and for.\nWhile Looping: while the statement is True, the code inside the block will be executed. So, this code will print the number from 1 to 10.\nnum = 1 while num \u0026lt;= 10: print(num) num += 1  The while loop needs a “loop condition.” If it stays True, it continues iterating. In this example, when num is 11 the loop condition equals False.\nAnother basic bit of code to better understand it:\nloop_condition = True while loop_condition: print(\u0026quot;Loop Condition keeps: %s\u0026quot; %(loop_condition)) loop_condition = False  The loop condition is True so it keeps iterating — until we set it to False.\nFor Looping: you apply the variable “num” to the block, and the “for” statement will iterate it for you. This code will print the same as while code: from 1 to 10.\nfor i in range(1, 11): print(i)  See? It is so simple. The range starts with 1 and goes until the 11th element (10 is the 10th element).\nList: Collection | Array | Data Structure Imagine you want to store the integer 1 in a variable. But maybe now you want to store 2. And 3, 4, 5 …\nDo I have another way to store all the integers that I want, but not in millions of variables? You guessed it — there is indeed another way to store them.\nList is a collection that can be used to store a list of values (like these integers that you want). So let’s use it:\nmy_integers = [1, 2, 3, 4, 5]  It is really simple. We created an array and stored it on my_integer.\nBut maybe you are asking: “How can I get a value from this array?”\nGreat question. List has a concept called index. The first element gets the index 0 (zero). The second gets 1, and so on. You get the idea.\nTo make it clearer, we can represent the array and each element with its index. I can draw it:\nUsing the Python syntax, it’s also simple to understand:\nmy_integers = [5, 7, 1, 3, 4] print(my_integers[0]) # 5 print(my_integers[1]) # 7 print(my_integers[4]) # 4  Imagine that you don’t want to store integers. You just want to store strings, like a list of your relatives’ names. Mine would look something like this:\nrelatives_names = [ \u0026quot;Toshiaki\u0026quot;, \u0026quot;Juliana\u0026quot;, \u0026quot;Yuji\u0026quot;, \u0026quot;Bruno\u0026quot;, \u0026quot;Kaio\u0026quot; ] print(relatives_names[4]) # Kaio  It works the same way as integers. Nice.\nWe just learned how Lists indices work. But I still need to show you how we can add an element to the List data structure (an item to a list).\nThe most common method to add a new value to a List is append. Let’s see how it works:\nbookshelf = [] bookshelf.append(\u0026quot;The Effective Engineer\u0026quot;) bookshelf.append(\u0026quot;The 4 Hour Work Week\u0026quot;) print(bookshelf[0]) # The Effective Engineer print(bookshelf[1]) # The 4 Hour Work Week  append is super simple. You just need to apply the element (eg. “The Effective Engineer”) as the append parameter.\nWell, enough about Lists. Let’s talk about another data structure.\nDictionary: Key-Value Data Structure Now we know that Lists are indexed with integer numbers. But what if we don’t want to use integer numbers as indices? Some data structures that we can use are numeric, string, or other types of indices.\nLet’s learn about the Dictionary data structure. Dictionary is a collection of key-value pairs. Here’s what it looks like:\ndictionary_example = { \u0026quot;key1\u0026quot;: \u0026quot;value1\u0026quot;, \u0026quot;key2\u0026quot;: \u0026quot;value2\u0026quot;, \u0026quot;key3\u0026quot;: \u0026quot;value3\u0026quot; }  The key is the index pointing to the value. How do we access the Dictionary value? You guessed it — using the key. Let’s try it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot; } print(\u0026quot;My name is %s\u0026quot; %(dictionary_tk[\u0026quot;name\u0026quot;])) # My name is Leandro print(\u0026quot;But you can call me %s\u0026quot; %(dictionary_tk[\u0026quot;nickname\u0026quot;])) # But you can call me Tk print(\u0026quot;And by the way I'm %s\u0026quot; %(dictionary_tk[\u0026quot;nationality\u0026quot;])) # And by the way I'm Brazilian  I created a Dictionary about me. My name, nickname, and nationality. Those attributes are the Dictionary keys.\nAs we learned how to access the List using index, we also use indices (keys in the Dictionary context) to access the value stored in the Dictionary.\nIn the example, I printed a phrase about me using all the values stored in the Dictionary. Pretty simple, right?\nAnother cool thing about Dictionary is that we can use anything as the value. In the Dictionary I created, I want to add the key “age” and my real integer age in it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot;, \u0026quot;age\u0026quot;: 24 } print(\u0026quot;My name is %s\u0026quot; %(dictionary_tk[\u0026quot;name\u0026quot;])) # My name is Leandro print(\u0026quot;But you can call me %s\u0026quot; %(dictionary_tk[\u0026quot;nickname\u0026quot;])) # But you can call me Tk print(\u0026quot;And by the way I'm %i and %s\u0026quot; %(dictionary_tk[\u0026quot;age\u0026quot;], dictionary_tk[\u0026quot;nationality\u0026quot;])) # And by the way I'm Brazilian  Here we have a key (age) value (24) pair using string as the key and integer as the value.\nAs we did with Lists, let’s learn how to add elements to a Dictionary. The key pointing to a value is a big part of what Dictionary is. This is also true when we are talking about adding elements to it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot; } dictionary_tk['age'] = 24 print(dictionary_tk) # {'nationality': 'Brazilian', 'age': 24, 'nickname': 'Tk', 'name': 'Leandro'}  We just need to assign a value to a Dictionary key. Nothing complicated here, right?\nIteration: Looping Through Data Structures As we learned in the Python Basics, the List iteration is very simple. We Python developers commonly use For looping. Let’s do it:\nbookshelf = [ \u0026quot;The Effective Engineer\u0026quot;, \u0026quot;The 4-hour Workweek\u0026quot;, \u0026quot;Zero to One\u0026quot;, \u0026quot;Lean Startup\u0026quot;, \u0026quot;Hooked\u0026quot; ] for book in bookshelf: print(book)  So for each book in the bookshelf, we (can do everything with it) print it. Pretty simple and intuitive. That’s Python.\nFor a hash data structure, we can also use the for loop, but we apply the key :\ndictionary = { \u0026quot;some_key\u0026quot;: \u0026quot;some_value\u0026quot; } for key in dictionary: print(\u0026quot;%s --\u0026gt; %s\u0026quot; %(key, dictionary[key])) # some_key --\u0026gt; some_value  This is an example how to use it. For each key in the dictionary , we print the key and its corresponding value.\nAnother way to do it is to use the iteritems method.\ndictionary = { \u0026quot;some_key\u0026quot;: \u0026quot;some_value\u0026quot; } for key, value in dictionary.items(): print(\u0026quot;%s --\u0026gt; %s\u0026quot; %(key, value)) # some_key --\u0026gt; some_value  We did name the two parameters as key and value, but it is not necessary. We can name them anything. Let’s see it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot;, \u0026quot;age\u0026quot;: 24 } for attribute, value in dictionary_tk.items(): print(\u0026quot;My %s is %s\u0026quot; %(attribute, value)) # My name is Leandro # My nickname is Tk # My nationality is Brazilian # My age is 24  We can see we used attribute as a parameter for the Dictionary key, and it works properly. Great!\nClasses \u0026amp; Objects A little bit of theory: Objects are a representation of real world objects like cars, dogs, or bikes. The objects share two main characteristics: data and behavior.\nCars have data, like number of wheels, number of doors, and seating capacity They also exhibit behavior: they can accelerate, stop, show how much fuel is left, and so many other things.\nWe identify data as attributes and behavior as methods in object-oriented programming. Again:\nData → Attributes and Behavior → Methods\nAnd a Class is the blueprint from which individual objects are created. In the real world, we often find many objects with the same type. Like cars. All the same make and model (and all have an engine, wheels, doors, and so on). Each car was built from the same set of blueprints and has the same components.\nPython Object-Oriented Programming mode: ON Python, as an Object-Oriented programming language, has these concepts: class and object.\nA class is a blueprint, a model for its objects.\nSo again, a class it is just a model, or a way to define attributes and behavior (as we talked about in the theory section). As an example, a vehicle class has its own attributes that define what objects are vehicles. The number of wheels, type of tank, seating capacity, and maximum velocity are all attributes of a vehicle.\nWith this in mind, let’s look at Python syntax for classes:\nclass Vehicle: pass  We define classes with a class statement — and that’s it. Easy, isn’t it?\nObjects are instances of a class. We create an instance by naming the class.\ncar = Vehicle() print(car) # \u0026lt;__main__.Vehicle instance at 0x7fb1de6c2638\u0026gt;  Here car is an object (or instance) of the class Vehicle.\nRemember that our vehicle class has four attributes: number of wheels, type of tank, seating capacity, and maximum velocity. We set all these attributes when creating a vehicle object. So here, we define our class to receive data when it initiates it:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity  We use the init method. We call it a constructor method. So when we create the vehicle object, we can define these attributes. Imagine that we love the Tesla Model S, and we want to create this kind of object. It has four wheels, runs on electric energy, has space for five seats, and the maximum velocity is 250km/hour (155 mph). Let’s create this object:\ntesla_model_s = Vehicle(4, 'electric', 5, 250)  Four wheels + electric “tank type” + five seats + 250km/hour maximum speed.\nAll attributes are set. But how can we access these attributes’ values? We send a message to the object asking about them. We call it a method. It’s the object’s behavior. Let’s implement it:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity def number_of_wheels(self): return self.number_of_wheels def set_number_of_wheels(self, number): self.number_of_wheels = number  This is an implementation of two methods: number_of_wheels and set_number_of_wheels. We call it getter \u0026amp; setter. Because the first gets the attribute value, and the second sets a new value for the attribute.\nIn Python, we can do that using @property (decorators) to define getters and setters. Let’s see it with code:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity @property def number_of_wheels(self): return self.__number_of_wheels @number_of_wheels.setter def number_of_wheels(self, number): self.__number_of_wheels = number  And we can use these methods as attributes:\ntesla_model_s = Vehicle(4, 'electric', 5, 250) print(tesla_model_s.number_of_wheels) # 4 tesla_model_s.number_of_wheels = 2 # setting number of wheels to 2 print(tesla_model_s.number_of_wheels) # 2  This is slightly different than defining methods. The methods work as attributes. For example, when we set the new number of wheels, we don’t apply two as a parameter, but set the value 2 to number_of_wheels. This is one way to write pythonic getter and setter code.\nBut we can also use methods for other things, like the “make_noise” method. Let’s see it:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity def make_noise(self): print('VRUUUUUUUM')  When we call this method, it just returns a string _“_VRRRRUUUUM.”\ntesla_model_s = Vehicle(4, 'electric', 5, 250) tesla_model_s.make_noise() # VRUUUUUUUM  Encapsulation: Hiding Information Encapsulation is a mechanism that restricts direct access to objects’ data and methods. But at the same time, it facilitates operation on that data (objects’ methods).\n “Encapsulation can be used to hide data members and members function. Under this definition, encapsulation means that the internal representation of an object is generally hidden from view outside of the object’s definition.” — Wikipedia\n All internal representation of an object is hidden from the outside. Only the object can interact with its internal data.\nFirst, we need to understand how public and non-public instance variables and methods work.\nPublic Instance Variables For a Python class, we can initialize a public instance variable within our constructor method. Let’s see this:\nWithin the constructor method:\nclass Person: def __init__(self, first_name): self.first_name = first_name  Here we apply the first_name value as an argument to the public instance variable.\ntk = Person('TK') print(tk.first_name) # =\u0026gt; TK  Within the class:\nclass Person: first_name = 'TK'  Here, we do not need to apply the first_name as an argument, and all instance objects will have a class attribute initialized with TK.\ntk = Person() print(tk.first_name) # =\u0026gt; TK  Cool. We have now learned that we can use public instance variables and class attributes. Another interesting thing about the public part is that we can manage the variable value. What do I mean by that? Our object can manage its variable value: Get and Set variable values.\nKeeping the Person class in mind, we want to set another value to its first_name variable:\ntk = Person('TK') tk.first_name = 'Kaio' print(tk.first_name) # =\u0026gt; Kaio  There we go. We just set another value (kaio) to the first_name instance variable and it updated the value. Simple as that. Since it’s a public variable, we can do that.\nNon-public Instance Variable  We don’t use the term “private” here, since no attribute is really private in Python (without a generally unnecessary amount of work). — PEP 8\n As the public instance variable , we can define the non-public instance variable both within the constructor method or within the class. The syntax difference is: for non-public instance variables , use an underscore (_) before the variable name.\n “‘Private’ instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member)” — Python Software Foundation\n Here’s an example:\nclass Person: def __init__(self, first_name, email): self.first_name = first_name self._email = email  Did you see the email variable? This is how we define a non-public variable :\ntk = Person('TK', 'tk@mail.com') print(tk._email) # tk@mail.com   We can access and update it. Non-public variables are just a convention and should be treated as a non-public part of the API.\n So we use a method that allows us to do it inside our class definition. Let’s implement two methods (email and update_email) to understand it:\nclass Person: def __init__(self, first_name, email): self.first_name = first_name self._email = email def update_email(self, new_email): self._email = new_email def email(self): return self._email  Now we can update and access non-public variables using those methods. Let’s see:\ntk = Person('TK', 'tk@mail.com') print(tk.email()) # =\u0026gt; tk@mail.com # tk._email = 'new_tk@mail.com' -- treat as a non-public part of the class API print(tk.email()) # =\u0026gt; tk@mail.com tk.update_email('new_tk@mail.com') print(tk.email()) # =\u0026gt; new_tk@mail.com   We initiated a new object with first_name TK and email tk@mail.com Printed the email by accessing the non-public variable with a method Tried to set a new email out of our class We need to treat non-public variable as non-public part of the API Updated the non-public variable with our instance method Success! We can update it inside our class with the helper method  Public Method With public methods, we can also use them out of our class:\nclass Person: def __init__(self, first_name, age): self.first_name = first_name self._age = age def show_age(self): return self._age  Let’s test it:\ntk = Person('TK', 25) print(tk.show_age()) # =\u0026gt; 25  Great — we can use it without any problem.\nNon-public Method But with non-public methods we aren’t able to do it. Let’s implement the same Person class, but now with a show_age non-public method using an underscore (_).\nclass Person: def __init__(self, first_name, age): self.first_name = first_name self._age = age def _show_age(self): return self._age  And now, we’ll try to call this non-public method with our object:\ntk = Person('TK', 25) print(tk._show_age()) # =\u0026gt; 25   We can access and update it. Non-public methods are just a convention and should be treated as a non-public part of the API.\n Here’s an example for how we can use it:\nclass Person: def __init__(self, first_name, age): self.first_name = first_name self._age = age def show_age(self): return self._get_age() def _get_age(self): return self._age tk = Person('TK', 25) print(tk.show_age()) # =\u0026gt; 25  Here we have a _get_age non-public method and a show_age public method. The show_age can be used by our object (out of our class) and the _get_age only used inside our class definition (inside show_age method). But again: as a matter of convention.\nEncapsulation Summary With encapsulation we can ensure that the internal representation of the object is hidden from the outside.\nInheritance: behaviors and characteristics Certain objects have some things in common: their behavior and characteristics.\nFor example, I inherited some characteristics and behaviors from my father. I inherited his eyes and hair as characteristics, and his impatience and introversion as behaviors.\nIn object-oriented programming, classes can inherit common characteristics (data) and behavior (methods) from another class.\nLet’s see another example and implement it in Python.\nImagine a car. Number of wheels, seating capacity and maximum velocity are all attributes of a car. We can say that an ElectricCar class inherits these same attributes from the regular Car class.\nclass Car: def __init__(self, number_of_wheels, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity  Our Car class implemented:\nmy_car = Car(4, 5, 250) print(my_car.number_of_wheels) print(my_car.seating_capacity) print(my_car.maximum_velocity)  Once initiated, we can use all instance variables created. Nice.\nIn Python, we apply a parent class to the child class as a parameter. An ElectricCar class can inherit from our Car class.\nclass ElectricCar(Car): def __init__(self, number_of_wheels, seating_capacity, maximum_velocity): Car.__init__(self, number_of_wheels, seating_capacity, maximum_velocity)  Simple as that. We don’t need to implement any other method, because this class already has it (inherited from Car class). Let’s prove it:\nmy_electric_car = ElectricCar(4, 5, 250) print(my_electric_car.number_of_wheels) # =\u0026gt; 4 print(my_electric_car.seating_capacity) # =\u0026gt; 5 print(my_electric_car.maximum_velocity) # =\u0026gt; 250  Beautiful.\nThat’s it! We learned a lot of things about Python basics:\n How Python variables work How Python conditional statements work How Python looping (while \u0026amp; for) works How to use Lists: Collection | Array Dictionary Key-Value Collection How we can iterate through these data structures Objects and Classes Attributes as objects’ data Methods as objects’ behavior Using Python getters and setters \u0026amp; property decorator Encapsulation: hiding information Inheritance: behaviors and characteristics  Ref : FreeCodeCamp\n"});index.add({'id':47,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-12/','title':"Ep.12 Flask configuration files",'content':" Flask configuration files | Learning Flask Ep. 12 Configuring Flask applications using a config file and classes\nConfiguration is an important part of any appliction and Flask provides several different methods for us to configure our app.\nIn this part of the \u0026ldquo;Learning Flask\u0026rdquo; series, we\u0026rsquo;re going to cover our preferred app configuration method, using a config file with classes.\nLet\u0026rsquo;s get started.\nConfig basics Every Flask application has a global config object which can be accessed via app.config.\nFlask\u0026rsquo;s config object allows us to assign values to configuration variables, which we\u0026rsquo;ll then have access to throughout our application.\nThe global config object can be treated just like a Python dictionary, which we can access and modify.\nThe best way to visually see the config object it to simply print it in one of your routes. Go ahead and add the following to any route:\nprint(app.config)\nYou\u0026rsquo;ll see:\n{'APPLICATION_ROOT': '/', 'DEBUG': True, 'ENV': 'development', 'EXPLAIN_TEMPLATE_LOADING': False, 'JSONIFY_MIMETYPE': 'application/json', 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'MAX_CONTENT_LENGTH': None, 'MAX_COOKIE_SIZE': 4093, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(days=31), 'PREFERRED_URL_SCHEME': 'http', 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'PROPAGATE_EXCEPTIONS': None, 'SECRET_KEY': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(seconds=43200), 'SERVER_NAME': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'TEMPLATES_AUTO_RELOAD': None, 'TESTING': False, 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'USE_X_SENDFILE': False}  These are the default built-in configuration variables, which we can modify and change.\nTo modify any of these variables, we can just assign a new value to the key:\napp.config[\u0026quot;KEY\u0026quot;] = \u0026quot;value\nFor example, let\u0026rsquo;s update the configuration SECRET_KEY variable with the following:\napp.config[\u0026quot;SECRET_KEY\u0026quot;] = \u0026quot;iuhto743yto34iuho287gh78\u0026quot; print(app.config[\u0026quot;SECRET_KEY\u0026quot;])\nYou\u0026rsquo;ll see the following in your terminal:\niuhto743yto34iuho287gh78\nThe SECRET_KEY value will now be permanently modified with the new value.\nThis method of updating config values works well for small applications which don\u0026rsquo;t require many configuration variables.\nHowever it\u0026rsquo;s not very practical when you need to work across multiple environments and set several unique config values which you\u0026rsquo;ll need to access all across your app. Thankfully there\u0026rsquo;s a better way.\nApp Configuration file Flask allows us to create a configuration file, where we can place all of our config values, overwrite the default values and alse create our own.\nThere are a few option for this, however we\u0026rsquo;re just going to cover our preferred method of creating a Python file and creating a Config class.\nGo ahead and create a new file called config.py and place it in the same directory as your application entry point (Where you call app.run())\nHere\u0026rsquo;s the barebones of the config.py file:\nconfig.py\nclass Config(object): DEBUG = False TESTING = False class ProductionConfig(Config): pass class DevelopmentConfig(Config): DEBUG = True class TestingConfig(Config): TESTING = True  We first create the Config class and set some default attributes. In this case, we\u0026rsquo;ve set DEBUG and TESTING to False.\nWe then create 3 more classes, each of which inherits the Config class and attributes.\n ProductionConfig - Is the config class we\u0026rsquo;ll use for running in production DevelopmentConfig - Is the config class we\u0026rsquo;ll use for development TestingConfig - Is the class we\u0026rsquo;ll use for testing  By the nature of class inheritance, all of our 3 subclasses have access to the Config class attributes and can be overwritten in any of the subclasses.\nLet\u0026rsquo;s populate our config file with some attributes:\nclass Config(object): DEBUG = False TESTING = False SECRET_KEY = \u0026quot;B\\xb2?.\\xdf\\x9f\\xa7m\\xf8\\x8a%,\\xf7\\xc4\\xfa\\x91\u0026quot; DB_NAME = \u0026quot;production-db\u0026quot; DB_USERNAME = \u0026quot;admin\u0026quot; DB_PASSWORD = \u0026quot;example\u0026quot; IMAGE_UPLOADS = \u0026quot;/home/username/app/app/static/images/uploads\u0026quot; SESSION_COOKIE_SECURE = True class ProductionConfig(Config): pass class DevelopmentConfig(Config): DEBUG = True DB_NAME = \u0026quot;development-db\u0026quot; DB_USERNAME = \u0026quot;admin\u0026quot; DB_PASSWORD = \u0026quot;example\u0026quot; IMAGE_UPLOADS = \u0026quot;/home/username/projects/my_app/app/static/images/uploads\u0026quot; SESSION_COOKIE_SECURE = False class TestingConfig(Config): TESTING = True DB_NAME = \u0026quot;development-db\u0026quot; DB_USERNAME = \u0026quot;admin\u0026quot; DB_PASSWORD = \u0026quot;example\u0026quot; SESSION_COOKIE_SECURE = False  We\u0026rsquo;ve assigned new values to some of the built-in config variables and created some of our own.\nProduction level attributes have been placed in the parent Config class which will be inherited by the ProductionConfig class, hence the pass.\nNow that we\u0026rsquo;ve created our config file, we\u0026rsquo;ll need to instruct Flask to load it.\nLoading a config file Loading a config file is a simple one liner and should be placed as close to wherever you\u0026rsquo;ve created your app object.\nIt\u0026rsquo;s best practice to load the config as soon as possible, just after your app object is created so any other extension has access to your configuration variables.\nWe load a config file with the from_object() method, for example:\napp.config.from_object(\u0026quot;config_filename.ConfigClass\u0026quot;)\nFor example, if we want to load the DevelopmentConfig class, we would do the following:\napp.config.from_object(\u0026quot;config.DevelopmentConfig\u0026quot;)  For ProductionConfig:\napp.config.from_object(\u0026quot;config.ProductionConfig\u0026quot;)  In our case, we\u0026rsquo;ve placed this line in our __init__.py file, just underneath creating our app object:\napp = Flask(__name__) app.config.from_object(\u0026quot;config.DevelopmentConfig\u0026quot;)  The config has now been registered on the app and is now accessible from any part of your application.\nFor example, you may want to connect to a local database using the DevelopmentConfig settings in a different part or file in your app:\nconnect( name=app.config[\u0026quot;DB_NAME\u0026quot;], username=app.config[\u0026quot;DB_USERNAME\u0026quot;], password=app.config[\u0026quot;DB_PASSWORD\u0026quot;] )  Flask ENV The ENV built-in configuration variable is extremely important and should always be set outside of your application, which we set with FLASK_ENV from the terminal.\nIf you\u0026rsquo;ve been following this series, you\u0026rsquo;ll know that we set this as an environment variable in the terminal before running the flask run command.\nBy default, ENV is set to production which disables DEBUG mode and avoids displaying the interactive debugger to the world, meaning if you just ran your application without explicitly setting FLASK_ENV, it would run in production mode.\nSetting FLASK_ENV=development enables the debugger, which should never, ever be done in production!\nI\u0026rsquo;ve found a nice pattern is to load a config based on the ENV environment variable. We can do so with the following:\napp = Flask(__name__) if app.config[\u0026quot;ENV\u0026quot;] == \u0026quot;production\u0026quot;: app.config.from_object(\u0026quot;config.ProductionConfig\u0026quot;) else: app.config.from_object(\u0026quot;config.DevelopmentConfig\u0026quot;)  This pattern allows us to leave our code alone and control the config environment outside the application by setting the FLASK_ENV environment variable in the terminal.\nTo illustrate this, we\u0026rsquo;ll change our FLASK_ENV and print it after loading the config:\nif app.config[\u0026quot;ENV\u0026quot;] == \u0026quot;production\u0026quot;: app.config.from_object(\u0026quot;config.ProductionConfig\u0026quot;) else: app.config.from_object(\u0026quot;config.DevelopmentConfig\u0026quot;) print(f'ENV is set to: {app.config[\u0026quot;ENV\u0026quot;]}')  In the terminal, run the following to set FLASK_ENV to development\nexport FLASK_ENV=development\nRun flask run and watch your terminal, you\u0026rsquo;ll see:\n$ flask run * Serving Flask app \u0026quot;run.py\u0026quot; (lazy loading) * Environment: development * Debug mode: on ENV is set to: development  Now repeat the process, changing FLASK_ENV to production:\nexport FLASK_ENV=production\nRun flask run again and you\u0026rsquo;ll see:\n$ flask run * Serving Flask app \u0026quot;run.py\u0026quot; * Environment: production WARNING: Do not use the development server in a production environment. Use a production WSGI server instead. * Debug mode: off ENV is set to: production  Flask gives us a big red warning when the environment is set to production, just to drill home the importance of not running the development server in a production environment.\nAlternative config methods Flask is a very flexible framework and provides many ways to configure our application.\nTake a look at the Flask configuration documentation for some alternative options and feel free to experiment with some alternative methods!\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':48,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-13/','title':"Ep.13 Uploading files with Flask",'content':" Uploading files with Flask | Learning Flask Ep. 13 Posting, checking and validating file uploads with Flask\nUploading files to the server is often a requirement of a website or web application. Thankfully, Flask makes this relitively simple for us with a few useful functions.\nWe\u0026rsquo;re using Bootstrap 4 CSS in this example but feel free to use any other CSS library, use your own or skip the styling completely.\nLet\u0026rsquo;s get started.\nCreate a new route We\u0026rsquo;ll start by creating a new route which we\u0026rsquo;ll use to render a template containing a form, which users can use to upload an image.\n Tip - You\u0026rsquo;ll need to import render_template from flask if you haven\u0026rsquo;t already\n We\u0026rsquo;ll give the route the URL of /upload-image:\napp/app/views.py\n@app.route(\u0026quot;/upload-image\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def upload_image(): return render_template(\u0026quot;public/upload_image.html\u0026quot;)  We\u0026rsquo;ll be making a POST request to the server, so we\u0026rsquo;ve added methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;] to the route.\nUpload form Now we need to create our HTML template. We\u0026rsquo;ll call it upload_image.html and place it in the templates/public directory.\nGo ahead and add the following:\napp/app/templates/public/upload_image.html\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Upload{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Upload an image\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;form action=\u0026quot;/upload-image\u0026quot; method=\u0026quot;POST\u0026quot; enctype=\u0026quot;multipart/form-data\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Select image\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026quot;custom-file\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;file\u0026quot; class=\u0026quot;custom-file-input\u0026quot; name=\u0026quot;image\u0026quot; id=\u0026quot;image\u0026quot;\u0026gt; \u0026lt;label class=\u0026quot;custom-file-label\u0026quot; for=\u0026quot;image\u0026quot;\u0026gt;Select image...\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;Upload\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}  We\u0026rsquo;ve created a new child template containing a form with a single input, a file browser.\n Tip - When uploading images via a form with Flask, you must add the enctype attribute to the form with the value multipart/form-data\n Now that we have our form and file browser, we can move on to handling the upload in our route.\nAccessing files in a route To access a file being posted by a fowm, we use request.files provided by the request object. We need to import request from flask. We\u0026rsquo;ll also go ahead and import redirect too. from flask import request, redirect Go ahead and refactor the /upload-image route to the following:\napp/app/views.py\n@app.route(\u0026quot;/upload-image\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def upload_image(): if request.method == \u0026quot;POST\u0026quot;: if request.files: image = request.files[\u0026quot;image\u0026quot;] print(image) return redirect(request.url) return render_template(\u0026quot;public/upload_image.html\u0026quot;)   We\u0026rsquo;re veryfying the request method is POST with if request.method == \u0026quot;POST\u0026quot;: We then veryfy if the request contains files with if request.files: We then store the file as a variable called image using image = request.files[\u0026quot;image\u0026quot;]  Using request.files[\u0026quot;image\u0026quot;], we\u0026rsquo;re able to access the file from the form with the attribute name=\u0026quot;image\u0026quot;\nAdding another file input is as simple as creating another file input field in the HTML form and providing a different value in the name attribute.\nFor example, creating another file input with the attribute name=\u0026quot;image_2\u0026quot; could then be accessed in Flask with request.files[\u0026quot;image_2\u0026quot;]\nPrinting the image variable you\u0026rsquo;ll see:\n\u0026lt;FileStorage: 'example.png' ('image/png')\u0026gt;\nYou\u0026rsquo;ll notice the FileStorage class, followed by the filename and the type of file.\nFileStroage is a wrapper class around incoming files provided by Werkzeug, Flask\u0026rsquo;s underlying HTTP library which handles incoming request data.\nFlask stores incoming file uploads in the webservers memory (If the files are small), otherwise it will store them in a temporary location.\nSaving files We\u0026rsquo;ll start with the quickest and easiest way to save a file.\nYou\u0026rsquo;ll need the os library. Go ahead and import it:\napp/app/views.py\nimport os\nWe should specify a directory to save our uploaded images which we\u0026rsquo;ll add to our app.config object. You don\u0026rsquo;t have to do this but it\u0026rsquo;s best practice.\nEither create a variable in your config file with IMAGE_UPLOADS = /path/to/uploads/folder or asssign it directly to app.config[\u0026quot;IMAGE_UPLOADS\u0026quot;].\n TIp - You should provide a complete path, making sure any directories in the path exist\n In this example, we\u0026rsquo;re going to assign the IMAGE_UPLOADS config attribute in our app but I\u0026rsquo;d recommend you create it in your app config file.\napp/app/views.py\napp.config[\u0026quot;IMAGE_UPLOADS\u0026quot;] = \u0026quot;/mnt/c/wsl/projects/pythonise/tutorials/flask_series/app/app/static/img/uploads\u0026quot;`  As you can see, we have a long but complete path!\nTo save the file, we simply call image.save() and join the path to the uploads folder with the filename using os.join():\napp/app/views.py\nimage.save(os.path.join(app.config[\u0026quot;IMAGE_UPLOADS\u0026quot;], image))  Our route now looks like this:\napp/app/views.py\nfrom flask import request, redirect import os app.config[\u0026quot;IMAGE_UPLOADS\u0026quot;] = \u0026quot;/mnt/c/wsl/projects/pythonise/tutorials/flask_series/app/app/static/img/uploads\u0026quot; @app.route(\u0026quot;/upload-image\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def upload_image(): if request.method == \u0026quot;POST\u0026quot;: if request.files: image = request.files[\u0026quot;image\u0026quot;] image.save(os.path.join(app.config[\u0026quot;IMAGE_UPLOADS\u0026quot;], image.filename)) print(\u0026quot;Image saved\u0026quot;) return redirect(request.url) return render_template(\u0026quot;public/upload_image.html\u0026quot;)  We use image.filename to access the filename of the image and join that with the path to the uploads folder with os.join().\nSave the file and upload an image to see it in action.\nSecuring file uploads At this point, a user could upload any kind of file of any filesize, which is dangerous..\n Tip - NEVER TRUST USER INPUT\n To mitigate any damage our application might receive from a malicius actor or user error, we should consider the following:\n Ensuring the file has a name Ensuring the file type is allowed Ensuring the filename is allowed Ensuring the filesize is allowed  Let\u0026rsquo;s start with the filename.\nEnsuring the file has a filename is a simple fix:\napp/app/views.py\nif image.filename == \u0026quot;\u0026quot;: print(\u0026quot;No filename\u0026quot;) return redirect(request.url)  To ensure the type of file is allowed, we should create a set of allowed extensions in our app.config.\nWe\u0026rsquo;ll just stick to image extensions for now but you\u0026rsquo;ll need to modify this to allow other file types.\nGo ahead and add the following:\napp/app/views.py\napp.config[\u0026quot;ALLOWED_IMAGE_EXTENSIONS\u0026quot;] = [\u0026quot;JPEG\u0026quot;, \u0026quot;JPG\u0026quot;, \u0026quot;PNG\u0026quot;, \u0026quot;GIF\u0026quot;]  This declares we\u0026rsquo;re only going to accept 4 file extensions for image uploads.\nWe should create a function that we can call to confirm this:\napp/app/views.py\ndef allowed_image(filename): # We only want files with a . in the filename if not \u0026quot;.\u0026quot; in filename: return False # Split the extension from the filename ext = filename.rsplit(\u0026quot;.\u0026quot;, 1)[1] # Check if the extension is in ALLOWED_IMAGE_EXTENSIONS if ext.upper() in app.config[\u0026quot;ALLOWED_IMAGE_EXTENSIONS\u0026quot;]: return True else: return False  Ensuring the filename itself isn\u0026rsquo;t dangerous is probably even more important. Luckily for us, Werkzeug provides a handy function called secure_filename that we can call to return a secure filename.\nFirst of all we need to import it:\napp/app/views.py\nfrom werkzeug.utils import secure_filename\nWe can now call it to return a secure filename of our file:\napp/app/views.py\nfilename = secure_filename(image.filename)`  Lastly, we need to modify image.save() to include the safe filename:\napp/app/views.py\nimage.save(os.path.join(app.config[\u0026quot;IMAGE_UPLOADS\u0026quot;], filename))\nPutting everything together, our app now looks like this:\napp/app/views.py\nfrom flask import request, redirect from werkzeug.utils import secure_filename import os app.config[\u0026quot;IMAGE_UPLOADS\u0026quot;] = \u0026quot;/mnt/c/wsl/projects/pythonise/tutorials/flask_series/app/app/static/img/uploads\u0026quot; app.config[\u0026quot;ALLOWED_IMAGE_EXTENSIONS\u0026quot;] = [\u0026quot;JPEG\u0026quot;, \u0026quot;JPG\u0026quot;, \u0026quot;PNG\u0026quot;, \u0026quot;GIF\u0026quot;] def allowed_image(filename): if not \u0026quot;.\u0026quot; in filename: return False ext = filename.rsplit(\u0026quot;.\u0026quot;, 1)[1] if ext.upper() in app.config[\u0026quot;ALLOWED_IMAGE_EXTENSIONS\u0026quot;]: return True else: return False @app.route(\u0026quot;/upload-image\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def upload_image(): if request.method == \u0026quot;POST\u0026quot;: if request.files: image = request.files[\u0026quot;image\u0026quot;] if image.filename == \u0026quot;\u0026quot;: print(\u0026quot;No filename\u0026quot;) return redirect(request.url) if allowed_image(image.filename): filename = secure_filename(image.filename) image.save(os.path.join(app.config[\u0026quot;IMAGE_UPLOADS\u0026quot;], filename)) print(\u0026quot;Image saved\u0026quot;) return redirect(request.url) else: print(\u0026quot;That file extension is not allowed\u0026quot;) return redirect(request.url) return render_template(\u0026quot;public/upload_image.html\u0026quot;)  Lastly, we should ensure the file is of an acceptable filesize.\nJust like we did with specifying the allowed image extensions in the app config. We can do the same with the maximum filesize using the default MAX_CONTENT_LENGTH config variable.\nLet\u0026rsquo;s set our maximum filesize at around 50 megabytes:\napp/app/views.py\napp.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  This setting will apply globally to all uploads sent to your application, which may or may not be ideal.\nLimiting file upload size I\u0026rsquo;ve been unable to find a way to read the filesize using the Flask or Werkzeug utilities, so had to find another creative way.\nThere may be instances where you need users to upload different file types, all with different filesize restrictions.\nAn alternative to using MAX_CONTENT_LENGTH is to send the filesize as a cookie along with the file, validate the filesize and then decide whether to save the file of not.\nIn order to achieve this, we\u0026rsquo;re going to do the following:\n Create a JavaScript function that saves the filesize as a cookie Set a maximum filesize limit for images in the app config Create a function to validate the image filesize  Let\u0026rsquo;s create the JavaScript function to listen for an oninput event and attach it to the file input field:\n\u0026lt;script\u0026gt; function filesize(elem){ document.cookie = `filesize=${elem.files[0].size}` } \u0026lt;/script\u0026gt;`  We also need to attach the oninput event to the input field and call the function:\n\u0026lt;input type=\u0026quot;file\u0026quot; class=\u0026quot;custom-file-input\u0026quot; name=\u0026quot;image\u0026quot; id=\u0026quot;image\u0026quot; oninput=\u0026quot;filesize(this);\u0026quot;\u0026gt;\nNow, when the user changes the input value, a cookie is saved and send to our app when the form is submitted.\nLet\u0026rsquo;s set a MAX_IMAGE_FILESIZE in our app config:\napp/app/views.py\napp.config[\u0026quot;MAX_IMAGE_FILESIZE\u0026quot;] = 0.5 * 1024 * 1024  We\u0026rsquo;ve set it at around 500,00 bytes for testing purposes.\nNext up, we\u0026rsquo;ll need to create a function to validate the filesize:\napp/app/views.py\ndef allowed_image_filesize(filesize): if int(filesize) \u0026lt;= app.config[\u0026quot;MAX_IMAGE_FILESIZE\u0026quot;]: return True else: return False  Cookies come in as strings, so we pass the filesize cookie to the int() function to convert it.\nWe access cookies using request.cookies, a dictionary like object which we can extract values by key.\nFinally, let\u0026rsquo;s grab the cookie and call the allowed_image_filesize function, passing the value to it:\napp/app/views.py\nif \u0026quot;filesize\u0026quot; in request.cookies: if not allowed_image_filesize(request.cookies[\u0026quot;filesize\u0026quot;]): print(\u0026quot;Filesize exceeded maximum limit\u0026quot;) return redirect(request.url)  Our finished app now looks like this:\napp/app/views.py\nfrom flask import request, redirect from werkzeug.utils import secure_filename import os app.config[\u0026quot;IMAGE_UPLOADS\u0026quot;] = \u0026quot;/mnt/c/wsl/projects/pythonise/tutorials/flask_series/app/app/static/img/uploads\u0026quot; app.config[\u0026quot;ALLOWED_IMAGE_EXTENSIONS\u0026quot;] = [\u0026quot;JPEG\u0026quot;, \u0026quot;JPG\u0026quot;, \u0026quot;PNG\u0026quot;, \u0026quot;GIF\u0026quot;] app.config[\u0026quot;MAX_IMAGE_FILESIZE\u0026quot;] = 0.5 * 1024 * 1024 def allowed_image(filename): if not \u0026quot;.\u0026quot; in filename: return False ext = filename.rsplit(\u0026quot;.\u0026quot;, 1)[1] if ext.upper() in app.config[\u0026quot;ALLOWED_IMAGE_EXTENSIONS\u0026quot;]: return True else: return False def allowed_image_filesize(filesize): if int(filesize) \u0026lt;= app.config[\u0026quot;MAX_IMAGE_FILESIZE\u0026quot;]: return True else: return False @app.route(\u0026quot;/upload-image\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def upload_image(): if request.method == \u0026quot;POST\u0026quot;: if request.files: if \u0026quot;filesize\u0026quot; in request.cookies: if not allowed_image_filesize(request.cookies[\u0026quot;filesize\u0026quot;]): print(\u0026quot;Filesize exceeded maximum limit\u0026quot;) return redirect(request.url) image = request.files[\u0026quot;image\u0026quot;] if image.filename == \u0026quot;\u0026quot;: print(\u0026quot;No filename\u0026quot;) return redirect(request.url) if allowed_image(image.filename): filename = secure_filename(image.filename) image.save(os.path.join(app.config[\u0026quot;IMAGE_UPLOADS\u0026quot;], filename)) print(\u0026quot;Image saved\u0026quot;) return redirect(request.url) else: print(\u0026quot;That file extension is not allowed\u0026quot;) return redirect(request.url) return render_template(\u0026quot;public/upload_image.html\u0026quot;)  Go ahead and try to upload an image over 500,000 bytes. It should print \u0026quot;Filesize exceeded maximum limit\u0026quot;\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':49,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-14/','title':"Ep.14 Sending files with Flask",'content':" Sending files with Flask | Learning Flask Ep. 14 How to send and allow users to download files with Flask\nAllowing users to download files from your website of application is an often required feature of any website or application and Flask provides us with some useful function to do so.\nIn this example, we\u0026rsquo;re going to allow our users to download 3 types of files, images, CSV\u0026rsquo;s and PDF\u0026rsquo;s simply by accessing a route and providing a unique id to the resource.\nLet\u0026rsquo;s get started.\nFlask imports First up, we\u0026rsquo;re going to need some imports from flask. Go ahead and import the following:\nfrom flask import send_file, send_from_directory, safe_join, abort\n send_file allows us to send the contents of a file to the client send_from_directory allows us to send a specific file from a directory (Recommended) safe_join allows us to safely join a filename with a file/directory path abort allows us to abort a request and return an HTTP status code of our choosing  Variable rules Before we jump in and create any routes, I want to quickly discuss variable rules which we\u0026rsquo;ve touched on before.\nVariable rules allow values to be passed into the URL using \u0026lt;this_syntax\u0026gt; and allows us to work with variable data coming in via the URL.\nAlthough not a necessity, Flask provides us with some useful converters to add an additional layer of validation to any values soming in via the URL.\nWe an use converters in our URL routes like so:\n@app.route(\u0026quot;/get-image/\u0026lt;image_name\u0026gt;\u0026quot;) # No converter (defaults to string) @app.route(\u0026quot;/get-image/\u0026lt;int:image_number\u0026gt;\u0026quot;) # Integer @app.route(\u0026quot;/get-image/\u0026lt;uuid:image_uuid\u0026gt;\u0026quot;) # uuid  Full list of variable rules: Converter\nFunction\nstring\nAccepts any text without a slash (Default)\nint\nAccepts positive integers\nfloat\nAccepts positive floating point values\npath\nLike string but also accepts slashes\nuuid\nAccepts UUID strings (Universally unique identifier) (e.g 118bc9c3-1af4-4d46-87a1-266db2e64e7a)\nUsing any of the converters listed above will convert the incoming variable into it\u0026rsquo;s related type.\nFor example, if you define a url with \u0026lt;int:some_integer\u0026gt;, Flask will try to convert it into an integer, \u0026lt;path:path_to_some_file\u0026gt; will allow a path like string, including slashes etc..\nDirectory structure Like many other important application configuration variables, we\u0026rsquo;re going to add 3 new entries to our app.config object, each with a path to the directories we\u0026rsquo;ve created to hold the files we want to make available for our users.\nBut before we do so, we\u0026rsquo;re going to create some new directories and add some files for our users to download:\n We\u0026rsquo;re first going to create a new directory inside our static directory called client Inside of the client directory, we\u0026rsquo;ll create 3 more directories, img, csv and pdf We\u0026rsquo;ll then place 2 of each file type in their parent folders.   Note - Feel free to use dirrefent file \u0026amp; directory names, just be sure to update the examples in this guide with your own names\n Our applications directory/file structure now looks like this (pay attention to the client directory in the static directory):\napp ├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ ├── client │ │ │ ├── csv │ │ │ │ ├── sales_report.csv │ │ │ │ └── users.csv │ │ │ ├── img │ │ │ │ ├── 001.jpg │ │ │ │ └── 002.jpg │ │ │ └── pdf │ │ │ ├── 202de685-1dcb-4272-9aff-3dc10b65ef77.pdf │ │ │ └── 7471eaf0-f85a-48b9-8450-4ccb5d493210.pdf │ │ ├── css │ │ │ └── style.css │ │ ├── img │ │ │ ├── flask.png │ │ │ └── uploads │ │ │ ├── YT-THUMB.png │ │ │ ├── post-img.png │ │ │ └── pythonise_favicon.png │ │ └── js │ │ └── app.js │ ├── templates │ │ ├── admin │ │ │ ├── dashboard.html │ │ │ └── templates │ │ │ └── admin_template.html │ │ ├── macros │ │ │ └── input_macros.html │ │ └── public │ │ ├── guestbook.html │ │ ├── index.html │ │ ├── jinja.html │ │ ├── profile.html │ │ ├── sign_up.html │ │ ├── templates │ │ │ └── public_template.html │ │ └── upload_image.html │ └── views.py ├── config.py ├── requirements.txt └── run.py  Now that we\u0026rsquo;ve got our directories and files in place, let\u0026rsquo;s update our app.config.\nApp config We\u0026rsquo;re going to create 3 new entries in our app.config object, each containing an absolute path to their corresponding directories:\n# The absolute path of the directory containing images for users to download app.config[\u0026quot;CLIENT_IMAGES\u0026quot;] = \u0026quot;/mnt/c/wsl/projects/pythonise/tutorials/flask_series/app/app/static/client/img\u0026quot; # The absolute path of the directory containing CSV files for users to download app.config[\u0026quot;CLIENT_CSV\u0026quot;] = \u0026quot;/mnt/c/wsl/projects/pythonise/tutorials/flask_series/app/app/static/client/csv\u0026quot; # The absolute path of the directory containing PDF files for users to download app.config[\u0026quot;CLIENT_PDF\u0026quot;] = \u0026quot;/mnt/c/wsl/projects/pythonise/tutorials/flask_series/app/app/static/client/pdf\u0026quot;  Now that we\u0026rsquo;ve updated our app config, let\u0026rsquo;s go ahead and create our routes (I\u0026rsquo;d recommend using a config file for this which you can read more about here).\nSend from directory The send_from_directory function is the recommended secure way to allow a user to download a file from our application.\nLet\u0026rsquo;s create our first route and discuss it after:\n@app.route(\u0026quot;/get-image/\u0026lt;image_name\u0026gt;\u0026quot;) def get_image(image_name): try: return send_from_directory(app.config[\u0026quot;CLIENT_IMAGES\u0026quot;], filename=image_name, as_attachment=True) except FileNotFoundError: abort(404)  Let\u0026rsquo;s step through what we\u0026rsquo;ve done:\nWe\u0026rsquo;re using \u0026lt;image_name\u0026gt; in the URL and expect to receive the filename of the image without any slashes. As we haven\u0026rsquo;t set a variable rule, Flask will default to string and not allow any slashes.\n@app.route(\u0026quot;/get-image/\u0026lt;image_name\u0026gt;\u0026quot;)  Tip - As a reminder, if you replaced \u0026lt;image_name\u0026gt; with \u0026lt;path:image_name\u0026gt; and a user went to /get-image/path/to/the/image.png, the my_image variable would be path/to/the/image.png, so use with caution.\nWe then pass the image_name string to the get_image() function.\ndef get_image(image_name):  We setup a try \u0026amp; except block to catch if the filename isn\u0026rsquo;t found on the server by using the FileNotFoundError handler.\ntry: return send_from_directory(app.config[\u0026quot;CLIENT_IMAGES\u0026quot;], filename=image_name, as_attachment=True) except FileNotFoundError: abort(404)  Inside the try: block, we call the send_from_directory function and pass it 3 arguments:\n app.config[\u0026quot;CLIENT_IMAGES\u0026quot;] - The path to the directory containing the images we\u0026rsquo;re allowing our users to download filename=image_name - The image_name variable passed in from the URL as_attachment=True - Allows the client to download the file as an attachment send_from_directory is then returned  Inside the except FileNotFoundError: block, we call abort() and pass it an HTTP status code, a 404 in the case that the file doesn\u0026rsquo;t exist.\nabort(404)\nIf you now go to either http://127.0.0.1:5000/get-image/001.png or http://127.0.0.1:5000/get-image/002.png, you\u0026rsquo;ll instantly download the file!\nIf you try a filename that doesn\u0026rsquo;t exist, you\u0026rsquo;ll get a Not Found error in your browser.\nLet\u0026rsquo;s setup our remaining 2 routes to serve CSV\u0026rsquo;s and PDF\u0026rsquo;s.\nYou\u0026rsquo;ll notice these 2 routes are very similar to the first, with the addition of the filename variable.\nCSV route:\n@app.route(\u0026quot;/get-csv/\u0026lt;csv_id\u0026gt;\u0026quot;) def get_csv(csv_id): filename = f\u0026quot;{csv_id}.csv\u0026quot; try: return send_from_directory(app.config[\u0026quot;CLIENT_CSV\u0026quot;], filename=filename, as_attachment=True) except FileNotFoundError: abort(404)  PDF route:\n@app.route(\u0026quot;/get-pdf/\u0026lt;pdf_id\u0026gt;\u0026quot;) def get_pdf(pdf_id): filename = f\u0026quot;{pdf_id}.csv\u0026quot; try: return send_from_directory(app.config[\u0026quot;CLIENT_PDF\u0026quot;], filename=filename, as_attachment=True) except FileNotFoundError: abort(404)  Both router are identical apart from the addition of their corresponding file extensions in the filename variable, where we\u0026rsquo;ve just used an f string to append the extension to the filename.\nWe\u0026rsquo;ve hard coded the extension this way as we\u0026rsquo;re only allowing that type of file extension from their given route. You could of course omit it and ask the user to provide the file extension too.\nFile path in the URL You may want a nested directory structure within your trusted base directory, where users can provide a path to a file in the URL to retrieve a file.\nLet\u0026rsquo;s say reports is our trusted base directory, containing several sub-directories and files, like so:\n├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ ├── client │ │ │ └── reports │ │ │ ├── 2017 │ │ │ │ ├── feb │ │ │ │ │ └── sales │ │ │ │ │ └── sales_report.csv │ │ │ │ └── jan │ │ │ │ └── sales │ │ │ │ └── sales_report.csv │ │ │ ├── 2018 │ │ │ │ ├── feb │ │ │ │ │ └── sales │ │ │ │ │ └── sales_report.csv │ │ │ │ └── jan │ │ │ │ └── sales │ │ │ │ └── sales_report.csv │ │ │ └── 2019 │ │ │ ├── feb │ │ │ │ └── sales │ │ │ │ └── sales_report.csv │ │ │ └── jan │ │ │ └── sales │ │ │ └── sales_report.csv  Without using a database, we can create a dynamic system of URL\u0026rsquo;s and allow users to provide a path to a file.\nLet\u0026rsquo;s create a new route and put this into practice, allowing our user to download a report by providing a path in the URL.\nFirst up, we\u0026rsquo;ll add our reports directory to our app.config:\napp.config[\u0026quot;CLIENT_REPORTS\u0026quot;] = \u0026quot;/mnt/c/wsl/projects/pythonise/tutorials/flask_series/app/app/static/client/reports\u0026quot;  Now we\u0026rsquo;ll create the route:\n@app.route(\u0026quot;/get-report/\u0026lt;path:path\u0026gt;\u0026quot;) def get_report(path): try: return send_from_directory(app.config[\u0026quot;CLIENT_REPORTS\u0026quot;], filename=path, as_attachment=True) except FileNotFoundError: abort(404)  We\u0026rsquo;re doing exactly the same as above, with the exception of adding the path prefix to the URL variable.\n@app.route(\u0026quot;/get-report/\u0026lt;path:path\u0026gt;\u0026quot;)  The path should be relative from the reports directory saved in our app.config!\nIf you were to go to /get-report/2018/feb/sales/sales_report.csv, the file would be downloaded. Likewise any non-existent filenames would throw a 404 error.\nSend file and safe join The send_file function is another way to allow users to download and directly access files on your server, however it\u0026rsquo;s not recommended for any application that may take a filename from user sources.\n Tip - Always use send_from_directory where possible.\n The reason? send_file will happily return any file from a specified path! I\u0026rsquo;m sure you wouldn\u0026rsquo;t want users to be able to downlaod any file from your application at their own will. If you do intend on using send_file, make sure your input source is trusted.\nLet\u0026rsquo;s setup a route to show send_file in action, using Flask\u0026rsquo;s safe_join function:\n@app.route(\u0026quot;/get-csv/\u0026lt;path:filename\u0026gt;\u0026quot;) def get_csv(filename): safe_path = safe_join(app.config[\u0026quot;CLIENT_CSV\u0026quot;], filename) try: return send_file(safe_path, as_attachment=True) except FileNotFoundError: abort(404)  We use safe_join and pass it 2 arguments:\n The TRUSTED base directory The UNTRUSTED path to the file  This function will safely join the base directory and zero or more pathnames/filenames and return it to the safe_path variable.\nAgain, you can send files this way but it\u0026rsquo;s recommended to use send_from_directory\nWe then call send_files and pass it the safe_path along with as_attachment=True to allow the user to download the file.\nRead more about sending files in Flask over at the official documentation, linked here\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':50,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-15/','title':"Ep.15 Flask cookies",'content':" Flask cookies | Learning Flask Ep. 15 Setting, getting and working with cookies in Flask\nCookies play an important role in most modern websites and web applications, allowing us leave small strings of key/value pairs on the clients browser to help both developers and users by temporarily preserving inportant information such as preferences, unique identifiers, state etc..\nFortunately for us, Flask makes working with cookies very simple.\nLet\u0026rsquo;s get started.\nFlask imports Working with cookies requires a couple of imports from Flask.\n request To set and get cookies make_response - To build a response to attach cookies to  Go ahead and import them at the top of your Flask app:\nfrom flask import request, make_response  Create a new route For this example, we\u0026rsquo;re going to create a simple route with the URL /cookies:\n@app.route(\u0026quot;/cookies\u0026quot;) def cookies(): resp = make_response(\u0026quot;Cookies\u0026quot;) return resp  We\u0026rsquo;ve create a response by passing a simple string to the make_response function resp = make_response(\u0026quot;Cookies\u0026quot;) which is then returned.\nThe exact same thing would be achieved with:\n@app.route(\u0026quot;/cookies\u0026quot;) def cookies(): return \u0026quot;Cookies\u0026quot;  We\u0026rsquo;re not covering make_response in detail in this part, just know that you can build your response ahead of time and modify it before returning it!\nIf you wanted to return a template, you would do the following:\n@app.route(\u0026quot;/cookies\u0026quot;) def cookies(): resp = make_response(render_template(\u0026quot;cookies.html\u0026quot;)) return resp  It\u0026rsquo;s exactly the same as:\n@app.route(\u0026quot;/cookies\u0026quot;) def cookies(): return render_template(\u0026quot;cookies.html\u0026quot;)  The difference is that by using make_response we can build and modify our request ahead of sending it.\nSetting cookies Setting cookies is a simple affair. We simply attach them to our response object.\nThe syntax for setting a cookie is:\nresponse.set_cookie(\u0026quot;key\u0026quot;, \u0026quot;value\u0026quot;)  For example, let\u0026rsquo;s set a cookie with the key of flavor and the value of chocolate chip:\n@app.route(\u0026quot;/cookies\u0026quot;) def cookies(): resp = make_response(\u0026quot;Cookies\u0026quot;) resp.set_cookie(\u0026quot;flavor\u0026quot;, \u0026quot;chocolate chip\u0026quot;) return resp  If you open the developer tools in your browser, head to the storage tab and select cookies from the navigation on the left, you\u0026rsquo;ll see that the flavour cookie has been set!\nCookie parameters You might notice in the developer tools, cookies have several parameters including key, value, domain, path and more, all of which can be set using Flask.\nThe set_cookie function takes the following parameters:\nset_cookie( key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False, samesite=None )  See the table below for a breakdown of the cookie parameters available:\n   Parameter Default Description     key required The key (name) of the cookie   value \u0026rdquo;\u0026rdquo; The value of the cookie   max_age None Number of seconds or None (default)   expires None The date of then the cookie expires, must be a datetime object   path None Limits the cookie to a given path   domain None specify a domain able to read the cookie (default is the domain that set it)   secure False If True, the cookie will only be available over HTTPS   httponly False Disallow JavaScript to access the cookie (Limited browser support)   samesite False Limits the scope of where the cookie is accessible to the same site    These options give us a great deal of control of how our cookies work and provide plenty of ways to manage them.\nLet\u0026rsquo;s set the max_age and path keys with 30 seconds and the /cookies path:\nresp.set_cookie( \u0026quot;flavor\u0026quot;, value=\u0026quot;chocolate chip\u0026quot;, max_age=10, path=request.path )  We\u0026rsquo;ve used request.path to access the path of the current route\nIf you check your browsers developer tools console, you\u0026rsquo;ll see our flavor cookie now has an Expires on date along with a value for Path of /cookies.\nWe\u0026rsquo;re going to come back to max_age in a minute with another example, but now let\u0026rsquo;s talk through how to access cookies.\nAccessing cookies Just like we\u0026rsquo;ve used the request object to access many different request values including request.form, request.args, request.files and request.get_json()..\nWe use request.cookies to access the cookies with the following syntax:\ncookies = request.cookies  If you run print(request.cookies) you\u0026rsquo;ll see we get a nicely serialized Python disctionary:\nprint(request.cookies)  {'flavor': 'chocolate chip'}  As we\u0026rsquo;re now working with a dictionary, we can access the individual values by key:\nflavor = cookies.get(\u0026quot;flavor\u0026quot;)   Tip - Use cookies.get(\u0026quot;key\u0026quot;) to access keys in order to mute any key errors when trying to access the dictionary values by key\n Let\u0026rsquo;s set a few more cookies:\nresp.set_cookie(\u0026quot;chocolate type\u0026quot;, \u0026quot;dark\u0026quot;) resp.set_cookie(\u0026quot;chewy\u0026quot;, \u0026quot;yes\u0026quot;)  If we now print request.cookies, we see:\n{'flavor': 'chocolate chip', 'chocolate type': 'dark', 'chewy': 'yes'}  max age You may notice that even after setting max_age in our flavor cookie, it still hangs around in the developer tools.\nGo ahead and comment out the first cookie we set:\n@app.route(\u0026quot;/cookies\u0026quot;) def cookies(): resp = make_response(\u0026quot;Set cookies\u0026quot;) cookies = request.cookies print(cookies) # resp.set_cookie( # \u0026quot;flavor\u0026quot;, # value=\u0026quot;chocolate chip\u0026quot;, # max_age=10, # path=request.path # ) resp.set_cookie(\u0026quot;chocolate type\u0026quot;, \u0026quot;dark\u0026quot;) resp.set_cookie(\u0026quot;chewy\u0026quot;, \u0026quot;yes\u0026quot;) return resp  Refresh the page and give it 10 seconds or so. You\u0026rsquo;ll notice we get the following in the terminal output:\n{'chocolate type': 'dark', 'chewy': 'yes'}  Even though the flavor cookie persists in the browser, it\u0026rsquo;s not send to the server as we explicitly set the max_age variable in the cookie to 10 seconds. It will be deleted when the browser is closed.\n Tip - To delete cookies from your browser, right click on the domain in the cookies tab in the developer tools and click on delete\n Setting cookies from the client Setting cookies using JavaScript is also very simple.\ndocument.cookie = \u0026quot;key=value\u0026quot;;  This will set the most basic type of cookie with no other meta information.\nWe can also provide the cookie with some more parameters like so:\ndocument.cookie = \u0026quot;key=value; expires=DDD, DD MMM YYYY HH:MM:SS UTC\u0026quot;;  You can also add a path with the following:\ndocument.cookie = \u0026quot;key=value; expires=DDD, DD MMM YYYY HH:MM:SS UTC; path=/path\u0026quot;;  You\u0026rsquo;ll then be able to access any of the cookies set client-side using\nrequest.cookies  Sessions Sessions use a special type of signed cookie, but you\u0026rsquo;ll have to read the next episode in this series to learn more!\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':51,'href':'/library/tutorials/docs/python/flask/learning-flask/ep-16/','title':"Ep.16 The Flask session object",'content':" The Flask session object | Learning Flask Ep. 16 Using, understanding and decoding the Flask session object, the globally available signed \u0026amp; encoded cookie\nSessions in Flask are a way to store information about a specific user from one request to the next. They work by storing a cryptographically signed cookie on the users browser and decoding it on every request.\nThe sesison object can be treated just like a dictionary that persists across requests, making it an ideal place to store non sensitive user data.\nImportant\n The session object is NOT a secure way to store data. It\u0026rsquo;s a base64 encoded string and can easily be decoded, thus not making it a secure way to save or access sensitive information.\n We\u0026rsquo;ll demonstrate decoding a session cookie shortly.\nIn this example, we\u0026rsquo;re going to create a very unsecure system to allow users to log in and view their profile.\nThe purpose is to demonstrate the session object, not a secure user management system! This guide doesn\u0026rsquo;t include any password hashing, user feedback or even a real database, it\u0026rsquo;s purely for the demonstration of working with sessions.\nLogin page Let\u0026rsquo;s start by creating a template allowing our user to login by providing a username and password:\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}sign up{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Sign in\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;form action=\u0026quot;/sign-in\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Username\u0026lt;/label\u0026gt; \u0026lt;input class=\u0026quot;form-control\u0026quot; type=\u0026quot;text\u0026quot; name=\u0026quot;username\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;input class=\u0026quot;form-control\u0026quot; type=\u0026quot;password\u0026quot; name=\u0026quot;password\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;Sign in\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}  Flask imports We need to import a few things from Flask for this example:\nfrom flask import render_template, request, session, redirect, url_for\n render_template - Allows us to render a template to the browser request - To handle the incoming form data and URL session - The session object redirect - Allows us to redirect users to various parts of our app url_for - Constructs URL\u0026rsquo;s from arguments  Mock database We\u0026rsquo;ll also need a mock database containing a couple of users (Feel free to change the values to something more familiar!):\nusers = { \u0026quot;julian\u0026quot;: { \u0026quot;username\u0026quot;: \u0026quot;julian\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;julian@gmail.com\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;example\u0026quot;, \u0026quot;bio\u0026quot;: \u0026quot;Some guy from the internet\u0026quot; }, \u0026quot;clarissa\u0026quot;: { \u0026quot;username\u0026quot;: \u0026quot;clarissa\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;clarissa@icloud.com\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;sweetpotato22\u0026quot;, \u0026quot;bio\u0026quot;: \u0026quot;Sweet potato is life\u0026quot; } }  We\u0026rsquo;re just using a dictionary containing 2 dictionaries to represent our users database.\nSecret Key The session object requires your app to have a value set for the SECRET_KEY variable. You can either set it in your application config file or provide it somewhere in the file containing your views.\nWhatever decision you make, it\u0026rsquo;s best to declare it as soon as you assign the app variable.\nThe secret key is used to encode the session cookie, so it\u0026rsquo;s advised to use something relitively complex.\nA good place to generate a secret key is with secrets.token_urlsafe() and pass it an integer:\nimport secrets secrets.token_urlsafe(16) OCML3BRawWEUeaxcuKHLpw Go ahead and create the `SECRET_KEY`: app.config[\u0026quot;SECRET_KEY\u0026quot;] = \u0026quot;OCML3BRawWEUeaxcuKHLpw\u0026quot;  Now that we\u0026rsquo;ve got our imports, database and secret key, let\u0026rsquo;s go ahead and build our routes.\nSign in route We need a route to handle signing our users in and setting up the session object:\n@app.route(\u0026quot;/sign-in\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def sign_in(): if request.method == \u0026quot;POST\u0026quot;: req = request.form username = req.get(\u0026quot;username\u0026quot;) password = req.get(\u0026quot;password\u0026quot;) if not username in users: print(\u0026quot;Username not found\u0026quot;) return redirect(request.url) else: user = users[username] if not password == user[\u0026quot;password\u0026quot;]: print(\u0026quot;Incorrect password\u0026quot;) return redirect(request.url) else: session[\u0026quot;USERNAME\u0026quot;] = user[\u0026quot;username\u0026quot;] print(\u0026quot;session username set\u0026quot;) return redirect(url_for(\u0026quot;profile\u0026quot;)) return render_template(\u0026quot;public/sign_in.html\u0026quot;)  As you can see, it\u0026rsquo;s a relitively simple route, just for demostration.\n We check if the username is in the database with if not username in users: If the user exists, we assign the user to user with user = users[username] We check the users password matches the password for the user in the database with if not password == user[\u0026quot;password\u0026quot;]: If either checks fail, we redirect back to the URL of the request using redirect(request.url)  If both checks pass, we assign the users username to the session key USERNAME.\nWe can treat the session object just like a Python dictionary.\nUpdating the session To set a key \u0026amp; value:\nsession[\u0026quot;KEY\u0026quot;] = \u0026quot;VALUE\u0026quot;  In this case, we\u0026rsquo;ve assigned the session USERNAME key to the users username:\nsession[\u0026quot;USERNAME\u0026quot;] = user[\u0026quot;username\u0026quot;]  If you were to print(session) just after we set the USERNAME key, you would see (Assuming the username of \u0026ldquo;julian\u0026rdquo;):\n\u0026lt;SecureCookieSession {'USERNAME': 'julian'}\u0026gt;  You\u0026rsquo;ll also notice the redirect to profile, using:\nreturn redirect(url_for(\u0026quot;profile\u0026quot;))  Redirect takes a URL and redirects the client to it. In this case we\u0026rsquo;ve passed it url_for(\u0026quot;profile\u0026quot;).\nurl_for takes arguments and builds an endpoint, in this case we\u0026rsquo;ve just passed the name of a function, \u0026quot;profile\u0026quot;, to which it builds a URL.\nWe havent\u0026rsquo;s created the profile route yet so let\u0026rsquo;s go ahead and do so:\nGetting the session object @app.route(\u0026quot;/profile\u0026quot;) def profile(): if not session.get(\u0026quot;USERNAME\u0026quot;) is None: username = session.get(\u0026quot;USERNAME\u0026quot;) user = users[username] return render_template(\u0026quot;public/profile.html\u0026quot;, user=user) else: print(\u0026quot;No username found in session\u0026quot;) return redirect(url_for(\u0026quot;sign_in\u0026quot;))  The session object is global, meaning we can access it from any part of our application and treat it like a dictionary.\nIn the profile route, we do the following:\nif not session.get(\u0026quot;USERNAME\u0026quot;) is None:\n We use session.get(\u0026quot;KEY\u0026quot;) to check if the key exists in the session. If the key doesn\u0026rsquo;t exist, session.get(\u0026quot;KEY\u0026quot;) returns None  user = users[session.get(\u0026quot;USERNAME\u0026quot;)]\n username = session.get(\u0026quot;USERNAME\u0026quot;) assigns the username variable to the value saved in the session USERNAME key We then assign the user from the users dictionary with user = users[username]  return render_template(\u0026quot;public/profile.html\u0026quot;, user=user)\n If the user is found in the session, we call render_template and pass it the profile.html file, along with the user  else: print(\u0026quot;No username found in session\u0026quot;) return redirect(url_for(\u0026quot;sign_in\u0026quot;))\n If the USERNAME key is not in the session, we redirect back to the sign in page  Now we need to create the profile page!\nProfile page Create a new file called profile.html and add the following:\n{% extends \u0026quot;public/templates/public_template.html\u0026quot; %} {% block title %}Profile{% endblock %} {% block main %} \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Profile\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;div class=\u0026quot;card\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card-body\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;{{ user[\u0026quot;username\u0026quot;] }}\u0026lt;/h4\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;{{ user[\u0026quot;email\u0026quot;] }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-muted\u0026quot;\u0026gt;{{ user[\u0026quot;bio\u0026quot;] }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}  It\u0026rsquo;s a very simple page containing some of the users details pulled from the database.\nBefore we go ahead and test any of our code, let\u0026rsquo;s create a route to allow our user to logout.\nPopping sessions We need to create a route that clears the USERNAME from the session object.\nAs session is just a Python object, we can pop a key from it!\nLet\u0026rsquo;s create a simple sign out route:\n@app.route(\u0026quot;/sign-out\u0026quot;) def sign_out(): session.pop(\u0026quot;USERNAME\u0026quot;, None) return redirect(url_for(\u0026quot;sign_in\u0026quot;))  To pop a key from the session object:\nsession.pop(\u0026quot;KEY\u0026quot;, None)\nIf a user who\u0026rsquo;s been signed in visits this route, their USERNAME variable will be removed from the session and they\u0026rsquo;ll be redirected to the sign in page.\nWe pass None to session.pop to make sure if a user who isn\u0026rsquo;t signed in visits the sign out route, they will also be redirected to the sign in route without the application throwing an error.\nWithout None, the application throws a KeyError.\nLet\u0026rsquo;s test our app!\nTesting it out Before you sign in, open up the developer tools in your browser and head over to the session storage.\nFor Chrome users:\n Open the developer tools with Ctrl + Shift + i Select the Application tab along the top of the toolbar Select Cookies from the sidebar on the left  For Firefox users:\n Open the developer tools with Ctrl + Shift + i Select the Storage tab along the top of the toolbar Select Cookies from the sidebar on the left  Go to /sign-in, enter one of the usernames and passwords in the database and submit the form.\nYou should see a cookie appear with the name session and an encoded string in the value entry.\nIf all went as it should, you\u0026rsquo;ll be at the profile page for the user and see some of their details.\nNow go to /sign-out in the browser and you should be redirected to the sign in page. The session cookie should also be removed and you\u0026rsquo;ll no longer see it in the developer tools.\nSession best practices As mentioned before, the session object is NOT a secure place to store data as it can be easily decoded.\nSome examples of what you\u0026rsquo;d store in the session object:\n Unique user ID\u0026rsquo;s Publicly visible usernames Tracking ID\u0026rsquo;s User preferences  Ideally, you\u0026rsquo;d store as much as you can in a database or local cache, such as Redis.\nNEVER put passwords or ANY sensitive information in the session object! As we\u0026rsquo;ll now demonstrate why\u0026hellip;\nDecoding the session Log back into the application and open up the developer tools.\nIn the developer tools, head to the Network tab and look for the POST request to the /sign-in route. Click on it.\nUnder Response headers, you\u0026rsquo;ll see Set-Cookie: with a value similar to the following:\nsession=eyJVU0VSTkFNRSI6Imp1bGlhbiJ9.XGxnkw.0-dtOEX9rJYS9MqYgnM9reWr7dY; HttpOnly; Path=/  Copy this string and start an instance of the Python interpreter in your terminal or console.\npython\nImport base64:\n\u0026gt;\u0026gt;\u0026gt; import base64\nWe\u0026rsquo;re going to pass the session tookie to base64.b64decode() which requires the string to not be 1 more than a multiple of 4 in character length.\nYou may have to delete a character or 2 from the string until you get the right number of characters.\nDecode the string using base64.b64decode(\u0026quot;session_cookie\u0026quot;):\n\u0026gt;\u0026gt;\u0026gt; base64.b64decode(\u0026quot;eyJVU0VSTkFNRSI6Imp1bGlhbiJ9.XGxnkw.0-dtOEX9rJYS9MqYgnM9reWr7dY; HttpOnly; Path=\u0026quot;)\nAfter stripping session= and the trailing / from the string, we got the following output:\nb'{\u0026quot;USERNAME\u0026quot;:\u0026quot;julian\u0026quot;}\\\\lg\\x93\\r\\x1d\\xb4\\xe1\\x17\\xf6\\xb2XK\\xd3*b\\t\\xcc\\xf6\\xb7\\x96\\xaf\\xb7X\\x1e\\xdbi:yr=\\xaba'  As you can clearly see, we\u0026rsquo;ve decoded the string and revealed the USERNAME value. The rest is just padding.\nI hope this illustrated why you should never store anything sensitive in the session!\nWrapping up The session object in Flask is an extremely useful tool for remembering and sharing state across an application and should be used with care.\nIt can be accessed globally across your application and in templates using the Jinja {{ session[\u0026quot;KEY\u0026quot;] }} syntax.\nJust remember to set a secret key and keep it safe. Ideally in an app config file and out of version control!\nviews.py\nfrom flask import render_template, request, session, redirect, url_for app.config[\u0026quot;SECRET_KEY\u0026quot;] = \u0026quot;OCML3BRawWEUeaxcuKHLpw\u0026quot; users = { \u0026quot;julian\u0026quot;: { \u0026quot;username\u0026quot;: \u0026quot;julian\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;julian@gmail.com\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;example\u0026quot;, \u0026quot;bio\u0026quot;: \u0026quot;Some guy from the internet\u0026quot; }, \u0026quot;clarissa\u0026quot;: { \u0026quot;username\u0026quot;: \u0026quot;clarissa\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;clarissa@icloud.com\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;sweetpotato22\u0026quot;, \u0026quot;bio\u0026quot;: \u0026quot;Sweet potato is life\u0026quot; } } @app.route(\u0026quot;/sign-in\u0026quot;, methods=[\u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;]) def sign_in(): if request.method == \u0026quot;POST\u0026quot;: req = request.form username = req.get(\u0026quot;username\u0026quot;) password = req.get(\u0026quot;password\u0026quot;) if not username in users: print(\u0026quot;Username not found\u0026quot;) return redirect(request.url) else: user = users[username] if not password == user[\u0026quot;password\u0026quot;]: print(\u0026quot;Incorrect password\u0026quot;) return redirect(request.url) else: session[\u0026quot;USERNAME\u0026quot;] = user[\u0026quot;username\u0026quot;] print(session) print(\u0026quot;session username set\u0026quot;) return redirect(url_for(\u0026quot;profile\u0026quot;)) return render_template(\u0026quot;public/sign_in.html\u0026quot;) @app.route(\u0026quot;/profile\u0026quot;) def profile(): if not session.get(\u0026quot;USERNAME\u0026quot;) is None: username = session.get(\u0026quot;USERNAME\u0026quot;) user = users[username] return render_template(\u0026quot;public/profile.html\u0026quot;, user=user) else: print(\u0026quot;No username found in session\u0026quot;) return redirect(url_for(\u0026quot;sign_in\u0026quot;)) @app.route(\u0026quot;/sign-out\u0026quot;) def sign_out(): session.pop(\u0026quot;USERNAME\u0026quot;, None) return redirect(url_for(\u0026quot;sign_in\u0026quot;))  Last modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':52,'href':'/library/tutorials/docs/articles/data-science/pandas/21-pandas-operations/','title':"21 Pandas operations",'content':" 21 Pandas operations for absolute beginners  Source  Prerequisites: Python and NumPy basics.\nA CSV file is comma-separated so in order to read a CSV file, do:\ndf = pd.read_csv(file_path, sep=’,’, header = 0, index_col=False,names=None)  Explanation:\nread_csv function has a plethora of parameters and I have specified only a few, ones that you may use most often. A few key points:\na) - header=0 means you have the names of columns in the first row in the file and if you don’t you will have to specify header=None b)  - index_col = False means to not use the first column of the data as an index in the data frame, you might want to set it to true if the first column is really an index. c) names = None implies you are not specifying the column- names and want it to be inferred from csv file, which means that your header = some_numbercontains column names. Otherwise, you can specify the names in here in the same order as you have the data in the csv file. If you are reading a text file separated by space or tab, you could simply change the sep to be:\nsep = \u0026quot; \u0026quot;` or `sep='\\t'`   How to create a data frame using a dictionary of pre-existing columns or NumPy 2D arrays? Using the dictionary\n# c1, c2, c3, c4 are column names. d_dic ={'first_col_name':c1,'second_col_names':c2,'3rd_col_name':c3} df = pd.DataFrame(data = d_dic)  Using NumPy arrays\nnp_data = np.zeros((no_of_samples,no_of_features))  any_numpy_array\ndf = pd.DataFrame(data=np_data, columns = list_of_Col_names)  How to visualize the top and bottom x values in a data frame?\ndf.head(num_of_rows_to_view) #top_values df.tail(num_of_rows_to_view) #bottom_values col = list_of_columns_to_view df[col].head(num_of_rows_to_view) df[col].tail(num_of_rows_to_view)  How to rename one or more columns?\ndf = pd.DataFrame(data={'a':[1,2,3,4,5],'b':[0,1,5,10,15]}) new_df = df.rename({'a':'new_a','b':'new_b'})  It is important to store the return data frame to a new data frame #as the renaming is not in-place.\n How to get column names in a list? df.columns.tolist() Not using tolist() function also does the job if you only want to iterate over the names but it returns everything as an index object.\n How to get the frequency of values in a series?\ndf[col].value_counts() #returns a mapper of key,frequency pair df[col].value_counts()[key] #to get frequency of a key value  How to reset an index to an existing column or another list or array?\nnew_df = df.reset_index(drop=True,inplace=False)  If you do inplace=True, there is no need to store it to a new_df. Also, when you are resetting the index to pandas RangeIndex(), you have the option to either keep the old index or drop it with ‘drop’ parameter. You may want to keep it, especially when it was one of the columns originally and you temporarily set it as the newindex.\n How to remove a column?\ndf.drop(columns = list_of_cols_to_drop)  How to change the index in a data frame?\ndf.set_index(col_name,inplace=True)  This will set col_name col as the index. You could pass more than one column to set them as index. inplace keyword serves the same purpose like before.\n How to remove rows or columns if they have nan values?\ndf.dropna(axis=0,inplace=True)  axis= 0 will drop any column that has nan values, which you might not want most times. axis = 1 will drop only the rows that have nan values in any of the columns. inplace is same like above.\n How to slice a data frame given a condition? You always need to specify a mask in the form of logical conditions.\n  For eg, if you have column age and you would want to select the data frame where age column has a particular value or lies in a list. Then you can achieve the slicing as follows:\nmask = df['age'] == age_value  or\nmask = df['age].isin(list_of_age_values) result = df[mask]  with multiple conditions: Eg. Choosing rows where both height and age correspond to particular values.\nmask = (df['age']==age_value) \u0026amp; (df['height'] == height_value) result = df[mask]   How to slice a data frame given names of columns or index values of rows? There are 4 options here: at,iat, loc and iloc. Among these ‘iat’ and ‘iloc’ are similar in the sense they provide integer-based indexing while ‘loc’ and ‘at’ provide name-based indexing. Another thing to note here is that iat at ‘provide’ indexing for single element while using ‘loc’ and iloc one can slice more than one element. Examples: a) df.iat[1,2] provides the element at 1th row and 2nd column. Here it\u0026rsquo;s important to note that number 1 doesn\u0026rsquo;t correspond to 1 in index column of dataframe. It\u0026rsquo;s totally possible that index in df does not have 1 at all. It\u0026rsquo;s like python array indexing. b) df.at[first,col_name] provides the value in the row where index value is first and column name is col_name c)\ndf.loc[list_of_indices,list_of_cols] eg df.loc[[4,5],['age','height']]  Slices dataframe for matching indices and column names d) df.iloc[[0,1],[5,6]] used for interger based indexing will return 0 and 1st row for 5th and 6th column.\n How to iterate over rows?\niterrows() and itertuples() for i,row in df.iterrows(): sum+=row['hieght']  iterrows() passess an iterators over rows which are returned as series. If a change is made to any of the data element of a row, it may reflect upon the dataframe as it does not return a copy of rows. itertuples() returns named tuples\nfor row in df.itertuples(): print(row.age)  How to sort by a column?\ndf.sort_values(by = list_of_cols,ascending=True)  How to apply a function to each element to a series?\ndf['series_name'].apply(f)  where f is the function you want to apply to each element of the series. If you also want to pass arguments to the custom function, you could modify it like this.\ndef f(x,**kwargs): #do_somthing return value_to_store df['series_name'].apply(f, a= 1, b=2,c =3)  If you want to apply a function to more than a series, then:\ndef f(row): age = row['age'] height = row['height'] df[['age','height']].apply(f,axis=1)  If you don\u0026rsquo;t use axis=1, f will be applied to each element of both the series. axis=1 helps to pass age and height of each row for any manipulation you want.\n How to apply a function to all elements in a data frame?\nnew_df = df.applymap(f)  How to slice a data frame if values of a series lie in a list? Use masking and isin. To choose data samples where age lies in the list:\ndf[df['age'].isin(age_list)]  To chose the opposite, data samples where age does not lie in the list use:\ndf[~df['age'].isin(age_list)]  How to group-by column values and aggregate over another column or apply a function to it?\ndf.groupby(['age']).agg({'height':'mean'})  This will group the data frame by series ‘age’ and for the height column, it will apply the mean of the grouped values. Sometimes it may happen, that you would want to group-by a certain column and convert all the corresponding grouped elements for other columns into a list. You may achieve this by:\ndf.groupby(['age']).agg(list)  How to create duplicates for other columns for each element in a list of a particular column? The question may be a little confusing. What I actually mean is, suppose you have the following data frame df:\nAge Height(in cm) 20 180 20 175 18 165 18 163 16 170  After applying group-by with a list aggregator, you may get something like:\nAge Height(in cm) 20 [180,175] 18 [165,163] 16 [170]  Now, what if you want to go back to the original data frame by undoing the last operation? You could achieve that using the newly introduced operation called explode in pandas version 0.25. df['height'].explode() will give the desired outcome.\n How to concatenate two data frames? Suppose you have two data-frames df1 and df2 with the given columns name, age, and height and you would want to achieve the concatenation of the two columns. axis=0 is the vertical axis. Here, the result data-frame will have the columns appended from the data-frames:\ndf1 --\u0026gt; name,age,height df2---\u0026gt; name,age,height result = pd.concat([df1,df2],axis=0)  For horizontal concatenation,\ndf1--\u0026gt; name,age df2---\u0026gt;height,salary result = pd.concat([df1,df2], axis=1)  How to merge two data frames? For the previous example, assume you have an employee database forming two dataframes like\ndf1--\u0026gt; name, age, height df2---\u0026gt; name, salary, pincode, sick_leaves_taken  You may want to combine these two dataframe such that each row has all details of an employee. In order to acheive this, you would have to perform a merge operation.\ndf1.merge(df2, on=['name'],how='inner')  This operation will provide a dataframe where each row will comprise of name, age, height, salary, pincode, sick_leaves_taken. how = 'inner' means include the row in result if there is a matching name in both the data frames. For more read: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html?highlight=merge#pandas.DataFrame.merge\n  Wrap-up For any data analysis project as a beginner, you may require to know these operations very well. I have always found Pandas to be a very useful library and now you can integrate with various other data analytics tools and languages. Knowing pandas operations may even help while learning languages that support distributed algorithms.\nContact If you liked this post, please clap and share it with others who might find it useful. I really love data science and if you are interested in it too, let’s connect on LinkedIn or follow me here on towards data science platform.\n"});index.add({'id':53,'href':'/library/tutorials/docs/articles/python/useful-python-tricks/','title':"An A-Z of useful Python tricks",'content':" An A-Z of useful Python tricks Source : FreeCodeCamp.org\nPython is one of the world’s most popular, in-demand programming languages. This is for many reasons:\n it’s easy to learn it’s super versatile it has a huge range of modules and libraries  I use Python daily as an integral part of my job as a data scientist. Along the way, I’ve picked up a few useful tricks and tips.\nHere, I’ve shared some of them in an A-Z format.\nMost of these ‘tricks’ are things I’ve used or stumbled upon during my day-to-day work. Some I found while browsing the Python Standard Library docs. A few others I found searching through PyPi.\nHowever, credit where it is due — I discovered four or five of them over at awesome-python.com. This is a curated list of hundreds of interesting Python tools and modules. It is worth browsing for inspiration!\nall or any One of the many reasons why Python is such a popular language is because it is readable and expressive.\nIt is often joked that Python is ‘executable pseudocode’. But when you can write code like this, it’s difficult to argue otherwise:\nx = [True, True, False] if any(x): print(\u0026quot;At least one True\u0026quot;) if all(x): print(\u0026quot;Not one False\u0026quot;) if any(x) and not all(x): print(\u0026quot;At least one True and one False\u0026quot;)  bashplotlib You want to plot graphs in the console?\n$ pip install bashplotlib  You can have graphs in the console.\ncollections Python has some great default datatypes, but sometimes they just won’t behave exactly how you’d like them to.\nLuckily, the Python Standard Library offers the collections module. This handy add-on provides you with further datatypes.\nfrom collections import OrderedDict, Counter # Remembers the order the keys are added! x = OrderedDict(a=1, b=2, c=3) # Counts the frequency of each character y = Counter(\u0026quot;Hello World!\u0026quot;)  dir Ever wondered how you can look inside a Python object and see what attributes it has? Of course you have.\nFrom the command line:\ndir() dir(\u0026quot;Hello World\u0026quot;) dir(dir)  This can be a really useful feature when running Python interactively, and for dynamically exploring objects and modules you are working with.\nRead more here.\nemoji Yes, really.\n$ pip install emoji  Don’t pretend you’re not gonna try it out…\nfrom emoji import emojize print(emojize(\u0026quot;:thumbs_up:\u0026quot;))  from future import One consequence of Python’s popularity is that there are always new versions under development. New versions mean new features — unless your version is out-of-date.\nFear not, however. The future module lets you import functionality from future versions of Python. It’s literally like time travel, or magic, or something.\nfrom __future__ import print_function print(\u0026quot;Hello World!\u0026quot;)  Why not have a go importing curly braces?\ngeopy Geography can be a challenging terrain for programmers to navigate (ha, a pun!). But the geopy module makes it unnervingly easy.\n$ pip install geopy  It works by abstracting the APIs of a range of different geocoding services. It enables you to obtain a place’s full street address, latitude, longitude, and even altitude.\nThere’s also a useful distance class. It calculates the distance between two locations in your favorite unit of measurement.\nfrom geopy import GoogleV3 place = \u0026quot;221b Baker Street, London\u0026quot; location = GoogleV3().geocode(place) print(location.address) print(location.location)  howdoi Stuck on a coding problem and can’t remember that solution you saw before? Need to check StackOverflow, but don’t want to leave the terminal?\nThen you need this useful command line tool.\npip install howdoi  Ask it whatever question you have, and it’ll do its best to return an answer.\n$ howdoi vertical align css $ howdoi for loop in java $ howdoi undo commits in git  Be aware though — it scrapes code from top answers from StackOverflow. It might not always give the most helpful information…\n$ howdoi exit vim  inspect Python’s inspect module is great for understanding what is happening behind the scenes. You can even call its methods on itself!\nThe code sample below uses inspect.getsource() to print its own source code. It also uses inspect.getmodule() to print the module in which it was defined.\nThe last line of code prints out its own line number.\nimport inspect print(inspect.getsource(inspect.getsource)) print(inspect.getmodule(inspect.getmodule)) print(inspect.currentframe().f_lineno)  Of course, beyond these trivial uses, the inspect module can prove useful for understanding what your code is doing. You could also use it for writing self-documenting code.\nJedi The Jedi library is an autocompletion and code analysis library. It makes writing code quicker and more productive.\nUnless you’re developing your own IDE, you’ll probably be most interested in using Jedi as an editor plugin. Luckily, there are already loads available!\nYou may already be using Jedi, however. The IPython project makes use of Jedi for its code autocompletion functionality.\nkwargs When learning any language, there are many milestones along the way. With Python, understanding the mysterious **kwargs syntax probably counts as one.\nThe double-asterisk in front of a dictionary object lets you pass the contents of that dictionary as named arguments to a function.\nThe dictionary’s keys are the argument names, and the values are the values passed to the function. You don’t even need to call it kwargs!\ndictionary = {\u0026quot;a\u0026quot;: 1, \u0026quot;b\u0026quot;: 2} def someFunction(a, b): print(a + b) return # these do the same thing: someFunction(**dictionary) someFunction(a=1, b=2)  This is useful when you want to write functions that can handle named arguments not defined in advance.\nList comprehensions One of my favourite things about programming in Python are its list comprehensions.\nThese expressions make it easy to write very clean code that reads almost like natural language.\nYou can read more about how to use them here.\nnumbers = [1,2,3,4,5,6,7] evens = [x for x in numbers if x % 2 is 0] odds = [y for y in numbers if y not in evens] cities = ['London', 'Dublin', 'Oslo'] def visit(city): print(\u0026quot;Welcome to \u0026quot;+city) for city in cities: visit(city)  map Python supports functional programming through a number of inbuilt features. One of the most useful is the map() function — especially in combination with lambda functions.\nx = [1, 2, 3] y = map(lambda x : x + 1 , x) # prints out [2,3,4]print(list(y))  In the example above, map() applies a simple lambda function to each element in x. It returns a map object, which can be converted to some iterable object such as a list or tuple.\nnewspaper3k If you haven’t seen it already, then be prepared to have your mind blown by Python’s newspaper module.\nIt lets you retrieve news articles and associated meta-data from a range of leading international publications. You can retrieve images, text and author names.\nIt even has some inbuilt NLP functionality.\nSo if you were thinking of using BeautifulSoup or some other DIY webscraping library for your next project, save yourself the time and effort and $ pip install newspaper3kinstead.\nOperator overloading Python provides support for operator overloading, which is one of those terms that make you sound like a legit computer scientist.\nIt’s actually a simple concept. Ever wondered why Python lets you use the + operator to add numbers and also to concatenate strings? That’s operator overloading in action.\nYou can define objects which use Python’s standard operator symbols in their own specific way. This lets you use them in contexts relevant to the objects you’re working with.\nclass Thing: def __init__(self, value): self.__value = value def __gt__(self, other): return self.__value \u0026gt; other.__value def __lt__(self, other): return self.__value \u0026lt; other.__value something = Thing(100) nothing = Thing(0) # True something \u0026gt; nothing # False something \u0026lt; nothing # Error something + nothing  pprint Python’s default print function does its job. But try printing out any large, nested object, and the result is rather ugly.\nHere’s where the Standard Library’s pretty-print module steps in. This prints out complex structured objects in an easy-to-read format.\nA must-have for any Python developer who works with non-trivial data structures.\nimport requests import pprint url = 'https://randomuser.me/api/?results=1' users = requests.get(url).json() pprint.pprint(users)  Queue Python supports multithreading, and this is facilitated by the Standard Library’s Queue module.\nThis module lets you implement queue data structures. These are data structures that let you add and retrieve entries according to a specific rule.\n‘First in, first out’ (or FIFO) queues let you retrieve objects in the order they were added. ‘Last in, first out’ (LIFO) queues let you access the most recently added objects first.\nFinally, priority queues let you retrieve objects according to the order in which they are sorted.\nHere’s an example of how to use queues for multithreaded programming in Python.\nrepr When defining a class or an object in Python, it is useful to provide an ‘official’ way of representing that object as a string. For example:\n\u0026gt;\u0026gt;\u0026gt; file = open('file.txt', 'r') \u0026gt;\u0026gt;\u0026gt; print(file) \u0026lt;open file 'file.txt', mode 'r' at 0x10d30aaf0\u0026gt;  This makes debugging code a lot easier. Add it to your class definitions as below:\nclass someClass: def __repr__(self): return \u0026quot;\u0026lt;some description here\u0026gt;\u0026quot; someInstance = someClass() # prints \u0026lt;some description here\u0026gt; print(someInstance)  sh Python makes a great scripting language. Sometimes using the standard os and subprocess libraries can be a bit of a headache.\nThe sh library provides a neat alternative.\nIt lets you call any program as if it were an ordinary function — useful for automating workflows and tasks, all from within Python.\nimport sh sh.pwd() sh.mkdir('new_folder') sh.touch('new_file.txt') sh.whoami() sh.echo('This is great!')  Type hints Python is a dynamically-typed language. You don’t need to specify datatypes when you define variables, functions, classes etc.\nThis allows for rapid development times. However, there are few things more annoying than a runtime error caused by a simple typing issue.\nSince Python 3.5, you have the option to provide type hints when defining functions.\ndef addTwo(x : Int) -\u0026gt; Int: return x + 2  You can also define type aliases:\nfrom typing import List  Vector = List[float]Matrix = List[Vector]  def addMatrix(a : Matrix, b : Matrix) -\u0026gt; Matrix: result = [] for i,row in enumerate(a): result_row =[] for j, col in enumerate(row): result_row += [a[i][j] + b[i][j]] result += [result_row] return result x = [[1.0, 0.0], [0.0, 1.0]] y = [[2.0, 1.0], [0.0, -2.0]] z = addMatrix(x, y)  Although not compulsory, type annotations can make your code easier to understand.\nThey also allow you to use type checking tools to catch those stray TypeErrors before runtime. Probably worthwhile if you are working on large, complex projects!\nuuid A quick and easy way to generate Universally Unique IDs (or ‘UUIDs’) is through the Python Standard Library’s uuid module.\nimport uuid user_id = uuid.uuid4() print(user_id)  This creates a randomized 128-bit number that will almost certainly be unique.\nIn fact, there are over 2¹²² possible UUIDs that can be generated. That’s over five undecillion (or 5,000,000,000,000,000,000,000,000,000,000,000,000).\nThe probability of finding duplicates in a given set is extremely low. Even with a trillion UUIDs, the probability of a duplicate existing is much, much less than one-in-a-billion.\nPretty good for two lines of code.\nVirtual environments This is probably my favorite Python thing of all.\nChances are you are working on multiple Python projects at any one time. Unfortunately, sometimes two projects will rely on different versions of the same dependency. Which do you install on your system?\nLuckily, Python’s support for virtual environments lets you have the best of both worlds. From the command line:\npython -m venv my-project source my-project/bin/activate pip install all-the-modules  Now you can have standalone versions and installations of Python running on the same machine. Sorted!\nwikipedia Wikipedia has a great API that allows users programmatic access to an unrivalled body of completely free knowledge and information.\nThe wikipedia module makes accessing this API almost embarrassingly convenient.\nimport wikipedia result = wikipedia.page('freeCodeCamp') print(result.summary) for link in result.links: print(link)  Like the real site, the module provides support for multiple languages, page disambiguation, random page retrieval, and even has a donate() method.\nxkcd Humour is a key feature of the Python language — after all, it is named after the British comedy sketch show Monty Python’s Flying Circus. Much of Python’s official documentation references the show’s most famous sketches.\nThe sense of humour isn’t restricted to the docs, though. Have a go running the line below:\nimport antigravity  Never change, Python. Never change.\nYAML YAML stands for ‘YAML Ain’t Markup Language’. It is a data formatting language, and is a superset of JSON.\nUnlike JSON, it can store more complex objects and refer to its own elements. You can also write comments, making it particularly suited to writing configuration files.\nThe PyYAML module lets you use YAML with Python. Install with:\n$ pip install pyyaml  And then import into your projects:\nimport yaml  PyYAML lets you store Python objects of any datatype, and instances of any user-defined classes also.\nzip One last trick for ya, and it really is a cool one. Ever needed to form a dictionary out of two lists?\nkeys = ['a', 'b', 'c'] vals = [1, 2, 3] zipped = dict(zip(keys, vals))  The zip() inbuilt function takes a number of iterable objects and returns a list of tuples. Each tuple groups the elements of the input objects by their positional index.\nYou can also ‘unzip’ objects by calling *zip() on them.\nThanks for reading! So there you have it, an A-Z of Python tricks — hopefully you’ve found something useful for your next project.\nPython’s a very diverse and well-developed language, so there’s bound to be many features I haven’t got round to including.\nPlease share any of your own favorite Python tricks by leaving a response below!\n Written with StackEdit.\n "});index.add({'id':54,'href':'/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-2/','title':"Basic Data Analysis",'content':" Introduction to basic data analysis with Pandas (Private Munich Housemarket data set) Source\nThis article is the continuation from a previous article (here link to medium) where I explained my goal of identifying the value of House Market in Munich in order to buy a house.\nSince I get the data, buying a house in Munich is out the question, I don’t (and probably will never) earn enough to actually realize that but the data are still interesting in order to do a quick look at data analysis with pandas.\nThe first article was really focused on cleaning the data, because in order to do realize a proper data analysis you need clean data. Otherwise, you will stumble on a lot of issues when running your code. Also, I really like the saying that state : “Garbage in, Garbage out”\nIf you don’t clean your data, then you could analyse wrong data points and it would give you wrong results.\nOn this article, we will go deeper on what the pandas library can do for you regarding the analysis of your data set and some visualization. I like the idiom “_A picture is worth a thousand words_”. I am also very visual so it really helps to picture what you are seeing in your data set.\nPandas methods overview At the very beginning, by importing the last version of the data set (that you have cleaned or retrieved from my github account), you can start by doing some method that will give you some information.\nimport pandas as pd df = pd.read_csv('data_immo.clean.csv', delimiter='\\t') df.head(1).T ## I like the transpose function as it gives you a better view  using the transpose on one line allows you to see easily type of data and column name\ndf.describe() ## Always worth checking  As you have probably noticing, we have the same number of count for each column. Thanks to our cleaning, all of the remaining data are available for us to find some interesting information.\nAs you probably have realized by now, this data set is a time series, it means that there is a timestamp-like column and that would enable to see evolution of the data set over time.\nThis can be useful for our analysis, seeing if there is a evolution.\nIn order to set the time series, we would need to use some method to identify which column is containing this information and how to translate it into the pandas data frame.\nYou would want (but not need) to import the datetime library and transform the date_year_month column.\nWe import the datetime if we want to actually do other stuff from the datetime column we will create from this translation.\nimport datetime df['date'] = pd.to_datetime(df['date_year_month'],format= '%Y%m') ## This will create a new column that contains your datetime element ##Let's not stop here and analyze the different element identified in that column df['date'].value_counts() ##Unique values and number of occurences  We see that the April 2016, May and December\n2017 have low number of values.\nWe need to remember that in order to not get conclusion on those month. Not enough data points to assume anything there.\nContinuing from having an idea on your data set, you can realize some easy visualization in order to analyse your data set or just a series.\nIf we want to see the distribution of the price, we can realize this kind of box plotting\nax = df['price'].plot(kind='box', title='box plot visualization - price') #return an object from matplotlib ax.set_ylabel('price') ax.set_xlabel('data set')  oh oh… what are those data points near 0 ?\nHere you can see that most of the values (25–75%) are within 210 k and 500 K€.\nBut you can also see some extra point and more importantly, it seems that there are data points to clean. We have a price for it but it is 0, which is impossible, even if I would really like this.\ndf[df['price'] == df['price'].min()] ## look for the data that match the minimum.  In case you want to have some margin against the minimum, you can do something like this df[df['price'] \u0026lt; df['price'].min()*1.1]  Will take everything below 10% more than the minimum. it doesn\u0026rsquo;t work in our case as our minimum is 0 but we can set a hardcap nothing below 50K. df[df['price'] \u0026lt; 50000]  Let’s keep them for now, we could use that data later on.\nWe are just removing them away from the main analysis and keep them in a separate data frame.\ndf_0_price = df[df['price'] \u0026lt; 50000].copy() df_0_price.reset_index(inplace=True,drop=True) ## let's reset their index df = df[df['price'] \u0026gt; 50000] df.reset_index(inplace=True,drop=True) ## let's reset their index df['price'].plot(kind='box')  This is a lot better\nI think that this part is really a good example of what you are doing at your actual job. Even if you have spent some times cleaning your data set, you will always found something to clean afterwards when you are realizing the analysis. This is the moment when you are actually digging on data and you will face this kind of situation quite often. Re-cleaning the data.\nGetting back to the analysis, an interesting method from pandas is to look if there are correlation between 2 variables.\nIn order to do that, you can use the corr() between 2 series.\ndf[['date_year_month','price']].corr() ## returns 0.42 : So positive correlation, price are increasing with time ## note that we are taking the 'date_year_month' data that are a number such as 201801 so it increased over time. df[['rooms','price']].corr() ## returns 0.093 : No correlation between price and number of rooms. ## But this can be biased by the few number of different room number. df['rooms'].value_counts() ## returns 3 values 2 (821), 3 (24), 4 (8). ## The over representation of 2 rooms will bias the correlation here.  One of the interesting to do with your data is to see reverse the view on them by grouping element by categorical data. If you know a bit of SQL, you will tickle directly on the word “grouping”. Yes the groupby function exists with pandas and it is pretty easy to use.\nOne of interesting analyze that we could do is to see the average price per zip code. In order to have really comparison, we will take the price per square meter (price_surface).\nThis will return a groupby object, the best would be to store it in a variable.\ndf_groupby_zip = df.groupby('zip')['price_surface'].mean() ## The good thing is that you can do a groupby on multiple elements.  df_groupby_zip_room = df.groupby(['zip','rooms'])['price'].mean()  This method is actually very powerful. At this state, it gives a clearer view and a new way to see your data. You may also be like “that is nice, it gets ride of the complexity but I would like to know what is actually going on”\nWhat if I tell you that you can work with this method in order to see what is going on (how many data points have been aggregated) but adding more calculation into a single command.\ndf_groupby_zip_agg = df.groupby('zip').agg({'price_surface' : ['mean','count','max']})  WHAT ??? In one line ?\nYes, it is that easy to get the average price per square meter per zip code and the number or data points and the maximum of each group aggregation. The .agg is definitely something you need to remember.\nAs you could have guessed, it would just requires that we add another column name in the dictionary to actually take another column into account(with the appropriate calculation you would like to apply to it).\nThe problem comes here as the _pricesurface column will have a multiple index and this is not easy to deal with.\nThe way I use to select only one column from the _pricesurface data type is to use .loc[] selection.\ndf_groupby_zip_agg.loc[:,('price_surface','mean')]  Pandas Visualization Pandas has matplotlib integrated in order to realize some easy visualizations.\nYou have already seen the boxplot which is quite interesting to have a view on your data set distribution. On the next part of this article, we will see how to create such visualization in order to see your data set.\nIn order to see the visualization, you want to write this line of code :\n%matplotlib inline #will generate the graph in your console  As I explained earlier, the cool thing with our data set is that it is a time series.\nTo really get the most of this kind of data, you want to have the datetime column to be on your index.\nOnce you have done that, all the plot will be generated in a time series manner.\nddf = df.set_index('date') ddf_gby_mean = ddf.groupby('date').mean() ddf_gby_mean[['price_room','price']].plot()  simple visualization\nThis is a very basic plotting though.\nYou could change the type, using the kind attribute but there are so much more attributes you can use. The most useful ones for me are :\n kind : determine the type of plot, my favorite being barh or bar. figsize : takes a tuple to resize your graph title : give a title to your graph cmap : use a different color map, link to some docs\nddf_gby_mean[['price_room','price']].plot(kind='area',title='price per room \u0026amp; price overtime',figsize=(10,7),cmap='tab20')    How better is it ?\nYou can clearly see an evolution in the data set starting November 2016.\nWe get a higher price average, this may be because the maximum has been increase. I can tell you that is the case but let’s look at the data to confirm that.\ngraph = pd.DataFrame(df.groupby('date').agg({'price':['max','count']})) ##setting a new view with groupby ax = graph.loc[:,('price','max')].plot(kind='line',title='Maximum price per month',figsize=(13,6))  You can clearly see that I increased the maximum price that I was looking for. This is because the price in Munich are so high that there are no other choices.\nPandas graphic representation are quite useful and will help you to get a good understanding of your data. However, you can also use other plotting library that have some advance visual representation. This topic will deserve another blog post by itself but let’s look at another one, which is quite easy to use and can be quite powerful for additional graph visualization : seaborn\nimport seaborn as sns sns.relplot(x=\u0026quot;construction_year\u0026quot;, y=\u0026quot;price\u0026quot;, hue='rooms',sizes=(20, 400), alpha=.7, height=10, data=df)  Easy enough to visualize the price by construction year and number of room ?\nWe can see that most of the offer in the market (for my price range) is for between ~1960 till ~1990. There are even building that have expected construction year till 2020.\nOverall, the usage of plotting functions are often coming from a wrapper around matplotlib. Therefore, you should really start to know what this library is about so you can better integrate the possibilities that it offers.\nI hope this post was helping on knowing how to use pandas to actually doing basic data analysis. I planned to cover more topics and visualization but this is getting already long. I will be back ;)\n"});index.add({'id':55,'href':'/library/tutorials/docs/articles/python/python-code-example/','title':"Code Examples",'content':" Python Code Examples By : freeCodeCamp\nPython is a general purpose programming language which is dynamically typed, interpreted, and known for its easy readability with great design principles.\nPython Data Structures Example Some general information about floating point numbers and how they work in Python, can be found here.\nNearly all implementations of Python follow the IEEE 754 specification: Standard for Binary Floating-Point Arithmetic. More information found on the IEEE site.\nFloat objects can be created using floating point literals:\n\u0026gt;\u0026gt;\u0026gt; 3.14 3.14 \u0026gt;\u0026gt;\u0026gt; 314\\. # Trailing zero(s) not required. 314.0 \u0026gt;\u0026gt;\u0026gt; .314 # Leading zero(s) not required. 0.314 \u0026gt;\u0026gt;\u0026gt; 3e0 3.0 \u0026gt;\u0026gt;\u0026gt; 3E0 # 'e' or 'E' can be used. 3.0 \u0026gt;\u0026gt;\u0026gt; 3e1 # Positive value after e moves the decimal to the right. 30.0 \u0026gt;\u0026gt;\u0026gt; 3e-1 # Negative value after e moves the decimal to the left. 0.3 \u0026gt;\u0026gt;\u0026gt; 3.14e+2 # '+' not required but can be used for exponent part. 314.0  Numeric literals do not contain a sign, however creating negative float objects is possible by prefixing with a unary - (minus) operator with no space before the literal:\n\u0026gt;\u0026gt;\u0026gt; -3.141592653589793 -3.141592653589793 \u0026gt;\u0026gt;\u0026gt; type(-3.141592653589793) \u0026lt;class 'float'\u0026gt;  Likewise, positive float objects can be prefixed with a unary + (plus) operator with no space before the literal. Usually + is omitted:\n\u0026gt;\u0026gt;\u0026gt; +3.141592653589793 3.141592653589793  Note that leading and trailing zero(s) are valid for floating point literals.\n\u0026gt;\u0026gt;\u0026gt; 0.0 0.0 \u0026gt;\u0026gt;\u0026gt; 00.00 0.0 \u0026gt;\u0026gt;\u0026gt; 00100.00100 100.001 \u0026gt;\u0026gt;\u0026gt; 001e0010 # Same as 1e10 10000000000.0  The float constructor is another way to create float objects.\nCreating float objects with floating point literals is preferred when possible:\n\u0026gt;\u0026gt;\u0026gt; a = 3.14 # Prefer floating point literal when possible. \u0026gt;\u0026gt;\u0026gt; type(a) \u0026lt;class 'float'\u0026gt; \u0026gt;\u0026gt;\u0026gt; b = int(3.14) # Works but unnecessary. \u0026gt;\u0026gt;\u0026gt; type(b) \u0026lt;class 'float'\u0026gt;  However, the float constructor allows for creating float objects from other number types:\n\u0026gt;\u0026gt;\u0026gt; a = 4 \u0026gt;\u0026gt;\u0026gt; type(a) \u0026lt;class 'int'\u0026gt; \u0026gt;\u0026gt;\u0026gt; print(a) 4 \u0026gt;\u0026gt;\u0026gt; b = float(4) \u0026gt;\u0026gt;\u0026gt; type(b) \u0026lt;class 'float'\u0026gt; \u0026gt;\u0026gt;\u0026gt; print(b) 4.0 \u0026gt;\u0026gt;\u0026gt; float(400000000000000000000000000000000) 4e+32 \u0026gt;\u0026gt;\u0026gt; float(.00000000000000000000000000000004) 4e-32 \u0026gt;\u0026gt;\u0026gt; float(True) 1.0 \u0026gt;\u0026gt;\u0026gt; float(False) 0.0  The float constructor will also make float objects from strings that represent number literals:\n\u0026gt;\u0026gt;\u0026gt; float('1') 1.0 \u0026gt;\u0026gt;\u0026gt; float('.1') 0.1 \u0026gt;\u0026gt;\u0026gt; float('3.') 3.0 \u0026gt;\u0026gt;\u0026gt; float('1e-3') 0.001 \u0026gt;\u0026gt;\u0026gt; float('3.14') 3.14 \u0026gt;\u0026gt;\u0026gt; float('-.15e-2') -0.0015  The float constructor can also be used to make numeric representations of NaN (Not a Number), negative infinity and infinity (note that strings for these are case insensitive):\n\u0026gt;\u0026gt;\u0026gt; float('nan') nan \u0026gt;\u0026gt;\u0026gt; float('inf') inf \u0026gt;\u0026gt;\u0026gt; float('-inf') -inf \u0026gt;\u0026gt;\u0026gt; float('infinity') inf \u0026gt;\u0026gt;\u0026gt; float('-infinity') -inf  Python Bools Example bool() is a built-in function in Python 3. This function returns a Boolean value, i.e. True or False. It takes one argument, x.\nArguments It takes one argument, x. x is converted using the standard Truth Testing Procedure.\nReturn Value If x is false or omitted, this returns False; otherwise it returns True.\nCode Sample print(bool(4 \u0026gt; 2)) # Returns True as 4 is greater than 2 print(bool(4 \u0026lt; 2)) # Returns False as 4 is not less than 2 print(bool(4 == 4)) # Returns True as 4 is equal to 4 print(bool(4 != 4)) # Returns False as 4 is equal to 4 so inequality doesn't holds print(bool(4)) # Returns True as 4 is a non-zero value print(bool(-4)) # Returns True as -4 is a non-zero value print(bool(0)) # Returns False as it is a zero value print(bool('dskl')) # Returns True as the string is a non-zero value print(bool([1, 2, 3])) # Returns True as the list is a non-zero value print(bool((2,3,4))) # Returns True as tuple is a non-zero value print(bool([])) # Returns False as list is empty and equal to 0 according to truth value testing  Python Bool Operators Example and, or, not\nPython Docs - Boolean Operations\nThese are the Boolean operations, ordered by ascending priority:\nOperationResultNotes x or y if x is false, then y, else x (1) x and y if x is false, then x, else y (2) not x if x is false, then True, else False (3).\n*Notes:*\n This is a short-circuit operator, so it only evaluates the second argument if the first one is False. This is a short-circuit operator, so it only evaluates the second argument if the first one is True. not has a lower priority than non-Boolean operators, so not a == b is interpreted as not(a == b), and a == not b is a syntax error.  Examples: not: \u0026gt;\u0026gt;\u0026gt; not True False \u0026gt;\u0026gt;\u0026gt; not False True  and: \u0026gt;\u0026gt;\u0026gt; True and False # Short-circuited at first argument. False \u0026gt;\u0026gt;\u0026gt; False and True # Second argument is evaluated. False \u0026gt;\u0026gt;\u0026gt; True and True # Second argument is evaluated. True  or: \u0026gt;\u0026gt;\u0026gt; True or False # Short-circuited at first argument. True \u0026gt;\u0026gt;\u0026gt; False or True # Second argument is evaluated. True \u0026gt;\u0026gt;\u0026gt; False or False # Second argument is evaluated. False  Python Constant Example Three commonly used built-in constants:\n True: The true value of the bool type. Assignments to True raise a SyntaxError. False: The false value of the bool type. Assignments to False raise a SyntaxError. None : The sole value of the type NoneType. None is frequently used to represent the absence of a value, as when default arguments are not passed to a function. Assignments to None raise a SyntaxError.  Other built-in constants:\n NotImplemented: Special value which should be returned by the binary special methods, such as __eg__(), __add__(), __rsub__(), etc.) to indicate that the operation is not implemented with respect to the other type. Ellipsis: Special value used mostly in conjunction with extended slicing syntax for user-defined container data types. __debug__: True if Python was not started with an -o option.  Constants added by the site module. The site module (which is imported automatically during startup, except if the -S command-line option is given) adds several constants to the built-in namespace. They are useful for the interactive interpreter shell and should not be used in programs.\nObjects that, when printed, print a message like “Use quit() or Ctrl-D (i.e. EOF) to exit”, and when called, raise SystemExit with the specified exit code:\n quit(code=None) exit(code=None)  Objects that, when printed, print a message like “Type license() to see the full license text”, and when called, display the corresponding text in a pager-like fashion (one screen at a time):\n copyright license credits  Calling Python Function Example A function definition statement does not execute the function. Executing (calling) a function is done by using the name of the function followed by parenthesis enclosing required arguments (if any).\n\u0026gt;\u0026gt;\u0026gt; def say_hello(): ... print('Hello') ... \u0026gt;\u0026gt;\u0026gt; say_hello() Hello  The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table.\nOn the other hand, variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a global statement), although they may be referenced.\n\u0026gt;\u0026gt;\u0026gt; a = 1 \u0026gt;\u0026gt;\u0026gt; b = 10 \u0026gt;\u0026gt;\u0026gt; def fn(): ... print(a) # local a is not assigned, no enclosing function, global a referenced. ... b = 20 # local b is assigned in the local symbol table for the function. ... print(b) # local b is referenced. ... \u0026gt;\u0026gt;\u0026gt; fn() 1 20 \u0026gt;\u0026gt;\u0026gt; b # global b is not changed by the function call. 10  The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called. In this way, arguments are passed using call by value (where the value is always an object reference, not the value of the object). When a function calls another function, a new local symbol table is created for that call.\n\u0026gt;\u0026gt;\u0026gt; def greet(s): ... s = \u0026quot;Hello \u0026quot; + s # s in local symbol table is reassigned. ... print(s) ... \u0026gt;\u0026gt;\u0026gt; person = \u0026quot;Bob\u0026quot; \u0026gt;\u0026gt;\u0026gt; greet(person) Hello Bob \u0026gt;\u0026gt;\u0026gt; person # person used to call remains bound to original object, 'Bob'. 'Bob'  The arguments used to call a function cannot be reassigned by the function, but arguments that reference mutable objects can have their values changed:\n\u0026gt;\u0026gt;\u0026gt; def fn(arg): ... arg.append(1) ... \u0026gt;\u0026gt;\u0026gt; a = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; fn(a) \u0026gt;\u0026gt;\u0026gt; a [1, 2, 3, 1]  Python Class Example Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.\nCompared with other programming languages, Python’s class mechanism adds classes with a minimum of new syntax and semantics. It is a mixture of the class mechanisms found in C++.\nPython classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.\nObjects can contain arbitrary amounts and kinds of data. As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.\nClass Definition Syntax : The simplest form of class definition looks like this:\nclass ClassName: \u0026lt;statement-1\u0026gt; ... ... ... \u0026lt;statement-N\u0026gt;  Class Objects: Class objects support two kinds of operations: attribute references and instantiation.\nAttribute references use the standard syntax used for all attribute references in Python: obj.name. Valid attribute names are all the names that were in the class’s namespace when the class object was created. So, if the class definition looked like this:\nclass MyClass: \u0026quot;\u0026quot;\u0026quot; A simple example class \u0026quot;\u0026quot;\u0026quot; i = 12345 def f(self): return 'hello world'  Then MyClass.i and MyClass.f are valid attribute references, returning an integer and a function object, respectively. Class attributes can also be assigned to, so you can change the value of MyClass.i by assignment. __doc__ is also a valid attribute, returning the docstring belonging to the class: \u0026quot;A simple example class\u0026quot;.\nClass instantiation uses function notation. Just pretend that the class object is a parameterless function that returns a new instance of the class. For example (assuming the above class):\nx = MyClass()  Creates a new instance of the class and assigns this object to the local variable x.\nThe instantiation operation (“calling” a class object) creates an empty object. Many classes like to create objects with instances customized to a specific initial state. Therefore a class may define a special method named *init*(), like this:\ndef __init__(self): self.data = []  When a class defines an __init__() method, class instantiation automatically invokes __init__() for the newly-created class instance. So in this example, a new, initialized instance can be obtained by:\nx = MyClass()  Of course, the __init__() method may have arguments for greater flexibility. In that case, arguments given to the class instantiation operator are passed on to __init__(). For example,\nclass Complex: def __init__(self, realpart, imagpart): self.r = realpart self.i = imagpart ... x = Complex(3.0, -4.5) \u0026gt;\u0026gt;\u0026gt; x.r, x.i (3.0, -4.5)  Python Code Blocks and Indention Example It is generally good practice for you not to mix tabs and spaces when coding in Python. Doing this can possibly cause a TabError, and your program will crash. Be consistent when you code - choose either to indent using tabs or spaces and follow your chosen convention throughout your program.\nCode Blocks and Indentation One of the most distinctive features of Python is its use of indentation to mark blocks of code. Consider the if-statement from our simple password-checking program:\nif pwd == 'apple': print('Logging on ...') else: print('Incorrect password.') print('All done!')  The lines print(‘Logging on …’) and print(‘Incorrect password.’) are two separate code blocks. These happen to be only a single line long, but Python lets you write code blocks consisting of any number of statements.\nTo indicate a block of code in Python, you must indent each line of the block by the same amount. The two blocks of code in our example if-statement are both indented four spaces, which is a typical amount of indentation for Python.\nIn most other programming languages, indentation is used only to help make the code look pretty. But in Python, it is required for indicating what block of code a statement belongs to. For instance, the final print(‘All done!’) is not indented, and so is not part of the else-block.\nProgrammers familiar with other languages often bristle at the thought that indentation matters: Many programmers like the freedom to format their code how they please. However, Python indentation rules are quite simple, and most programmers already use indentation to make their code readable. Python simply takes this idea one step further and gives meaning to the indentation.\nIf/elif-statements An if/elif-statement is a generalized if-statement with more than one condition. It is used for making complex decisions. For example, suppose an airline has the following “child” ticket rates: Kids 2 years old or younger fly for free, kids older than 2 but younger than 13 pay a discounted child fare, and anyone 13 years or older pays a regular adult fare. The following program determines how much a passenger should pay:\n# airfare.py age = int(input('How old are you? ')) if age \u0026lt;= 2: print(' free') elif 2 \u0026lt; age \u0026lt; 13: print(' child fare) else: print('adult fare')  After Python gets age from the user, it enters the if/elif-statement and checks each condition one after the other in the order they are given.\nSo first it checks if age is less than 2, and if so, it indicates that the flying is free and jumps out of the elif-condition. If age is not less than 2, then it checks the next elif-condition to see if age is between 2 and 13. If so, it prints the appropriate message and jumps out of the if/elif-statement. If neither the if-condition nor the elif-condition is True, then it executes the code in the else-block.\nConditional expressions Python has one more logical operator that some programmers like (and some don’t!). It’s essentially a shorthand notation for if-statements that can be used directly within expressions. Consider this code:\nfood = input(\u0026quot;What's your favorite food? \u0026quot;) reply = 'yuck' if food == 'lamb' else 'yum'  The expression on the right-hand side of = in the second line is called a conditional expression, and it evaluates to either ‘yuck’ or ‘yum’. It’s equivalent to the following:\nfood = input(\u0026quot;What's your favorite food? \u0026quot;) if food == 'lamb': reply = 'yuck' else: reply = 'yum'  Conditional expressions are usually shorter than the corresponding if/else-statements, although not quite as flexible or easy to read. In general, you should use them when they make your code simpler.\nPython Comparison Operator Example There are eight comparison operations in Python. They all have the same priority (which is higher than that of the Boolean operations). Comparisons can be chained arbitrarily; for example, x \u0026lt; y \u0026lt;= z is equivalent to x \u0026lt; y and y \u0026lt;= z, except that y is evaluated only once (but in both cases z is not evaluated at all when x \u0026lt; y is found to be false).\nThe following summarizes the comparison operations:\nOperationMeaning\u0026lt;strictly less than\u0026lt;=less than or equal to\u0026gt;strictly greater than\u0026gt;=greater than or equal to==equal to!=not equal to is object identity is notnegated object identity\nObjects of different types, except different numeric types, never compare equal. Furthermore, some types (for example, function objects) support only a degenerate notion of comparison where any two objects of that type are unequal. The \u0026lt;, \u0026lt;=, \u0026gt; and \u0026gt;= operators will raise a TypeError exception when comparing a complex number with another built-in numeric type, when the objects are of different types that cannot be compared, or in other cases where there is no defined ordering.\nNon-identical instances of a class normally compare as non-equal unless the class defines the __eq__()method.\nInstances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods __lt__(), __le__(), __gt__(), and __ge__() (in general, __lt__() and __eq__() are sufficient, if you want the conventional meanings of the comparison operators).\nThe behavior of the is and is not operators cannot be customized; also they can be applied to any two objects and never raise an exception.\nWe can also chain \u0026lt; and \u0026gt; operators together. For instance, 3 \u0026lt; 4 \u0026lt; 5 will return True, but 3 \u0026lt; 4 \u0026gt; 5will not. We can also chain the equality operator. For instance, 3 == 3 \u0026lt; 5 will return True but 3 == 5 \u0026lt; 5 will not.\nEquality Comparisons - “is” vs ”==” In Python, there are two comparison operators which allow us to check to see if two objects are equal. The is operator and the == operator. However, there is a key difference between them!\nThe key difference between ‘is’ and ’==’ can be summed up as:\n is is used to compare *identity* == is used to compare *equality*  Example First, create a list in Python.\nmyListA = [1,2,3]  Next, create a copy of that list.\nmyListB = myListA  If we use the ’==’ operator or the ‘is’ operator, both will result in a *True* output.\n\u0026gt;\u0026gt;\u0026gt; myListA == myListB # both lists contains similar elements True \u0026gt;\u0026gt;\u0026gt; myListB is myListA # myListB contains the same elements True  This is because both myListA and myListB are pointing to the same list variable, which I defined at beginning of my Python program. Both lists are exactly the same, both in identity and in content.\nHowever, what if I now create a new list?\nmyListC = [1,2,3]  Performing the == operator still shows that both lists are the same, in terms of content.\n\u0026gt;\u0026gt;\u0026gt; myListA == myListC True  However, performing the is operator will now produce a False output. This is because myListA and myListC are two different variables, despite containing the same data. Even though they look the same, they are *different*.\n\u0026gt;\u0026gt;\u0026gt; myListA is myListC False # both lists have different reference  To sum up:\n An is expression outputs True if both variables are pointing to the same reference An == expression outputs True if both variables contain the same data  Python Dictionary Example A Dictionary (a.k.a “dict”) in python is a built-in datatype that can be used to store *key-value* pairs. This allows you to treat a *dict* like it’s a database to store and organize data.\nThe special thing about dictionaries is the way they are implemented. Hash-table-like structure makes it easy to check for existence - which means that we can easily determine if a specific key is present in the dictionary without needing to examine every element. The Python interpreter can just go to the location key and check if the key is there.\nDictionaries can use almost any arbitrary datatypes, like strings, integers etc, for keys. However, values that are not hashable, that is, values containing lists, dictionaries or other mutable types (that are compared by value rather than by object identity) may not be used as keys. Numeric types used for keys obey the normal rules for numeric comparison: if two numbers compare equal (such as 1 and 1.0) then they can be used interchangeably to index the same dictionary entry. (Note however, that since computers store floating-point numbers as approximations it is usually unwise to use them as dictionary keys.)\nOne most important requirement of a dictionary is that the keys *must* be unique.\nTo create an empty dictionary just use a pair of braces:\n\u0026gt;\u0026gt;\u0026gt; teams = {} \u0026gt;\u0026gt;\u0026gt; type(teams) \u0026gt;\u0026gt;\u0026gt; \u0026lt;class 'dict'\u0026gt;  To create a non-empty dictionary with some initial values, place a comma-seperated list of key-value pairs:\n\u0026gt;\u0026gt;\u0026gt; teams = {'barcelona': 1875, 'chelsea': 1910} \u0026gt;\u0026gt;\u0026gt; teams {'barcelona': 1875, 'chelsea': 1910}  It’s easy to add key-value pairs to an existing dictionary:\n\u0026gt;\u0026gt;\u0026gt; teams['santos'] = 1787 \u0026gt;\u0026gt;\u0026gt; teams {'chelsea': 1910, 'barcelona': 1875, 'santos': 1787} # Notice the order - Dictionaries are unordered ! \u0026gt;\u0026gt;\u0026gt; # extracting value - Just provide the key ... \u0026gt;\u0026gt;\u0026gt; teams['barcelona'] 1875  *del* operator is used to delete a key-value pair from the dict. In scenarios where a key that’s already in use is again used to store values, the old value associated with that key is completely lost. Also, keep in mind that it’s an error to extract the value using a non-existent key.\n\u0026gt;\u0026gt;\u0026gt; del teams['santos'] \u0026gt;\u0026gt;\u0026gt; teams {'chelsea': 1910, 'barcelona': 1875} \u0026gt;\u0026gt;\u0026gt; teams['chelsea'] = 2017 # overwriting \u0026gt;\u0026gt;\u0026gt; teams {'chelsea': 2017, 'barcelona': 1875}  *in* keyword can be used to check whether a key exist in the dict or not:\n\u0026gt;\u0026gt;\u0026gt; 'sanots' in teams False \u0026gt;\u0026gt;\u0026gt; 'barcelona' in teams True \u0026gt;\u0026gt;\u0026gt; 'chelsea' not in teams False  *keys* is a built-in method that can be used to get the keys of a given dictionary. To extract the keys present in a dict as lists:\n\u0026gt;\u0026gt;\u0026gt; club_names = list(teams.keys()) \u0026gt;\u0026gt;\u0026gt; club_names ['chelsea', 'barcelona']  Yet another way of creating a dictionary is using the *dict()* method:\n\u0026gt;\u0026gt;\u0026gt; players = dict( [('messi','argentina'), ('ronaldo','portugal'), ('kaka','brazil')] ) # sequence of key-value pair is passed \u0026gt;\u0026gt;\u0026gt; players {'ronaldo': 'portugal', 'kaka': 'brazil', 'messi': 'argentina'} \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; # If keys are simple strings, it's quite easier to specify pairs using keyword arguments ... \u0026gt;\u0026gt;\u0026gt; dict( totti = 38, zidane = 43 ) {'zidane': 43, 'totti': 38}  Dict comprehensions can be used as well to create dictionaries from arbitrary key and value expressions:\n\u0026gt;\u0026gt;\u0026gt; {x: x**2 for x in (2, 4, 6)} {2: 4, 4: 16, 6: 36}  *Looping in Dictionary*\nTo simply loop over the keys in the dictionary, rather than the keys and values:\n\u0026gt;\u0026gt;\u0026gt; d = {'x': 1, 'y': 2, 'z': 3} \u0026gt;\u0026gt;\u0026gt; for key in d: ... print(key) # do something ... x y z  To loop over both key and value, you can use the following:\nFor Python 2.x:\n\u0026gt;\u0026gt;\u0026gt; for key, item in d.iteritems(): ... print items ... 1 2 3  Use *items()* for Python 3.x:\n\u0026gt;\u0026gt;\u0026gt; for key, item in d.items(): ... print(key, items) ... x 1 y 2 z 3  Python Objects Example In Python, everything is an object.\nObjects represent a logical grouping of attributes. Attributes are data and/or functions. When an object is created in Python it is created with an identity, type, and value.\nIn other languages, primitives are values that have no properties (attributes). For example, in javascript undefined, null, boolean, string, number, and symbol (new in ECMAScript 2015) are primitives.\nIn Python, there are no primitives. None, booleans, strings, numbers, and even _functions_are all objects regardless how they are created.\nWe can demonstrate this using some built-in functions:\n id type dir issubclass  Built-in constants None, True, and False are objects:\nWe test the None object here.\n\u0026gt;\u0026gt;\u0026gt; id(None) 4550218168 \u0026gt;\u0026gt;\u0026gt; type(None) \u0026lt;class 'NoneType'\u0026gt; \u0026gt;\u0026gt;\u0026gt; dir(None) [__bool__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__'] \u0026gt;\u0026gt;\u0026gt; issubclass(type(None), object) True  Next, let’s inspect True.\n\u0026gt;\u0026gt;\u0026gt; id(True) 4550117616 \u0026gt;\u0026gt;\u0026gt; type(True) \u0026lt;class 'bool'\u0026gt; \u0026gt;\u0026gt;\u0026gt; dir(True) ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] \u0026gt;\u0026gt;\u0026gt; issubclass(type(True), object) True  No reason to leave out False!\n\u0026gt;\u0026gt;\u0026gt; id(False) 4550117584 \u0026gt;\u0026gt;\u0026gt; type(False) \u0026lt;class 'bool'\u0026gt; \u0026gt;\u0026gt;\u0026gt; dir(False) ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] \u0026gt;\u0026gt;\u0026gt; issubclass(type(False), object) True  Strings, even when created by a string literals, are also objects.\n\u0026gt;\u0026gt;\u0026gt; id(\u0026quot;Hello campers!\u0026quot;) 4570186864 \u0026gt;\u0026gt;\u0026gt; type('Hello campers!') \u0026lt;class 'str'\u0026gt; \u0026gt;\u0026gt;\u0026gt; dir(\u0026quot;Hello campers!\u0026quot;) ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] \u0026gt;\u0026gt;\u0026gt; issubclass(type('Hello campers!'), object) True  Same with numbers.\n\u0026gt;\u0026gt;\u0026gt; id(42) 4550495728 \u0026gt;\u0026gt;\u0026gt; type(42) \u0026lt;class 'int'\u0026gt; \u0026gt;\u0026gt;\u0026gt; dir(42) ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] \u0026gt;\u0026gt;\u0026gt; issubclass(type(42), object) True  Functions are Objects Too In Python, functions are first class objects.\nFunctions in Python are also objects, created with an identity, type, and value. They too can be passed into other functions:\n\u0026gt;\u0026gt;\u0026gt; id(dir) 4568035688 \u0026gt;\u0026gt;\u0026gt; type(dir) \u0026lt;class 'builtin_function_or_method'\u0026gt; \u0026gt;\u0026gt;\u0026gt; dir(dir) ['__call__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__self__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__text_signature__'] \u0026gt;\u0026gt;\u0026gt; issubclass(type(dir), object) True  It is also possible to bind functions to a name and called the bound function using that name:\n\u0026gt;\u0026gt;\u0026gt; a = dir \u0026gt;\u0026gt;\u0026gt; print(a) \u0026lt;built-in function dir\u0026gt; \u0026gt;\u0026gt;\u0026gt; a(a) ['__call__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__self__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__text_signature__']  Python Tuples A tuple is a sequence of Python objects. Tuples are immutable which means they cannot be modified after creation, unlike lists.\n*Creation:*\nAn empty tuple is created using a pair of round brackets, ():\n\u0026gt;\u0026gt;\u0026gt; empty_tuple = () \u0026gt;\u0026gt;\u0026gt; print(empty_tuple) () \u0026gt;\u0026gt;\u0026gt; type(empty_tuple) \u0026lt;class 'tuple'\u0026gt; \u0026gt;\u0026gt;\u0026gt; len(empty_tuple) 0  A tuple with elements is created by separating the elements with commas (surrounding round brackets, (), are optional with exceptions):\n\u0026gt;\u0026gt;\u0026gt; tuple_1 = 1, 2, 3 # Create tuple without round brackets. \u0026gt;\u0026gt;\u0026gt; print(tuple_1) (1, 2, 3) \u0026gt;\u0026gt;\u0026gt; type(tuple_1) \u0026lt;class 'tuple'\u0026gt; \u0026gt;\u0026gt;\u0026gt; len(tuple_1) 3 \u0026gt;\u0026gt;\u0026gt; tuple_2 = (1, 2, 3) # Create tuple with round brackets. \u0026gt;\u0026gt;\u0026gt; print(tuple_2) (1, 2, 3) \u0026gt;\u0026gt;\u0026gt; tuple_3 = 1, 2, 3, # Trailing comma is optional. \u0026gt;\u0026gt;\u0026gt; print(tuple_3) (1, 2, 3) \u0026gt;\u0026gt;\u0026gt; tuple_4 = (1, 2, 3,) # Trailing comma in round brackets is also optional. \u0026gt;\u0026gt;\u0026gt; print(tuple_4) (1, 2, 3)  A tuple with a single element must have the trailing comma (with or without round brackets):\n\u0026gt;\u0026gt;\u0026gt; not_tuple = (2) # No trailing comma makes this not a tuple. \u0026gt;\u0026gt;\u0026gt; print(not_tuple) 2 \u0026gt;\u0026gt;\u0026gt; type(not_tuple) \u0026lt;class 'int'\u0026gt; \u0026gt;\u0026gt;\u0026gt; a_tuple = (2,) # Single element tuple. Requires trailing comma. \u0026gt;\u0026gt;\u0026gt; print(a_tuple) (2,) \u0026gt;\u0026gt;\u0026gt; type(a_tuple) \u0026lt;class 'tuple'\u0026gt; \u0026gt;\u0026gt;\u0026gt; len(a_tuple) 1 \u0026gt;\u0026gt;\u0026gt; also_tuple = 2, # Round brackets omitted. Requires trailing comma. \u0026gt;\u0026gt;\u0026gt; print(also_tuple) (2,) \u0026gt;\u0026gt;\u0026gt; type(also_tuple) \u0026lt;class 'tuple'\u0026gt;  Round brackets are required in cases of ambiguity (if the tuple is part of a larger expression):\nNote that it is actually the comma which makes a tuple, not the parentheses. The parentheses are optional, except in the empty tuple case, or when they are needed to avoid syntactic ambiguity.\nFor example, f(a, b, c) is a function call with three arguments, while f((a, b, c)) is a function call with a 3-tuple as the sole argument.\n\u0026gt;\u0026gt;\u0026gt; print(1,2,3,4,) # Calls print with 4 arguments: 1, 2, 3, and 4 1 2 3 4 \u0026gt;\u0026gt;\u0026gt; print((1,2,3,4,)) # Calls print with 1 argument: (1, 2, 3, 4,) (1, 2, 3, 4) \u0026gt;\u0026gt;\u0026gt; 1, 2, 3 == (1, 2, 3) # Equivalent to 1, 2, (3 == (1, 2, 3)) (1, 2, False) \u0026gt;\u0026gt;\u0026gt; (1, 2, 3) == (1, 2, 3) # Use surrounding round brackets when ambiguous. True  A tuple can also be created with the tuple constructor:\n\u0026gt;\u0026gt;\u0026gt; empty_tuple = tuple() \u0026gt;\u0026gt;\u0026gt; print(empty_tuple) () \u0026gt;\u0026gt;\u0026gt; tuple_from_list = tuple([1,2,3,4]) \u0026gt;\u0026gt;\u0026gt; print(tuple_from_list) (1, 2, 3, 4) \u0026gt;\u0026gt;\u0026gt; tuple_from_string = tuple(\u0026quot;Hello campers!\u0026quot;) \u0026gt;\u0026gt;\u0026gt; print(tuple_from_string) ('H', 'e', 'l', 'l', 'o', ' ', 'c', 'a', 'm', 'p', 'e', 'r', 's', '!') \u0026gt;\u0026gt;\u0026gt; a_tuple = 1, 2, 3 \u0026gt;\u0026gt;\u0026gt; b_tuple = tuple(a_tuple) # If the constructor is called with a tuple for the iterable, \u0026gt;\u0026gt;\u0026gt; a_tuple is b_tuple # the tuple argument is returned. True  *Accessing elements of a tuple:*\nElements of tuples are accessed and indexed the same way that lists are.\n\u0026gt;\u0026gt;\u0026gt; my_tuple = 1, 2, 9, 16, 25 \u0026gt;\u0026gt;\u0026gt; print(my_tuple) (1, 2, 9, 16, 25)  Zero indexed\n\u0026gt;\u0026gt;\u0026gt; my_tuple[0] 1 \u0026gt;\u0026gt;\u0026gt; my_tuple[1] 2 \u0026gt;\u0026gt;\u0026gt; my_tuple[2] 9  Wrap around indexing\n\u0026gt;\u0026gt;\u0026gt; my_tuple[-1] 25 \u0026gt;\u0026gt;\u0026gt; my_tuple[-2] 16  *Packing and Unpacking:*\nThe statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 12345, 54321and 'hello!' are packed together in a tuple. The reverse operation is also possible:\n\u0026gt;\u0026gt;\u0026gt; x, y, z = t  This is called, appropriately enough, sequence unpacking and works for any sequence on the right-hand side. Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence. Note that multiple assignment is really just a combination of tuple packing and sequence unpacking.\n\u0026gt;\u0026gt;\u0026gt; t = 1, 2, 3 # Tuple packing. \u0026gt;\u0026gt;\u0026gt; print(t) (1, 2, 3) \u0026gt;\u0026gt;\u0026gt; a, b, c = t # Sequence unpacking. \u0026gt;\u0026gt;\u0026gt; print(a) 1 \u0026gt;\u0026gt;\u0026gt; print(b) 2 \u0026gt;\u0026gt;\u0026gt; print(c) 3 \u0026gt;\u0026gt;\u0026gt; d, e, f = 4, 5, 6 # Multiple assignment combines packing and unpacking. \u0026gt;\u0026gt;\u0026gt; print(d) 4 \u0026gt;\u0026gt;\u0026gt; print(e) 5 \u0026gt;\u0026gt;\u0026gt; print(f) 6 \u0026gt;\u0026gt;\u0026gt; a, b = 1, 2, 3 # Multiple assignment requires each variable (right) have a matching element (left). Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; ValueError: too many values to unpack (expected 2)  *Immutable:*\ntuples are immutable containers, guaranteeing *which* objects they contain will not change. It does *not* guarantee that the objects they contain will not change:\n\u0026gt;\u0026gt;\u0026gt; a_list = [] \u0026gt;\u0026gt;\u0026gt; a_tuple = (a_list,) # A tuple (immutable) with a list (mutable) element. \u0026gt;\u0026gt;\u0026gt; print(a_tuple) ([],) \u0026gt;\u0026gt;\u0026gt; a_list.append(\u0026quot;Hello campers!\u0026quot;) \u0026gt;\u0026gt;\u0026gt; print(a_tuple) # Element of the immutable is mutated. (['Hello campers!'],)  *Uses:*\nFunctions can only return a single value, however, a heterogenuous tuple can be used to return multiple values from a function. One example is the built-in enumeratefunction that returns an iterable of heterogenuous tuples:\n\u0026gt;\u0026gt;\u0026gt; greeting = [\u0026quot;Hello\u0026quot;, \u0026quot;campers!\u0026quot;] \u0026gt;\u0026gt;\u0026gt; enumerator = enumerate(greeting) \u0026gt;\u0026gt;\u0026gt; enumerator.next() \u0026gt;\u0026gt;\u0026gt; enumerator.__next__() (0, 'Hello') \u0026gt;\u0026gt;\u0026gt; enumerator.__next__() (1, 'campers!')  Python Decorators Decorators essentially work as wrappers. They modify the behaviour of the code before and after a target function execution, without the need to modify the function itself, augmenting the original functionality, thus decorating it.\nBefore going in detail about decorators, there are some concepts that should be clear. In Python, functions are objects and we can do a lot of useful stuff with them.\n*Assigning funtions to a variables:* def greet(name): return \u0026quot;Hello \u0026quot;+name greet_someone = greet print greet_someone(\u0026quot;John\u0026quot;)  Output: Hello John\nRun code\n*Defining functions inside other functions:* def greet(name): def get_message(): return \u0026quot;Hello \u0026quot; result = get_message()+name return result print(greet(\u0026quot;John\u0026quot;))  Output: Hello John\nRun code\n*Functions can also be passed as parameters to other functions:* def greet(name): return \u0026quot;Hello \u0026quot; + name def call_func(func): other_name = \u0026quot;John\u0026quot; return func(other_name) print call_func(greet)  Output: Hello John\nRun code\n*Functions can return other functions:* In other words, functions generating other functions.\ndef compose_greet_func(): def get_message(): return \u0026quot;Hello there!\u0026quot; return get_message greet = compose_greet_func() print(greet())  Output: Hello there!\nRun code\n*Inner functions have access to the enclosing scope* More commonly known as a closure. A very powerful pattern that we will come across while building decorators. Another thing to note, Python only allows read access to the outer scope and not assignment. Notice how we modified the example above to read a “name” argument from the enclosing scope of the inner function and return the new function.\ndef compose_greet_func(name): def get_message(): return \u0026quot;Hello there \u0026quot;+name+\u0026quot;!\u0026quot; return get_message greet = compose_greet_func(\u0026quot;John\u0026quot;) print(greet())  Output: Hello there John!\nRun code\nComposition of Decorators Function decorators are simply wrappers to existing functions. Putting the ideas mentioned above together, we can build a decorator. In this example let’s consider a function that wraps the string output of another function by p tags.\ndef get_text(name): return \u0026quot;lorem ipsum, {0} dolor sit amet\u0026quot;.format(name) def p_decorate(func): def func_wrapper(name): return \u0026quot;`\u0026lt;p\u0026gt;`{0}`\u0026lt;/p\u0026gt;`\u0026quot;.format(func(name)) return func_wrapper my_get_text = p_decorate(get_text) print (my_get_text(\u0026quot;John\u0026quot;))  Output: \u0026lt;p\u0026gt;lorem ipsum, John dolor sit amet\u0026lt;/p\u0026gt;\nRun code\nThat was our first decorator. A function that takes another function as an argument, generates a new function, augmenting the work of the original function, and returning the generated function so we can use it anywhere. To have get_text itself be decorated by p_decorate, we just have to assign get text to the result of p decorate.\nget_text = p_decorate(get_text) print (get_text(\u0026quot;John\u0026quot;))  Output: lorem ipsum, John dolor sit amet\nAnother thing to notice is that our decorated function takes a name argument. All that we have to do in the decorator is to let the wrapper of get_text pass that argument.\n*Python’s Decorator Syntax* Python makes creating and using decorators a bit cleaner and nicer for the programmer through some syntactic sugar. To decorate get_text we don’t have to get_text = p_decorator(get_text). There is a neat shortcut for that, which is to mention the name of the decorating function before the function to be decorated. The name of the decorator should be perpended with an @ symbol.\ndef p_decorate(func): def func_wrapper(name): return \u0026quot;`\u0026lt;p\u0026gt;`{0}`\u0026lt;/p\u0026gt;`\u0026quot;.format(func(name)) return func_wrapper @p_decorate def get_text(name): return \u0026quot;lorem ipsum, {0} dolor sit amet\u0026quot;.format(name) print get_text(\u0026quot;John\u0026quot;)  Output: \u0026lt;p\u0026gt;lorem ipsum, John dolor sit amet\u0026lt;/p\u0026gt;\nRun code\nNow let’s consider we wanted to decorate our get_text function by 2 other functions to wrap a div and strong tag around the string output.\ndef p_decorate(func): def func_wrapper(name): return \u0026quot;`\u0026lt;p\u0026gt;`{0}`\u0026lt;/p\u0026gt;`\u0026quot;.format(func(name)) return func_wrapper def strong_decorate(func): def func_wrapper(name): return \u0026quot;`\u0026lt;strong\u0026gt;`{0}`\u0026lt;/strong\u0026gt;`\u0026quot;.format(func(name)) return func_wrapper def div_decorate(func): def func_wrapper(name): return \u0026quot;`\u0026lt;div\u0026gt;`{0}`\u0026lt;/div\u0026gt;`\u0026quot;.format(func(name)) return func_wrapper  With the basic approach, decorating get_text would be along the lines of\nget_text = div_decorate(p_decorate(strong_decorate(get_text)))  With Python’s decorator syntax, the same thing can be achieved with much more expressive power.\n@div_decorate @p_decorate @strong_decorate def get_text(name): return \u0026quot;lorem ipsum, {0} dolor sit amet\u0026quot;.format(name) print (get_text(\u0026quot;John\u0026quot;))  Output: \u0026lt;div\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;lorem ipsum, John dolor sit amet\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;\nRun code\nOne important thing to notice here is that the order of setting our decorators matters. If the order was different in the example above, the output would have been different.\nDecorating Methods In Python, methods are functions that expect their first parameter to be a reference to the current object. We can build decorators for methods the same way, while taking self into consideration in the wrapper function.\ndef p_decorate(func): def func_wrapper(self): return \u0026quot;`\u0026lt;p\u0026gt;`{0}`\u0026lt;/p\u0026gt;`\u0026quot;.format(func(self)) return func_wrapper class Person(object): def __init__(self): self.name = \u0026quot;John\u0026quot; self.family = \u0026quot;Doe\u0026quot; @p_decorate def get_fullname(self): return self.name+\u0026quot; \u0026quot;+self.family my_person = Person() print (my_person.get_fullname())  Output: \u0026lt;p\u0026gt;John Doe\u0026lt;/p\u0026gt;\nRun code\nA much better approach would be to make our decorator useful for functions and methods alike. This can be done by putting *args and **kwargs as parameters for the wrapper, then it can accept any arbitrary number of arguments and keyword arguments.\ndef p_decorate(func): def func_wrapper(*args, **kwargs): return \u0026quot;`\u0026lt;p\u0026gt;`{0}`\u0026lt;/p\u0026gt;`\u0026quot;.format(func(*args, **kwargs)) return func_wrapper class Person(object): def __init__(self): self.name = \u0026quot;John\u0026quot; self.family = \u0026quot;Doe\u0026quot; @p_decorate def get_fullname(self): return self.name+\u0026quot; \u0026quot;+self.family my_person = Person() print (my_person.get_fullname())  Output : \u0026lt;p\u0026gt;John Doe\u0026lt;/p\u0026gt;\nRun code\nPassing arguments to decorators Looking back at the example before the one above, you can notice how redundant the decorators in the example are. 3 decorators (divdecorate, pdecorate, strong_decorate) each with the same functionality, but wrapping the string with different tags.\nWe can definitely do much better than that. Why not have a more general implementation for one that takes the tag to wrap with as a string? Yes please!\ndef tags(tag_name): def tags_decorator(func): def func_wrapper(name): return \u0026quot;\u0026lt;{0}\u0026gt;{1}\u0026lt;/{0}\u0026gt;\u0026quot;.format(tag_name, func(name)) return func_wrapper return tags_decorator @tags(\u0026quot;p\u0026quot;) def get_text(name): return \u0026quot;Hello \u0026quot;+name print (get_text(\u0026quot;John\u0026quot;))  Output: \u0026lt;p\u0026gt;Hello John\u0026lt;/p\u0026gt;\nRun code\nIt took a bit more work in this case. Decorators expect to receive a function as an argument, that is why we will have to build a function that takes those extra arguments and generate our decorator on the fly. In the example above, tags is our decorator generator.\nDebugging decorated functions At the end of the day, decorators are just wrapping our functions. In case of debugging, that can be problematic since the wrapper function does not carry the name, module and docstring of the original function. Based on the example above if we do:\nprint (get_text.__name__)  Output: func_wrapper. The output was expected to be get_text yet, the attributes *name*, *doc*, and *module* of get_text got overridden by those of the wrapper(func_wrapper.\nObviously we can re-set them within func_wrapper but Python provides a much nicer way.\nFunctools to the rescue\nfrom functools import wraps def tags(tag_name): def tags_decorator(func): @wraps(func) def func_wrapper(name): return \u0026quot;`\u0026lt;{0}\u0026gt;`{1}`\u0026lt;/{0}\u0026gt;`\u0026quot;.format(tag_name, func(name)) return func_wrapper return tags_decorator @tags(\u0026quot;p\u0026quot;) def get_text(name): \u0026quot;\u0026quot;\u0026quot;returns some text\u0026quot;\u0026quot;\u0026quot; return \u0026quot;Hello \u0026quot;+name print (get_text.__name__) # get_text print (get_text.__doc__) # returns some text print (get_text.__module__) # __main__  Run code\nYou can notice from the output that the attributes of get_text are the correct ones now.\nPython For Loop Statement Example Python utilizes a for loop to iterate over a list of elements. This is unlike C or Java, which use the for loop to change a value in steps and access something such as an array using that value.\nFor loops iterate over collection-based data structures like lists, tuples, and dictionaries.\nThe basic syntax is:\nfor value in list_of_values: # use value inside this block  In general, you can use anything as the iterator value, where entries of the iterable can be assigned to. E.g. you can unpack tuples from a list of tuples:\nlist_of_tuples = [(1,2), (3,4)] for a, b in list_of_tuples: print(\u0026quot;a:\u0026quot;, a, \u0026quot;b:\u0026quot;, b)  On the other hand, you can loop over anything that is iterable. You can call a function or use a list literal.\nfor person in load_persons(): print(\u0026quot;The name is:\u0026quot;, person.name)  for character in [\u0026quot;P\u0026quot;, \u0026quot;y\u0026quot;, \u0026quot;t\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;n\u0026quot;]: print(\u0026quot;Give me a '{}'!\u0026quot;.format(character))  Some ways in which For loops are used:\n*Iterate over the range() function*\nfor i in range(10): print(i)  Rather than being a function, range is actually an immutable sequence type. The output will contain results from lower bound i.e 0 to the upper bound i.e 10, but excluding 10. By default the lower bound or the starting index is set to zero. Output:\n0 1 2 3 4 5 6 7 8 9  Additionally, one can specify the lower bound of the sequence and even the step of the sequence by adding a second and a third parameter.\nfor i in range(4,10,2): #From 4 to 9 using a step of two print(i)  Output:\n4 6 8  *xrange() function*\nFor the most part, xrange and range are the exact same in terms of functionality. They both provide a way to generate a list of integers for you to use, however you please. The only difference is that range returns a Python list object and xrange returns an xrange object. It means that xrange doesn’t actually generate a static list at run-time like range does. It creates the values as you need them with a special technique called yielding. This technique is used with a type of object known as generators.\nOne more thing to add. In Python 3.x, the xrange function does not exist anymore. The range function now does what xrange does in Python 2.x\n*Iterate over values in a list or tuple*\nA = [\u0026quot;hello\u0026quot;, 1, 65, \u0026quot;thank you\u0026quot;, [2, 3]] for value in A: print(value)  Output:\nhello 1 65 thank you [2, 3]  *Iterate over keys in a dictionary (aka hashmap)*\nfruits_to_colors = {\u0026quot;apple\u0026quot;: \u0026quot;#ff0000\u0026quot;, \u0026quot;lemon\u0026quot;: \u0026quot;#ffff00\u0026quot;, \u0026quot;orange\u0026quot;: \u0026quot;#ffa500\u0026quot;} for key in fruits_to_colors: print(key, fruits_to_colors[key])  Output:\napple #ff0000 lemon #ffff00 orange #ffa500  *Iterate over two lists of same size in a single loop with the zip() function*\nA = [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;] B = [\u0026quot;a\u0026quot;, \u0026quot;d\u0026quot;, \u0026quot;e\u0026quot;] for a, b in zip(A, B): print a, b, a == b  Output:\n\u0026gt; a a True b d False c e False \u0026gt;  *Iterate over a list and get the corresponding index with the enumerate() function*\nA = [\u0026quot;this\u0026quot;, \u0026quot;is\u0026quot;, \u0026quot;something\u0026quot;, \u0026quot;fun\u0026quot;] for index,word in enumerate(A): print(index, word)  Output:\n0 this 1 is 2 something 3 fun  A common use case is iterating over a dictionary:\nfor name, phonenumber in contacts.items(): print(name, \u0026quot;is reachable under\u0026quot;, phonenumber)  If you absolutely need to access the current index of your iteration, do *NOT* use range(len(iterable))! This is an extremely bad practice and will get you plenty of chuckles from senior Python developers. Use the built in function enumerate() instead:\nfor index, item in enumerate(shopping_basket): print(\u0026quot;Item\u0026quot;, index, \u0026quot;is a\u0026quot;, item)  *for/else statements* Pyhton permits you to use else with for loops, the else case is executed when none of the conditions with in the loop body was satisfied. To use the else we have to make use of break statement so that we can break out of the loop on a satisfied condition. If we do not break out then the else part will be executed.\nweek_days = ['Monday','Tuesday','Wednesday','Thursday','Friday'] today = 'Saturday' for day in week_days: if day == today: print('today is a week day') break else: print('today is not a week day')  In the above case the output will be today is not a week day since the break within the loop will never be executed.\n*Iterate over a list using inline loop function*\nWe could also iterate inline using python. For example if we need to uppercase all the words in a list from a list, we could simply do the following:\nA = [\u0026quot;this\u0026quot;, \u0026quot;is\u0026quot;, \u0026quot;awesome\u0026quot;, \u0026quot;shinning\u0026quot;, \u0026quot;star\u0026quot;] UPPERCASE = [word.upper() for word in A] print (UPPERCASE)  Output:\n['THIS', 'IS', 'AWESOME', 'SHINNING', 'STAR']  Python Function Example A function allows you to define a reusable block of code that can be executed many times within your program.\nFunctions allow you to create more modular and DRY solutions to complex problems.\nWhile Python already provides many built-in functions such as print() and len(), you can also define your own functions to use within your projects.\nOne of the great advantages of using functions in your code is that it reduces the overall number of lines of code in your project.\nSyntax In Python, a function definition has the following features:\n The keyword def a function name parentheses’()’, and within parentheses input parameters, although the input parameters are optional. a colon ’:’ some block of code to execute a return statement (optional)\n# a function with no parameters or returned values def sayHello(): print(\u0026quot;Hello!\u0026quot;) sayHello() # calls the function, 'Hello!' is printed to the console # a function with a parameter def helloWithName(name): print(\u0026quot;Hello \u0026quot; + name + \u0026quot;!\u0026quot;) helloWithName(\u0026quot;Ada\u0026quot;) # calls the function, 'Hello Ada!' is printed to the console # a function with multiple parameters with a return statement def multiply(val1, val2): return val1 * val2 multiply(3, 5) # prints 15 to the console   Functions are blocks of code that can be reused simply by calling the function. This enables simple, elegant code reuse without explicitly re-writing sections of code. This makes code more readable, easier to debug, and limits typing errors.\nFunctions in Python are created using the def keyword, followed by a function name and function parameters inside parentheses.\nA function always returns a value. The return keyword is used by the function to return a value. If you don’t want to return any value, the default value None will be returned.\nThe function name is used to call the function, passing the needed parameters inside parentheses.\n# this is a basic sum function def sum(a, b): return a + b result = sum(1, 2) # result = 3  You can define default values for the parameters, and that way Python will interpret that the value of that parameter is the default one if none is given.\ndef sum(a, b=3): return a + b result = sum(1) # result = 4  You can pass the parameters in the order you want, using the name of the parameter.\nresult = sum(b=2, a=2) # result = 4  However, it is not possible to pass a keyword argument before a non-keyword one.\nresult = sum(3, b=2) #result = 5 result2 = sum(b=2, 3) #Will raise SyntaxError  Functions are also Objects, so you can assign them to a variable, and use that variable like a function.\ns = sum result = s(1, 2) # result = 3  Notes If a function definition includes parameters, you must provide the same number of parameters when you call the function.\nprint(multiply(3)) # TypeError: multiply() takes exactly 2 arguments (0 given) print(multiply('a', 5)) # 'aaaaa' printed to the console print(multiply('a', 'b')) # TypeError: Python can't multiply two strings  The block of code that the function will run includes all statements indented within the function.\ndef myFunc(): print('this will print') print('so will this') x = 7 # the assignment of x is not a part of the function since it is not indented  Variables defined within a function only exist within the scope of that function.\ndef double(num): x = num * 2 return x print(x) # error - x is not defined print(double(4)) # prints 8  Python interprets the function block only when the function is called and not when the function is defined. So even if the function definition block contains some sort of error, the python interpreter will point that out only when the function is called.\nPython Generator Example Generators are a special type of function that allows you to return values without ending a function. It does this by using the yield keyword. Similar to return, the yieldexpression will return a value to the caller. The key difference between the two is that yield will suspend the function, allowing for more values to be returned in the future.\nGenerators are iterable so they can be used cleanly with for loops or anything else that iterates.\ndef my_generator(): yield 'hello' yield 'world' yield '!' for item in my_generator(): print(item) # output: # hello # world # !  Like other iterators, generators can be passed to the next function to retrieve the next item. When a generator has no more values to yield, a StopIteration error is raised.\ng = my_generator() print(next(g)) # 'hello' print(next(g)) # 'world' print(next(g)) # '!' print(next(g)) # Traceback (most recent call last): # File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; # StopIteration  Generators are particularly useful when you need to create a large set of values but do not need to keep them all in memory at the same time. For example, if you need to print the first million fibonacci numbers, you would typically return a list of a million values and iterate over the list to print each value. However with a generator, you can return each value one at a time:\ndef fib(n): a = 1 b = 1 for i in range(n): yield a a, b = b, a + b for x in fib(1000000): print(x)  Python Iterator Example Python supports a concept of iteration over containers. This is implemented using two distinct methods; these are used to allow user-defined classes to support iteration.\nPython Docs - Iterator Types\nIteration is the process of programmatically repeating a step a given number of times. A programmer can make use of iteration to perform the same operation on every item in a collection of data, for example printing out every item in a list.\n Objects can implement a __iter__() method that returns an iterator object to support iteration.  Iterator objects must implement:\n __iter__(): returns the iterator object. __next__(): returns the next object of the container.iterator_object = ‘abc’.*iter*() print(iterator_object) print(id(iterator_object)) print(id(iterator_object.*iter*())) # Returns the iterator itself. print(iterator_object.*next*()) # Returns 1st object and advances iterator. print(iterator_object.*next*()) # Returns 2nd object and advances iterator. print(iterator_object.*next*()) # Returns 3rd object and advances iterator. print(iterator_object.*next*()) # Raises StopIteration Exception.  Output :\n\u0026lt;str_iterator object at 0x102e196a0\u0026gt; 4343305888 4343305888 a b c --------------------------------------------------------------------------- StopIteration Traceback (most recent call last) \u0026lt;ipython-input-1-d466eea8c1b0\u0026gt; in \u0026lt;module\u0026gt;() 6 print(iterator_object.__next__()) # Returns 2nd object and advances iterator. 7 print(iterator_object.__next__()) # Returns 3rd object and advances iterator. ----\u0026gt; 8 print(iterator_object.__next__()) # Raises StopIteration Exception. StopIteration:  Ternary operator in Python Example Ternary operations in Python, often also referred to as conditional expressions, allow the programmer to perform an evaluation and return a value based on the truth of the given condition.\nThe ternary operator differs from a standard if, else, elif structure in the sense that it is not a control flow structure, and behaves more like other operators such as == or != in the Python language.\nExample In this example, the string Even is returned if the val variable is even, otherwise the string Odd is returned. The returned string is then assigned to the is_even variable and printed to the console.\nInput for val in range(1, 11): is_even = \u0026quot;Even\u0026quot; if val % 2 == 0 else \u0026quot;Odd\u0026quot; print(val, is_even, sep=' = ')  Output 1 = Odd 2 = Even 3 = Odd 4 = Even 5 = Odd 6 = Even 7 = Odd 8 = Even 9 = Odd 10 = Even  Python While Loop Statement Example Python utilizes the while loop similarly to other popular languages. The while loop evaluates a condition then executes a block of code if the condition is true. The block of code executes repeatedly until the condition becomes false.\nThe basic syntax is:\ncounter = 0 while counter \u0026lt; 10: # Execute the block of code here as # long as counter is less than 10  An example is shown below:\ndays = 0 week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] while days \u0026lt; 7: print(\u0026quot;Today is \u0026quot; + week[days]) days += 1  Output:\nToday is Monday Today is Tuesday Today is Wednesday Today is Thursday Today is Friday Today is Saturday Today is Sunday  Line-by-Line explanation of the above CODE:\n the variable ‘days’ is set to a value 0. a variable week is assigned to a list containing all the days of the week. while loop starts the block of code will be executed until the condition returns ‘true’. the condition is ‘days\u0026lt;7’ which roughly says run the while loop until the point the variable days is less than 7 So when the days=7 the while loop stops executing. the days variable gets updated on every iteration. When the while loop runs for the first time, the line ‘Today is Monday’ is printed onto the console and the variable days becomes equal to 1. Since the variable days is equal to 1 which is less than 7, the while loop is executed again. It goes on again and again and when the console prints ‘Today is Sunday’ the variable days is now equal to 7 and the while loop stops executing.  How to Install Python 3 You can download Python from this official link. Based on your OS (Windows or Linux or OSX), you might want to install Python 3 following these instructions.\nUsing Virtual Environments It is always a great idea to sandbox your Python installation and keep it separate from your System Python. The System Python is the path to Python interpreter, which is used by other modules installed along with your OS.\nIt’s *not safe* to install Python Web-frameworks or libraries directly using System Python. Instead, you can use Virtualenv to create and spawn a separate Python process when you are developing Python applications.\nVirtualenvwrapper The Virtualenvwrapper module makes it easy for you to manage and sandbox multiple Python sandboxed environments in one machine, without corrupting any modules or services written in Python and used by your machine.\nOf course, most cloud hosted development environments such as Nitrous or Cloud9 also come with these pre-installed and ready for you to get coding! You can quickly pick a box from your dashboard and start coding after activating a Python 3 environment.\nIn Cloud9, you need to select the Django box while creating a new development environment.\nA few shell command examples follow. If you wish to copy-paste, do note that the $ sign is a shorthand for the terminal prompt, it’s not part of the command. My terminal prompt looks something like this:\nalayek:~/workspace (master) $  And, an ls would look like\nalayek:~/workspace (master) $ ls  But, while writing the same in this documentation, I would be writing it as\n$ ls  Getting back to our discussion, you can create a Python 3 interpreter-included sandbox on Cloud9 by running on your cloud terminal:\n$ mkvirtualenv py3 --python=/usr/bin/python3  You have to run it only once after creating a new box for your project. Once executed, this command would create a new sandboxed virtualenv ready for you to use, named py3.\nTo view available virtual environments, you can use\n$ workon  To activate py3, you can use the workon command with the name of the environment:\n$ workon py3  All three terminal commands above would also work on local Linux machines or OSX machines. These are virtualenvwrapper commands; so if you are planning on using them, make sure you have this module installed and added to PATH variable.\nIf you are inside a virtual environment; you can easily find that out by checking your terminal prompt. The environment name will be clearly shown in your terminal prompt.\nFor instance, when I am inside the py3 environment, I will be seeing this as my terminal prompt:\n(py3)alayek:~/workspace (master) $  Notice the (py3) in braces! If for some reason you are not seeing this, even if you are inside a virtual env; you can try doing one of the things mentioned here.\nTo get out of a virtual environment or to deactivate one - use this command:\n$ deactivate  Again, this works only with virtualenvwrapper module.\nPipenv An alternative to using virtualenvwrapper is Pipenv. It automatically creates virtual environments for your projects, and maintains a Pipfile which contains the dependencies. Using Pipenv means you no longer need to use pip and virtualenv separately, or manage your own requirements.txt file. For those familiar with JavaScript, Pipenv is similar to using a packaging tool like npm.\nTo get started with Pipenv, you can follow this very detailed guide. Pipenv makes it easy to specify which version of Python you wish to use for each project, import from an existing requirements.txt file and graph your dependencies.\n"});index.add({'id':56,'href':'/library/tutorials/docs/articles/python/onverting-strings-to-datetime/','title':"Converting Strings using datetime",'content':" Converting Strings using datetime The datetime module consists of three different object types: date, time and datetime. As you may have guessed, date holds the date, time holds the time, and datetime holds both date and time.\nFor example, the following example will print the current date and time:\nimport datetime print ('Current date/time: {}'.format(datetime.datetime.now()))  Running this code will print an output similar to below:\n$ python3 datetime-print-1.py Current date/time: 2018-06-29 08:15:27.243860  When no custom formatting is given, the default string format is used, i.e. the format for \u0026ldquo;2018-06-29 08:15:27.243860\u0026rdquo; is in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm). If our input string to create a datetime object is in the same ISO 8601 format, we can easily parse it to a datetime object.\nLet\u0026rsquo;s take a look at the code below:\nimport datetime date_time_str = '2018-06-29 08:15:27.243860' date_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S.%f') print('Date:', date_time_obj.date()) print('Time:', date_time_obj.time()) print('Date-time:', date_time_obj)  Running it will print the below output:\n$ python3 datetime-print-2.py Date: 2018-06-29 Time: 08:15:27.243860 Date-time: 2018-06-29 08:15:27.243860  In this example, we are using a new method called strptime. This method takes two arguments: the first one is the string representation of the date-time and the second one is the format of the input string. The return value is of the type datetime. In our example, \u0026quot;2018-06-29 08:15:27.243860\u0026quot; is the input string and \u0026quot;%Y-%m-%d %H:%M:%S.%f\u0026quot; is the format of this date string. The returned datetime value is stored in date_time_obj variable. Since this is a datetime variable, we can call date() and time() methods directly on it. As you can see from the output, it prints the \u0026lsquo;date\u0026rsquo; and \u0026lsquo;time\u0026rsquo; part of the input string.\nYou might be wondering what is the meaning of the format \u0026quot;%Y-%m-%d %H:%M:%S.%f\u0026quot;. These are known as format tokens with different meaning for each token. Check out the strptime documentation for the list of all different types of format code supported in Python.\nSo, if the format of a string is known, it can be easily parsed to a datetime object using strptime. Let me show you one more non-trivial example:\nimport datetime date_time_str = 'Jun 28 2018 7:40AM' date_time_obj = datetime.datetime.strptime(date_time_str, '%b %d %Y %I:%M%p') print('Date:', date_time_obj.date()) print('Time:', date_time_obj.time()) print('Date-time:', date_time_obj)  From the following output you can see that the string was successfully parsed since it is being properly printed by the datetime object here.\n$ python3 datetime-print-3.py Date: 2018-06-28 Time: 07:40:00 Date-time: 2018-06-28 07:40:00  Here are a few more examples of commonly used time formats and the tokens used for parsing:\n\u0026quot;Jun 28 2018 at 7:40AM\u0026quot; -\u0026gt; \u0026quot;%b %d %Y at %I:%M%p\u0026quot; \u0026quot;September 18, 2017, 22:19:55\u0026quot; -\u0026gt; \u0026quot;%B %d, %Y, %H:%M:%S\u0026quot; \u0026quot;Sun,05/12/99,12:30PM\u0026quot; -\u0026gt; \u0026quot;%a,%d/%m/%y,%I:%M%p\u0026quot; \u0026quot;Mon, 21 March, 2015\u0026quot; -\u0026gt; \u0026quot;%a, %d %B, %Y\u0026quot; \u0026quot;2018-03-12T10:12:45Z\u0026quot; -\u0026gt; \u0026quot;%Y-%m-%dT%H:%M:%SZ\u0026quot;  You can parse a date-time string of any format using the table mentioned in the strptime documentation.\nDealing with Timezones and datetime Handling date-times becomes more complex while dealing with timezones. All above examples we have discussed are naive datetime objects, i.e. these objects don\u0026rsquo;t contain any timezone-related data. The datetime object has one variable tzinfo, that holds the timezone information.\nimport datetime as dt dtime = dt.datetime.now() print(dtime) print(dtime.tzinfo)  This code will print:\n$ python3 datetime-tzinfo-1.py 2018-06-29 22:16:36.132767 None  The output of tzinfo is None since it is a naive datetime object. For timezone conversion, one library called pytz is available for Python. You can install it as described in these instructions. Now, let\u0026rsquo;s use the pytz library to convert the above timestamp to UTC.\nimport datetime as dt import pytz dtime = dt.datetime.now(pytz.utc) print(dtime) print(dtime.tzinfo)  Output:\n$ python3 datetime-tzinfo-2.py 2018-06-29 17:08:00.586525+00:00 UTC  +00:00 is the difference between the displayed time and the UTC time. In this example the value of tzinfo happens to be UTC as well, hence the 00:00 offset. In this case, the datetime object is a timezone-aware object.\nSimilarly, we can convert date-time strings to any other timezone. For example, we can convert the string \u0026ldquo;2018-06-29 17:08:00.586525+00:00\u0026rdquo; to \u0026ldquo;America/New_York\u0026rdquo; timezone, as shown below:\nimport datetime as dt import pytz date_time_str = '2018-06-29 17:08:00' date_time_obj = dt.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S') timezone = pytz.timezone('America/New_York') timezone_date_time_obj = timezone.localize(date_time_obj) print(timezone_date_time_obj) print(timezone_date_time_obj.tzinfo)  Output:\n$ python3 datetime-tzinfo-3.py 2018-06-29 17:08:00-04:00 America/New_York  First, we have converted the string to a datetime object, date_time_obj. Then we converted it to a timezone-enabled datetime object, timezone_date_time_obj. Since we have mentioned the timezone as \u0026ldquo;America/New_York\u0026rdquo;, the output time shows that it is 4 hours behind than UTC time. You can check this Wikipedia page to find the full list of available time zones.\nConverting Timezones We can convert timezone of a datetime object from one region to another, as shown in the example below:\nimport datetime as dt import pytz timezone_nw = pytz.timezone('America/New_York') nw_datetime_obj = dt.datetime.now(timezone_nw) timezone_london = pytz.timezone('Europe/London') london_datetime_obj = nw_datetime_obj.astimezone(timezone_london) print('America/New_York:', nw_datetime_obj) print('Europe/London:', london_datetime_obj)  First, it created one datetime object with the current time on \u0026ldquo;America/New_York\u0026rdquo; timezone. Then using astimezone() method, we have converted this datetime to \u0026ldquo;Europe/London\u0026rdquo; timezone. Both datetimes will print different values like:\n$ python3 datetime-tzinfo-4.py America/New_York: 2018-06-29 22:21:41.349491-04:00 Europe/London: 2018-06-30 03:21:41.349491+01:00  Using Third Party Libraries Python\u0026rsquo;s datetime module can convert all different types of strings to a datetime object. But the main problem is that in order to do this you need to create the appropriate formatting code string that strptime can understand. Creating this string takes time and it makes the code harder to read. Instead, we can use other third-party libraries to make it easier.\nIn some cases these third party libraries also have better built-in support for manipulating and comparing date-times, and some even have timezones built-in, so you don\u0026rsquo;t need to include an extra package.\nLet\u0026rsquo;s take a look at few of these libraries in the following sections.\ndateutil The dateutil module is an extension to the datetime module. We don\u0026rsquo;t need to pass any parsing code to parse a string. For example:\nfrom dateutil.parser import parse datetime = parse('2018-06-29 22:21:41') print(datetime)  This parse function will parse the string automatically and store it in the datetime variable. Parsing is done automatically. You don\u0026rsquo;t have to mention any format string. Let\u0026rsquo;s try to parse different types of strings using dateutil:\nfrom dateutil.parser import parse date_array = [ '2018-06-29 08:15:27.243860', 'Jun 28 2018 7:40AM', 'Jun 28 2018 at 7:40AM', 'September 18, 2017, 22:19:55', 'Sun, 05/12/1999, 12:30PM', 'Mon, 21 March, 2015', '2018-03-12T10:12:45Z', '2018-06-29 17:08:00.586525+00:00', '2018-06-29 17:08:00.586525+05:00', 'Tuesday , 6th September, 2017 at 4:30pm' ] for date in date_array: print('Parsing: ' + date) dt = parse(date) print(dt.date()) print(dt.time()) print(dt.tzinfo) print('\\n')  Output:\n$ python3 dateutil-1.py Parsing: 2018-06-29 08:15:27.243860 2018-06-29 08:15:27.243860 None Parsing: Jun 28 2018 7:40AM 2018-06-28 07:40:00 None Parsing: Jun 28 2018 at 7:40AM 2018-06-28 07:40:00 None Parsing: September 18, 2017, 22:19:55 2017-09-18 22:19:55 None Parsing: Sun, 05/12/1999, 12:30PM 1999-05-12 12:30:00 None Parsing: Mon, 21 March, 2015 2015-03-21 00:00:00 None Parsing: 2018-03-12T10:12:45Z 2018-03-12 10:12:45 tzutc() Parsing: 2018-06-29 17:08:00.586525+00:00 2018-06-29 17:08:00.586525 tzutc() Parsing: 2018-06-29 17:08:00.586525+05:00 2018-06-29 17:08:00.586525 tzoffset(None, 18000) Parsing: Tuesday , 6th September, 2017 at 4:30pm 2017-09-06 16:30:00 None  You can see that almost any type of string can be parsed easily using the dateutil module.\nMaya Maya also makes it very easy to parse a string and for changing timezones. Some simple examples are shown below:\nimport maya dt = maya.parse('2018-04-29T17:45:25Z').datetime() print(dt.date()) print(dt.time()) print(dt.tzinfo)  Output:\n$ python3 maya-1.py 2018-04-29 17:45:25 UTC  For converting the time to a different timezone:\nimport maya dt = maya.parse('2018-04-29T17:45:25Z').datetime(to_timezone='America/New_York', naive=False) print(dt.date()) print(dt.time()) print(dt.tzinfo)  Output:\n$ python3 maya-2.py 2018-04-29 13:45:25 America/New_York  Now isn\u0026rsquo;t that easy to use? Let\u0026rsquo;s try out maya with the same set of strings we have used with dateutil:\nimport maya date_array = [ '2018-06-29 08:15:27.243860', 'Jun 28 2018 7:40AM', 'Jun 28 2018 at 7:40AM', 'September 18, 2017, 22:19:55', 'Sun, 05/12/1999, 12:30PM', 'Mon, 21 March, 2015', '2018-03-12T10:12:45Z', '2018-06-29 17:08:00.586525+00:00', '2018-06-29 17:08:00.586525+05:00', 'Tuesday , 6th September, 2017 at 4:30pm' ] for date in date_array: print('Parsing: ' + date) dt = maya.parse(date).datetime() print(dt) print(dt.date()) print(dt.time()) print(dt.tzinfo)  Output:\n$ python3 maya-3.py Parsing: 2018-06-29 08:15:27.243860 2018-06-29 08:15:27.243860+00:00 2018-06-29 08:15:27.243860 UTC Parsing: Jun 28 2018 7:40AM 2018-06-28 07:40:00+00:00 2018-06-28 07:40:00 UTC Parsing: Jun 28 2018 at 7:40AM 2018-06-28 07:40:00+00:00 2018-06-28 07:40:00 UTC Parsing: September 18, 2017, 22:19:55 2017-09-18 22:19:55+00:00 2017-09-18 22:19:55 UTC Parsing: Sun, 05/12/1999, 12:30PM 1999-05-12 12:30:00+00:00 1999-05-12 12:30:00 UTC Parsing: Mon, 21 March, 2015 2015-03-21 00:00:00+00:00 2015-03-21 00:00:00 UTC Parsing: 2018-03-12T10:12:45Z 2018-03-12 10:12:45+00:00 2018-03-12 10:12:45 UTC Parsing: 2018-06-29 17:08:00.586525+00:00 2018-06-29 17:08:00.586525+00:00 2018-06-29 17:08:00.586525 UTC Parsing: 2018-06-29 17:08:00.586525+05:00 2018-06-29 12:08:00.586525+00:00 2018-06-29 12:08:00.586525 UTC Parsing: Tuesday , 6th September, 2017 at 4:30pm 2017-09-06 16:30:00+00:00 2017-09-06 16:30:00 UTC  As you can see, all date formats were parsed, but did you notice the difference? If we are not providing the timezone info it automatically converts it to UTC. So, it is important to note that we need to provide to_timezone and naive parameters if the time is not in UTC.\nArrow Arrow is another library for dealing with datetime in Python. We can get the Python datetime object from an arrow object. Let\u0026rsquo;s try this with the same example string we have used for maya:\nimport arrow dt = arrow.get('2018-04-29T17:45:25Z') print(dt.date()) print(dt.time()) print(dt.tzinfo)  Output:\n$ python3 arrow-1.py 2018-04-29 17:45:25 tzutc()  Timezone conversion:\nimport arrow dt = arrow.get('2018-04-29T17:45:25Z').to('America/New_York') print(dt) print(dt.date()) print(dt.time())  Output:\n$ python3 arrow-2.py 2018-04-29T13:45:25-04:00 2018-04-29 13:45:25  As you can see the date-time string is converted to the \u0026ldquo;America/New_York\u0026rdquo; region.\nNow, let\u0026rsquo;s again use the same set of strings we have used above:\nimport arrow date_array = [ '2018-06-29 08:15:27.243860', #'Jun 28 2018 7:40AM', #'Jun 28 2018 at 7:40AM', #'September 18, 2017, 22:19:55', #'Sun, 05/12/1999, 12:30PM', #'Mon, 21 March, 2015', '2018-03-12T10:12:45Z', '2018-06-29 17:08:00.586525+00:00', '2018-06-29 17:08:00.586525+05:00', #'Tuesday , 6th September, 2017 at 4:30pm' ] for date in date_array: dt = arrow.get(date) print('Parsing: ' + date) print(dt) print(dt.date()) print(dt.time()) print(dt.tzinfo)  This code will fail for the date-time strings that have been commented out. The output for other strings will be:\n$ python3 arrow-3.py Parsing: 2018-06-29 08:15:27.243860 2018-06-29T08:15:27.243860+00:00 2018-06-29 08:15:27.243860 tzutc() Parsing: 2018-03-12T10:12:45Z 2018-03-12T10:12:45+00:00 2018-03-12 10:12:45 tzutc() Parsing: 2018-06-29 17:08:00.586525+00:00 2018-06-29T17:08:00.586525+00:00 2018-06-29 17:08:00.586525 tzoffset(None, 0) Parsing: 2018-06-29 17:08:00.586525+05:00 2018-06-29T17:08:00.586525+05:00 2018-06-29 17:08:00.586525 tzoffset(None, 18000)  In order to correctly parse the date-time strings that I have commented out, you\u0026rsquo;ll need to pass the corresponding format tokens. For example, \u0026ldquo;MMM\u0026rdquo; for months name, like \u0026ldquo;Jan, Feb, Mar\u0026rdquo; etc. You can check this guide for all available tokens.\nConclusion We have checked different ways to parse a string to a datetime object in Python. You can either opt for the default Python datetime library or any of the third party library mentioned in this article, among many others. The main problem with default datetime package is that we need to specify the parsing code manually for almost all date-time string formats. So, if your string format changes in the future, you will likely have to change your code as well. But many third-party libraries, like the ones mentioned here, handle it automatically.\nOne more problem we face is dealing with timezones. The best way to handle them is always to store the time in UTC format on the server and convert it to the user\u0026rsquo;s local timezone while parsing. Not only for parsing string, these libraries can be used for a lot of different types of date-time related operations. I\u0026rsquo;d encourage you to go through the documents to learn the functionalities in detail.\n Source stackabuse.com.\n "});index.add({'id':57,'href':'/library/tutorials/docs/articles/python/date-time/','title':"Datetime",'content':" Datetime import datetime x = datetime.datetime.now() print(x)  2019-09-26 00:21:06.668559  Date Output import datetime x = datetime.datetime.now() print(x.year) print(x.strftime(\u0026quot;%A\u0026quot;))  2019 Thursday  Creating Date Objects import datetime x = datetime.datetime(2020, 5, 17) print(x)  2020-05-17 00:00:00  The strftime() Method import datetime x = datetime.datetime(2018, 6, 1) print(x.strftime(\u0026quot;%B\u0026quot;))  June  A reference of all the legal format codes:    Directive Description Example     %a Weekday, short version Wed   %A Weekday, full version Wednesday   %w Weekday as a number 0-6, 0 is Sunday 3   %d Day of month 01-31 31   %b Month name, short version Dec   %B Month name, full version December   %m Month as a number 01-12 12   %y Year, short version, without century 18   %Y Year, full version 2018   %H Hour 00-23 17   %I Hour 00-12 05   %p AM/PM PM   %M Minute 00-59 41   %S Second 00-59 08   %f Microsecond 000000-999999 548513   %z UTC offset +0100   %Z Timezone CST   %j Day number of year 001-366 365   %U Week number of year, Sunday as the first day of week, 00-53 52   %W Week number of year, Monday as the first day of week, 00-53 52   %c Local version of date and time Mon Dec 31 17:41:00 2018   %x Local version of date 12/31/18   %X Local version of time 17:41:00   %% A % character %    timedelta ตัวอย่างการหาผลต่างของวันที่\nimport datetime import pytz my_birthday = datetime.datetime(1985, 10, 20, 17, 55) brothers_birthday = datetime.datetime(1992, 6, 25, 18, 30) indy = pytz.timezone(\u0026quot;America/Indianapolis\u0026quot;) my_birthday = indy.localize(my_birthday) brothers_birthday = indy.localize(brothers_birthday) diff = brothers_birthday - my_birthday print(diff)  2440 days, 0:35:00  หาวัน โดยบวกจากวันปัจจุบันไปอีก 90 วัน\nimport datetime today = datetime.datetime.now() ninety_days = datetime.timedelta(days=90) target_date = today + ninety_days target_date.strftime(\u0026quot;%A\u0026quot;)  'Wednesday'  "});index.add({'id':58,'href':'/library/tutorials/','title':"e-Library",'content':" e-Library "});index.add({'id':59,'href':'/library/tutorials/docs/articles/data-science/finance/exploration-stock-index/','title':"Exploration of S\u0026P 500 Index",'content':" Exploration of S\u0026amp;P 500 Index Using Pandas and Matplotlib In this article we want to explore whether it is true that staying in the market over a longer duration can be lucrative.\nImport the Python libraries that are commonly used for data analysis and data exploration such as Pandas and Matplotlib.\nIn [1]:\nimport pandas as pd import numpy as np import matplotlib.pyplot as plt  Read the files with S\u0026amp;P 500 data into Pandas dataframes.\nIn [2]:\ndf1 = pd.read_csv('SP5001.csv') df2 = pd.read_csv('SP5002.csv') df3 = pd.read_csv('SP5003.csv') df = pd.concat([df1,df2,df3])  The dataset has a number of columns such as Open, Close etc. For the purposes of our exploration we will focus only on the Close price since we are interested in trends and not necessarily accuracy of returns.\nIn [3]:\ndf.head()  Take a look at the datatypes\nIn [4]:\ndf.info()  \u0026lt;class 'pandas.core.frame.DataFrame'\u0026gt; Int64Index: 15429 entries, 0 to 118 Data columns (total 7 columns): Adj Close 15429 non-null float64 Close 15429 non-null float64 Date 15429 non-null object High 15429 non-null float64 Low 15429 non-null float64 Open 15429 non-null float64 Volume 15429 non-null int64 dtypes: float64(5), int64(1), object(1) memory usage: 964.3+ KB  The datatype of the Date field needs to be converted into datetime64. This will help with plotting and computations as we shall see ahead.\nIn [5]:\ndf['Date'] = df.loc[:,'Date'].astype('datetime64[ns]')  Extracting just the fields that we need into a new dataframe with daily data\nIn [6]:\ndfd = df[[\u0026quot;Date\u0026quot;, \u0026quot;Close\u0026quot;]]  Setting the index of the dataframe to date\nIn [7]:\ndfd = dfd.set_index('Date')  Take a look at the first few rows of the dataframe\nIn [8]:\ndfd.head()  Sort the dataframe by date field\nIn [9]:\ndfd = dfd.sort_index()  Create 2 new dataframes to hold the monthly average and yearly averages\nIn [10]:\ndfm = dfd.resample('M').mean() dfy = dfd.resample('Y').mean()  Take a look at the monthly average price. Notice that after sorting the initial rows go all the way back to 1957.\nIn [11]:\ndfm.head()  S\u0026amp;P 500 closed today Nov. 6, 2018 at 2747.62. What is the monthly return today had one unit been purchased monthly starting at the very first month that we have data for?\nIn [12]:\ntday = 2747.62dfm['Return'] = (tday - dfm['Close'])/dfm['Close']*100  So if one had bought one unit of S\u0026amp;P 500 back in 1957 then it would at today’s price return 6138%.\nIn [13]:\ndfm.head()  We calculated the returns for every day that we have data for in our dataframe dating back to 1957. Over the past 30 year period here is the return of a single unit of S\u0026amp;P 500 over time as of Nov. 6, 2018.\nIn [29]:\ndfm.iloc[-360:,1].plot()  Now let us explore the yearly average data\nIn [15]:\ndfy.head()  The chart above is useful to show the distribution of return over time. It confirms our intuition that returns are higher if stocks are held over a longer period and gradually decline as we hold them for lesser periods.\nIt will be interesting to see how much the five, ten, fifteen, twenty, twenty five and thirty year returns have changed over time. For this we will use the yearly average data.\nIn [16]:\ndfy['5y'] = dfy['Close'].shift(5)  In [17]:\ndfy['10y'] = dfy['Close'].shift(10) dfy['15y'] = dfy['Close'].shift(15) dfy['20y'] = dfy['Close'].shift(20) dfy['25y'] = dfy['Close'].shift(25) dfy['30y'] = dfy['Close'].shift(30)  Create a new dataframe to calculate the five year returns over time\nIn [18]:\nfiveyearreturn = dfy[['Close','5y']].dropna() fiveyearreturn['Return'] = (fiveyearreturn['Close'] - fiveyearreturn['5y'])/fiveyearreturn['5y']*100  Create a boxplot and a kde plot of 5 year returns. The vast majority of the 5 year returns are above zero, which means that more often than not, it is hard to lose money in the market if held over a 5 year period. Although there are some years with negative returns. So had the index been purchased during some months, you could still be in the red after 5 years!\nIn [19]:\nplt.figure(figsize=(12,6)) ax = plt.subplot(121) fiveyearreturn['Return'].plot(kind='box')ax = plt.subplot(122) fiveyearreturn['Return'].plot(kind='kde')  tenyearreturn = dfy[['Close','10y']].dropna() tenyearreturn['Return'] = (tenyearreturn['Close'] - tenyearreturn['10y'])/tenyearreturn['10y']*100  A look at the 10 year returns shows that holding S\u0026amp;P 500 index over 10 years shows a largely positive returns, with a median return of 85%. Vast majority of the returns were over 100%. In some years the returns were above 300% while in others it may have been below 0%!\nIn [21]:\nplt.figure(figsize=(12,6)) ax = plt.subplot(121) tenyearreturn['Return'].plot(kind='box') ax = plt.subplot(122) tenyearreturn['Return'].plot(kind='kde')  Repeating this exercise for 15, 20, 25 and 30 years will provide the following plots:\n15 Years\n20 Years\n25 Years\n30 Years\ncombinedreturn = pd.concat([fiveyearreturn['Return'], tenyearreturn['Return'], fifteenyearreturn['Return'], twentyyearreturn['Return'], x25yearreturn['Return'], thirtyyearreturn['Return']],axis=1, keys=['5y', '10y', '15y', '20y', '25y', '30y'])  Here is a side by side box plot of returns over 5, 10, 15, 20, 25 and 30 year periods.\nIn [28]:\ncombinedreturn.plot(kind='box', figsize=(8,6))  Combined Returns for 5,10,15,20,25 and 30 Year Returns\nThis chart aligns with our understanding of the markets that keeping money over longer term has a greater chance of producing returns and lesser chance of losing money, however some people may have had better success with some of their 20 year investments than those that they bought at the wrong time and held for longer than 20 years.\nSo what are those periods when the five year returns were negative? Some of these years are familiar such as 2003, 2009 etc.\nYears with Negative 5 year returns\nYears with Negative 10 year returns\nThe real question is if we were to buy the S\u0026amp;P 500 today, will we be under the water in 5 or 10 years? Take 2010 and 10 years prior to 2010. What did S\u0026amp;P do during this period?\nMy son is 10 years from college. If I invest 10,000 in S\u0026amp;P today and 10 years from now when he is ready for college, and my S\u0026amp;P stock is worth 8000, then that could have a significant impact on our finances 10 years from now.\nBut the S\u0026amp;P need not look like this. Could it look like the 10 years leading up to 2000.\nNow someone in 1991 would have done well in the market over a 10 year period.\nNow let us look at the period from 2008 onward and compare it side by side with the period from 1991 through 2000. The returns have been spectacular in both periods, especially 2009 onward. The similarity is uncanny.\nSo it is quite possible that the S\u0026amp;P will look like the 2000 to 2010 period in the next 10 years which means there is a good chance that the stock market will yield a lower return 10 years from now.\n Source.\n "});index.add({'id':60,'href':'/library/tutorials/docs/articles/python/python-for-pdf-02/','title':"Extract table from PDF",'content':" tabula-py: Extract table from PDF into Python DataFrame As of Oct. 2019, I launched a documentation site and Google Colab notebook for tabula-py. The FAQ would be good place to execute accurate extraction.\nIt is simple wrapper of tabula-java and it enables you to extract table into DataFrame or JSON with Python. You also can extract tables from PDF into CSV, TSV or JSON file.\ntabula is a tool to extract tables from PDFs. It is GUI based software, but tabula-java is a tool based on CUI. Though there were Ruby, R, and Node.js bindings of tabula-java, before tabula-py there isn’t any Python binding of it. I believe PyData is a great ecosystem for data analysis and that’s why I created tabula-py. If you are familiar with R, I highly recommend to use tabulizer, which has the most richest bindings including rich GUI.\nYou can install tabula-py via pip:\npip install tabula-py  With tabula-py, you can get DataFrame with read_pdf() method.\nexample of read_pdf()\nYou can also extract tables as JSON format:\nexample of JSON\nYou can extract tables into a file like JSON, CSV or TSV with convert_into() method.\nYou can see more examples in Jupyter notebook.\nWaiting for your collaboration! If you have any trouble with tabula-py, please file an issue on GitHub. I don’t want to receive emails because the answer will not share with other people. Make sure to fill the issue template, it will reduce many costs for me to solve the problem. Or, I also check StackOverflow. You can ask about it.\nOther tabula-py articles  https://blog.chezo.uno/tabula-py-now-able-to-extract-remote-pdf-and-multiple-tables-at-once-6108e24ac07c https://blog.chezo.uno/a-recent-update-of-tabula-py-a923d2ab667b   Written with StackEdit.\n "});index.add({'id':61,'href':'/library/tutorials/docs/articles/python/python-functions_and-functional-programming/','title':"Functions and Functional Programming",'content':" Tutorial: Python Functions and Functional Programming  https://www.dataquest.io/blog/introduction-functional-programming-python/  Most of us have been introduced to Python as an object-oriented language, but Python functions are also useful tools for data scientists and programmers alike. While classes, and objects, are easy to start working with, there are other ways to write your Python code. Languages like Java can make it hard to move away from object-oriented thinking, but Python makes it easy.\nGiven that Python facilitates different approaches to writing code, a logical follow-up question is: what is a different way to write code? While there are several answers to this question, the most common alternative style of writing code is called functional programming. Functional programming gets its name from writing functions which provides the main source of logic in a program.\nIn this post, we will:\n Explain the basics of functional programming by comparing it to object-oriented programming. Cover why you might want to incorporate functional programming in your own code. Show you how Python allows you to switch between the two.  Comparing object-oriented to functional The easiest way to introduce functional programming is to compare it to something we’re already aware of: object-oriented programming. Suppose we wanted to create a line counter class that takes in a file, reads each line, then counts the total amount of lines in the file. Using a class, it could look something like the following:\nclass LineCounter: def __init__(self, filename): self.file = open(filename, 'r') self.lines = [] def read(self): self.lines = [line for line in self.file] def count(self): return len(self.lines)  While not the best implementation, it does provide an insight into object-oriented design. Within the class, there are the familiar concepts of methods and properties. The properties set and retrieve the state of the object, and the methods manipulate that state.\nFor both these concepts to work, the object’s state must change over time. This change of state is evident in the lines property after calling the read() method. As an example, here’s how we would use this class:\n# example_file.txt contains 100 lines. lc = LineCounter('example_file.txt') print(lc.lines) \u0026gt;\u0026gt; [] print(lc.count()) \u0026gt;\u0026gt; 0 # The lc object must read the file to # set the lines property. lc.read() # The `lc.lines` property has been changed. # This is called changing the state of the lc # object. print(lc.lines) \u0026gt;\u0026gt; [['Hello world!', ...]] print(lc.count()) \u0026gt;\u0026gt; 100  The ever-changing state of an object is both its blessing and curse. To understand why a changing state can be seen as a negative, we have to introduce an alternative. The alternative is to build the line counter as a series of independent functions.\ndef read(filename): with open(filename, 'r') as f: return [line for line in f] def count(lines): return len(lines) example_lines = read('example_log.txt') lines_count = count(example_lines)  Working with pure functions In the previous example, we were able to count the lines only with the use of functions. When we only use functions, we are applying a functional approach to programming which is, non-excitingly, called functional programming. The concepts behind functional programming requires functions to be stateless, and rely only on their given inputs to produce an output.\nThe functions that meet the above criteria are called pure functions. Here’s an example to highlight the difference between pure functions, and non-pure:\n# Create a global variable `A`. A = 5 def impure_sum(b): # Adds two numbers, but uses the # global `A` variable. return b + A def pure_sum(a, b): # Adds two numbers, using # ONLY the local function inputs. return a + b print(impure_sum(6)) \u0026gt;\u0026gt; 11 print(pure_sum(4, 6)) \u0026gt;\u0026gt; 10  The benefit of using pure functions over impure (non-pure) functions is the reduction of side effects. Side effects occur when there are changes performed within a function’s operation that are outside its scope. For example, they occur when we change the state of an object, perform any I/O operation, or even call print():\ndef read_and_print(filename): with open(filename) as f: # Side effect of opening a # file outside of function. data = [line for line in f] for line in data: # Call out to the operating system # \u0026quot;println\u0026quot; method (side effect). print(line)  Programmers reduce side effects in their code to make it easier to follow, test, and debug. The more side effects a codebase has, the harder it is to step through a program and understand its sequence of execution.\nWhile it’s convienent to try and eliminate all side effects, they’re often used to make programming easier. If we were to ban all side effects, then you wouldn’t be able to read in a file, call print, or even assign a variable within a function. Advocates for functional programming understand this tradeoff, and try to eliminate side effects where possible without sacrificing development implementation time.\nThe Lambda Expression Instead of the def syntax for function declaration, we can use a lambda expression to write Python functions. The lambda syntax closely follows the def syntax, but it’s not a 1-to-1 mapping. Here’s an example of building a function that adds two integers:\n# Using `def` (old way). def old_add(a, b): return a + b # Using `lambda` (new way). new_add = lambda a, b: a + bold_add(10, 5) == new_add(10, 5) \u0026gt;\u0026gt; True  The lambda expression takes in a comma seperated sequences of inputs (like def). Then, immediately following the colon, it returns the expression without using an explicit return statement. Finally, when assigning the lambda expression to a variable, it acts exactly like a Python function, and can be called using the the function call syntax: new_add().\nIf we didn’t assign lambda to a variable name, it would be called an anonymous function. These anonymous functions are extremely helpful, especially when using them as an input for another function. For example, the sorted() function takes in an optional key argument (a function) that describes how the items in a list should be sorted.\nunsorted = [('b', 6), ('a', 10), ('d', 0), ('c', 4)] # Sort on the second tuple value (the integer). print(sorted(unsorted, key=lambda x: x[1])) \u0026gt;\u0026gt; [('d', 0), ('c', 4), ('b', 6), ('a', 10)]  The Map Function While the ability to pass in functions as arguments is not unique to Python, it is a recent development in programming languages. Functions that allow for this type of behavior are called first-class functions. Any language that contains first-class functions can be written in a functional style.\nThere are a set of important first-class functions that are commonly used within the functional paradigm. These functions take in a Python iterable, and, like sorted(), apply a function for each element in the list. Over the next few sections, we will examine each of these functions, but they all follow the general form of function_name(function_to_apply, iterable_of_elements).\nThe first function we’ll work with is the map() function. The map() function takes in an iterable (ie. list), and creates a new iterable object, a special map object. The new object has the first-class function applied to every element.\n# Pseudocode for map. def map(func, seq): # Return `Map` object with # the function applied to every # element. return Map( func(x) for x in seq )  Here’s how we could use map to add 10 or 20 to every element in a list:\nvalues = [1, 2, 3, 4, 5] # Note: We convert the returned map object to # a list data structure. add_10 = list(map(lambda x: x + 10, values)) add_20 = list(map(lambda x: x + 20, values)) print(add_10) \u0026gt;\u0026gt; [11, 12, 13, 14, 15] print(add_20) \u0026gt;\u0026gt; [21, 22, 23, 24, 25]  Note that it’s important to cast the return value from map() as a list object. Using the returned map object is difficult to work with if you’re expecting it to function like a list. First, printing it does not show each of its items, and secondly, you can only iterate over it once.\nThe Filter Function The second function we’ll work with is the filter() function. The filter() function takes in an iterable, creates a new iterable object (again, a special map object), and a first-class function that must return a bool value. The new map object is a filtered iterable of all elements that returned True.\n# Pseudocode for filter. def filter(evaluate, seq): # Return `Map` object with # the evaluate function applied to every # element. return Map( x for x in seq if evaluate(x) is True )  Here’s how we could filter odd or even values from a list:\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Note: We convert the returned filter object to # a list data structure. even = list(filter(lambda x: x % 2 == 0, values)) odd = list(filter(lambda x: x % 2 == 1, values)) print(even) \u0026gt;\u0026gt; [2, 4, 6, 8, 10] print(odd) \u0026gt;\u0026gt; [1, 3, 5, 7, 9]  The Reduce Function The last function we’ll look at is the reduce() function from the functools package. The reduce() function takes in an iterable, and then reduces the iterable to a single value. Reduce is different from filter() and map(), because reduce() takes in a function that has two input values.\nHere’s an example of how we can use reduce() to sum all elements in a list.\nfrom functools import reduce values = [1, 2, 3, 4] summed = reduce(lambda a, b: a + b, values) print(summed) \u0026gt;\u0026gt; 10  An interesting note to make is that you do not have to operate on the second value in the lambda expression. For example, you can write a function that always returns the first value of an iterable:\nfrom functools import reduce values = [1, 2, 3, 4, 5] # By convention, we add `_` as a placeholder for an input # we do not use. first_value = reduce(lambda a, _: a, values) print(first_value) \u0026gt;\u0026gt; 1  Rewriting with list comprehensions Because we eventually convert to lists, we should rewrite the map() and filter() functions using list comprehension instead. This is the more pythonic way of writing them, as we are taking advantage of the Python syntax for making lists. Here’s how you could translate the previous examples of map() and filter() to list comprehensions:\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Map. add_10 = [x + 10 for x in values] print(add_10) \u0026gt;\u0026gt; [11, 12, 13, 14, 15, 16, 17, 18, 19, 20] # Filter. even = [x for x in values if x % 2 == 0] print(even) \u0026gt;\u0026gt; [2, 4, 6, 8, 10]  From the examples, you can see that we don’t need to add the lambda expressions. If you are looking to add map(), or filter() functions to your own code, this is usually the recommended way. However, in the next section, we’ll provide a case to still use the map() and filter() functions.\nWriting Function Partials Sometimes we want to use the behavior of a function, but decrease the number of arguments it takes. The purpose is to “save” one of the inputs, and create a new function that defaults the behavior using the saved input. Suppose we wanted to write a function that would always add 2 to any number:\ndef add_two(b): return 2 + b print(add_two(4)) \u0026gt;\u0026gt; 6  The add_two function is similar to the general function, $f(a,b) = a + b$, only it defaults one of the arguments ($a = 2$). In Python, we can use the partial module from the functools package to set these argument defaults. The partial module takes in a function, and “freezes” any number of args (or kwargs), starting from the first argument, then returns a new function with the default inputs.\nfrom functools import partialdef add(a, b): return a + b add_two = partial(add, 2) add_ten = partial(add, 10) print(add_two(4)) \u0026gt;\u0026gt; 6 print(add_ten(4)) \u0026gt;\u0026gt; 14  Partials can take in any function, including ones from the standard library.\n# A partial that grabs IP addresses using # the `map` function from the standard library. extract_ips = partial( map, lambda x: x.split(' ')[0] ) lines = read('example_log.txt') ip_addresses = list(extract_ip(lines))  Next steps In this post, we introduced the paradigm of functional programming. We learned about the lambda expression in Python, important functional functions, and the concept of partials. Overall, we showed that Python provides a programmer with the tools to easily switch between functional programming and object-oriented programming.\nIf you’ve enjoyed functional programming, our newest course: Building a Data Pipeline uses functional programming concepts to build a data pipeline. In this course, you’ll find more advanced Python concepts, examples of good API design, and a final project that uses your own data pipeline built from scratch!\n"});index.add({'id':62,'href':'/library/tutorials/docs/articles/python/python-api-tutorial/','title':"Getting Started with APIs",'content':" Python API Tutorial: Getting Started with APIs In this Python API tutorial, we’ll learn how to retrieve data for data science projects. There are millions of APIs online which provide access to data. Websites like Reddit, Twitter, and Facebook all offer certain data through their APIs.\nTo use an API, you make a request to a remote web server, and retrieve the data you need.\nBut why use an API instead of a static CSV dataset you can download from the web? APIs are useful in the following cases:\n The data is changing quickly. An example of this is stock price data. It doesn’t really make sense to regenerate a dataset and download it every minute — this will take a lot of bandwidth, and be pretty slow. You want a small piece of a much larger set of data. Reddit comments are one example. What if you want to just pull your own comments on Reddit? It doesn’t make much sense to download the entire Reddit database, then filter just your own comments. There is repeated computation involved. Spotify has an API that can tell you the genre of a piece of music. You could theoretically create your own classifier, and use it to compute music categories, but you’ll never have as much data as Spotify does.  In cases like the ones above, an API is the right solution. In this blog post, we’ll be querying a simple API to retrieve data about the International Space Station (ISS).\nAbout this Python API Tutorial This tutorial is based on part of our interactive course on APIs and Webscraping in Python, which you can start for free.\nFor this tutorial, we assume that you know some of the fundamentals of working with data in Python. If you don’t, you might like to try our free Python Fundamentals course.\nWhat is an API? An API, or Application Programming Interface, is a server that you can use to retrieve and send data to using code. APIs are most commonly used to retrieve data, and that will be the focus of this beginner tutorial.\nWhen we want to receive data from an API, we need to make a request. Requests are used all over the web. For instance, when you visited this blog post, your web browser made a request to the Dataquest web server, which responded with the content of this web page\nAPI requests work in exactly the same way – you make a request to an API server for data, and it responds to your request.\nMaking API Requests in Python In order to work with APIs in Python, we need tools that will make those requests. In Python, the most common library for making requests and working with APIs is the requests library. The requests library isn’t part of the standard Python library, so you’ll need to install it to get started.\nIf you use pip to manage your Python packages, you can install requests using the following command:\npip install requests  If you use conda, the command you’ll need is:\nconda install requests  Once you’ve installed the library, you’ll need to import it. Let’s start with that important step:\nimport requests  Now that we’ve installed and imported the requests library, let’s start using it.\nMaking Our First API Request There are many different types of requests. The most commonly used one, a GET request, is used to retrieve data. Because we’ll just be working with retrieving data, our focus will be on making ‘get’ requests.\nWhen we make a request, the response from the API comes with a response code which tells us whether our request was successful. Response codes are important because they immediately tell us if something went wrong.\nTo make a ‘GET’ request, we’ll use the requests.get() function, which requires one argument — the URL we want to make the request to. We’ll start by making a request to an API endpoint that doesn’t exist, so we can see what that response code looks like.\nresponse = requests.get(\u0026quot;http://api.open-notify.org/this-api-doesnt-exist\u0026quot;)  The get() function returns a response object. We can use the response.status_code attribute to receive the status code for our request:\nprint(response.status_code)  404  The ‘404’ status code might be familiar to you — it’s the status code that a server returns if it can’t find the file we requested. In this case, we asked for this-api-doesnt-exist which (surprise, surprise) didn’t exist!\nLet’s learn a little more about common status codes.\nAPI Status Codes Status codes are returned with every request that is made to a web server. Status codes indicate information about what happened with a request. Here are some codes that are relevant to GET requests:\n 200: Everything went okay, and the result has been returned (if any). 301: The server is redirecting you to a different endpoint. This can happen when a company switches domain names, or an endpoint name is changed. 400: The server thinks you made a bad request. This can happen when you don’t send along the right data, among other things. 401: The server thinks you’re not authenticated. Many APIs require login ccredentials, so this happens when you don’t send the right credentials to access an API. 403: The resource you’re trying to access is forbidden: you don’t have the right permissions to see it. 404: The resource you tried to access wasn’t found on the server. 503: The server is not ready to handle the request.  You might notice that all of the status codes that begin with a ‘4’ indicate some sort of error. The first number of status codes indicate their categorization. This is useful — you can know that if your status code starts with a ‘2’ it was successful and if it starts with a ‘4’ or ‘5’ there was an error. If you’re interested you can read more about status codes\nAPI Documentation In order to ensure we make a succesful request, when we work with APIs it’s important to consult the documentation. Documentation can seem scary at first, but as you use documentation more and more you’ll find it gets easier.\nWe’ll be working with the Open Notify API, which gives access to data about the international space station. It’s a great API for learning because it has a very simple design, and doesn’t require authentication. We’ll teach you how to use an API that requires authentication in a later post.\nOften there will be multiple APIs available on a particular server. Each of these APIs are commonly called endpoints. The first endpoint we’ll use is http://api.open-notify.org/astros.json, which returns data about astronauts currently in space.\nIf you click the link above to look at the documentation for this endpoint, you’ll see that it says This API takes no inputs. This makes it a simple API for us to get started with. We’ll start by making a GET request to the endpoint using the requests library:\nresponse = requests.get(\u0026quot;http://api.open-notify.org/astros.json\u0026quot;) print(response.status_code)  200  We received a ‘200’ code which tells us our request was successful. The documentation tells us that the API response we’ll get is in JSON format. In the next section we’ll learn about JSON, but first let’s use the response.json() method to see the data we received back from the API:\nprint(response.json())  {'message': 'success', 'people': [{'name': 'Alexey Ovchinin', 'craft': 'ISS'}, {'name': 'Nick Hague', 'craft': 'ISS'}, {'name': 'Christina Koch', 'craft': 'ISS'}, {'name': 'Alexander Skvortsov', 'craft': 'ISS'}, {'name': 'Luca Parmitano', 'craft': 'ISS'}, {'name': 'Andrew Morgan', 'craft': 'ISS'}], 'number': 6}  Working with JSON Data in Python JSON (JavaScript Object Notation) is the language of APIs. JSON is a way to encode data structures that ensures that they are easily readable by machines. JSON is the primary format in which data is passed back and forth to APIs, and most API servers will send their responses in JSON format.\nYou might have noticed that the JSON output we received from the API looked like it contained Python dictionaries, lists, strings and integers. You can think of JSON as being a combination of these objects represented as strings. Let’s look at a simple example:\nPython has great JSON support with the json package. The json package is part of the standard library, so we don’t have to install anything to use it. We can both convert lists and dictionaries to JSON, and convert strings to lists and dictionaries. In the case of our ISS Pass data, it is a dictionary encoded to a string in JSON format.\nThe json library has two main functions:\n json.dumps() — Takes in a Python object, and converts (dumps) it to a string. json.loads() — Takes a JSON string, and converts (loads) it to a Python object.  The dumps() function is particularly useful as we can use it to print a formatted string which makes it easier to understand the JSON output, like in the diagram we saw above:\nimport json def jprint(obj): # create a formatted string of the Python JSON object text = json.dumps(obj, sort_keys=True, indent=4) print(text) jprint(response.json())  { \u0026quot;message\u0026quot;: \u0026quot;success\u0026quot;, \u0026quot;number\u0026quot;: 6, \u0026quot;people\u0026quot;: [ { \u0026quot;craft\u0026quot;: \u0026quot;ISS\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Alexey Ovchinin\u0026quot; }, { \u0026quot;craft\u0026quot;: \u0026quot;ISS\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Nick Hague\u0026quot; }, { \u0026quot;craft\u0026quot;: \u0026quot;ISS\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Christina Koch\u0026quot; }, { \u0026quot;craft\u0026quot;: \u0026quot;ISS\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Alexander Skvortsov\u0026quot; }, { \u0026quot;craft\u0026quot;: \u0026quot;ISS\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Luca Parmitano\u0026quot; }, { \u0026quot;craft\u0026quot;: \u0026quot;ISS\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Andrew Morgan\u0026quot; } ] }  Immediately we can understand the structure of the data more easily – we can see that their are six people currently in space, with their names existing as dictionaries inside a list.\nIf we compare this to the documentation for the endpoint we’ll see that this matches the specified output for the endpoint.\nUsing an API with Query Parameters The http://api.open-notify.org/astros.json endpoint we used earlier does not take any parameters. We just send a GET request and the API sends back data about the number of people currently in space.\nIt’s very common, however, to have an API endpoint that requires us to specify parameters. An example of this the http://api.open-notify.org/iss-pass.json endpoint. This endpoint tells us the next times that the international space station will pass over a given location on the earth.\nIf we look at the documentation, it specifies required lat (latitude) and long (longitude) parameters.\nWe can do this by adding an optional keyword argument, params, to our request. We can make a dictionary with these parameters, and then pass them into the requests.get function. Here’s what our dictionary would look like, using coordinates for New York City:\nparameters = { \u0026quot;lat\u0026quot;: 40.71, \u0026quot;lon\u0026quot;: -74 }  We can also do the same thing directly by adding the parameters directly to the URL. like this: http://api.open-notify.org/iss-pass.json?lat=40.71\u0026amp;lon=-74.\nIt’s almost always preferable to setup the parameters as a dictionary, because requests takes care of some things that come up, like properly formatting the query parameters, and we don’t need to worry about inserting the values into the URL string.\nLet’s make a request using these coordinates and see what response we get.\nresponse = requests.get(\u0026quot;http://api.open-notify.org/iss-pass.json\u0026quot;, params=parameters) jprint(response.json())  { \u0026quot;message\u0026quot;: \u0026quot;success\u0026quot;, \u0026quot;request\u0026quot;: { \u0026quot;altitude\u0026quot;: 100, \u0026quot;datetime\u0026quot;: 1568062811, \u0026quot;latitude\u0026quot;: 40.71, \u0026quot;longitude\u0026quot;: -74.0, \u0026quot;passes\u0026quot;: 5 }, \u0026quot;response\u0026quot;: [ { \u0026quot;duration\u0026quot;: 395, \u0026quot;risetime\u0026quot;: 1568082479 }, { \u0026quot;duration\u0026quot;: 640, \u0026quot;risetime\u0026quot;: 1568088118 }, { \u0026quot;duration\u0026quot;: 614, \u0026quot;risetime\u0026quot;: 1568093944 }, { \u0026quot;duration\u0026quot;: 555, \u0026quot;risetime\u0026quot;: 1568099831 }, { \u0026quot;duration\u0026quot;: 595, \u0026quot;risetime\u0026quot;: 1568105674 } ] }  Understanding the Pass Times The JSON response matches what the documentation specified:\n A dictionary with three keys The third key, response, contains a list of pass times Each pass time is a dictionary with risetime (pass start time) and duration keys.  Let’s extract the pass times from our JSON object:\npass_times = response.json()['response'] jprint(pass_times)  [ { \u0026quot;duration\u0026quot;: 395, \u0026quot;risetime\u0026quot;: 1568082479 }, { \u0026quot;duration\u0026quot;: 640, \u0026quot;risetime\u0026quot;: 1568088118 }, { \u0026quot;duration\u0026quot;: 614, \u0026quot;risetime\u0026quot;: 1568093944 }, { \u0026quot;duration\u0026quot;: 555, \u0026quot;risetime\u0026quot;: 1568099831 }, { \u0026quot;duration\u0026quot;: 595, \u0026quot;risetime\u0026quot;: 1568105674 } ]  Next we’ll usea loop to extract just the five risetime values:\nrisetimes = [] for d in pass_times: time = d['risetime'] risetimes.append(time) print(risetimes)  [1568082479, 1568088118, 1568093944, 1568099831, 1568105674]  These times are difficult to understand – they are in a format known as timestamp or epoch. Essentially the time is measured in the number of seconds since January 1st 1970. We can use the Python datetime.fromtimestamp() method to convert these into easier to understand times:\nfrom datetime import datetime times = [] for rt in risetimes: time = datetime.fromtimestamp(rt) times.append(time) print(time)  2019-09-09 21:27:59 2019-09-09 23:01:58 2019-09-10 00:39:04 2019-09-10 02:17:11 2019-09-10 03:54:34  It looks like the ISS passes over New York City often – the next five times happen within a seven hour period!\nPython API Tutorial: Next Steps In this tutorial, we learned:\n What an API is Types of requests and response codes How to make a get request How to make a request with parameters How to display and extract JSON data from an API  These fundamental steps will help you to start working with APIs. Remember that key to each time we used the API was to carefully read the API documentation and use that to understand what request to make and what parameters to provide.\nNow you’ve completed our Python API tutorial, you might like to:\n Complete our interactive Dataquest APIs and scraping course, which you can start for free. Try working with some data from this list of Free Public APIs — we recommend selecting an API that doesn’t require authentication as a good first step.  Ref : https://www.dataquest.io/blog/python-api-tutorial/\n"});index.add({'id':63,'href':'/library/tutorials/docs/articles/data-science/pandas/pandas-house-market-analysis-1/','title':"House Market Analysis 1",'content':" Python Pandas : House Market Analysis – Munich (2016-2017) (1\u0026frasl;2) Source\nI started to use python for other things than Data Analysis at the beginning. I was a technical SEO consultant and wanted to use a crawler (or built one) and not knowing any programming language, python looked as the perfect language to start with…\nFlash forward to nowadays, I am even more fan of python now because of its versatility to do what I just mentioned and also to realize data analysis easily.\nWhat if we could bring both of these worlds together ? I created my first crawler when I was injured from breaking my wrist, it is not beautiful, it was written with one hand but it worked.\nNow that I am looking at the data and I thought it would be a very nice and easy example on how to use the data that you have gathered, or have at your disposal, with python and mostly with Pandas.\nHouse Market in Munich I am living in Munich now and I really like the city, I traveled a lot during the beginning of my career (New York / San Francisco / Taiwan / Paris) and I thought quickly that I would need some data to help searching for my home. If I want to buy somewhere, it is not a small amount that you need to pay, it is probably a lot of money, so you need to back up your wish with some solid data.\nI gather data on the house market around Munich on my own with my little crawler. It is still a manual program because when I created it, I didn’t know and didn’t have time to make it a cloud native application that run 24\u0026frasl;7.\nI will probably try to improve it and make it cloud native so I can monitor it. This will be a blog post if I succeed in doing so.\nIn the meantime, I ran this crawler time to time, in a stochastic way some may\nThe House Market in Munich is expensive, not a bit, but really expensive.\nSo I was doing my crawler in order to find a home that would match my budget. It is mostly apartment (because Houses are not in my budget) and in the area of Munich.\nSo to start with the bias of this analysis, here comes some :\n I looked for “up to 4 room apartments” I looked for “up to 600 000 €” apartment (around 690 000$) I looked for “up to 20km away from Munich center”. I looked if the flat was on the ground floor or up in the building, but I didn’t look at the specific floor.  I saved my data as csv and you can find it on my github account : https://github.com/pitchmuc/munich_housemarket.git\nUnderstanding the data with Pandas When I have a data set to look at, I first do 2 things :\n I look at the size of the data set. I look at the type of data set.  For me, the data set is not so large (150 kb) so there is no problem for my computer to handle that.\nIf it would be bigger, I would have split it to chunk of 100MB maximum so I can play and test my script easily. I would then produce a robust script to take all of your data through.\nWhen you execute your analysis on your full data set (ie: 5GB), you want to make sure that this is working before spending hours on running your analysis and finding it didn’t do what you wanted.\nThe type of the data that you have to handle can be :\n clean : you just have to import it half clean : you have to import it and take care of few missing data. not clean at all : you have to clean it a bit, import it and take care of the missing data.  In our case, I have managed to have a pretty clean to half clean data but still some cleaning is required.\nOn the following steps, you will see how to realize basic cleaning with python pandas :\n Import the libraries you want to use. In our case, you want to have pandas and numpy.\nimport pandas as pd #naming convention import numpy as np #naming convention  import your data set in your environment.\nIn my example, I am using ipython (or called jupyter notebook). I really like this environment for exploration. When things get serious, I usually go to Spyder.\ndf = pd.read_csv('data_immoscout.csv',delimiter='\\t') # df is going to be our dataframe. (place where we store all the data). I used tab as delimiter.  Look at the data you have. Using the .head() function will give a preview of your data.\ndf.head() ## use df.head(20) to see the first 20 lines  On top of df.head(), you can also try to see the exact type the data have been processed.\nIn order to do that, you can use the\ndf.dtypes ##it will give you something like this :  index0 int64 terrace object bedrooms object construction_year object date_month int64 date_year int64 date_year_month object floor object rooms object price_room object price_surface object price object surface object zip int64 dtype: object  Look at the type of column you have is quite important because this usually give you an idea of the type of data store. Or type of data that should be store.\ndf.columns #it will give you something like this :  Index(['index0', 'terrace', 'bedrooms', 'construction_year', 'date_month', 'date_year', 'date_year_month', 'floor', 'rooms', 'price_room', 'price_surface', 'price', 'scout_id', 'surface'], dtype='object')   From that I can give you some explanation about these data, but looking at the data through dtypes and head() should actually already gave you the idea :\n index0 : This is the index of the table terrace : does there is a terrace or not bedrooms : how many bedrooms there is construction_year : when has it been built date_month : Month of the year when the crawl has been realized date_year : Year when the crawl has been realized date_year_month : month and year when the crawl has been realized floor : is it ground floor or not ? rooms : number of rooms price_rooms : price of the apartment divided by number of room price_surface : price of the apartment divided by surface price : price of the flat surface : surface of the flat zip : zip code of the flat  The first thing you want to do when you start with these data is that you make sure that they are recognized the correct way in the system.\nWhat does it mean “the correct way”?\nThe correct way is : numbers are seen as numbers, strings as strings, dates as dates and NaN as NaN.\nWhat is a NaN ?\nNaN stands for “Not a Number”. This is very important to know because this is the type of data we want to clean before we are finally processing them.\nAs you may have seen already, there are some rows where NAN is actually written. Is it recognized as NaN ?\nIn order to see how many NaN you have, you can actually use this very useful function :\ndf.isna().sum() ## The result will look like this :  index0 0 terrace 0 bedrooms 0 construction_year 0 date_month 0 date_year 0 date_year_month 0 floor 0 rooms 0 price_room 0 price_surface 0 price 0 surface 0 zip 0 dtype: int64  This means that there is no NaN recognized in your current data set (or dataframe).\nThe ‘NAN’ is just a string that I set when I actually ran my crawler.\nYou will then replaced the “NAN” string with the correct definition of a NaN. In order to do that, we will use the numpy library, you will just need to use it that way :\ndf.replace('NAN',np.NaN,inplace=True)  When we have done that, we will then see different result on the previous method :\ndf.isna().sum() ## The result will look like this :  index0 0 terrace 0 bedrooms 319 construction_year 49 date_month 0 date_year 0 date_year_month 0 floor 113 rooms 34 price_room 35 price_surface 212 price 1 surface 211 zip 0 dtype: int64  Here we start to see what is actually going on on these data.\nYou see that we are missing a lot of data for bedrooms information.\nOur role in the next steps is to make sure to have as less as NaN as possible.\nWe will try to assume some different strategies to fill the NaN here.\nIf you want to see the global quality of your data set, you can actually use some calculation.\nLike this :\n(df.isnull().sum() / len(df))*100 ## result will look like this  index0 0.000000 terrace 0.000000 bedrooms 36.708861 construction_year 5.638665 date_month 0.000000 date_year 0.000000 date_year_month 0.000000 floor 13.003452 rooms 3.912543 price_room 4.027618 price_surface 24.395857 price 0.115075 surface 24.280783 zip 0.000000 dtype: float64  So the data I provided is not perfect but you will probably see lots of data set uglier than that.\nTo understand the data : 36,7% of the rows don’t have bedrooms information.\nWhat was really troubling is that we are missing the price information for one specific data point.\nPrice is really hard to forecast but let see what data it is and we may figure out something :\ndf[df['price'].isna()].T ##the result will look like this :  You will see that we are missing the price and the number of bedrooms.\nThere are 2 options we can do :\n Estimate the price with the information we have (5 room, 209 square meter, construction year : 2016) Remove this line from your dataset  On our case, 200 square meter built in 2016 will probably be out of my data set restriction (\u0026lt;600 K€). I will then remove the line from the data set.\nFrom my extract, I saw that the index of that line is 367.\nI can remove the line by doing this simple manipulation :\ndf.drop(df.index[367],inplace=True)  but if you have more than one index, how do you manage ?\nYou just need to call out the index of your condition :\ndf.drop(df[df['price'].isna()].index,inplace = True)  As we are deleting useless information, we can take the opportunity to delete the index0 column as you could have seen that pandas automatically generate an index to your dataframe.\nIn order to delete a column completely, you will need to realize this action :\ndf.drop(['index0'],axis=1,inplace=True) #axis = 1 make sure that you are deleting column  Now we want to have the correct data type recognize by pandas.\nHaving the correct data type will allow us to realize numeric operation on numeric type (int or float).\nWe will be able to deal with NaN in a better way if we have the correct data type set.\nWhat I would recommend is always to try to set the numeric value to int.\nWhy int ?\nBecause it easier to handle and interpret but you could try to have everything into float.\nFloating numbers can represent integer (2.0 == 2) but integers cannot represent some floating numbers (2.1 != 2)\nA easy loop could look like :\nfor col in list(df.columns): # for each column try: df[col] = df[col].astype(int) #try to set it as int except: df[col] = df[col].astype(str) # if not sucessful try to set it as string  When you have realized this operation, you can see that not all columns have been changed to numeric.\nThis is mostly due to some column not being an integer but being a float. (so a decimal)\nYou can realize another loop on that :\nfor col in list(df.columns): if df[col].dtypes == object: try: df[col] = df[col].astype(float) except: df[col] = df[col].astype(str)  Then by doing a simple overview, your data start to look like something you can work :\ndf.dtypes # it will show something like this :  Filling the NaN Now that we are ready to manipulate the difference type of data, we will be using our brain a bit to deal with the different data type and fill the NaN values.\nAs explained previously, before doing any analysis, you would want to feel the maximum of the missing value in order to do calculation to the maximum of values.\n Filling the Floor Column\nAs you should remember, this column tells us if this is Ground floor or not.\nBy doing this simple method, you can see the different values and the number of time they are appearing.\ndf['floor'].value_counts() ### Should show something like this :  up floor 687 nan 112 ground floor 69 Name: floor, dtype: int64  what you would need to do is to calculate the distribution between an the up floor and the ground floor and apply this distribution to the remaining data.\nYou can easily calculate that the number of ground floor apartment represent around 10% of this column.\nTherefore we would need to replace 1\u0026frasl;10 of the na with a “ground floor” value.\nWe can do that by simply creating a function :\ndef fill10pct(): if np.random.random_integers(0,9) == 0: return 'ground floor' else: return 'up floor'  Then you need to apply this to the your rows :\nfor index, value in df.iterrows(): if df.loc[index,'floor']=='nan': df.loc[index,'floor'] = fill10pct()  You can run a df[‘floor’].value_counts() to check if the distribution was kept.\n Filling the room\n  Now we will try to fill the room.\nWe will try a different technique here. We have some information that can help us identify how many rooms there is in total.\nThere are the bedroom information, so in Germany in the post of apartment, the bedrooms are the only room counted separated from the number of room.\nWhich is : 3 rooms mean 2 bedroom, one big room and a kitchen and a bathroom.\nSo we could say that the number of room is number of bedroom + 1But what if we don’t have the number of bedrooms ?\nThen, to make it simple we can say that the number of room is 2. which is the minimum I would get.For this we will create our 2 conditions (there is a number of bedroom, or there isn’t)\nconditions = [ (df['rooms'].isnull()) \u0026amp;amp; (df['bedrooms'].isnull()), (df['rooms'].isnull()) \u0026amp;amp; (df['bedrooms'].notnull())] choices = [2,df['bedrooms']+1]  And we are going to use the numpy select function to decide which option to apply\ndf['rooms'] = np.select(conditions, choices, default=2)  Pretty easy when you know how to do it. :) It is so easy that we will make it a bit more robust and integrate the surface in it. We will say that if the surface is bigger than 75 square meter, we will set the number of room to 3.\nconditions =[ (df['rooms'].isnull()) \u0026amp;amp; (df['bedrooms'].isnull()) \u0026amp;amp; (df['surface'].isnull()), (df['rooms'].isnull()) \u0026amp;amp; (df['bedrooms'].isnull()) \u0026amp;amp; (df['surface']\u0026amp;gt;75), (df['rooms'].isnull()) \u0026amp;amp; (df['bedrooms'].notnull()), ] choices = [2,3,df['bedrooms']+1] df['rooms'] = np.select(conditions,choices,default=2)   Filling the bedrooms\nFilling the bedroom is actually the opposite logic. If you have the number of room, you can actually guess the number of bedroom.\n  This time, we will use the method select from numpy :\ndf['bedrooms'] = np.where(df['bedrooms'].isnull(), df['rooms']-1, df['bedrooms'])   Filling the Surface\nFor the surface, we are missing 211 data points. We can have the same strategy than the number of rooms. Extrapolate the surface of the existing apartment to fill the missing value of the surface.\nIf we can the average surface for the 2, 3 and 4 room apartment, we could assign the mean value to these room.   For realizing this, we are going to use one of the most important function of pandas. The groupby.\ndf.groupby(['rooms'])['surface'].mean() ##it should give you something like :  2.0 89.988924 3.0 91.100000 4.0 100.400000  It is interesting to see that the average surface for your 2 and 3 rooms apartment are not that different.\nMost probably our data are not that clean and some 3 rooms apartment were fetched as 2 rooms apartment.\nconditions = [ (df['rooms']==2 \u0026amp;amp; df['surface'].isnull()), (df['rooms']==3 \u0026amp;amp; df['surface'].isnull()), (df['rooms']==4 \u0026amp;amp; df['surface'].isnull())] choices = [90,91.1,100] df['surface'] = np.select(conditions,choices,default=90.5) #default in between 2 and 3 rooms   Filling the construction year\nOn this one, this is pretty hard as the construction year can be really random. You cannot really guess a construction year based on the previous data.\nOn that case, in order to not false the data to much, I would chose to fill the blank with the mean of this dimension.\nThis is another method you can use quick often with pandas :\ndf['construction_year'].fillna(df['construction_year'].mean(),inplace=True)  Filling the rest…\n  As you may notice while doing a df.isnull().sum() some other columns have NaN but they are actually calculation of other columns.\nSo you just have to redo the calculation with your primary columns filled and all the NaN will disappear.\nI hope this tutorial on how to clean your data will help you if you are discovering Data Analysis with Python and Pandas.\nThis is a very important part of working with Data and if you plan to machine learning, cleaning the data and creating value out of NaN data points is one of the most important aspect of Machine Learning.\nAs the title suggest, we will have a 2nd article where we actually analyze the data and we will probably try to do some visualization.\nDon’t hesitate to comment and give your tip to analyze this data set.\nAs explained above, both data set (the clean one and the uncleane one) and the Jupyter notebook are available on my Github account : https://github.com/pitchmuc/munich_housemarket\n"});index.add({'id':64,'href':'/library/tutorials/docs/articles/python/python-pickle-module/','title':"Introduction Pickle Module",'content':" Introduction to the Python Pickle Module Introduction Pickling is a popular method of preserving food. According to Wikipedia, it is also a pretty ancient procedure – although the origins of pickling are unknown, the ancient Mesopotamians probably used the process 4400 years ago. By placing a product in a specific solution, it is possible to drastically increase its shelf life. In other words, it\u0026rsquo;s a method that lets us store food for later consumption.\nIf you\u0026rsquo;re a Python developer, you might one day find yourself in need of a way to store your Python objects for later use. Well, what if I told you, you can pickle Python objects too?\nSerialization Serialization is a process of transforming objects or data structures into byte streams or strings. A byte stream is, well, a stream of bytes – one byte is composed of 8 bits of zeros and ones. These byte streams can then be stored or transferred easily. This allows the developers to save, for example, configuration data or user\u0026rsquo;s progress, and then store it (on disk or in a database) or send it to another location.\nPython objects can also be serialized using a module called Pickle.\nOne of the main differences between pickling Python objects and pickling vegetables is the inevitable and irreversible change of the pickled food\u0026rsquo;s flavor and texture. Meanwhile, pickled Python objects can be easily unpickled back to their original form. This process, by the way, is universally known as deserialization.\nPickling (or serialization in general) should not be confused with compression. The purpose of pickling is to translate data into a format that can be transferred from RAM to disk. Compression, on the other hand, is a process of encoding data using fewer bits (in order to save disk space).\nSerialization is especially useful in any software where it\u0026rsquo;s important to be able to save some progress on disk, quit the program and then load the progress back after reopening the program. Video games might be the most intuitive example of serialization\u0026rsquo;s usefulness, but there are many other programs where saving and loading a user\u0026rsquo;s progress or data is crucial.\nPickle vs JSON There is a chance that you have heard of JSON (JavaScript Object Notation), which is a popular format that also lets developers save and transmit objects encoded as strings. This method of serialization has some advantages over pickling. JSON format is human-readable, language-independent, and faster than pickle.\nIt does have, however, some important limitations as well. Most importantly, by default, only a limited subset of Python built-in types can be represented by JSON. With Pickle, we can easily serialize a very large spectrum of Python types, and, importantly, custom classes. This means we don\u0026rsquo;t need to create a custom schema (like we do for JSON) and write error-prone serializers and parsers. All of the heavy liftings is done for you with Pickle.\nWhat can be Pickled and Unpickled The following types can be serialized and deserialized using the Pickle module:\n All native datatypes supported by Python (booleans, None, integers, floats, complex numbers, strings, bytes, byte arrays) Dictionaries, sets, lists, and tuples - as long as they contain pickleable objects Functions and classes that are defined at the top level of a module  It is important to remember that pickling is not a language-independent serialization method, therefore your pickled data can only be unpickled using Python. Moreover, it\u0026rsquo;s important to make sure that objects are pickled using the same version of Python that is going to be used to unpickle them. Mixing Python versions, in this case, can cause many problems.\nAdditionally, functions are pickled by their name references, and not by their value. The resulting pickle does not contain information on the function\u0026rsquo;s code or attributes. Therefore, you have to make sure that the environment where the function is unpickled is able to import the function. In other words, if we pickle a function and then unpickle it in an environment where it\u0026rsquo;s either not defined or not imported, an exception will be raised.\nIt is also very important to note that pickled objects can be used in malevolent ways. For instance, unpickling data from an untrusted source can result in the execution of a malicious piece of code.\nPickling a Python List The following very simple example shows the basics of using the Pickle module in Python 3:\nimport pickle test_list = ['cucumber', 'pumpkin', 'carrot'] with open('test_pickle.pkl', 'wb') as pickle_out: pickle.dump(test_list, pickle_out)  First, we have to import the pickle module, which is done in line 1. In line 3 we define a simple, three element list that will be pickled.\nIn line 5 we state that our output pickle file\u0026rsquo;s name will be test_pickle.pkl. By using the wb option, we tell the program that we want to write (w) binary data (b) inside of it (because we want to create a byte stream). Note that the pkl extension is not necessary – we\u0026rsquo;re using it in this tutorial because that\u0026rsquo;s the extension included in Python\u0026rsquo;s documentation.\nIn line 6 we use the pickle.dump() method to pickle our test list and store it inside the test_pickle.pkl file.\nSubscribe to our Newsletter Get occassional tutorials, guides, and reviews in your inbox. No spam ever. Unsubscribe at any time.\nSubscribe\nI encourage you to try and open the generated pickle file in your text editor. You\u0026rsquo;ll quickly notice that a byte stream is definitely not a human-readable format.\nUnpickling a Python List Now, let\u0026rsquo;s unpickle the contents of the test pickle file and bring our object back to its original form.\nimport pickle with open('test_pickle.pkl', 'rb') as pickle_in: unpickled_list = pickle.load(pickle_in) print(unpickled_list)  As you can see, this procedure is not more complicated than when we pickled the object. In line 3 we open our test_pickle.pkl file again, but this time our goal is to read (r) the binary data (b) stored within it.\nNext, in line 5, we use the pickle.load() method to unpickle our list and store it in the unpickled_list variable.\nYou can then print the contents of the list to see for yourself that it is identical to the list we pickled in the previous example. Here is the output from running the code above:\n$ python unpickle.py ['cucumber', 'pumpkin', 'carrot']  Pickling and Unpickling Custom Objects As I mentioned before, using Pickle, you can serialize your own custom objects. Take a look at the following example:\nimport pickle class Veggy(): def __init__(self): self.color = '' def set_color(self, color): self.color = color cucumber = Veggy() cucumber.set_color('green') with open('test_pickle.pkl', 'wb') as pickle_out: pickle.dump(cucumber, pickle_out) with open('test_pickle.pkl', 'rb') as pickle_in: unpickled_cucumber = pickle.load(pickle_in) print(unpickled_cucumber.color)  As you can see, this example is almost as simple as the previous one. Between the lines 3 and 7 we define a simple class that contains one attribute and one method that changes this attribute. In line 9 we create an instance of that class and store it in the cucumber variable, and in line 10 we set its attribute color to \u0026ldquo;green\u0026rdquo;.\nThen, using the exact same functions as in the previous example, we pickle and unpickle our freshly created cucumber object. Running the code above results in the following output:\n$ python unpickle_custom.py green  Remember, that we can only unpickle the object in an environment where the class Veggy is either defined or imported. If we create a new script and try to unpickle the object without importing the Veggy class, we\u0026rsquo;ll get an \u0026ldquo;AttributeError\u0026rdquo;. For example, execute the following script:\nimport pickle with open('test_pickle.pkl', 'rb') as pickle_in: unpickled_cucumber = pickle.load(pickle_in) print(unpickled_cucumber.color)  In the output of the script above, you will see the following error:\n$ python unpickle_simple.py Traceback (most recent call last): File \u0026quot;\u0026lt;pyshell#40\u0026gt;\u0026quot;, line 2, in \u0026lt;module\u0026gt; unpickled_cucumber = pickle.load(pickle_in) AttributeError: Can't get attribute 'Veggy' on \u0026lt;module '__main__' (built-in)\u0026gt;  Conclusion As you can see, thanks to the Pickle module, serialization of Python objects is pretty simple. In our examples, we pickled a simple Python list – but you can use the exact same method to save a large spectrum of Python data types, as long as you make sure your objects contain only other pickleable objects.\nPickling has some disadvantages, the biggest of which might be the fact that you can only unpickle your data using Python – if you need a cross-language solution, JSON is definitely a better option. And finally, remember that pickles can be used to carry the code that you don\u0026rsquo;t necessarily want to execute. Similarly to pickled food, as long as you get your pickles from trusted sources, you should be fine.\nReference : https://stackabuse.com/introduction-to-the-python-pickle-module/\nศึกษาเพิ่มเติม : https://python3.wannaphong.com/\n"});index.add({'id':65,'href':'/library/tutorials/docs/articles/python/oop-in-python/','title':"OOP in Python",'content':" Object Oriented Programming in Python  Introduction Pros and Cons of OOP Class Objects Attributes Methods Constructors Local vs Global Variables Access Modifiers Inheritance Polymorphism Encapsulation Conclusion  Introduction Object-Oriented Programming (OOP) is a programming paradigm where different components of a computer program are modeled after real-world objects. An object is anything that has some characteristics and can perform a function.\nConsider a scenario where you have to develop a Formula 1 car racing game using the object-oriented programming approach. The first thing you need to do is to identify real-world objects in the actual Formula 1 race. What are the entities in a Formula 1 race that have some characteristics and can perform any function? One of the obvious answers to this question is the car. A car can have characteristics like engine capacity, make, model, manufacturer, and so on. Similarly, a car can be started, stopped, accelerated and so on. A driver can be another object in a Formula 1 race. A driver has a nationality, age, gender, and so on, and he can perform functionalities like driving the car, moving the steering or changing the transmission.\nJust like in this example, in object-oriented programming we will create objects for the corresponding real-world entity.\nIt is important to mention here that object-oriented programming is not a language-dependent concept. It is a general programming concept and most of the modern languages, such as Java, C#, C++, and Python, support object-oriented programming. In this article, we will see a detailed introduction to Object-Oriented Programming in Python, but before that, we will see some of the advantages and disadvantages of object-oriented programming.\nPros and Cons of OOP Following are some of the advantages of object-oriented programming:\n Object-oriented programming fosters reusability. A computer program is written in the form of objects and classes, which can be reused in other projects as well. The modular approach used in object-oriented programming results in highly maintainable code. In object-oriented programming, every class has a specific task. If an error occurs in one part of the code, you can rectify it locally without having to affect other parts of the code. Data encapsulation (which we will study later in the article) adds an extra layer of security to the program developed using the object-oriented approach.  Though object-oriented programming has several advantages as discussed, it has some downsides as well, some of which have been enlisted below:\n Detailed domain knowledge of the software being developed is needed in order to create objects. Not every entity in software is a candidate for being implemented as an object. It can be hard for newbies to identify this fine line. As you add more and more classes to the code, the size and complexity of the program grows exponentially.  In the next section, we will see some of the most important concepts of object-oriented programming.\nAs the name suggests, object-oriented programming is all about objects. However, before an object can be created we need to define the class for the object.\nClass A class in object-oriented programming serves as a blueprint for the object. A class can be considered as a map for the house. You can get an idea of what the house looks like by simply seeing the map. However, a class itself is nothing. For instance, a map is not a house, it only explains how the actual house will look.\nThe relationship between a class and object can be understood by looking at the relationship between a car and an Audi. An Audi is actually a car. However, there is no such thing as a car only. A car is an abstract concept, it is actually implemented in the form of Toyota, Ferrari, Honda, etc.\nThe keyword class is used in order to create a class in Python. The name of the class follows the class keyword, followed by the colon character. The body of the class starts on a new line, indented one tab from the left.\nLet\u0026rsquo;s see how we can create a very basic class in Python. Take a look at the following code:\n# Creates class Car class Car: # create class attributes name = \u0026quot;c200\u0026quot; make = \u0026quot;mercedez\u0026quot; model = 2008 # create class methods def start(self): print (\u0026quot;Engine started\u0026quot;) def stop(self): print (\u0026quot;Engine switched off\u0026quot;)  In the example above, we create a class named Car with three attributes: name, make, and model. The car class also contains two methods: start() and stop().\nObjects Earlier, we said that a class provides a blueprint. However, to actually use the objects and methods of a class, you need to create an object out of that class. There are few class methods and attributes that can be used without an object, which we will see in the later section. For now, just keep in mind that by default, we need to create an object of a class before we can use its methods and attributes.\nAn object is also called an instance; therefore, the process of creating an object of a class is called instantiation. In Python, to create an object of a class we simply need to write the class name followed by opening and closing parenthesis.\nLet\u0026rsquo;s create an object of the Car class that we created in the last section.\n# Creates car_a object of Car class car_a = Car() # Creates car_b object of car class car_b = Car()  In the script above, we created two objects of the car class: car_a and car_b. To check the type of the objects we created, we can use the type method and pass it the name of our object. Execute the following script:\nprint(type(car_b))  In the output, you will see:\n\u0026lt;class '__main__.Car'\u0026gt;  Which says that the type of car_b object is a class Car.\nAt this point we\u0026rsquo;ve created our class and the corresponding objects. Now is the time to access class attributes and call class method using the class object. To do so, you simply have to write the object name, followed by dot operator and the name of the attribute or the method that you want to access or call, respectively. Take a look at the following example:\ncar_b.start()  In the script above, we call the start() method via the car_b object. The output will be as follows:\nEngine started  Similarly, you can access an attribute using the following syntax:\nprint(car_b.model)  In the output, you will see the value of the model attribute, as shown below:\n2008  Attributes In the previous section, we saw how we can create objects of a class and can use those objects to access the attributes of a class.\nIn Python, every object has some default attributes and methods in addition to user-defined attributes. To see all the attributes and methods of an object, the built-in dir() function can be used. Let\u0026rsquo;s try to see all the attributes of the car_b object that we created in the last section. Execute the following script:\ndir(car_b)  In the output, you will see the following attributes:\n['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'make', 'model', 'name', 'start', 'stop']  This built-in function is useful for inspecting all of the attributes and functions of an object, especially when used via Python\u0026rsquo;s REPL.\nClass vs Instance Attributes Attributes can be broadly categorized into two types: Class attributes and Instance attributes. Class attributes are shared by all the objects of a class while instance attributes are the exclusive property of the instance.\nRemember, an instance is just another name for the object. Instance attributes are declared inside any method while class attributes are declared outside of any method. The following example clarifies the difference:\nclass Car: # create class attributes car_count = 0 # create class methods def start(self, name, make, model): print (\u0026quot;Engine started\u0026quot;) self.name = name self.make = make self.model = model Car.car_count += 1  In the script above, we create a class Car with one class attribute car_count and three instance attributes name, make and mode. The class contains one method start() which contains the three instance attributes. The values for the instance attributes are passed as arguments to the start() method. Inside the start method, the car_count attribute is incremented by one.\nIt is important to mention that inside the method, the instance attributes are referred using the self keyword, while class attributes are referred by the class name.\nLet\u0026rsquo;s create an object of the Car class and call the start() method.\ncar_a = Car() car_a.start(\u0026quot;Corrola\u0026quot;, \u0026quot;Toyota\u0026quot;, 2015) print(car_a.name) print(car_a.car_count)  In the above script we print the instance attribute name and class attribute car_count. You will see in the output that the car_count attribute will have a value of 1, as shown below:\nEngine started Corrola 1  Now, let\u0026rsquo;s create another object of the car class and call the start() method.\ncar_b = Car() car_b.start(\u0026quot;City\u0026quot;, \u0026quot;Honda\u0026quot;, 2013) print(car_b.name) print(car_b.car_count)  Now if you print the value of the car_count attribute, you will see 2 in the output. This is because the car_count attribute is a class attribute and hence it is shared between the instances. The car_a object incremented its value to 1, while car_b object incremented it again, hence the final value became 2. The output looks like this:\nEngine started City 2  Methods As we described earlier, in object-oriented programming, the methods are used to implement the functionalities of an object. In the previous section, we created start() and stop() methods for the Car class. Till now, we have been using the objects of a class in order to call the methods. However, there is a type of method that can be called directly using the class name. Such a method is called a static method.\nStatic Methods To declare a static method, you have to specify the @staticmethod descriptor before the name of the method as shown below:\nclass Car: @staticmethod def get_class_details(): print (\u0026quot;This is a car class\u0026quot;) Car.get_class_details()  In the above script, we create a class Car with one static method get_class_details(). Let\u0026rsquo;s call this method using the class name.\nCar.get_class_details()  You can see that we did not need to create an instance of the Car class in order to call the get_class_details() method, rather we simply used the class name. It is important to mention that static methods can only access class attributes in Python.\nReturning Multiple Values from a Method One of the best features of the Python language is the ability of class methods to return multiple values. Take a look at the following example:\nclass Square: @staticmethod def get_squares(a, b): return a*a, b*b print(Square.get_squares(3, 5))  In the above script, we created a class named Square with one static method get_squares(). The method takes two parameters; multiply each parameter with itself and returns both the results using return statement. In the output of the script above, you will see the squares of 3 and 5.\nThe str Method Till now we have been printing attributes using the print() method. Let\u0026rsquo;s see what happens if we print the object of a class.\nTo do so we\u0026rsquo;ll create a simple Car class with one method and try to print the object of the class to the console. Execute the following script:\nclass Car: # create class methods def start(self): print (\u0026quot;Engine started\u0026quot;) car_a = Car() print(car_a)  In the script above we create car_a object of the Car class and print its value on the screen. Basically here we are treating car_a object as a string. The output looks likes this:\n\u0026lt;__main__.Car object at 0x000001CCCF4335C0\u0026gt;  The output shows the memory location where our object is stored. Every Python object has a __str__ method by default. When you use the object as a string, the __str__ method is called, which by default prints the memory location of the object. However, you can provide your own definition for the __str__ method as well. For instance, look at the following example:\n# Creates class Car class Car: # create class methods def __str__(self): return \u0026quot;Car class Object\u0026quot; def start(self): print (\u0026quot;Engine started\u0026quot;) car_a = Car() print(car_a)  In the script above, we override the __str__ method by providing our own custom definition for the method. Now, if you print the car_a object, you will see the message \u0026ldquo;Car class Object\u0026rdquo; on the console. This is the message that we printed inside our custom the __str__ method.\nUsing this method you can create custom and more meaningful descriptions for when an object is printed. You could even display some of the data within the class, like the name of a Person class.\nConstructors A constructor is a special method that is called by default whenever you create an object of a class.\nTo create a constructor, you have to create a method with keyword __init__. Take a look at the following example:\nclass Car: # create class attributes car_count = 0 # create class methods def __init__(self): Car.car_count +=1 print(Car.car_count)  In the script above, we create a Car class with one class attribute car_count. The class contains a constructor which increments the value of car_count and prints the resultant value on screen.\nNow, whenever an object of the Car class will be created the constructor will be called, the value of the car_count will be incremented and displayed on the screen. Let\u0026rsquo;s create a simple object and see what happens:\ncar_a = Car() car_b = Car() car_c = Car()  Subscribe to our Newsletter Get occassional tutorials, guides, and reviews in your inbox. No spam ever. Unsubscribe at any time.\nSubscribe\nIn the output, you will see a value of 1, 2, and 3 printed since with every object the value of car_count variable is incremented and displayed on the screen.\nExcept for the name, the constructor can be used as an ordinary method. You can pass and receive values from a constructor. It is usually used in this way when you want to initialize attribute values upon instantiating the class.\nLocal vs Global Variables We know that there are two types of Python attributes, instance attributes, and class attributes. The attributes of a class are also referred to as variables. Depending on the scope, variables can also be categorized into two types: Local variables and Global variables.\nLocal Variables A local variable in a class is a variable that can only be accessed inside the code block where it is defined. For instance, if you define a variable inside a method, it cannot be accessed anywhere outside that method. Look at the following script:\n# Creates class Car class Car: def start(self): message = \u0026quot;Engine started\u0026quot; return message  In the script above we create a local variable message inside the start() method of the Car class. Now let\u0026rsquo;s create an object of the Car class and try to access the local variable message as shown below:\ncar_a = Car() print(car_a.message)  The above script will return the following error:\nAttributeError: 'Car' object has no attribute 'message'  This is because we cannot access the local variable outside the block in which the local variable is defined.\nGlobal Variable A global variable is defined outside of any code block e.g method, if-statements, etc. A global variable can be accessed anywhere in the class. Take a look at the following example.\n# Creates class Car class Car: message1 = \u0026quot;Engine started\u0026quot; def start(self): message2 = \u0026quot;Car started\u0026quot; return message2 car_a = Car() print(car_a.message1)  In the script above, we created a global variable message1 and printed its value on the screen. In the output, you will see the value of the message1 variable, printed without an error.\nIt is important to mention that there is a difference between class and instance attributes, and local vs global variables. The class and instance attributes differ in the way they are accessed i.e. using class name and using instance name. On the other hand, local vs global variables differ in their scope, or in other words the place where they can be accessed. A local variable can only be accessed inside the method. Though in this article, both the local variable and instance attributes are defined inside the method, local attribute is defined with the self-keyword.\nAccess Modifiers The access modifiers in Python are used to modify the default scope of variables. There are three types of access modifiers in Python: public, private, and protected.\nVariables with the public access modifiers can be accessed anywhere inside or outside the class, the private variables can only be accessed inside the class, while protected variables can be accessed within the same package.\nTo create a private variable, you need to prefix double underscores with the name of the variable. To create a protected variable, you need to prefix a single underscore with the variable name. For public variables, you do not have to add any prefixes at all.\nLet\u0026rsquo;s see public, private, and protected variables in action. Execute the following script:\nclass Car: def __init__(self): print (\u0026quot;Engine started\u0026quot;) self.name = \u0026quot;corolla\u0026quot; self.__make = \u0026quot;toyota\u0026quot; self._model = 1999  In the script above, we create a simple Car class with a constructor and three variables name, make, and model. The name variable is public while the make and model variables have been declared private and protected, respectively.\nLet\u0026rsquo;s create an object of the Car class and try to access the name variable. Execute the following script:\ncar_a = Car() print(car_a.name)  Since name is a public variable, therefore we can access it outside the class. In the output, you will see the value for the name printed on the console.\nNow let\u0026rsquo;s try to print the value of the make variable. Execute the following script:\nprint(car_a.make)  In the output, you will see the following error message:\nAttributeError: 'Car' object has no attribute 'make'  We have covered most of the basic object-oriented programming concepts in the last few sections. Now, let\u0026rsquo;s talk about the pillars of the object-oriented programming: Polymorphism, Inheritance, and Encapsulation, collectively referred to as PIE.\nInheritance Inheritance in object-oriented programming is pretty similar to real-world inheritance where a child inherits some of the characteristics from his parents, in addition to his/her own unique characteristics.\nIn object-oriented programming, inheritance signifies an IS-A relation. For instance, a car is a vehicle. Inheritance is one of the most amazing concepts of object-oriented programming as it fosters code re-usability.\nThe basic idea of inheritance in object-oriented programming is that a class can inherit the characteristics of another class. The class which inherits another class is called the child class or derived class, and the class which is inherited by another class is called parent or base class.\nLet\u0026rsquo;s take a look at a very simple example of inheritance. Execute the following script:\n# Create Class Vehicle class Vehicle: def vehicle_method(self): print(\u0026quot;This is parent Vehicle class method\u0026quot;) # Create Class Car that inherits Vehicle class Car(Vehicle): def car_method(self): print(\u0026quot;This is child Car class method\u0026quot;)  In the script above, we create two classes Vehicle class, and the Car class which inherits the Vehicle class. To inherit a class, you simply have to write the parent class name inside the parenthesis that follows the child class name. The Vehicle class contains a method vehicle_method() and the child class contains a method car_method(). However, since the Car class inherits the Vehicle class, it will also inherit the vehicle_method().\nLet\u0026rsquo;s see this in action. Execute the following script:\ncar_a = Car() car_a.vehicle_method() # Calling parent class method  In the script above, we create an object of the Car class and call the vehicle_method() using that Car class object. You can see that the Car class doesn\u0026rsquo;t have any vehicle_method() but since it has inherited the Vehicle class that contains the vehicle_method(), the car class can also use it. The output looks likes this:\nThis is parent Vehicle class method  In Python, a parent class can have multiple children and similarly, a child class can have multiple parent classes. Let\u0026rsquo;s take a look at the first scenario. Execute the following script:\n# Create Class Vehicle class Vehicle: def vehicle_method(self): print(\u0026quot;This is parent Vehicle class method\u0026quot;) # Create Class Car that inherits Vehicle class Car(Vehicle): def car_method(self): print(\u0026quot;This is child Car class method\u0026quot;) # Create Class Cycle that inherits Vehicle class Cycle(Vehicle): def cycleMethod(self): print(\u0026quot;This is child Cycle class method\u0026quot;)  In the script above the parent Vehicle class is inherited by two child classes Car and Cycle. Both the child classes will have access to the vehicle_method() of the parent class. Execute the following script to see that:\ncar_a = Car() car_a.vehicle_method() # Calling parent class method car_b = Cycle() car_b.vehicle_method() # Calling parent class method  In the output, you will see the output of the vehicle_method() method twice as shown below:\nThis is parent Vehicle class method This is parent Vehicle class method  You can see how a parent class can be inherited by two child classes. In the same way, a child can have multiple parents. Let\u0026rsquo;s take a look at the example:\nclass Camera: def camera_method(self): print(\u0026quot;This is parent Camera class method\u0026quot;) class Radio: def radio_method(self): print(\u0026quot;This is parent Radio class method\u0026quot;) class CellPhone(Camera, Radio): def cell_phone_method(self): print(\u0026quot;This is child CellPhone class method\u0026quot;)  In the script above, we create three classes: Camera, Radio, and CellPhone. The Camera class and the Radio classes are inherited by the CellPhoneclass which means that the CellPhone class will have access to the methods of both Camera and Radio classes. The following script verifies this:\ncell_phone_a = CellPhone() cell_phone_a.camera_method() cell_phone_a.radio_method()  The output looks likes this:\nThis is parent Camera class method This is parent Radio class method  Polymorphism The term polymorphism literally means having multiple forms. In the context of object-oriented programming, polymorphism refers to the ability of an object to behave in multiple ways.\nPolymorphism in programming is implemented via method-overloading and method overriding.\nMethod Overloading Method overloading refers to the property of a method to behave in different ways depending upon the number or types of the parameters. Take a look at a very simple example of method overloading. Execute the following script:\n# Creates class Car class Car: def start(self, a, b=None): if b is not None: print (a + b) else: print (a)  In the script above, if the start() method is called by passing a single argument, the parameter will be printed on the screen. However, if we pass 2 arguments to the start() method, it will add both the arguments and will print the result of the sum.\nLet\u0026rsquo;s try with single argument first:\ncar_a = Car() car_a.start(10)  In the output, you will see 10. Now let\u0026rsquo;s try to pass 2 arguments:\ncar_a.start(10,20)  In the output, you will see 30.\nMethod Overriding Method overriding refers to having a method with the same name in the child class as in the parent class. The definition of the method differs in parent and child classes but the name remains the same. Let\u0026rsquo;s take a simple example method overriding in Python.\n# Create Class Vehicle class Vehicle: def print_details(self): print(\u0026quot;This is parent Vehicle class method\u0026quot;) # Create Class Car that inherits Vehicle class Car(Vehicle): def print_details(self): print(\u0026quot;This is child Car class method\u0026quot;) # Create Class Cycle that inherits Vehicle class Cycle(Vehicle): def print_details(self): print(\u0026quot;This is child Cycle class method\u0026quot;)  In the script above the Car and Cycle classes inherit the Vehicle class. The vehicle class has print_details() method, which is overridden by the child classes. Now if you call the print_details() method, the output will depend upon the object through which the method is being called. Execute the following script to see this concept in action:\ncar_a = Vehicle() car_a. print_details() car_b = Car() car_b.print_details() car_c = Cycle() car_c.print_details()  The output will look like this:\nThis is parent Vehicle class method This is child Car class method This is child Cycle class method  You can see that the output is different, although the print_details() method is being called through derived classes of the same base class. However, since the child classes have overridden the parent class method, the methods behave differently.\nEncapsulation Encapsulation is the third pillar of object-oriented programming. Encapsulation simply refers to data hiding. As a general principle, in object-oriented programming, one class should not have direct access to the data of the other class. Rather, the access should be controlled via class methods.\nTo provide controlled access to class data in Python, the access modifiers and properties are used. We have already seen access modifiers, in this section, we will see properties in action.\nSuppose we want to ensure that the car model should always be between 2000 and 2018. If a user tries to enter a value less than 2000 for the car model, the value is automatically set to 2000 and if the entered value is greater than 2018, it should be set to 2018. If the value is between 2000 and 2018, it should not be changed. We can create a property for the model attribute which implements this logic as follows:\n# Creates class Car class Car: # Creates Car class constructor def __init__(self, model): # initialize instance variables self.model = model # Creates model property @property def model(self): return self.__model # Create property setter @model.setter def model(self, model): if model \u0026lt; 2000: self.__model = 2000 elif model \u0026gt; 2018: self.__model = 2018 else: self.__model = model def getCarModel(self): return \u0026quot;The car model is \u0026quot; + str(self.model) carA = Car(2088) print(carA.getCarModel())  A property has three parts. You have to define the attribute, which is model in the above script. Next, you have to define the property for the attribute using the @property decorator. Finally, you have to create property setter which is @model.setter descriptor in the above script.\nNow, if you try to enter a value greater than 2018 for the model attribute, you will see that the value is set to 2018. Let\u0026rsquo;s test this. Execute the following script:\ncar_a = Car(2088) print(car_a.get_car_model())  Here we are passing 2088 as the value for model, however if you print the value for the model attribute via get_car_model() function, you will see 2018 in the output.\nConclusion In this article, we studied some of the most important object-oriented programming concepts. Object-oriented programming is one of the most famous and commonly used programming paradigms. The importance of object-oriented programming is reflected by the fact that most of the modern programming languages are either fully object-oriented or support object-oriented programming.\nRef : https://stackabuse.com/object-oriented-programming-in-python/\n"});index.add({'id':66,'href':'/library/tutorials/docs/articles/python/python-optimizations/','title':"Optimizations",'content':" Python Optimizations Peephole is a way Python optimizes certain things of your program at compile time by either pre-calculating constant expressions or transforming certain data structures. Constant Expressions Optimizing constant expressions is really simple. What Python does is basically pre-calculate constants. Suppose that along your program you have the following multiplication for some reason,\nsecondsInADay = 60*60*24  What python will do is pre-calculate that multiplication and will replace it for 86400 . You might be wondering why not just write directly 86400 in code, the answer is clarity. On the expression above you can see that in order to calculate how many seconds a day has, you have to multiply 60 seconds time 60 minutes of an hour times 24 hours of a day. This way your code might look clearer. Python won’t make that calculation each time that multiplication appears, it will just pre-calculate it and replace it for the final value. Short sequences also get pre-calculated. Imagine you have this code,\nmyTuple = (2, 4)*5 # -\u0026gt; (2, 4, 2, 4, 2, 4, 2, 4, 2, 4) myString = \u0026quot;qwerty \u0026quot;*2 # -\u0026gt; \u0026quot;qwerty qwerty \u0026quot;  As you can see on the code above we have two variables, the first one is a tuple multiplied by 5 and the second one is a short string multiplied by 2, this short sequences will be pre-calculated and Python will replace the original expression with the value on the comments. It is worth to mention that Python has to balance between storage and computation, if it pre-calculates long sequences the program might be faster but it will end up using a lot of memory. In order to see that this is happening you can simply open a Python console and write the following code,\ndef my_func(): a = 60*60*24 myString = (\u0026quot;querty \u0026quot;) * 2 myTupple = (2, 4) *5 myString = (\u0026quot;This is a sequence with a lot of characters\u0026quot;) * 100  Once this function is declared you can write the following code to access all the constants declared on the scope of that funcion,\nmy_func.__code__.co_consts  The output should be the following,\nmy_func.__code__.co_consts(None, 86400, 'querty querty ', (2, 4, 2, 4, 2, 4, 2, 4, 2, 4), 'This is a sequence with a lot of characters', 100)  As you can see, on the output above Python has already pre-calculated the constant values and short sequences, instead of having 60*60*24 the function has already the constant value 86400 , the same thing happens with the tuple and the short string, but as you can see the long sequence didn’t get pre-calculated and instead we get two different constants, \u0026lsquo;This is a sequence with a lot of characters\u0026rsquo; and 100 . As mentioned above, Python has to balance between storage and computation. Membership Tests: Replacing mutable data structures for inmutable data structures What Python does here is basically transforming mutable data structures to its inmutable version. Lists get transformed into tuples and sets to frozensets. For instance,\ndef my_func(element): if element in [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;]: print(element)  The code above will be transformed to this,\ndef my_func(element): if element in (\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;): print(element)  This is done just because accessing to the inmutable version of a data structure is faster than accessing the mutable one. You can check this doing the same thing as before running the follwing code,\nmy_func.__code__.co_consts  The output should be the following,\nmy_func.__code__.co_consts  (None, ('a', 'b', 'c'))  As you can see, the function has a constant value which is the inmutable version (a tuple) of the declared list. Finally doing the same as before but with a set you will see that it will be transformed into a frozenset,\ndef my_func(element): if element in {\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;}: print(element) my_func.__code__.co_consts  (None, frozenset({'a', 'b', 'c'}))  If you are interested on Python optimizations you could check out my article about Python optimizations (Intering).\n Written with StackEdit.\n "});index.add({'id':67,'href':'/library/tutorials/docs/articles/python/overloading-functions/','title':"Overloading Functions and Operators",'content':" Overloading Functions and Operators in Python What is Overloading? Overloading, in the context of programming, refers to the ability of a function or an operator to behave in different ways depending on the parameters that are passed to the function, or the operands that the operator acts on. In this article, we will see how we can perform function overloading and operator overloading in Python.\nOverloading a method fosters reusability. For instance, instead of writing multiple methods that differ only slightly, we can write one method and overload it. Overloading also improves code clarity and eliminates complexity.\nOverloading is a very useful concept. However, it has a number of disadvantages associated with it. Overloading can cause confusion when used across inheritance boundaries. When used excessively, it becomes cumbersome to manage overloaded functions.\nIn the remaining section of this article, we will be discussing the function and operator overloading in detail.\nFunction Overloading in Python Depending on how the function has been defined, we can call it with zero, one, two, or even many parameters. This is referred to as \u0026ldquo;function overloading\u0026rdquo;.\nFunction overloading is further divided into two types: overloading built-in functions and overloading custom functions. We will look at both the types in the upcoming sections.\nOverloading Built-in Functions It is possible for us to change the default behavior of Python\u0026rsquo;s built-in functions. We only have to define the corresponding special method in our class.\nLet us demonstrate this using Python\u0026rsquo;s len() function on our Purchase class:\nclass Purchase: def __init__(self, basket, buyer): self.basket = list(basket) self.buyer = buyer def __len__(self): return len(self.basket) purchase = Purchase(['pen', 'book', 'pencil'], 'Python') print(len(purchase))  Output:\n3  To change how the len() function behaves, we defined a special method named _len_() in our class. Anytime we pass an object of our class to len(), the result will be obtained by calling our custom defined function, that is, _len_().\nThe output shows that we are able to use len() to get the length of the basket.\nIf we call len() on the object without the __len__() function overloaded, we will get a TypeError as shown below:\nclass Purchase: def __init__(self, basket, buyer): self.basket = list(basket) self.buyer = buyer purchase = Purchase(['pen', 'book', 'pencil'], 'Python') print(len(purchase))  Output:\nTraceback (most recent call last): File \u0026quot;C:/Users/admin/func.py\u0026quot;, line 8, in \u0026lt;module\u0026gt; print(len(purchase)) TypeError: object of type 'Purchase' has no len()  Note: Python expects the len() function to return an integer, hence this should be put into consideration when overloading the function. If your overloaded function is expected to return anything else other than an integer, you will get a TypeError.\nWe can change the behavior of the len() method in the above example from within the definition of its implementation, that is, __len__(). Instead of returning the length of the basket, let us make it return something else:\nclass Purchase: def __init__(self, basket, buyer): self.basket = list(basket) self.buyer = buyer def __len__(self): return 10; purchase = Purchase(['pen', 'book', 'pencil'], 'Python') print(len(purchase))  Output:\n10  Instead of returning the length of the basket, it now returns the value that we have specified.\nOverloading User-Defined Functions To overload a user-defined function in Python, we need to write the function logic in such a way that depending upon the parameters passed, a different piece of code executes inside the function. Take a look at the following example:\nclass Student: def hello(self, name=None): if name is not None: print('Hey ' + name) else: print('Hey ') # Creating a class instance std = Student() # Call the method std.hello() # Call the method and pass a parameter std.hello('Nicholas')  Output:\nHey Hey Nicholas  We have created the class Student with one function named hello(). The class takes the parameter name which has been set to None. This means the method can be called with or without a parameter.\nWe have created an instance of the class which has been used to call the function twice, first with zero parameters and secondly with one parameter. We have implemented function overloading since there are two ways to call the function.\nNow we know how function overloading works, the next section focusses on operator overloading.\nOperator Overloading Python allows us to change the default behavior of an operator depending on the operands that we use. This practice is referred to as \u0026ldquo;operator overloading\u0026rdquo;.\nThe functionality of Python operators depends on built-in classes. However, the same operator will behave differently when applied to different types. A good example is the \u0026ldquo;+\u0026rdquo; operator. This operator will perform an arithmetic operation when applied on two numbers, will concatenate two strings, and will merge two lists.\nExamples of Operator Overloading To see Python\u0026rsquo;s operator overloading in action, launch the Python terminal and run the following commands:\n\u0026gt;\u0026gt;\u0026gt; 4 + 4 8 \u0026gt;\u0026gt;\u0026gt; \u0026quot;Py\u0026quot; + \u0026quot;thon\u0026quot; 'Python'  In the first command, we have used the \u0026ldquo;+\u0026rdquo; operator to add two numbers. In the second command, we used the same operator to concatenate two strings.\nIn this case, the \u0026ldquo;+\u0026rdquo; operator has two interpretations. When used to add numbers, it is referred to as an \u0026ldquo;addition operator\u0026rdquo;. When used to add strings, it is referred to as \u0026ldquo;concatenation operator\u0026rdquo;. In short, we can say that the \u0026ldquo;+\u0026rdquo; operator has been overloaded for int and str classes.\nTo achieve operator overloading, we define a special method in a class definition. The name of the method should begin and end with a double underscore (__). The + operator is overloaded using a special method named __add__(). This method is implemented by both the int and str classes.\nConsider the following expression:\nx + y  Python will interpret the expression as x.__add__(y). The version of __add__() that is called will depend on the types of x and y. For example:\n\u0026gt;\u0026gt;\u0026gt; x, y = 5, 7 \u0026gt;\u0026gt;\u0026gt; x + y 12 \u0026gt;\u0026gt;\u0026gt; x.__add__(y) 12 \u0026gt;\u0026gt;\u0026gt;  The above example demonstrates how to use the + operator as well as its special method.\nThe following example demonstrates how to overload various operators in Python:\nimport math class Point: def __init__(self, xCoord=0, yCoord=0): self.__xCoord = xCoord self.__yCoord = yCoord # get x coordinate def get_xCoord(self): return self.__xCoord # set x coordinate def set_xCoord(self, xCoord): self.__xCoord = xCoord # get y coordinate def get_yCoord(self): return self.__yCoord # set y coordinate def set_yCoord(self, yCoord): self.__yCoord = yCoord # get current position def get_position(self): return self.__xCoord, self.__yCoord # change x \u0026amp; y coordinates by p \u0026amp; q def move(self, p, q): self.__xCoord += p self.__yCoord += q # overload + operator def __add__(self, point_ov): return Point(self.__xCoord + point_ov.__xCoord, self.__yCoord + point_ov.__yCoord) # overload - operator def __sub__(self, point_ov): return Point(self.__xCoord - point_ov.__xCoord, self.__yCoord - point_ov.__yCoord) # overload \u0026lt; (less than) operator def __lt__(self, point_ov): return math.sqrt(self.__xCoord ** 2 + self.__yCoord ** 2) \u0026lt; math.sqrt(point_ov.__xCoord ** 2 + point_ov.__yCoord ** 2) # overload \u0026gt; (greater than) operator def __gt__(self, point_ov): return math.sqrt(self.__xCoord ** 2 + self.__yCoord ** 2) \u0026gt; math.sqrt(point_ov.__xCoord ** 2 + point_ov.__yCoord ** 2) # overload \u0026lt;= (less than or equal to) operator def __le__(self, point_ov): return math.sqrt(self.__xCoord ** 2 + self.__yCoord ** 2) \u0026lt;= math.sqrt(point_ov.__xCoord ** 2 + point_ov.__yCoord ** 2) # overload \u0026gt;= (greater than or equal to) operator def __ge__(self, point_ov): return math.sqrt(self.__xCoord ** 2 + self.__yCoord ** 2) \u0026gt;= math.sqrt(point_ov.__xCoord ** 2 + point_ov.__yCoord ** 2) # overload == (equal to) operator def __eq__(self, point_ov): return math.sqrt(self.__xCoord ** 2 + self.__yCoord ** 2) == math.sqrt(point_ov.__xCoord ** 2 + point_ov.__yCoord ** 2) point1 = Point(2, 4) point2 = Point(12, 8) print(\u0026quot;point1 \u0026lt; point2:\u0026quot;, point1 \u0026lt; point2) print(\u0026quot;point1 \u0026gt; point2:\u0026quot;, point1 \u0026gt; point2) print(\u0026quot;point1 \u0026lt;= point2:\u0026quot;, point1 \u0026lt;= point2) print(\u0026quot;point1 \u0026gt;= point2:\u0026quot;, point1 \u0026gt;= point2) print(\u0026quot;point1 == point2:\u0026quot;, point1 == point2)```  Output:\npoint1 \u0026lt; point2: True point1 \u0026gt; point2: False point1 \u0026lt;= point2: True point1 \u0026gt;= point2: False point1 == point2: False  We have two private attributes in the Point class, namely, __xCoord and __yCoord representing cartesian plain coordinates named xCoord and yCoord. We have defined the setter and getter methods for these attributes. The get_position() method helps us get the current position while the move() method helps us change the coordinates.\nConsider the following line extracted from the code:\ndef __add__(self, point_ov):  The line helps us overload the + operator for our class. The __add__() method should create a new Point object by adding the individual coordinates of a single Point object to another Point object. It finally returns the newly created object to the caller. This helps us write expressions such as:\npoint3 = point1 + point2  Python will interpret the above as point3 = point1.__add__(point2). It will then call the __add__() method to add two Point objects. The result will be assigned to \u0026ldquo;point3\u0026rdquo;.\nNote that once the __add__() method is called, the value of point1 will be assigned to self parameter while the value of point2 will be assigned to point_ovparameter. All the other special methods will work in a similar way.\nOperators to Overload The following table shows some of the more commonly overloaded mathematical operators, and the class method to overload:\n   Operator Method     + __add__(self, other)   - __sub__(self, other)   * __mul__(self, other)   / __truediv__(self, other)   % __mod__(self, other)   \u0026lt; __lt__(self, other)   \u0026lt;= __le__(self, other)   == __eq__(self, other)   != __ne__(self, other)   \u0026gt; __gt__(self, other)   \u0026gt;= __ge__(self, other)    Conclusion Python supports both function and operator overloading. In function overloading, we can use the same name for many Python functions but with the different number or types of parameters. With operator overloading, we are able to change the meaning of a Python operator within the scope of a class.\nReference : https://stackabuse.com/overloading-functions-and-operators-in-python/\n"});index.add({'id':68,'href':'/library/tutorials/docs/articles/data-science/pandas/cheatsheet-pandas/','title':"Pandas Cheatsheet",'content':" Cheatsheet วิธีใช้ และเทคนิคใน Pandas (Python) ฉบับสมบูรณ์ Pandas คืออะไร? Pandas เป็น Library ใน Python ที่ทำให้เราเล่นกับข้อมูลได้ง่ายขึ้น เหมาะมากสำหรับทำ Data Cleaning / Wrangling ครับผม\nวิธีการใช้งาน Pandas คือ โหลดไฟล์ข้อมูล เช่น CSV เข้าไป แล้วเราจะได้ข้อมูลในรูปแบบตาราง (DataFrame) ที่แบ่งข้อมูลตามแถวและคอลัมน์ หรือเหมือน Excel ที่เราใช้กันนั่นเอง\n\nตัวอย่าง DataFrame ของ Pandas เป็นตารางเหมือน Excel เลยครับ\nป.ล. Pandas ไม่เกี่ยวกับหมีแพนด้านะฮะ จริง ๆ แล้วมาจากคำว่า PANel DAta ซึ่งหมายถึงข้อมูลที่มีหลายมิตินั่นเอง\nเทคนิคการใช้ Pandas อย่างที่แอดมินเคยเล่า ว่าการทำ Data Wrangling เป็นงานที่ค่อนข้างถึกครับ วันนี้เลยรวบรวมโค้ดต่าง ๆ ในการใช้ Pandas มาให้ ซึ่งน่าจะครอบคลุมการใช้งานประมาณ 80 – 90% แล้วครับผม\nโค้ดบางส่วนมาจากคลาส Data Wrangling ที่แอดมินเรียน และจากเว็บไซต์ MyCheatSheet ครับ\nวิธีเช็ค Version Pandas โค้ดนี้เหมือนไม่สำคัญ แต่จริง ๆ แล้วสำคัญมากเวลาเราอ่าน Documentation ครับ เพราะถ้าเกิดมีอะไรพัง เราจะเทียบได้ว่า Pandas ของเราเป็นเวอร์ชั่นตามใน Documentation มั้ย\nprint (\u0026quot;Pandas version\u0026quot;,pandas.__version__)  วิธีการโหลดไฟล์ CSV (Import) จุดเริ่มต้นของการทำ Data Exploration \u0026amp; Analysis ใน Pandas ก็คือการโหลดไฟล์ข้อมูลแบบ CSV มาใช้งานนั่นเองครับ\nเราสามารถใช้คำสั่ง .head หรือ .tail เพื่อดูข้อมูลแถวบนสุด หรือแถวล่างสุดได้\n# Read DF csvdf = pd.read_csv('data.csv') # Sometimes reading CSV for Excel need encoding csvdf = pd.read_csv('data.csv',encoding = \u0026quot;ISO-8859-1\u0026quot;) # Print head and tail csvdf.head() csvdf.tail()  วิธีสุ่มข้อมูลสำหรับเช็ค (Sample) ปกติเราเช็คข้อมูลว่าถูกต้องมั้ยด้วย head กับ tail ซึ่งเป็นการเช็คจากด้านบนหรือด้านล่าง อีกวิธีที่น่าสนใจ คือ เช็คแบบสุ่มข้อมูลขึ้นมานั่นเองครับ ทำได้ง่าย ๆ โดยใช้\ncsvdf.sample()  วิธีเช็คข้อมูลหาความผิดปกติใน DataFrame เบื้องต้น หลังจากโหลดข้อมูลมาแล้ว เราอยากรู้ว่าข้อมูลมีกี่แถว, Missing value เท่าไหร่, แต่ละคอลัมน์เป็น Data Type อะไรบ้าง ก็รันคำสั่งนี้ได้เลย มีประโยชน์มากครับ\ndf.info()  df.info() # จะแสดงสรุปข้อมูลมาให้  นอกจากนั้นยังมีคำสั่ง df.dtypes (ไม่มีวงเล็บ) สำหรับดู Data Type แต่ละคอลัมน์อย่างเดียว\nวิธีแปลงประเภทข้อมูล (Data Type) ใน Data Frame บางครั้งประเภทข้อมูลของคอลัมน์เป็น String แต่เราต้องการ Integer หรือเราต้องการ Date เราสามารถแปลงข้อมูลได้ง่าย ๆ ดังนี้เลยครับ\ndf['hour'] = pd.to_numeric(df['hour']) # แปลงเป็น Numeric df['hour'] = df['hour'].astype('int') # อีกวิธีในการแปลงค่า สามารถใช้วิธีนี้แปลงเป็น float ได้  วิธีเช็ค Summary ของแต่ละคอลัมน์ (count, min, max, mean) ถ้าเราอยากรู้ Distribution คร่าว ๆ ของแต่ละคอลัมน์ว่าเป็นอย่างไร สามารถใช้คำสั่ง describe() ได้\ndf.describe()  วิธีเช็ค Summary (count, min, max, mean) แบบแยกกลุ่ม บางครั้งเราไม่ได้ต้องการรู้ Summary ของทั้งคอลัมน์ แต่อยากให้แยกตามแต่ละค่าในคอลัมน์นั้น ๆ ครับ ซึ่งมีประโยชน์มากเวลาเราทำ Data Analysis แล้วอยากรู้ว่าบางกลุ่มมีอะไรผิดปกติหรือเปล่า\ntest = df.groupby(['Gender']) test.describe()  วิธีสร้าง DataFrame ใหม่ วิธีสร้างแบบง่ายที่สุด ถ้าต้องการข้อมูลหลายรูปแบบ เราสามารถใช้ Dictionary แบบนี้เลยครับ\ndataframe = pandas.DataFrame({ 'C1': pandas.date_range('20170101', periods=4), 'C2' : [10,20,30,40], 'C3': pandas.Categorical(['A','B','C','D']), 'C4': 1})  แต่ถ้าเราต้องการแค่เป็นแบบตัวเลขทั่วไป ใช้ Numpy แบบนี้ได้เลย\narray = numpy.array([(1,2,3), (4,5,6),(7,8,9)]) dataframe = pandas.DataFrame(array,columns=['C1','C2','C3'])  วิธีเลือกหลายคอลัมน์จาก DataFrame ปกติถ้าเราต้องการเลือกแค่ 1 Column ก็เขียนแบบนี้ได้เลย\ndf['C1']  แต่ถ้าต้องการเลือกหลายคอลัมน์ ให้ทำแบบนี้\ndf[['C1','C2']]  วิธีเลือกคอลัมน์ตามเงื่อนไขที่ต้องการ บางทีเราอยาก Filter เฉพาะคอลัมน์ที่มีค่าตามที่เราต้องการโดยใช้ .loc ได้ โดยสามารถเลือก Filter แบบ .all() (ทุกค่าในคอลัมน์ต้องตรงตามเงื่อนไข) หรือ .any() (บางค่าในคอลัมน์ต้องตรงตามเงื่อนไข)\ndataframe2 = dataframe.loc[:,(dataframe\u0026gt;50).any()] dataframe3 = dataframe.loc[:,(dataframe\u0026gt;50).all()]  เราสามารถใช้หาคอลัมน์ที่มี Missing Values หรือหาคอลัมน์ที่ไม่มี Missing Values เลยก็ได้\ndataframe2 = dataframe.loc[:,dataframe.isnull().any()] dataframe3 = dataframe.loc[:,dataframe.notnull().all()]  วิธีเลือกแถวตามเงื่อนไขที่ต้องการ dataframe[dataframe['C1']\u0026gt;50] # เงื่อนไขแบบง่าย ๆ dataframe2 = dataframe.loc[dataframe.C1.isin([1,2,3])] # เงื่อนไขแบบซับซ้อน  ถ้ามีหลายเงื่อนไขเราสามารถใช้ \u0026amp; (and) หรือ | (or) ได้\ndataframe[(dataframe['C1']\u0026gt;50) \u0026amp; ((dataframe['C2']\u0026lt;25) | (dataframe['C2']\u0026gt;75))]  หรือใช้ Query เป็นเงื่อนไขได้ด้วย มีประโยชน์มากเวลาเรามีเงื่อนไขแปลก ๆ ไม่ต้องเขียนลูปขึ้นมาเองเลยครับ\ndataframe2 = dataframe.query('C1 \u0026gt; C2')  วิธีเพิ่มคอลัมน์ใหม่ สามารถเพิ่มคอลัมน์ใหม่ได้ 2 แบบ คือ\n เพิ่มโดยอิงจากคอลัมน์เดิม (เช่น เอาคอลัมน์เดิม + 10 หรือ เอาคอลัมน์ A – คอลัมน์ B มีประโยชน์มากตอนทำ Feature Engineering) เพิ่มคอลัมน์โดยตั้งค่า Fix ไปเลยสำหรับทุกแถว ส่วนใหญ่จะใช้วิธีนี้เวลาเราอยากได้ค่าอะไรแปลก ๆ ที่ต้องเขียนลูปเพื่อใส่ค่า ก็สร้างคอลัมน์แบบ Fix ค่าก่อน แล้วต่อด้วยลูป\ndf['new'] = dataframe['old'] + 10 # use old values df['new2'] = 5 # apply the same value  การสลับ Row \u0026lt;-\u0026gt; Column (Transpose)  ถ้าเราต้องการ Transpose (อารมณ์เหมือน Vector) เราสามารถใช้คำสั่งนี้ได้เลย\ndataframe.T  การต่อ DataFrame การต่อ Data Frame คือการเอา Data Set 2 ชุดมาต่อกันในแถวตั้งหรือแนวนอน สำหรับการต่อแบบปะติดไปเลย\nมี 2 คำสั่งที่เหมือนกัน คือ concat กับ append แต่ให้ใช้ concat ไปเลย เพราะ append เป็นคำสั่งที่ไม่ Memory Efficient\npd.concat([df1,df2], axis=1) # รวมกัน 2 คอลัมน์ (axis = 0 คือแถว, axis = 1 คือคอลัมน์) pd.concat([df1,df2,df3)] # รวมมากกว่า 2 คอลัมน์ก็ได้ pd.concat(…, ignore_index=True) # รวมเสร็จแล้ว reset index ให้ด้วย ควรใช้ ไม่งั้นจะเจอ row ID ซ้ำกันตอนรวมร่าง pd.concat(…, join='inner') # รวมร่างเฉพาะคอลัมน์ที่ df1 กับ df2 มีทั้งคู่ pd.concat(…, keys=['source1', 'source2']) # เพิ่มคอลัมน์เข้าไปด้วยเพื่อระบุว่า Row แต่ละอันมาจาก Data Frame อันไหน pd.concat(…, join_axes=[df2.index]) # เลือกรวมร่างเฉพาะ row index ที่เรากำหนดได้  การต่อ DataFrame แบบ Join ถ้าต้องการต่อ DataFrame แบบ Advance หน่อย เราก็สามารถ Join DataFrame ได้เหมือน Join Table ใครเขียน SQL มาก่อนน่าจะถนัดเลย\npd.merge(df1, df2, left_on=\u0026quot;col1\u0026quot;, right_on=\u0026quot;col2\u0026quot;, how=\u0026quot;inner\u0026quot;)  เราสามารถเปลี่ยนตรง how=”inner” เป็น “outer”, “left”, “right” เพื่อเปลี่ยนเป็น Outer Join, Left Join, Right Join ได้อีกด้วย\nการหาค่า Mean, Sum, Max (Aggregate) แบบทั้ง DataFrame Pandas สามารถสั่ง Aggregate เพื่อหาค่า Mean, Sum, และ Max ได้เลย เหมาะมากเวลาเราต้องการรวบข้อมูลก่อนเอาไป Visualize หรือต้องการทำ Feature Engineering ก็ได้\nnewdf = df.agg(['sum', 'max','mean'])  การ Aggregate แบบตามกลุ่มที่ต้องการ บางทีเราอยาก Aggregate ข้อมูลตามการจัดกลุ่มในคอลัมน์อื่น เช่น เราอยากได้รายจ่ายทั้งหมดของแต่ละคน (ต้อง aggregate sum ของคอลัมน์รายจ่าย โดยแบ่งกลุ่มตามคอลัมน์ User ID) ใช้แบบนี้\naggregate = dataframe.groupby('C1').sum()  การรัน Function เดียวกันทุกแถว หรือทุกคอลัมน์ เวลาเราอยากรันคำสั่งอะไรสักอย่างสำหรับทุกแถว หรือทุกคอลัมน์ เราสามารถเขียนได้แบบนี้\n# sum for columns sum_columns = dataframe[['C1','C2']].apply(sum,axis=0) # sum for rows sum_rows = dataframe[['C1','C2']].apply(sum,axis=1)  เหมือนกับฟังก์ชั่น apply() ใน R นั่นเอง\nรันคำสั่งที่เขียนเองกับทุกแถวใน 1 คอลัมน์ ถ้าต้องการรันคำสั่ง (Function) ที่เขียนเอง สำหรับทุกแถวในคอลัมน์อันใดอันหนึ่ง ใช้แบบนี้ได้\ndataframe['C1'] = dataframe['C1'].map(lambda x: x-100)  รันคำสั่งที่เขียนเองกับทุกค่า ถ้าต้องการรันคำสั่งที่เขียนเองกับทุกค่าใน DataFrame ใช้โค้ดนี้\nfunction_result = dataframe.applymap(lambda x: x*10)  หรือใช้ transform ก็ได้\nnew_dataframe = dataframe.transform(lambda x: x*100)  คำนวณ Correlation \u0026amp; Covariance เวลาเราอยากรู้ว่าค่าต่าง ๆ ใน Data Set เรา Correlate กันมั้ย\ndataframe.corr() # Correlation dataframe.cov() # Covariance  แต่ค่าที่ออกมาเป็นตัวเลขอาจจะดูยากนิดนึง เราสามารถพลอตสวย ๆ ด้วย Seaborn ได้ครับ สามารถใช้โค้ดด้านล่างนี้ได้เลย\nimport seaborn as sns corr = modeldf.corr() # Set up the matplotlib figure f, ax = plt.subplots(figsize=(15, 8)) # Generate a custom diverging colormap cmap = sns.diverging_palette(10, 10, as_cmap=True) # Draw the heatmap with the mask and correct aspect ratio sns.heatmap(corr, annot=True)  Correlation Plot สวย ๆ ด้วย Seaborn\nคำนวณ Cross Tabulation Cross Tabulation มีประโยชน์มากเวลาเราอยากรู้ว่ามี Data ที่ตรงกับกรุ๊ป A ของคอลัมน์ 1 และกรุ๊ป B ของคอลัมน์ 2 เท่าไหร่ เช่น มีนักเรียนผู้ชาย (คอลัมน์ gender) กี่คนในมัธยมปลาย (คอลัมน์ education) แบบนี้เป็นต้น\nหรือถ้าใครใช้ PivotTable ใน Excel มาก่อน ก็เหมือนกันเลยครับ\naggregate = pandas.crosstab(dataframe.C1, dataframe.C2)  วิธีหาค่า Unique ในแต่ละคอลัมน์ คำสั่งนี้มีประโยชน์มาก เอาไว้ใช้เช็คว่าแต่ละคอลัมน์มีค่าแปลก ๆ มั้ย\nตัวอย่างการใช้งานก็คือ เราอยากรู้ว่า มีบ้านไหนที่มีจำนวนห้องนอนแปลก ๆ มั้ย (เช่น 50 ห้องนอน หรือ -5 ห้องนอน) ก็หาค่า unique จากคอลัมน์ “bedrooms”\ndataframe['C1'].unique()  วิธีเช็คว่ามีแถวไหนข้อมูลซ้ำมั้ย (Duplicated) อันนี้มีประโยชน์มาก เอาไว้ใช้เช็คว่ามีข้อมูลแปลก ๆ มั้ย เช่น ทุกคอลัมน์ซ้ำกันหมด (อันนี้มีโอกาสว่าเป็นข้อมูลซ้ำ อาจจะต้องลบออก) หรือซ้ำกันบางคอลัมน์ (อันนี้ต้องเช็คอีกทีว่าคืออะไร)\ndataframe.duplicated() # หาอันที่เหมือนกันทุกคอลัมน์ dataframe.duplicated('C1') # หาอันที่ซ้ำกันเฉพาะคอลัมน์ C1 dataframe.duplicated(['C1', 'C2']) # หาอันที่ซ้ำกันเฉพาะคอลัมน์ C1 และ C2  ปกติแล้วถ้ามีไอเทมซ้ำ คำสั่งนี้จะไม่แสดงไอเทมแรกในกลุ่มที่ซ้ำ (เช่น ถ้า C1=5 มี 2 แถว มันจะแสดงเฉพาะแถวที่ 2) เราสามารถใส่ Argument keep=False เข้าไปเพื่อบังคับให้มันแสดงทุกแถวได้\nนอกจากนั้นเรายังสามารถนับจำนวนแถวที่ Duplicate และลบทิ้งได้ด้วย\nวิธีการนับจำนวน Duplicate len(df[ df.duplicated(['A', 'B', 'C'], keep = False) ])  วิธีการลบ Duplicate เอาไว้ใช้ตอนเราเจอว่าทุกคอลัมน์ซ้ำกันหมดเลย ซึ่งเป็นเคสที่บอกว่าข้อมูลน่าจะซ้ำ ลบออกได้ (ขึ้นอยู่กับข้อมูลด้วยนะครับ บางข้อมูลอาจจะไม่ได้แปลว่าซ้ำแล้วลบได้):\n# Remove the duplicates df.drop_duplicates(['A', 'B', 'C'], inplace=True) # Reset dataframe index after drop_duplicates. df.reset_index(drop=True, inplace=True) len(df)  สำหรับโค้ดข้างบน จะเห็นว่าเราต้อง reset index หลังลบ duplicate ด้วยนะครับ\nวิธีการลบแถว และลบคอลัมน์ ลบคอลัมน์สามารถทำได้แบบนี้\ndataframe = dataframe.drop('C1', axis=1) df.drop(['C1'], axis=1, inplace=True) # แบบนี้ก็ได้ df.drop(['C1', 'C2', 'C3'], 1, inplace=True) # ลบทีละหลายคอลัมน์ก็ได้  ส่วนการลบแถวจะลำบากหน่อย เพราะต้องใส่ Row Index (เลขที่อยู่ซ้ายสุดเวลาเราปรินท์ DataFrame)\ndataframe = dataframe.drop(5, axis=0) dataframe.reset_index(drop=True) # Reset index  ลบแถวแล้วอย่าลืมเช็คด้วยว่าที่ลบไปถูกต้องมั้ย และหลังจากลบแถวต้อง Reset Index ด้วย\nวิธีการลบแถวที่มี Missing Value ข้อควรระวัง: การที่อยู่ ๆ เราลบแถวที่มี Missing Value ทิ้งไปเลยอาจจะไม่ใช่วิธีที่ดีที่สุดในการทำ Data Analysis เสมอไปนะครับ บางเคสการ Impute (คำนวณหาค่าไปใส่) จะดีกว่าครับ\ndataframe2 = dataframe.dropna(axis=0)  วิธีแทนค่า Missing Value ด้วยค่าเฉลี่ย (Mean Imputation) วิธีหนึ่งในการแทนค่าที่หายไป คือการทำสิ่งที่เรียกว่า Mean Imputation หรือหาค่าเฉลี่ยของคอลัมน์นั้น แล้วเอามาแทนค่าที่หายไปนั่นเองครับ\nข้อดีของการทำ Mean Imputation คือ สามารถทำได้ง่าย แต่ก็ต้องระวังเรื่องข้อเสีย เช่น ทำแบบนี้จะเป็นการไม่สนใจความสัมพันธ์ระหว่างตัวแปร ทำให้เกิด Bias สูง ควรใช้เฉพาะเวลา Missing Value ไม่เยอะเท่านั้นครับ\nสามารถรันโค้ดด้านล่างเพื่อทำ Mean Imputation ได้ง่าย ๆ เลย\nimport numpy as np meanAge = np.mean(df.Age) # Get mean value df.Age = df.Age.fillna(meanAge) # Fill missing values with mean  การลูปข้อมูลแต่ละคอลัมน์ และแต่ละแถว การลูปมีประโยชน์มากถ้าเราต้องการเขียนฟังก์ชั่นแปลก ๆ ใช้เองที่ Pandas ไม่รองรับ (หรืออาจจะรองรับแต่เราหาไม่เจอ เขียนเองง่ายกว่า) สามารถลูปได้ทั้งแต่ละคอลัมน์ และแต่ละแถว\nfor col_idx,data in dataframe.iteritems(): print (\u0026quot;column:\u0026quot;,col_idx) print (\u0026quot;column data:\u0026quot;) print (data,\u0026quot;\\n\u0026quot;)  การลูปข้อมูลแต่ละแถว\nfor col_idx,data in dataframe.iterrows(): print (\u0026quot;row:\u0026quot;,col_idx) print (\u0026quot;row data:\u0026quot;) print (data,\u0026quot;\\n\u0026quot;)  วิธีเปลี่ยน DataFrame จากแบบ Wide เป็น Long (Melt) การ Melt Data มีประโยชน์มากเวลาเราต้องการเอาข้อมูลไปพลอต Data Visualization หรือเราต้องการ Aggregate ครับ\ndataframe2 = dataframe.melt()  วิธีการเปลี่ยนชื่อคอลัมน์ (Rename) บางทีเราต้องการเปลี่ยนชื่อเพื่อให้สั้นลง ให้พิมพ์สะดวกขึ้น สามารถทำได้ดังนี้\ndataframe.rename(columns={'old':'new'},inplace=True)  วิธีการใส่คำนำหน้าคอลัมน์ (Prefix) อันนี้มีประโยชน์มากตอนเรามีข้อมูลหลาย ๆ ชุด และต้องการ Merge โดยอยากให้ชื่อคอลัมน์ไม่ซ้ำกัน\nthisdata = thisdata.add_prefix('data_')  วิธีการแทนค่าใน DataFrame เหมาะมากเวลาต้องการแก้ Typo Error เช่น เราอยากได้ค่า Bangkok แต่เรารู้ว่ามีคนเขียนเป็น BKK อะไรแบบนี้ (รันคำสั่ง .unique เพื่อดูก่อน)\nเราสามารถ Replace ทั้ง DataFrame ได้เลยแบบนี้\ndataframe2 = dataframe.replace(1, -100)  เราสามารถ Replace หลายค่าพร้อมกันได้ด้วยครับ และสามารถกำหนด Column ที่ต้องการให้แทนค่าได้ด้วย\ndf['city'].replace({ 'BKK':'Bangkok', 'BNK':'Bangkok' }, inplace=True)  วิธีการ Export DataFrame เป็นไฟล์ CSV หลังจากที่เราจัดการ Data เรียบร้อยแล้ว ก็สามารถ Export เป็น CSV เอาไปใช้ต่อกับโปรแกรมอื่น หรืองานส่วนอื่น ๆ ได้ (แอดทำบ่อยเพราะบางทีต้องสลับ Python \u0026lt;-\u0026gt; R รัว ๆ)\ndataframe.to_csv('dataframe.csv')   Source: Data TH.com - Data Science ชิลชิล.\n "});index.add({'id':69,'href':'/library/tutorials/docs/articles/python/python-dictionary-tutorial/','title':"Python Dictionary Tutorial",'content':" Python Dictionary Tutorial  Introduction Creating a Dictionary Accessing Elements Adding Elements Updating Elements Removing Elements Other Common Methods Conclusion  Introduction Python comes with a variety of built-in data structures, capable of storing different types of data. A Python dictionary is one such data structure that can store data in the form of key-value pairs. The values in a Python dictionary can be accessed using the keys. In this article, we will be discussing the Python dictionary in detail.\nCreating a Dictionary To create a Python dictionary, we need to pass a sequence of items inside curly braces {}, and separate them using a comma (,). Each item has a key and a value expressed as a \u0026ldquo;key:value\u0026rdquo; pair.\nThe values can belong to any data type and they can repeat, but the keys must remain unique.\nThe following examples demonstrate how to create Python dictionaries:\nCreating an empty dictionary:\ndict_sample = {}  Creating a dictionary with integer keys:\ndict_sample = {1: 'mango', 2: 'pawpaw'}  Creating a dictionary with mixed keys:\ndict_sample = {'fruit': 'mango', 1: [4, 6, 8]}  We can also create a dictionary by explicitly calling the Python\u0026rsquo;s dict() method:\ndict_sample = dict({1:'mango', 2:'pawpaw'})  A dictionary can also be created from a sequence as shown below:\ndict_sample = dict([(1,'mango'), (2,'pawpaw')])  Dictionaries can also be nested, which means that we can create a dictionary inside another dictionary. For example:\ndict_sample = {1: {'student1' : 'Nicholas', 'student2' : 'John', 'student3' : 'Mercy'}, 2: {'course1' : 'Computer Science', 'course2' : 'Mathematics', 'course3' : 'Accounting'}}  To print the dictionary contents, we can use the Python\u0026rsquo;s print() function and pass the dictionary name as the argument to the function. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } print(dict_sample)  Output:\n{'Company': 'Toyota', 'model': 'Premio', 'year': 2012}  Accessing Elements To access dictionary items, pass the key inside square brackets []. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } x = dict_sample[\u0026quot;model\u0026quot;] print(x)  Output:\nPremio  We created a dictionary named dict_sample. A variable named x was then created and its value is set to be the value for the key \u0026ldquo;model\u0026rdquo; in the dictionary.\nHere is another example:\ndict = {'Name': 'Mercy', 'Age': 23, 'Course': 'Accounting'} print(\u0026quot;Student Name:\u0026quot;, dict['Name']) print(\u0026quot;Course:\u0026quot;, dict['Course']) print(\u0026quot;Age:\u0026quot;, dict['Age'])  Output:\nStudent Name: Mercy Course: Accounting Age: 23  The dictionary object also provides the get() function, which can be used to access dictionary elements as well. We append the function with the dictionary name using the dot operator and then pass the name of the key as the argument to the function. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } x = dict_sample.get(\u0026quot;model\u0026quot;) print(x)  Output:\nPremio  Now we know how to access dictionary elements using a few different methods. In the next section we\u0026rsquo;ll discuss how to add new elements to an already existing dictionary.\nAdding Elements There are numerous ways to add new elements to a dictionary. We can use a new index key and assign a value to it. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } dict_sample[\u0026quot;Capacity\u0026quot;] = \u0026quot;1800CC\u0026quot; print(dict_sample)  Output:\n{'Capacity': '1800CC', 'year': 2012, 'Company': 'Toyota', 'model': 'Premio'}  The new element has \u0026ldquo;Capacity\u0026rdquo; as the key and \u0026ldquo;1800CC\u0026rdquo; as its corresponding value. It has been added as the first element of the dictionary.\nHere is another example. First let\u0026rsquo;s first create an empty dictionary:\nMyDictionary = {} print(\u0026quot;An Empty Dictionary: \u0026quot;) print(MyDictionary)  Output:\nAn Empty Dictionary:  The dictionary returns nothing as it has nothing stored yet. Let us add some elements to it, one at a time:\nMyDictionary[0] = 'Apples' MyDictionary[2] = 'Mangoes' MyDictionary[3] = 20 print(\u0026quot;\\n3 elements have been added: \u0026quot;) print(MyDictionary)  Output:\n3 elements have been added: {0: 'Apples', 2: 'Mangoes', 3: 20}  To add the elements, we specified keys as well as the corresponding values. For example:\nMyDictionary[0] = 'Apples'  In the above example, 0 is the key while \u0026ldquo;Apples\u0026rdquo; is the value.\nIt is even possible for us to add a set of values to one key. For example:\nMyDictionary['Values'] = 1, \u0026quot;Pairs\u0026quot;, 4 print(\u0026quot;\\n3 elements have been added: \u0026quot;) print(MyDictionary)  Output:\n3 elements have been added: {'Values': (1, 'Pairs', 4)}  In the above example, the name of the key is \u0026ldquo;Values\u0026rdquo; while everything after the = sign are the actual values for that key, stored as a Set.\nOther than adding new elements to a dictionary, dictionary elements can also be updated/changed, which we\u0026rsquo;ll go over in the next section.\nUpdating Elements After adding a value to a dictionary we can then modify the existing dictionary element. You use the key of the element to change the corresponding value. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } dict_sample[\u0026quot;year\u0026quot;] = 2014 print(dict_sample)  Output:\n{'year': 2014, 'model': 'Premio', 'Company': 'Toyota'}  In this example you can see that we have updated the value for the key \u0026ldquo;year\u0026rdquo; from the old value of 2012 to a new value of 2014.\nRemoving Elements The removal of an element from a dictionary can be done in several ways, which we\u0026rsquo;ll discuss one-by-one in this section:\nThe del keyword can be used to remove the element with the specified key. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } del dict_sample[\u0026quot;year\u0026quot;] print(dict_sample)  Output:\n{'Company': 'Toyota', 'model': 'Premio'}  We called the del keyword followed by the dictionary name. Inside the square brackets that follow the dictionary name, we passed the key of the element we need to delete from the dictionary, which in this example was \u0026ldquo;year\u0026rdquo;. The entry for \u0026ldquo;year\u0026rdquo; in the dictionary was then deleted.\nAnother way to delete a key-value pair is to use the pop() function and pass the key of the entry to be deleted as the argument to the function. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } dict_sample.pop(\u0026quot;year\u0026quot;) print(dict_sample)  Output:\n{'Company': 'Toyota', 'model': 'Premio'}  We invoked the pop() function by appending it with the dictionary name. Again, in this example the entry for \u0026ldquo;year\u0026rdquo; in the dictionary will be deleted.\nThe popitem() function removes the last item inserted into the dictionary, without needing to specify the key. Take a look at the following example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } dict_sample.popitem() print(dict_sample)  Output:\n{'Company': 'Toyota', 'model': 'Premio'}  The last entry into the dictionary was \u0026ldquo;year\u0026rdquo;. It has been removed after calling the popitem() function.\nSubscribe to our Newsletter Get occassional tutorials, guides, and reviews in your inbox. No spam ever. Unsubscribe at any time.\nSubscribe\nBut what if you want to delete the entire dictionary? It would be difficult and cumbersome to use one of these methods on every single key. Instead, you can use the del keyword to delete the entire dictionary. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } del dict_sample print(dict_sample)  Output:\nNameError: name 'dict_sample' is not defined  The code returns an error. The reason is that we are trying to access a dictionary which doesn\u0026rsquo;t exist since it has been deleted.\nHowever, your use-case may require you to just remove all dictionary elements and be left with an empty dictionary. This can be achieved by calling the clear() function on the dictionary:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } dict_sample.clear() print(dict_sample)  Output:\n{}  The code returns an empty dictionary since all the dictionary elements have been removed.\nOther Common Methods The len() Method\nWith this method, you can count the number of elements in a dictionary. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } print(len(dict_sample))  Output:\n3  There are three entries in the dictionary, hence the method returned 3.\nThe copy() Method\nThis method returns a copy of the existing dictionary. For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } x = dict_sample.copy() print(x)  Output:\n{'Company': 'Toyota', 'year': 2012, 'model': 'Premio'}  We created a copy of dictionary named dict_sample and assigned it to the variable x. If x is printed on the console, you will see that it contains the same elements as those stored by dict_sample dictionary.\nNote that this is useful because modifications made to the copied dictionary won\u0026rsquo;t affect the original one.\nThe items() Method\nWhen called, this method returns an iterable object. The iterable object has key-value pairs for the dictionary, as tuples in a list. This method is primarily used when you want to iterate through a dictionary.\nThe method is simply called on the dictionary object name as shown below:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } for k, v in dict_sample.items(): print(k, v)  Output:\n('Company', 'Toyota') ('model', 'Premio') ('year', 2012)  The object returned by items() can also be used to show the changes that have been implemented on the dictionary. This is demonstrated below:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } x = dict_sample.items() print(x) dict_sample[\u0026quot;model\u0026quot;] = \u0026quot;Mark X\u0026quot; print(x)  Output:\ndict_items([('Company', 'Toyota'), ('model', 'Premio'), ('year', 2012)]) dict_items([('Company', 'Toyota'), ('model', 'Mark X'), ('year', 2012)])  The output shows that when you change a value in the dictionary, the items object is also updated to reflect this change.\nThe fromkeys() Method\nThis method returns a dictionary having specified keys and values. It takes the syntax given below:\ndictionary.fromkeys(keys, value)  The value for required keys parameter is an iterable and it specifies the keys for the new dictionary. The value for value parameter is optional and it specifies the default value for all the keys. The default value for this is None.\nSuppose we need to create a dictionary of three keys all with the same value. We can do so as follows:\nname = ('John', 'Nicholas', 'Mercy') age = 25 dict_sample = dict.fromkeys(name, age) print(dict_sample)  Output:\n{'John': 25, 'Mercy': 25, 'Nicholas': 25}  In the script above, we specified the keys and one value. The fromkeys() method was able to pick the keys and combine them with this value to create a populated dictionary.\nThe value for the keys parameter is mandatory. The following example demonstrates what happens when the value for the values parameter is not specified:\nname = ('John', 'Nicholas', 'Mercy') dict_sample = dict.fromkeys(name) print(dict_sample)  Output:\n{'John': None, 'Mercy': None, 'Nicholas': None}  The default value, which is None, was used.\nThe setdefault() Method\nThis method is applicable when we need to get the value of the element with the specified key. If the key is not found, it will be inserted into the dictionary alongside the specified value.\nThe method takes the following syntax:\ndictionary.setdefault(keyname, value)  In this function the keyname parameter is required. It represents the keyname of the item you need to return a value from. The value parameter is optional. If the dictionary already has the key, this parameter won\u0026rsquo;t have any effect. If the key doesn\u0026rsquo;t exist, then the value given in this function will become the value of the key. It has a default value of None.\nFor example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } x = dict_sample.setdefault(\u0026quot;color\u0026quot;, \u0026quot;Gray\u0026quot;) print(x)  Output\nGray  The dictionary doesn\u0026rsquo;t have the key for color. The setdefault() method has inserted this key and the specified a value, that is, \u0026ldquo;Gray\u0026rdquo;, has been used as its value.\nThe following example demonstrates how the method behaves if the value for the key does exist:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } x = dict_sample.setdefault(\u0026quot;model\u0026quot;, \u0026quot;Allion\u0026quot;) print(x)  Output:\nPremio  The value \u0026ldquo;Allion\u0026rdquo; has no effect on the dictionary since we already have a value for the key.\nThe keys() Method\nThis method also returns an iterable object. The object returned is a list of all keys in the dictionary. And just like with the items() method, the returned object can be used to reflect the changes made to the dictionary.\nTo use this method, we only call it on the name of the dictionary, as shown below:\ndictionary.keys()  For example:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } x = dict_sample.keys() print(x)  Output:\ndict_keys(['model', 'Company', 'year'])  Often times this method is used to iterate through each key in your dictionary, like so:\ndict_sample = { \u0026quot;Company\u0026quot;: \u0026quot;Toyota\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;Premio\u0026quot;, \u0026quot;year\u0026quot;: 2012 } for k in dict_sample.keys(): print(k)  Output:\nCompany model year  Conclusion This marks the end of this tutorial on Python dictionaries. These dictionaries store data in \u0026ldquo;key:value\u0026rdquo; pairs. The \u0026ldquo;key\u0026rdquo; acts as the identifier for the item while \u0026ldquo;value\u0026rdquo; is the value of the item. The Python dictionary comes with a variety of functions that can be applied for retrieval or manipulation of data. In this article, we saw how Python dictionary can be created, modified and deleted along with some of the most commonly used dictionary methods.\nRef : https://stackabuse.com/python-dictionary-tutorial/\n"});index.add({'id':70,'href':'/library/tutorials/docs/articles/python/python-for-pdf-01/','title':"Python for PDF",'content':" Python for Pdf Why Python for PDF processing PDF processing comes under text analytics. Most of the Text Analytics Library or frameworks are designed in Python only. This gives leverage on text analytics. Once you extract the useful information from PDF you can easily use that data into any Machine Learning or Natural Language Processing Model.\nCommon Python Libraries Here is the list of some Python Libraries could be used to handle PDF files\n PDFMiner is a tool for extracting information from PDF documents. Unlike other PDF-related tools, it focuses entirely on getting and analyzing text data. PyPDF2 is a pure-python PDF library capable of splitting, merging together, cropping, and transforming the pages of PDF files. It can also add custom data, viewing options, and passwords to PDF files. It can retrieve text and metadata from PDFs as well as merge entire files together. Tabula-py is a simple Python wrapper of tabula-java, which can read the table of PDF. You can read tables from PDF and convert into pandas’ DataFrame. tabula-py also enables you to convert a PDF file into CSV/TSV/JSON file. Slate is wrapper Implementation of PDFMiner PDFQuery is a light wrapper around pdfminer, lxml and pyquery. It’s designed to reliably extract data from sets of PDFs with as little code as possible. xpdf Python wrapper for xpdf (currently just the “pdftotext” utility)  Extracting Text from pdf First, we need to Install the\n!pip install PyPDF2  Following is the code to extract simple Text from pdf using PyPDF2\n# modules for import PyPDF2 # pdf file object # you can find find the pdf file with complete code in below pdfFileObj = open('example.pdf', 'rb') # pdf reader object pdfReader = PyPDF2.PdfFileReader(pdfFileObj) # number of pages in pdf print(pdfReader.numPages) # a page object pageObj = pdfReader.getPage(0) # extracting text from page. # this will print the text you can also save that into String print(pageObj.extractText())  You can read more Details from here\nReading the Table data from pdf In order to work with the Table data in Pdf, we can use Tabula-py\npip install tabula-py  Following is the code to extract simple Text from pdf using PyPDF2\nimport tabula # readinf the PDF file that contain Table Data # you can find find the pdf file with complete code in below # read_pdf will save the pdf table into Pandas Dataframe df = tabula.read_pdf(\u0026quot;offense.pdf\u0026quot;) # in order to print first 5 lines of Table df.head()  import PyPDF2 PDFfilename = \u0026quot;Sammamish.pdf\u0026quot; #filename of your PDF/directory where your PDF is stored pfr = PyPDF2.PdfFileReader(open(PDFfilename, \u0026quot;rb\u0026quot;)) #PdfFileReader object pg4 = pfr.getPage(126) #extract pg 127 writer = PyPDF2.PdfFileWriter() #create PdfFileWriter object #add pages writer.addPage(pg4) NewPDFfilename = \u0026quot;allTables.pdf\u0026quot; #filename of your PDF/directory where you want your new PDF to be with open(NewPDFfilename, \u0026quot;wb\u0026quot;) as outputStream: writer.write(outputStream) #write pages to new PDF  #the table will be returned in a list of dataframe,for working with dataframe you need pandas import pandas as pd import tabula file = \u0026quot;filename.pdf\u0026quot; path = 'enter your directory path here' + file df = tabula.read_pdf(path, pages = '1', multiple_tables = True) print(df)  Your question is near similar with:\n Extract / Identify Tables from PDF python\n Extracting tables from a pdf\n Extract table from a PDF\n How to scrape tables in thousands of PDF files?\n PDF Data and Table Scraping to Excel\n Extracting table contents from a collection of PDF files  If you Pdf file contain Multiple Table\ndf = tabula.read_pdf(“offense.pdf”,multiple_tables=True)  you can extract Information from the specific part of any specific page of PDF\ntabula.read_pdf(\u0026quot;offense.pdf\u0026quot;, area=(126,149,212,462), pages=1)  If you want the output into JSON Format\ntabula.read_pdf(\u0026quot;offense.pdf\u0026quot;, output_format=\u0026quot;json\u0026quot;)  Export Pdf into Excel you can us Below code to convert the PDF Data into Excel or CSV\ntabula.convert_into(\u0026quot;offense.pdf\u0026quot;, \u0026quot;offense_testing.xlsx\u0026quot;, output_format=\u0026quot;xlsx\u0026quot;)  Further Readings you can find the complete code and Pdf files in This Github Link\n This question on StackOverflow also has a lot of useful link in its Answer How to extract table as text from the PDF using Python? Working with PDF files in Python using PyPDF2 Working with PDF and Word Documents 3 WAYS TO SCRAPE TABLES FROM PDFS WITH PYTHON How to Convert a PDF to Excel   ที่มาบทความ towardsdatascience.com.\n "});index.add({'id':71,'href':'/library/tutorials/docs/articles/python/python-programming-in-r/','title':"Python Programming in R",'content':" Python Programming in R  All code used in this tutorial can be found here: https://github.com/joelalcedo/Python_in_R\n I am a Data Scientist working in New York. I have worked on a number of different projects spanning data visualization, machine learning and software development all in hopes to better understand the complexities associated with the financial markets. I started learning how to program about 10 years ago in visual basic. One thing led to another (as it does) and I learned SQL, R, Python, JavaScript (regrettably), C++ and others. Currently, I am working on some Flutter projects, using Google’s Dart framework.\nDo my credentials sound like an alphabet soup? If you yourself are a programmer, chances are you have a few languages on the resume. If you are interested in hiring a programmer, but do not know quite what to look for, chances are you have been inundated with a spectrum of programming languages and obscure libraries on candidate resumes, wondering to yourself, “am I still reading English?”.\nWhy am I writing this? To address a question I hear all time on Wall Street from aspiring programmers:\n“Should I learn Python or R?”\nWell gather around, because I am about to show you it is possible to use both Python and R seamlessly. Personally, I say learn them both. There are certain advantages Python brings to the table versus R, and vice-versa.\nUsing the reticulate package in R, it is very easy to interface between the two. I will write a simple function in Python to pull some data in from Quandl, then clean up and visualize the data in R using ggplot2.\nHere’s the 30,000 foot view. We have some directory that contains our Python code and R code (you can download the full directory here on my GitHub). Using the reticulate package in R, we will call a Python file, which will then port over to R, which can then continue to be used in R.\nHere’s our function in Python:\nFull code is available on my GitHub\nIf you don’t have an API key in Quandl, sign up for an account to get an API key— it is free. You don’t necessarily need an API key for this, but if you make enough queries they will time you out.\nAnyhow, here’s what the output looks like in Python:\nPassing “WIKI/AAPL” through “grab_from_quandl”, will return the data as expected.\nJust in case an incorrect code is input, I added a custom handler:\nOutput of error handler.\nLet’s port this Python function over to R.\nAll it takes is one line of code!\nThe “source_python” function essentially ports your Python code into R, which then will enable you to continue using your Python function in R:\nThe error handler works, too:\nNow that we can run our Python code in R, we can use dplyr to wrangle the data and ggplot2 to visualize the results…\nVoila! There you have it. While this was a simple example, the benefits of the reticulate package in R are very broad in scope.\nHopefully you find this helpful. Give me a shout if you have questions about any of this..\nJoel Alcedo is a Data Scientist working at BNP Paribas in New York. Prior to his time at BNP Paribas, he worked at Porsche North America HQ, Virgin Galactic and Cantor Fitzgerald.\nSource :\n"});index.add({'id':72,'href':'/library/tutorials/docs/articles/python/python-time-module./','title':"Python Time Module",'content':" A Beginner’s Guide to the Python time Module Table of Contents\n Dealing With Python Time Using Seconds  The Epoch Python Time in Seconds as a Floating Point Number Python Time in Seconds as a String Representing Local Time  Understanding Time Zones  UTC and Time Zones Daylight Savings Time  Dealing With Python Time Using Data Structures  Python Time as a Tuple Python Time as an Object  Converting Python Time in Seconds to an Object  Coordinated Universal Time (UTC) Local Time  Converting a Local Time Object to Seconds Converting a Python Time Object to a String  asctime() strftime()  Converting a Python Time String to an Object Suspending Execution Measuring Performance Conclusion Further Reading  The Python time module provides many ways of representing time in code, such as objects, numbers, and strings. It also provides functionality other than representing time, like waiting during code execution and measuring the efficiency of your code.\nThis article will walk you through the most commonly used functions and objects in time.\nBy the end of this article, you’ll be able to:\n Understand core concepts at the heart of working with dates and times, such as epochs, time zones, and daylight savings time Represent time in code using floats, tuples, and struct_time Convert between different time representations Suspend thread execution Measure code performance using perf_counter()  You’ll start by learning how you can use a floating point number to represent time.\nFree Bonus: Click here to get our free Python Cheat Sheet that shows you the basics of Python 3, like working with data types, dictionaries, lists, and Python functions.\nRemove ads\nDealing With Python Time Using Seconds One of the ways you can manage the concept of Python time in your application is by using a floating point number that represents the number of seconds that have passed since the beginning of an era—that is, since a certain starting point.\nLet’s dive deeper into what that means, why it’s useful, and how you can use it to implement logic, based on Python time, in your application.\nThe Epoch You learned in the previous section that you can manage Python time with a floating point number representing elapsed time since the beginning of an era.\nMerriam-Webster defines an era as:\n A fixed point in time from which a series of years is reckoned A system of chronological notation computed from a given date as basis  The important concept to grasp here is that, when dealing with Python time, you’re considering a period of time identified by a starting point. In computing, you call this starting point the epoch.\nThe epoch, then, is the starting point against which you can measure the passage of time.\nFor example, if you define the epoch to be midnight on January 1, 1970 UTC—the epoch as defined on Windows and most UNIX systems—then you can represent midnight on January 2, 1970 UTC as 86400 seconds since the epoch.\nThis is because there are 60 seconds in a minute, 60 minutes in an hour, and 24 hours in a day. January 2, 1970 UTC is only one day after the epoch, so you can apply basic math to arrive at that result:\n60 * 60 * 24  86400  It is also important to note that you can still represent time before the epoch. The number of seconds would just be negative.\nFor example, you would represent midnight on December 31, 1969 UTC (using an epoch of January 1, 1970) as -86400 seconds.\nWhile January 1, 1970 UTC is a common epoch, it is not the only epoch used in computing. In fact, different operating systems, filesystems, and APIs sometimes use different epochs.\nAs you saw before, UNIX systems define the epoch as January 1, 1970. The Win32 API, on the other hand, defines the epoch as January 1, 1601.\nYou can use time.gmtime() to determine your system’s epoch:\nimport time time.gmtime(0)  time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)  You’ll learn about gmtime() and struct_time throughout the course of this article. For now, just know that you can use time to discover the epoch using this function.\nNow that you understand more about how to measure time in seconds using an epoch, let’s take a look at Python’s time module to see what functions it offers that help you do so.\nPython Time in Seconds as a Floating Point Number First, time.time() returns the number of seconds that have passed since the epoch. The return value is a floating point number to account for fractional seconds:\nfrom time import time time()  1551143536.9323719  The number you get on your machine may be very different because the reference point considered to be the epoch may be very different.\nFurther Reading: Python 3.7 introduced time_ns(), which returns an integer value representing the same elapsed time since the epoch, but in nanoseconds rather than seconds.\nMeasuring time in seconds is useful for a number of reasons:\n You can use a float to calculate the difference between two points in time. A float is easily serializable, meaning that it can be stored for data transfer and come out intact on the other side.  Sometimes, however, you may want to see the current time represented as a string. To do so, you can pass the number of seconds you get from time() into time.ctime().\nPython Time in Seconds as a String Representing Local Time As you saw before, you may want to convert the Python time, represented as the number of elapsed seconds since the epoch, to a string. You can do so using ctime():\nfrom time import time, ctime t = time() ctime(t)  'Mon Feb 25 19:11:59 2019'  Here, you’ve recorded the current time in seconds into the variable t, then passed t as an argument to ctime(), which returns a string representation of that same time.\nTechnical Detail: The argument, representing seconds since the epoch, is optional according to the ctime() definition. If you don’t pass an argument, then ctime() uses the return value of time() by default. So, you could simplify the example above:\nfrom time import ctime ctime()  'Mon Feb 25 19:11:59 2019'  The string representation of time, also known as a timestamp, returned by ctime() is formatted with the following structure:\n Day of the week: Mon (Monday) Month of the year: Feb (February) Day of the month: 25 Hours, minutes, and seconds using the 24-hour clock notation: 19:11:59 Year: 2019  The previous example displays the timestamp of a particular moment captured from a computer in the South Central region of the United States. But, let’s say you live in Sydney, Australia, and you executed the same command at the same instant.\nInstead of the above output, you’d see the following:\nfrom time import time, ctime t = time() ctime(t)  'Tue Feb 26 12:11:59 2019'  Notice that the day of week, day of month, and hour portions of the timestamp are different than the first example.\nThese outputs are different because the timestamp returned by ctime() depends on your geographical location.\nNote: While the concept of time zones is relative to your physical location, you can modify this in your computer’s settings without actually relocating.\nThe representation of time dependent on your physical location is called local time and makes use of a concept called time zones.\nNote: Since local time is related to your locale, timestamps often account for locale-specific details such as the order of the elements in the string and translations of the day and month abbreviations. ctime() ignores these details.\nLet’s dig a little deeper into the notion of time zones so that you can better understand Python time representations.\nUnderstanding Time Zones A time zone is a region of the world that conforms to a standardized time. Time zones are defined by their offset from Coordinated Universal Time (UTC) and, potentially, the inclusion of daylight savings time (which we’ll cover in more detail later in this article).\nFun Fact: If you’re a native English speaker, you might be wondering why the abbreviation for “Coordinated Universal Time” is UTC rather than the more obvious CUT. However, if you’re a native French speaker, you would call it “Temps Universel Coordonné,” which suggests a different abbreviation: TUC.\nUltimately, the International Telecommunication Union and the International Astronomical Union compromised on UTC as the official abbreviation so that, regardless of language, the abbreviation would be the same.\nUTC and Time Zones UTC is the time standard against which all the world’s timekeeping is synchronized (or coordinated). It is not, itself, a time zone but rather a transcendent standard that defines what time zones are.\nUTC time is precisely measured using astronomical time, referring to the Earth’s rotation, and atomic clocks.\nTime zones are then defined by their offset from UTC. For example, in North and South America, the Central Time Zone (CT) is behind UTC by five or six hours and, therefore, uses the notation UTC-5:00 or UTC-6:00.\nSydney, Australia, on the other hand, belongs to the Australian Eastern Time Zone (AET), which is ten or eleven hours ahead of UTC (UTC+10:00 or UTC+11:00).\nThis difference (UTC-6:00 to UTC+10:00) is the reason for the variance you observed in the two outputs from ctime() in the previous examples:\n Central Time (CT): 'Mon Feb 25 19:11:59 2019' Australian Eastern Time (AET): 'Tue Feb 26 12:11:59 2019'  These times are exactly sixteen hours apart, which is consistent with the time zone offsets mentioned above.\nYou may be wondering why CT can be either five or six hours behind UTC or why AET can be ten or eleven hours ahead. The reason for this is that some areas around the world, including parts of these time zones, observe daylight savings time.\nDaylight Savings Time Summer months generally experience more daylight hours than winter months. Because of this, some areas observe daylight savings time (DST) during the spring and summer to make better use of those daylight hours.\nFor places that observe DST, their clocks will jump ahead one hour at the beginning of spring (effectively losing an hour). Then, in the fall, the clocks will be reset to standard time.\nThe letters S and D represent standard time and daylight savings time in time zone notation:\n Central Standard Time (CST) Australian Eastern Daylight Time (AEDT)  When you represent times as timestamps in local time, it is always important to consider whether DST is applicable or not.\nctime() accounts for daylight savings time. So, the output difference listed previously would be more accurate as the following:\n Central Standard Time (CST): 'Mon Feb 25 19:11:59 2019' Australian Eastern Daylight Time (AEDT): 'Tue Feb 26 12:11:59 2019'  Dealing With Python Time Using Data Structures Now that you have a firm grasp on many fundamental concepts of time including epochs, time zones, and UTC, let’s take a look at more ways to represent time using the Python time module.\nPython Time as a Tuple Instead of using a number to represent Python time, you can use another primitive data structure: a tuple.\nThe tuple allows you to manage time a little more easily by abstracting some of the data and making it more readable.\nWhen you represent time as a tuple, each element in your tuple corresponds to a specific element of time:\n Year Month as an integer, ranging between 1 (January) and 12 (December) Day of the month Hour as an integer, ranging between 0 (12 A.M.) and 23 (11 P.M.) Minute Second Day of the week as an integer, ranging between 0 (Monday) and 6 (Sunday) Day of the year Daylight savings time as an integer with the following values:  1 is daylight savings time. 0 is standard time. -1 is unknown.   Using the methods you’ve already learned, you can represent the same Python time in two different ways:\nfrom time import time, ctime t = time() t  1551186415.360564  ctime(t)  'Tue Feb 26 07:06:55 2019'  time_tuple = (2019, 2, 26, 7, 6, 55, 1, 57, 0)  In this case, both t and time_tuple represent the same time, but the tuple provides a more readable interface for working with time components.\nTechnical Detail: Actually, if you look at the Python time represented by time_tuple in seconds (which you’ll see how to do later in this article), you’ll see that it resolves to 1551186415.0 rather than 1551186415.360564.\nThis is because the tuple doesn’t have a way to represent fractional seconds.\nWhile the tuple provides a more manageable interface for working with Python time, there is an even better object: struct_time.\nPython Time as an Object The problem with the tuple construct is that it still looks like a bunch of numbers, even though it’s better organized than a single, seconds-based number.\nstruct_time provides a solution to this by utilizing NamedTuple, from Python’s collections module, to associate the tuple’s sequence of numbers with useful identifiers:\nfrom time import struct_time time_tuple = (2019, 2, 26, 7, 6, 55, 1, 57, 0) time_obj = struct_time(time_tuple) time_obj  time.struct_time(tm_year=2019, tm_mon=2, tm_mday=26, tm_hour=7, tm_min=6, tm_sec=55, tm_wday=1, tm_yday=57, tm_isdst=0)  Technical Detail: If you’re coming from another language, the terms struct and object might be in opposition to one another.\nIn Python, there is no data type called struct. Instead, everything is an object.\nHowever, the name struct_time is derived from the C-based time library where the data type is actually a struct.\nIn fact, Python’s time module, which is implemented in C, uses this struct directly by including the header file times.h.\nNow, you can access specific elements of time_obj using the attribute’s name rather than an index:\nday_of_year = time_obj.tm_yday day_of_year  57  day_of_month = time_obj.tm_mday day_of_month  26  Beyond the readability and usability of struct_time, it is also important to know because it is the return type of many of the functions in the Python time module.\nConverting Python Time in Seconds to an Object Now that you’ve seen the three primary ways of working with Python time, you’ll learn how to convert between the different time data types.\nConverting between time data types is dependent on whether the time is in UTC or local time.\nCoordinated Universal Time (UTC) The epoch uses UTC for its definition rather than a time zone. Therefore, the seconds elapsed since the epoch is not variable depending on your geographical location.\nHowever, the same cannot be said of struct_time. The object representation of Python time may or may not take your time zone into account.\nThere are two ways to convert a float representing seconds to a struct_time:\n UTC Local time  To convert a Python time float to a UTC-based struct_time, the Python time module provides a function called gmtime().\nYou’ve seen gmtime() used once before in this article:\nimport time time.gmtime(0)  time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)  You used this call to discover your system’s epoch. Now, you have a better foundation for understanding what’s actually happening here.\ngmtime() converts the number of elapsed seconds since the epoch to a struct_time in UTC. In this case, you’ve passed 0 as the number of seconds, meaning you’re trying to find the epoch, itself, in UTC.\nNote: Notice the attribute tm_isdst is set to 0. This attribute represents whether the time zone is using daylight savings time. UTC never subscribes to DST, so that flag will always be 0 when using gmtime().\nAs you saw before, struct_time cannot represent fractional seconds, so gmtime() ignores the fractional seconds in the argument:\nimport time time.gmtime(1.99)  time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=1, tm_wday=3, tm_yday=1, tm_isdst=0)  Notice that even though the number of seconds you passed was very close to 2, the .99 fractional seconds were simply ignored, as shown by tm_sec=1.\nThe secs parameter for gmtime() is optional, meaning you can call gmtime() with no arguments. Doing so will provide the current time in UTC:\nimport time time.gmtime()  time.struct_time(tm_year=2019, tm_mon=2, tm_mday=28, tm_hour=12, tm_min=57, tm_sec=24, tm_wday=3, tm_yday=59, tm_isdst=0)  Interestingly, there is no inverse for this function within time. Instead, you’ll have to look in Python’s calendar module for a function named timegm():\nimport calendar import time time.gmtime()  time.struct_time(tm_year=2019, tm_mon=2, tm_mday=28, tm_hour=13, tm_min=23, tm_sec=12, tm_wday=3, tm_yday=59, tm_isdst=0)  calendar.timegm(time.gmtime())  1551360204  timegm() takes a tuple (or struct_time, since it is a subclass of tuple) and returns the corresponding number of seconds since the epoch.\nHistorical Context: If you’re interested in why timegm() is not in time, you can view the discussion in Python Issue 6280.\nIn short, it was originally added to calendar because time closely follows C’s time library (defined in time.h), which contains no matching function. The above-mentioned issue proposed the idea of moving or copying timegm() into time.\nHowever, with advances to the datetime library, inconsistencies in the patched implementation of time.timegm(), and a question of how to then handle calendar.timegm(), the maintainers declined the patch, encouraging the use of datetime instead.\nWorking with UTC is valuable in programming because it’s a standard. You don’t have to worry about DST, time zone, or locale information.\nThat said, there are plenty of cases when you’d want to use local time. Next, you’ll see how to convert from seconds to local time so that you can do just that.\nLocal Time In your application, you may need to work with local time rather than UTC. Python’s time module provides a function for getting local time from the number of seconds elapsed since the epoch called localtime().\nThe signature of localtime() is similar to gmtime() in that it takes an optional secs argument, which it uses to build a struct_time using your local time zone:\nimport time time.time()  1551448206.86196  time.localtime(1551448206.86196)  time.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=7, tm_min=50, tm_sec=6, tm_wday=4, tm_yday=60, tm_isdst=0)  Notice that tm_isdst=0. Since DST matters with local time, tm_isdst will change between 0 and 1 depending on whether or not DST is applicable for the given time. Since tm_isdst=0, DST is not applicable for March 1, 2019.\nIn the United States in 2019, daylight savings time begins on March 10. So, to test if the DST flag will change correctly, you need to add 9 days’ worth of seconds to the secs argument.\nTo compute this, you take the number of seconds in a day (86,400) and multiply that by 9 days:\nnew_secs = 1551448206.86196 + (86400 * 9) time.localtime(new_secs)  time.struct_time(tm_year=2019, tm_mon=3, tm_mday=10, tm_hour=8, tm_min=50, tm_sec=6, tm_wday=6, tm_yday=69, tm_isdst=1)  Now, you’ll see that the struct_time shows the date to be March 10, 2019 with tm_isdst=1. Also, notice that tm_hour has also jumped ahead, to 8 instead of 7 in the previous example, because of daylight savings time.\nSince Python 3.3, struct_time has also included two attributes that are useful in determining the time zone of the struct_time:\n tm_zone tm_gmtoff  At first, these attributes were platform dependent, but they have been available on all platforms since Python 3.6.\nFirst, tm_zone stores the local time zone:\nimport time current_local = time.localtime() current_local.tm_zone  'CST'  Here, you can see that localtime() returns a struct_time with the time zone set to CST (Central Standard Time).\nAs you saw before, you can also tell the time zone based on two pieces of information, the UTC offset and DST (if applicable):\nimport time current_local = time.localtime() current_local.tm_gmtoff  -21600  current_local.tm_isdst  0  In this case, you can see that current_local is 21600 seconds behind GMT, which stands for Greenwich Mean Time. GMT is the time zone with no UTC offset: UTC±00:00.\n21600 seconds divided by seconds per hour (3,600) means that current_local time is GMT-06:00 (or UTC-06:00).\nYou can use the GMT offset plus the DST status to deduce that current_local is UTC-06:00 at standard time, which corresponds to the Central standard time zone.\nLike gmtime(), you can ignore the secs argument when calling localtime(), and it will return the current local time in a struct_time:\nimport time time.localtime()  time.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=8, tm_min=34, tm_sec=28, tm_wday=4, tm_yday=60, tm_isdst=0)  Unlike gmtime(), the inverse function of localtime() does exist in the Python time module. Let’s take a look at how that works.\nConverting a Local Time Object to Seconds You’ve already seen how to convert a UTC time object to seconds using calendar.timegm(). To convert local time to seconds, you’ll use mktime().\nmktime() requires you to pass a parameter called t that takes the form of either a normal 9-tuple or a struct_time object representing local time:\nimport time time_tuple = (2019, 3, 10, 8, 50, 6, 6, 69, 1) time.mktime(time_tuple)  1552225806.0  time_struct = time.struct_time(time_tuple) time.mktime(time_struct)  1552225806.0  It’s important to keep in mind that t must be a tuple representing local time, not UTC:\nfrom time import gmtime, mktime # 1 current_utc = time.gmtime() current_utc  time.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=14, tm_min=51, tm_sec=19, tm_wday=4, tm_yday=60, tm_isdst=0)  # 2 current_utc_secs = mktime(current_utc) current_utc_secs  1551473479.0  # 3 time.gmtime(current_utc_secs)  time.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=20, tm_min=51, tm_sec=19, tm_wday=4, tm_yday=60, tm_isdst=0)  Note: For this example, assume that the local time is March 1, 2019 08:51:19 CST.\nThis example shows why it’s important to use mktime() with local time, rather than UTC:\n gmtime() with no argument returns a struct_time using UTC. current_utc shows March 1, 2019 14:51:19 UTC. This is accurate because CST is UTC-06:00, so UTC should be 6 hours ahead of local time.\n mktime() tries to return the number of seconds, expecting local time, but you passed current_utc instead. So, instead of understanding that current_utc is UTC time, it assumes you meant March 1, 2019 14:51:19 CST.\n gmtime() is then used to convert those seconds back into UTC, which results in an inconsistency. The time is now March 1, 2019 20:51:19 UTC. The reason for this discrepancy is the fact that mktime() expected local time. So, the conversion back to UTC adds another 6 hours to local time.\n  Working with time zones is notoriously difficult, so it’s important to set yourself up for success by understanding the differences between UTC and local time and the Python time functions that deal with each.\nConverting a Python Time Object to a String While working with tuples is fun and all, sometimes it’s best to work with strings.\nString representations of time, also known as timestamps, help make times more readable and can be especially useful for building intuitive user interfaces.\nThere are two Python time functions that you use for converting a time.struct_time object to a string:\n asctime() strftime()  You’ll begin by learning aboutasctime().\nasctime() You use asctime() for converting a time tuple or struct_time to a timestamp:\nimport time time.asctime(time.gmtime())  'Fri Mar 1 18:42:08 2019'  time.asctime(time.localtime())  'Fri Mar 1 12:42:15 2019'  Both gmtime() and localtime() return struct_time instances, for UTC and local time respectively.\nYou can use asctime() to convert either struct_time to a timestamp. asctime() works similarly to ctime(), which you learned about earlier in this article, except instead of passing a floating point number, you pass a tuple. Even the timestamp format is the same between the two functions.\nAs with ctime(), the parameter for asctime() is optional. If you do not pass a time object to asctime(), then it will use the current local time:\nimport time time.asctime()  'Fri Mar 1 12:56:07 2019'  As with ctime(), it also ignores locale information.\nOne of the biggest drawbacks of asctime() is its format inflexibility. strftime() solves this problem by allowing you to format your timestamps.\nstrftime() You may find yourself in a position where the string format from ctime() and asctime() isn’t satisfactory for your application. Instead, you may want to format your strings in a way that’s more meaningful to your users.\nOne example of this is if you would like to display your time in a string that takes locale information into account.\nTo format strings, given a struct_time or Python time tuple, you use strftime(), which stands for “string format time.”\nstrftime() takes two arguments:\n format specifies the order and form of the time elements in your string. t is an optional time tuple.  To format a string, you use directives. Directives are character sequences that begin with a % that specify a particular time element, such as:\n %d: Day of the month %m: Month of the year %Y: Year  For example, you can output the date in your local time using the ISO 8601 standard like this:\nimport time time.strftime('%Y-%m-%d', time.localtime())  '2019-03-01'  Further Reading: While representing dates using Python time is completely valid and acceptable, you should also consider using Python’s datetime module, which provides shortcuts and a more robust framework for working with dates and times together.\nFor example, you can simplify outputting a date in the ISO 8601 format using datetime:\nfrom datetime import date date(year=2019, month=3, day=1).isoformat()  '2019-03-01'  As you saw before, a great benefit of using strftime() over asctime() is its ability to render timestamps that make use of locale-specific information.\nFor example, if you want to represent the date and time in a locale-sensitive way, you can’t use asctime():\nfrom time import asctime asctime()  'Sat Mar 2 15:21:14 2019'  import locale locale.setlocale(locale.LC_TIME, 'zh_HK') # Chinese - Hong Kong  'zh_HK'  asctime()  'Sat Mar 2 15:58:49 2019'  Notice that even after programmatically changing your locale, asctime() still returns the date and time in the same format as before.\nTechnical Detail: LC_TIME is the locale category for date and time formatting. The locale argument 'zh_HK' may be different, depending on your system.\nWhen you use strftime(), however, you’ll see that it accounts for locale:\nfrom time import strftime, localtime strftime('%c', localtime())  'Sat Mar 2 15:23:20 2019'  import locale locale.setlocale(locale.LC_TIME, 'zh_HK') # Chinese - Hong Kong  'zh_HK'  strftime('%c', localtime())  '六 3/ 2 15:58:12 2019' 2019'  Here, you have successfully utilized the locale information because you used strftime().\nNote: %c is the directive for locale-appropriate date and time.\nIf the time tuple is not passed to the parameter t, then strftime() will use the result of localtime() by default. So, you could simplify the examples above by removing the optional second argument:\nfrom time import strftime strftime('The current local datetime is: %c')  'The current local datetime is: Fri Mar 1 23:18:32 2019'  Here, you’ve used the default time instead of passing your own as an argument. Also, notice that the format argument can consist of text other than formatting directives.\nFurther Reading: Check out this thorough list of directives available to strftime().\nThe Python time module also includes the inverse operation of converting a timestamp back into a struct_time object.\nConverting a Python Time String to an Object When you’re working with date and time related strings, it can be very valuable to convert the timestamp to a time object.\nTo convert a time string to a struct_time, you use strptime(), which stands for “string parse time”:\nfrom time import strptime strptime('2019-03-01', '%Y-%m-%d')  time.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=60, tm_isdst=-1)  The first argument to strptime() must be the timestamp you wish to convert. The second argument is the format that the timestamp is in.\nThe format parameter is optional and defaults to '%a %b %d %H:%M:%S %Y'. Therefore, if you have a timestamp in that format, you don’t need to pass it as an argument:\nstrptime('Fri Mar 01 23:38:40 2019')  time.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=23, tm_min=38, tm_sec=40, tm_wday=4, tm_yday=60, tm_isdst=-1)  Since a struct_time has 9 key date and time components, strptime() must provide reasonable defaults for values for those components it can’t parse from string.\nIn the previous examples, tm_isdst=-1. This means that strptime() can’t determine by the timestamp whether it represents daylight savings time or not.\nNow you know how to work with Python times and dates using the time module in a variety of ways. However, there are other uses for time outside of simply creating time objects, getting Python time strings, and using seconds elapsed since the epoch.\nSuspending Execution One really useful Python time function is sleep(), which suspends the thread’s execution for a specified amount of time.\nFor example, you can suspend your program’s execution for 10 seconds like this:\nfrom time import sleep, strftime strftime('%c')  'Fri Mar 1 23:49:26 2019'  sleep(10) strftime('%c')  'Fri Mar 1 23:49:36 2019'  Your program will print the first formatted datetime string, then pause for 10 seconds, and finally print the second formatted datetime string.\nYou can also pass fractional seconds to sleep():\nfrom time import sleep sleep(0.5)  sleep() is useful for testing or making your program wait for any reason, but you must be careful not to halt your production code unless you have good reason to do so.\nBefore Python 3.5, a signal sent to your process could interrupt sleep(). However, in 3.5 and later, sleep() will always suspend execution for at least the amount of specified time, even if the process receives a signal.\nsleep() is just one Python time function that can help you test your programs and make them more robust.\nMeasuring Performance You can use time to measure the performance of your program.\nThe way you do this is to use perf_counter() which, as the name suggests, provides a performance counter with a high resolution to measure short distances of time.\nTo use perf_counter(), you place a counter before your code begins execution as well as after your code’s execution completes:\nfrom time import perf_counter def longrunning_function(): for i in range(1, 11): time.sleep(i / i ** 2) start = perf_counter() longrunning_function() end = perf_counter() execution_time = (end - start) execution_time  8.201258441999926  First, start captures the moment before you call the function. end captures the moment after the function returns. The function’s total execution time took (end - start) seconds.\nTechnical Detail: Python 3.7 introduced perf_counter_ns(), which works the same as perf_counter(), but uses nanoseconds instead of seconds.\nperf_counter() (or perf_counter_ns()) is the most precise way to measure the performance of your code using one execution. However, if you’re trying to accurately gauge the performance of a code snippet, I recommend using the Python timeit module.\ntimeit specializes in running code many times to get a more accurate performance analysis and helps you to avoid oversimplifying your time measurement as well as other common pitfalls.\nConclusion Congratulations! You now have a great foundation for working with dates and times in Python.\nNow, you’re able to:\n Use a floating point number, representing seconds elapsed since the epoch, to deal with time Manage time using tuples and struct_time objects Convert between seconds, tuples, and timestamp strings Suspend the execution of a Python thread Measure performance using perf_counter()  On top of all that, you’ve learned some fundamental concepts surrounding date and time, such as:\n Epochs UTC Time zones Daylight savings time  Now, it’s time for you to apply your newfound knowledge of Python time in your real world applications!\nRef : https://realpython.com/python-time-module/\n"});index.add({'id':73,'href':'/library/tutorials/docs/articles/python/python-scala-comparison-part-1/','title':"Python vs. Scala  (Part I)",'content':" Python vs. Scala: a comparison of the basic commands (Part I) Source :\nI recently started playing a little bit with Scala, and I have to say it has been kind of traumatic. I love learning new things but after months of programming with Python, it is just not natural to set that aside and switch mode while solving Data Science problems. When learning a new language, whether it is a coding or a spoken one, it is normal for this to happen. We tend to fill in the gaps of the things we don’t know with the things we know, even if they don’t belong to the language we are trying to write/speak! When trying to learn a new language, it is important to be completely surrounded by the language you want to learn, but first of all, it is important to have well established parallelisms between the known and the new language, at least in the beginning. This works for me, a bilingual person who learned a second language really quickly, at an adult age. At the beginning, I needed connections between Italian (the language I knew) and English (the language I was learning), but as I became more and more fluent in English, I started to forget the parallelisms because it was just becoming natural and I didn’t need to translate it in my head first, anymore. The reason why I decided to write this post is, in fact, to establish parallelisms between Python and Scala, for people who are fluent in one of the two, and are starting to learn the other one, like myself.\nI initially wanted to focus on Pandas/Sklearn and Spark, but I realized that it doesn’t make much sense without covering the foundations first. This is why in this post we’ll look at the basics of Python and Scala: how to handle strings, lists, dictionaries and so on. I intend in the near future to publish a second part, where I will cover how to handle dataframes and build predictive models in both languages.\n1. First things first The first difference is the convention used when coding is these two languages: this will not throw an error or anything like that if you don’t follow it, but it’s just a non-written rule that coders follow.\nWhen defining a new variable, function or whatever, we always pick a name that makes sense to us, that most likely will be composed by two or more words. If this is the case, in Python we will use snake_case, while in ScalacamelCase: the difference is immediately noticeable. In snake case, all words all lower-case and we use _ to separate them, in camel case there is no separation, and all words are capitalized except for the first one.\nAnother striking difference is how we define the variables in the two languages. In Python we just make up a name and assign it to the value we need it to be, while in Scala, we need to specify whether we are defining a variable or a value, and we do this by placing var or val respectively, before the name (notice that this is valid whether we are assigning numerical values or strings).\nInitializing values and variables in Scala.\nThe difference between var and val is simple: variables can be modified, while values cannot. In the example represented in the image, I instantiated avar string and then changed it: all good. Then, I assigned the same string to a val and tried to change it again: not doable.\nIn Python there is no need to specify: if you want to change something you previously assigned, it’s up to you. In Python’s case I would just dostring = 'my_string'.\nAnother general difference regards commenting. In Python there is only one way to do it, whether it’s a single or multi-line, and that is putting a # before the comment, on each line:\n# this is a commented line in Python\nScala offers a couple of ways to comment, and these are either putting // on each line, or wrap the comment between /* and */:\n// this is a commented line in Scala /* and this is a multiline comment, still in Scala... ...just choose! */  Now that the very basics are explained, let’s see dive deeper.\n2. Lists and arrays List (in Python) or Array (in Scala) are among the most important objects: they can contain strings and/or numbers, we can manipulate them, iterate over them, add or subtract elements and so on. They can basically serve any purposes, and I don’t think I have ever coded anything without using them, so let’s see what we can do with them, and how.\n2.1. Define Let’s create a list containing a mix of numbers and strings.\nmy_list = [2, 5, 'apple', 78] **# Python** var myArray = Array(2, 5, \u0026quot;apple\u0026quot;, 78) **// Scala**  /* notice that in Scala I wrapped the string between \u0026ldquo;\u0026rdquo;, and that is the only way to do it! In python you can use both \u0026ldquo;\u0026rdquo; and \u0026ldquo; indifferently */\n2.2. Indexing Both lists and arrays are zero indexed, which means that the first element is placed at the index 0. So, if we want to extract the second element:\nmy_list[1] **# Python** uses [] to index myArray(1) **// Scala** uses () to index  2.3. Slicing In both languages, the second index will not be counted when slicing. So, if we want to extract the first 3 elements:\nmy_list[0:3] **# Python** slicing works like indexing\nmyArray.slice(0,3) **// Scala** needs the .slice()\n2.4. Checking first, last, maximum and minimum element **# Python**my_list[0] # first element my_list[-1] # last element max(my_list) # maximum element min(my_list) # minimum element#  NOTE: min() and max() will work exclusively if the list contains\n# numbers only!**// Scala**myArray.head // first element myArray(0) // other way to check the first element myArray.last // last element myArray.max // maximum element myArray.min // minimum element/*  NOTE: .min and .max will work exclusively if the array contains numbers only!*/\n2.5. Sum and product These operations, as for min and max, will be supported only if the lists/arrays contain exclusively numbers. Also, to multiply all the elements in a Python’s list, we will need to set up a for loop, which will be covered further down in the post. There is no preloaded function for that, as opposed to Scala.\nsum(my_list) # summing elements in **Python**'s list // **Scala** myArray.sum // summing elements in array myArray.product // multiplying elements in array  2.6. Adding elements Lists and arrays are not ordered, so it’s common practice to add elements at the end. Let’s say we want to add the string \u0026quot;last words\u0026quot;:\nmy_list.append('last words') # adding at the end of **Python**'s list myArray :+= \u0026quot;last words\u0026quot; // adding at the end of **Scala**'s array  If, for some reason, we want to add something at the very beginning, let’s say the number 99:\nmy_list.insert(0, 99) # this is a generic method in **Python**. The # first number you specify in the parenthesis is the index of the # position where you want to add the element. # 0 means that you want the element to be added at the very # beginningmyArray +:= 99 /* adding an element at the beginning of **Scala**'s array */  3. Print This is also something that we use all the time while coding, luckily there is a only a slight difference between the two languages.\nprint(\u0026quot;whatever you want\u0026quot;) # printing in **Python** println(\u0026quot;whatever you want\u0026quot;) // printing in **Scala**  4. For loop Quite a few differences here: while Python requires indentation to create a block and colon after the statement, Scala wants the for conditions in parenthesis, and the block in curly brackets with no indentation needed. I like to use indentation anyway though, it makes the code look neater.\n# for loop in **Python** for i in my_list: print(i)// for loop in **Scala** for (i \u0026lt;- myArray){ println(i) }  5. Mapping and/or filtering All things that, in Python, can be done by using list comprehensions. In Scala we will have to use functions.\n5.1. Mapping Let’s say we have a list/array with only numeric values and we want to triple all of them.\n[i*3 for i in my_list] # mapping in **Python** myArray.map(i =\u0026gt; i*3) // mapping in **Scala**  5.2. Filtering Let’s say we have a list/array with only numeric values and we want to filter only those divisible by 3.\n[i for i in my_list if i%3 == 0] # filtering in **Python** myArray.filter(i =\u0026gt; i%3 == 0) // filtering in **Scala**  5.3. Filtering and mapping What if we want to find the even numbers and multiply only them by 3?\n[i*3 for i in my_list if i%2 == 0] # **Python** myArray.filter(i =\u0026gt; i%2 == 0).map(i =\u0026gt; i*3) // **Scala**  6. Dictionaries/Maps Although they have different names in the two languages, they are exactly the same thing. They both have keys to which we assign values.\n6.1. Create dictionary/map Let’s create one storing my first, last name and age… and let’s also pretend I am 18.\n# **Python** my_dict = { 'first_name': 'Emma', 'last_name': 'Grimaldi', 'age': 18 }  In Scala we can do this in two different ways.\n// **Scala** mode 1 var myMap = ( \u0026quot;firstName\u0026quot; -\u0026gt; \u0026quot;Emma\u0026quot;, \u0026quot;lastName\u0026quot; -\u0026gt; \u0026quot;Grimaldi\u0026quot;, \u0026quot;age\u0026quot; -\u0026gt; 18 )// Scala mode 2 var myMap = ( (\u0026quot;firstName\u0026quot;, \u0026quot;Emma\u0026quot;), (\u0026quot;lastName\u0026quot;, \u0026quot;Grimaldi\u0026quot;), (\u0026quot;age\u0026quot;, 18) )  6.2. Adding to dictionary/map Let’s add my Country of origin to my dictionary/map.\nmy_dict['country_of_origin'] = 'Italy' # creating new key in **Python** myMap += (\u0026quot;countryOfOrigin\u0026quot; -\u0026gt; \u0026quot;Italy\u0026quot;) /* creating new key in **Scala** */  6.3. Indexing This works the same way as indexing lists/array, but instead of positions, we are using keys. If I want to see my first name:\n# **Python** my_dict['first_name']/  / **Scala** myMap(\u0026quot;firstName\u0026quot;)  6.4. Looping If we want to print the dictionary/map, we will have to for loop in both cases, over keys and values.\n# Python for key, value in my_dict.items(): print(key) print(value)// Scala for ((key, value) \u0026lt;- myMap){ println(key) println(value) }  #\n7. Tuples Yes, they are called the same in both languages! But, while they are zero-index in Python, they are not in Scala. Let’s create a tuple (1, 2, 3) and then call the first value.\n# Python my_tup = (1, 2, 3) my_tup[0]  # the indexing is the same as lists// Scala myTup = (1, 2, 3) myTup._1 // the indexing is way different than arrays!  8. Sets Yes, another name in common! In both examples below, the sets will contain only 1, 3, 5 because sets don’t accept duplicates.\nmy_set = {1, 3, 5, 1} # in **Python**, sets are defined by curly braces mySet = Set(1, 3, 5, 1) // **Scala**  9. Functions We have covered a lot so far, good job if you made it down here! This is the last thing paragraph of this post, and luckily defining a function is not that different between Python and Scala. They both start with def and while the former requires a return statement, the latter does not. On the other hand, Scala wants to know what types of variables we are going to input and output, while Python doesn’t care. Let’s write a very simple function that takes a string as input and returns the first 5 characters.\n# **Python** def chop_string(input_string): return input_string[0:5]  Indentation is also important in Python, or the function will not work. Scala instead just likes its curly braces.\n// **Scala** def chopString(inputString: String): String = { inputString.slice(0, 5) }  That’s it! I hope you found this helpful as an immediate reference for those of you who are just starting to get familiar with either Python or Scala. The following step will be to build a similar guide to explore the differences between pandas/sklearn and sparks, looking forward to it! I hope you do as well!\nIf you are wondering why you should use Python rather than Scala, or vice versa, I found the image below rather helpful in clarifying the immediate differences between the two.\nsource link\nFeel free to check out:\npart II of this post\nmy other Medium posts.\nmy LinkedIn profile.\n"});index.add({'id':74,'href':'/library/tutorials/docs/articles/python/python-scala-comparison-part-2/','title':"Python vs. Scala  (Part II)",'content':" Pandas vs. Spark: how to handle dataframes (Part II) “Panda statues on gray concrete stairs during daytime” by chuttersnap on Unsplash. “Scala” means “stairway” in Italian, my native language: hence the choice of the picture. It just seemed appropriate.\nA few days ago I published a post comparing the basic commands of Python and Scala: how to deal with lists and arrays, functions, loops, dictionaries and so on. As I continue practicing with Scala, it seemed appropriate to follow-up with a second part, comparing how to handle dataframes in the two programming languages, in order to get the data ready before the modeling process. In Python, we will do all this by using Pandas library, while in Scala we will use Spark.\n For this exercise, I will use the Titanic train dataset that can be easily downloaded at this link. Also, I do my Scala practices in Databricks: if you do so as well, remember to import your dataset first by clicking on Data and then Add Data.\n 1. Read the dataframe I will import and name my dataframe df, in Python this will be just two lines of code. This will work if you saved your train.csv in the same folder where your notebook is.\nimport pandas as pd df = pd.read_csv('train.csv')  Scala will require more typing.\nvar df = sqlContext .read .format(\u0026quot;csv\u0026quot;) .option(\u0026quot;header\u0026quot;, \u0026quot;true\u0026quot;) .option(\u0026quot;inferSchema\u0026quot;, \u0026quot;true\u0026quot;) .load(\u0026quot;Filestore/tables/train.csv\u0026quot;)  Let’s see what’s going on up here. Scala does not assume your dataset has a header, so we need to specify that. Also, Python will assign automatically a dtype to the dataframe columns, while Scala doesn’t do so, unless we specify .option(\u0026quot;inferSchema\u0026quot;, \u0026quot;true\u0026quot;). Also notice that I did not import Spark Dataframe, because I practice Scala in Databricks, and it is preloaded. Otherwise we will need to do so.\n Notice: booleans are capitalized in Python, while they are all lower-case in Scala!\n 2. Display the first rows of the dataframe In Python, df.head() will show the first five rows by default: the output will look like this.\ndf.head() output in Python.\nIf you want to see a number of rows different than five, you can just pass a different number in the parenthesis. Scala, with its df.show(),will display the first 20 rows by default.\ndf.show() in Scala.\nIf we want to keep it shorter, and also get rid of the ellipsis in order to read the entire content of the columns, we can run df.show(5, false).\n3. Dataframe Columns and Dtypes To retrieve the column names, in both cases we can just type df.columns: Scala and Pandas will return an Array and an Index of strings, respectively.\nIf we want to check the dtypes, the command is again the same for both languages: df.dtypes. Pandas will return a Series object, while Scala will return an Array of tuples, each tuple containing respectively the name of the\ndf.dtypes in Python\ncolumn and the dtype. So, if we are in Python and we want to check what type is the Age column, we run df.dtypes['Age'], while in Scala we will need to filter and use the Tuple indexing: df.dtypes.filter(colTup =\u0026gt; colTup._1 == \u0026quot;Age\u0026quot;).\n4. Summary Statistics This is another thing that every Data Scientist does while exploring his/her data: summary statistics. For every numerical column, we can see information such as count, mean, median, deviation, so on and so forth, to see immediately if there is something that doesn’t look right. In both cases this will return a dataframe, where the columns are the numerical columns of the original dataframe, and the rows are the statistical values.\nIn Python, we type df.describe(), while in Scala df.describe().show(). The reason we have to add the .show() in the latter case, is because Scala doesn’t output the resulting dataframe automatically, while Python does so (as long as we don’t assign it to a new variable).\n5. Select Columns Suppose we want to see a subset of columns, for example Name and Survived.\nIn Python we can use either df[['Name','Survived]] or df.loc[:,['Name','Survived] indistinctly. Remember that the : in this case means “all the rows”.\nIn Scala, we will type df.select(\u0026quot;Name\u0026quot;,\u0026quot;Survived\u0026quot;).show(). If you want to assign the subset to a new variable, remember to omit the .show().\n6. Filtering Let’s say we want to have a look at the Name and Pclass of the passengers who survived. We will need to filter a condition on the Survived column and then select the the other ones.\nIn Python, we will use .loc again, by passing the filter in the rows place and then selecting the columns with a list. Basically like the example above but substituting the : with a filter, which means\ndf.loc[df['Survived'] == 1, ['Name','Pclass']].  In Scala we will use .filter followed by .select, which will be df.filter(\u0026quot;Survived = 1\u0026quot;).select(\u0026quot;Name\u0026quot;,\u0026quot;Pclass\u0026quot;).show().\n6.1. Filtering null values If we want to check the null values, for example in the Embarked column, it will work like a normal filter, just with a different condition.\nIn Python, we apply the .isnull() when passing the condition, in this casedf[df['Embarked'].isnull()]. Since we didn’t specify any columns, this will return a dataframe will all the original columns, but only the rows where the Embarked values are empty.\nIn Scala, we will use .filter again: df.filter(\u0026quot;Embarked IS NULL\u0026quot;).show(). Notice that the boolean filters we pass in Scala, kind of look like SQL queries.\n7. Imputing Null Values We should always give some thought before imputing null values in a dataset, because it is something that will influence our final model and we want to be careful with that. However, just for demonstrative purposes, let’s say we want to impute the string “N/A” to the null values in our dataframe.\nWe can do so in Python with either df = df.fillna('N/A') or df.fillna('N/A', inplace = True).\nIn Scala, quite similarly, this would be achieved with df = df.na.fill(\u0026quot;N/A\u0026quot;). Remember to not use the .show() in this case, because we are assigning the revised dataframe to a variable.\n8. Renaming Columns This is something that you will need to for sure in Scala, since the machine learning models will need two columns named features and label in order to be trained. However, this is something you might want to do also in Pandas if you don’t like how a column has been named, for example. For this purpose, we want to change the Survived column into label.\nIn Python we will pass a dictionary, where the key and the value are respectively the old and the new name of the column. In this case, it will be\ndf.rename(columns = {\u0026quot;Survived\u0026quot;: \u0026quot;label\u0026quot;}, inplace = True).  In Scala, this equals to df = df.withColumnRenamed(\u0026quot;Survived\u0026quot;, \u0026quot;label\u0026quot;).\n9. Group By and Aggregation Let’s say we want to calculate the maximum Age for men and women distinctively, in this case .groubpby comes in handy. Not only to retrieve the maximum value; after .groupby we can use all sorts of aggregation functions: mean, count, median, so on and so forth. We stick with .max() for this example.\nIn Python this will be df.groupby('Sex').mean()['Age']. If we don’t specify ['Age'] after .mean(), this will return a dataframe with the maximum values for all numerical columns, grouped by Sex.\nIn Scala, we will need to import the aggregation function we want to use, first.\nimport org.apache.spark.sql.functions.max df.groupBy(\u0026quot;Sex\u0026quot;).agg(max(\u0026quot;Age\u0026quot;)).show()  10. Create a New Column This is really useful for feature engineering, we might want to combine two variables to see how their interaction is related to the target. For purely demonstrative purpose, let’s see how to create a column containing the product between Age and Fare.\nIn Python it is pretty straightforward.\ndf['Age_times_Fare'] = df['Age'] * df['Fare']  In Scala, we will need to put $ before the names of the columns we want to use, so that the column object with the corresponding name will be considered.\ndf = df.withColumn(\u0026quot;AgeTimesFare\u0026quot;, $\u0026quot;Age\u0026quot; * $\u0026quot;Fare\u0026quot;)  11. Correlation Exploring correlation among numerical variables and target is always convenient, and obtaining a matrix of correlation coefficients among all numeric variables is pretty easy in Python, just by running df.corr(). If you want to look at the correlation, let’s say between Age and Fare, we will just need to specify the columns: df[['Age','Fare']].corr().\nIn Scala, we will need to import first, and then run the command by specifying the columns.\nimport org.apache.spark.sql.functions.corr df.select(corr(\u0026quot;Age\u0026quot;,\u0026quot;Fare\u0026quot;)).show()  This is it! I hope you found this post useful as much as it has been useful for me writing it. I intend to publish a Part III where I can walk through a machine learning model example to kind of complete the circle!\n Written with StackEdit.\n "});index.add({'id':75,'href':'/library/tutorials/docs/articles/data-science/pandas/selecting-subsets-pandas-1/','title':"Selecting Subsets of Data 1",'content':" Selecting Subsets of Data in Pandas Part 1  Source  This article is available as a Jupyter Notebook complete with exercises at the bottom to practice and detailed solutions in another notebook.\nBecome an Expert  My book Master Data Analysis with Python is the most comprehensive text on the market to learn data analysis using Python and comes with 300+ exercises and projects. Sign-up for the FREE Intro to Pandas class Follow me on Twitter @TedPetrou for my daily data science tricks  Part 1: Selection with [ ], .loc and .iloc This is the beginning of a four-part series on how to select subsets of data from a pandas DataFrame or Series. Pandas offers a wide variety of options for subset selection which necessitates multiple articles. This series is broken down into the following four topics.\n Selection with [], .loc and .iloc` Boolean indexing Assigning subsets of data How NOT to select subsets of data  Assumptions before we begin These series of articles assume you have no knowledge of pandas, but that you understand the fundamentals of the Python programming language. It also assumes that you have installed pandas on your machine.\nThe easiest way to get pandas along with Python and the rest of the main scientific computing libraries is to install the Miniconda distribution (follow the link for a comprehensive tutorial).\nIf you have no knowledge of Python then I suggest completing the following two books cover to cover before even touching pandas. They are both free.\n Think Python by Allen B. Downey Automate the Boring Stuff by Al Sweigart  I also have a book titled Exercise Python ($15) which covers the fundamentals as well as providing 100+ exercises with detailed solutions.\nThe importance of making subset selections You might be wondering why there need to be so many articles on selecting subsets of data. This topic is extremely important to pandas and it’s unfortunate that it is fairly complicated because subset selection happens frequently during an actual analysis. Because you are frequently making subset selections, you need to master it in order to make your life with pandas easier.\nAlways reference the documentation The material in this article is also covered in the official pandas documentation on Indexing and Selecting Data. I highly recommend that you read that part of the documentation along with this tutorial. In fact, the documentation is one of the primary means for mastering pandas. I wrote a step-by-step article, How to Learn Pandas, which gives suggestions on how to use the documentation as you master pandas.\nThe anatomy of a DataFrame and a Series The pandas library has two primary containers of data, the DataFrame and the Series. You will spend nearly all your time working with both of the objects when you use pandas. The DataFrame is used more than the Series, so let’s take a look at an image of it first.\nAnatomy of a DataFrame\nThis image comes with some added illustrations to highlight its components. At first glance, the DataFrame looks like any other two-dimensional table of data that you have seen. It has rows and it has columns. Technically, there are three main components of the DataFrame.\nThe three components of a DataFrame A DataFrame is composed of three different components, the index, columns, and the data. The data is also known as the values.\nThe index represents the sequence of values on the far left-hand side of the DataFrame. All the values in the index are in bold font. Each individual value of the index is called a label. Sometimes the index is referred to as the row labels. In the example above, the row labels are not very interesting and are just the integers beginning from 0 up to n-1, where n is the number of rows in the table. Pandas defaults DataFrames with this simple index.\nThe columns are the sequence of values at the very top of the DataFrame. They are also in bold font. Each individual value of the columns is called a column, but can also be referred to as column name or column label.\nEverything else not in bold font is the data or values. You will sometimes hear DataFrames referred to as tabular data. This is just another name for a rectangular table data with rows and columns.\nAxis and axes It is also common terminology to refer to the rows or columns as an axis. Collectively, we call them axes. So, a row is an axis and a column is another axis.\nThe word axis appears as a parameter in many DataFrame methods. Pandas allows you to choose the direction of how the method will work with this parameter. This has nothing to do with subset selection so you can just ignore it for now.\nEach row has a label and each column has a label The main takeaway from the DataFrame anatomy is that each row has a label and each column has a label. These labels are used to refer to specific rows or columns in the DataFrame. It’s the same as how humans use names to refer to specific people.\nWhat is subset selection? Before we start doing subset selection, it might be good to define what it is. Subset selection is simply selecting particular rows and columns of data from a DataFrame (or Series). This could mean selecting all the rows and some of the columns, some of the rows and all of the columns, or some of each of the rows and columns.\nExample selecting some columns and all rows Let’s see some images of subset selection. We will first look at a sample DataFrame with fake data.\nSample DataFrame\nLet’s say we want to select just the columns color, age, and height but keep all the rows.\nOur final DataFrame would look like this:\nExample selecting some rows and all columns We can also make selections that select just some of the rows. Let’s select the rows with labels Aaron and Dean along with all of the columns:\nOur final DataFrame would like:\nExample selecting some rows and some columns Let’s combine the selections from above and select the columns color, age, and height for only the rows with labels Aaron and Dean.\nOur final DataFrame would look like this:\nPandas dual references: by label and by integer location We already mentioned that each row and each column have a specific label that can be used to reference them. This is displayed in bold font in the DataFrame.\nBut, what hasn’t been mentioned, is that each row and column may be referenced by an integer as well. I call this integer location. The integer location begins at 0 and ends at n-1 for each row and column. Take a look above at our sample DataFrame one more time.\nThe rows with labels Aaron and Dean can also be referenced by their respective integer locations 2 and 4. Similarly, the columns color, age and height can be referenced by their integer locations 1, 3, and 4.\nThe documentation refers to integer location as position. I don’t particularly like this terminology as its not as explicit as integer location. The key thing term here is INTEGER.\nWhat’s the difference between indexing and selecting subsets of data? The documentation uses the term indexing frequently. This term is essentially just a one-word phrase to say ‘subset selection’. I prefer the term subset selection as, again, it is more descriptive of what is actually happening. Indexing is also the term used in the official Python documentation.\nFocusing only on [], .loc, and .iloc There are many ways to select subsets of data, but in this article we will only cover the usage of the square brackets [ ], .loc and .iloc. Collectively, they are called the indexers. These are by far the most common ways to select data. A different part of this Series will discuss a few methods that can be used to make subset selections.\nIf you have a DataFrame, df, your subset selection will look something like the following:\ndf[ ] df.loc[ ] df.iloc[ ]  A real subset selection will have something inside of the square brackets. All selections in this article will take place inside of those square brackets.\nNotice that the square brackets also follow .loc and .iloc. All indexing in Python happens inside of these square brackets.\nA term for just those square brackets The term indexing operator is used to refer to the square brackets following an object. The .loc and .iloc indexers also use the indexing operator to make selections. I will use the term just the indexing operator to refer to df[]. This will distinguish it from df.loc[] and df.iloc[].\nRead in data into a DataFrame with read_csv Let’s begin using pandas to read in a DataFrame, and from there, use the indexing operator by itself to select subsets of data. All the data for these tutorials are in the data directory.\nWe will use the read_csv function to read in data into a DataFrame. We pass the path to the file as the first argument to the function. We will also use the index_col parameter to select the first column of data as the index (more on this later).\nimport pandas as pd import numpy as np df = pd.read_csv('data/sample_data.csv', index_col=0) df  Extracting the individual DataFrame components Earlier, we mentioned the three components of the DataFrame. The index, columns and data (values). We can extract each of these components into their own variables. Let’s do that and then inspect them:\nindex = df.index columns = df.columns values = df.values index  Index(['Jane', 'Niko', 'Aaron', 'Penelope', 'Dean', 'Christina', 'Cornelia'], dtype='object')  columns  Index(['state', 'color', 'food', 'age', 'height', 'score'], dtype='object')  values  array([['NY', 'blue', 'Steak', 30, 165, 4.6], ['TX', 'green', 'Lamb', 2, 70, 8.3], ['FL', 'red', 'Mango', 12, 120, 9.0], ['AL', 'white', 'Apple', 4, 80, 3.3], ['AK', 'gray', 'Cheese', 32, 180, 1.8], ['TX', 'black', 'Melon', 33, 172, 9.5], ['TX', 'red', 'Beans', 69, 150, 2.2]], dtype=object)  Data types of the components Let’s output the type of each component to understand exactly what kind of object they are.\ntype(index)  pandas.core.indexes.base.Index  type(columns)  pandas.core.indexes.base.Index  type(values)  numpy.ndarray  Understanding these types Interestingly, both the index and the columns are the same type. They are both a pandas Index object. This object is quite powerful in itself, but for now you can just think of it as a sequence of labels for either the rows or the columns.\nThe values are a NumPy ndarray, which stands for n-dimensional array, and is the primary container of data in the NumPy library. Pandas is built directly on top of NumPy and it\u0026rsquo;s this array that is responsible for the bulk of the workload.\nBeginning with just the indexing operator on DataFrames We will begin our journey of selecting subsets by using just the indexing operator on a DataFrame. Its main purpose is to select a single column or multiple columns of data.\nSelecting a single column as a Series To select a single column of data, simply put the name of the column in-between the brackets. Let’s select the food column:\ndf['food']  Jane Steak Niko Lamb Aaron Mango Penelope Apple Dean Cheese Christina Melon Cornelia Beans Name: food, dtype: object  Anatomy of a Series Selecting a single column of data returns the other pandas data container, the Series. A Series is a one-dimensional sequence of labeled data. There are two main components of a Series, the index and the data(or values). There are NO columns in a Series.\nThe visual display of a Series is just plain text, as opposed to the nicely styled table for DataFrames. The sequence of person names on the left is the index. The sequence of food items on the right is the values.\nYou will also notice two extra pieces of data on the bottom of the Series. The name of the Series becomes the old-column name. You will also see the data type or dtype of the Series. You can ignore both these items for now.\nSelecting multiple columns with just the indexing operator It’s possible to select multiple columns with just the indexing operator by passing it a list of column names. Let’s select color, food, and score:\ndf[['color', 'food', 'score']]  Selecting multiple columns returns a DataFrame Selecting multiple columns returns a DataFrame. You can actually select a single column as a DataFrame with a one-item list:\ndf[['food']]  Although, this resembles the Series from above, it is technically a DataFrame, a different object.\nColumn order doesn’t matter When selecting multiple columns, you can select them in any order that you choose. It doesn’t have to be the same order as the original DataFrame. For instance, let’s select height and color.\ndf[['height', 'color']]  Exceptions There are a couple common exceptions that arise when doing selections with just the indexing operator.\n If you misspell a word, you will get a KeyError If you forgot to use a list to contain multiple columns you will also get a KeyError\ndf['hight']  KeyError: 'hight'\u0026gt;\u0026gt;\u0026gt; df['color', 'age'] # should be: df[['color', 'age']] KeyError: ('color', 'age')  Summary of just the indexing operator Its primary purpose is to select columns by the column names\n Select a single column as a Series by passing the column name directly to it: df[\u0026lsquo;col_name\u0026rsquo;]\n Select multiple columns as a DataFrame by passing a list to it: df[[\u0026lsquo;col_name1, col_name2\u0026rsquo;]]\n You actually can select rows with it, but this will not be shown here as it is confusing and not used often.\n  Getting started with .loc The = .loc indexer selects data in a different way than just the indexing operator. It can select subsets of rows or columns. It can also simultaneously select subsets of rows and columns. Most importantly, it only selects data by the LABEL of the rows and columns.\nSelect a single row as a Series with .loc The .loc indexer will return a single row as a Series when given a single row label. Let\u0026rsquo;s select the row for Niko.\ndf.loc['Niko']  state TX color green food Lamb age 2 height 70 score 8.3 Name: Niko, dtype: object  We now have a Series, where the old column names are now the index labels. The name of the Series has become the old index label, Niko in this case.\nSelect multiple rows as a DataFrame with .loc To select multiple rows, put all the row labels you want to select in a list and pass that to .loc. Let\u0026rsquo;s select Niko and Penelope.\ndf.loc[['Niko', 'Penelope']]  Use slice notation to select a range of rows with .loc It is possible to ‘slice’ the rows of a DataFrame with .loc by using slice notation. Slice notation uses a colon to separate start, stop and step values. For instance we can select all the rows from Niko through Dean like this:\ndf.loc['Niko':'Dean']  .loc includes the last value with slice notation Notice that the row labeled with Dean was kept. In other data containers such as Python lists, the last value is excluded.\nOther slices You can use slice notation similarly to how you use it with lists. Let’s slice from the beginning through Aaron:\ndf.loc[:'Aaron']  Slice from Niko to Christina stepping by 2:\ndf.loc['Niko':'Christina':2]  Slice from Dean to the end:\ndf.loc['Dean':]  Selecting rows and columns simultaneously with .loc Unlike just the indexing operator, it is possible to select rows and columns simultaneously with .loc. You do it by separating your row and column selections by a comma. It will look something like this:\ndf.loc[row_selection, column_selection]  Select two rows and three columns For instance, if we wanted to select the rows Dean and Cornelia along with the columns age, state and score we would do this:\ndf.loc[['Dean', 'Cornelia'], ['age', 'state', 'score']]  Use any combination of selections for either row or columns for .loc Row or column selections can be any of the following as we have already seen:\n A single label A list of labels A slice with labels  We can use any of these three for either row or column selections with .loc. Let\u0026rsquo;s see some examples.\nLet’s select two rows and a single column:\ndf.loc[['Dean', 'Aaron'], 'food']  Dean Cheese Aaron Mango Name: food, dtype: object  Select a slice of rows and a list of columns:\ndf.loc['Jane':'Penelope', ['state', 'color']]  Select a single row and a single column. This returns a scalar value.\ndf.loc['Jane', 'age']  30  Select a slice of rows and columns\ndf.loc[:'Dean', 'height':]  Selecting all of the rows and some columns It is possible to select all of the rows by using a single colon. You can then select columns as normal:\ndf.loc[:, ['food', 'color']]  You can also use this notation to select all of the columns:\ndf.loc[['Penelope','Cornelia'], :]  But, it isn’t necessary as we have seen, so you can leave out that last colon:\ndf.loc[['Penelope','Cornelia']]  Assign row and column selections to variables It might be easier to assign row and column selections to variables before you use .loc. This is useful if you are selecting many rows or columns:\nrows = ['Jane', 'Niko', 'Dean', 'Penelope', 'Christina'] cols = ['state', 'age', 'height', 'score'] df.loc[rows, cols]  Summary of .loc  Only uses labels Can select rows and columns simultaneously Selection can be a single label, a list of labels or a slice of labels Put a comma between row and column selections  If you are enjoying this article, consider purchasing the All Access Pass! which includes all my current and future material for one low price.\nGetting started with .iloc The .iloc indexer is very similar to .loc but only uses integer locations to make its selections. The word .iloc itself stands for integer location so that should help with remember what it does.\nSelecting a single row with .iloc By passing a single integer to .iloc, it will select one row as a Series:\ndf.iloc[3]  state AL color white food Apple age 4 height 80 score 3.3 Name: Penelope, dtype: object  Selecting multiple rows with .iloc Use a list of integers to select multiple rows:\ndf.iloc[[5, 2, 4]] # remember, don't do df.iloc[5, 2, 4]  Use slice notation to select a range of rows with .iloc Slice notation works just like a list in this instance and is exclusive of the last element\ndf.iloc[3:5]  Select 3rd position until end:\ndf.iloc[3:]  Select 3rd position to end by 2:\ndf.iloc[3::2]  Selecting rows and columns simultaneously with .iloc Just like with .iloc any combination of a single integer, lists of integers or slices can be used to select rows and columns simultaneously. Just remember to separate the selections with a comma.\nSelect two rows and two columns:\ndf.iloc[[2,3], [0, 4]]  Select a slice of the rows and two columns:\ndf.iloc[3:6, [1, 4]]  Select slices for both\ndf.iloc[2:5, 2:5]  Select a single row and column\ndf.iloc[0, 2]  'Steak'  Select all the rows and a single column\ndf.iloc[:, 5]  Jane 4.6 Niko 8.3 Aaron 9.0 Penelope 3.3 Dean 1.8 Christina 9.5 Cornelia 2.2 Name: score, dtype: float64  Deprecation of .ix Early in the development of pandas, there existed another indexer, **ix**. This indexer was capable of selecting both by label and by integer location. While it was versatile, it caused lots of confusion because it\u0026rsquo;s not explicit. Sometimes integers can also be labels for rows or columns. Thus there were instances where it was ambiguous.\nYou can still call .ix, but it has been deprecated, so please never use it.\nSelecting subsets of Series We can also, of course, do subset selection with a Series. Earlier I recommended using just the indexing operator for column selection on a DataFrame. Since Series do not have columns, I suggest using only .loc and .iloc. You can use just the indexing operator, but its ambiguous as it can take both labels and integers. I will come back to this at the end of the tutorial.\nTypically, you will create a Series by selecting a single column from a DataFrame. Let’s select the food column:\nfood = df['food'] food  Jane Steak Niko Lamb Aaron Mango Penelope Apple Dean Cheese Christina Melon Cornelia Beans Name: food, dtype: object  Series selection with .loc Series selection with .loc is quite simple, since we are only dealing with a single dimension. You can again use a single row label, a list of row labels or a slice of row labels to make your selection. Let\u0026rsquo;s see several examples.\nLet’s select a single value:\nfood.loc['Aaron']  'Mango'  Select three different values. This returns a Series:\nfood.loc[['Dean', 'Niko', 'Cornelia']]  Dean Cheese Niko Lamb Cornelia Beans Name: food, dtype: object  Slice from Niko to Christina - is inclusive of last index\nfood.loc['Niko':'Christina']  Niko Lamb Aaron Mango Penelope Apple Dean Cheese Christina Melon Name: food, dtype: object  Slice from Penelope to the end:\nfood.loc['Penelope':]  Penelope Apple Dean Cheese Christina Melon Cornelia Beans Name: food, dtype: object  Select a single value in a list which returns a Series\nfood.loc[['Aaron']]  Aaron Mango Name: food, dtype: object  Series selection with .iloc Series subset selection with .iloc happens similarly to .loc except it uses integer location. You can use a single integer, a list of integers or a slice of integers. Let\u0026rsquo;s see some examples.\nSelect a single value:\nfood.iloc[0]  'Steak'  Use a list of integers to select multiple values:\nfood.iloc[[4, 1, 3]]  Dean Cheese Niko Lamb Penelope Apple Name: food, dtype: object  Use a slice — is exclusive of last integer\nfood.iloc[4:6]  Dean Cheese Christina Melon Name: food, dtype: object  Comparison to Python lists and dictionaries It may be helpful to compare pandas ability to make selections by label and integer location to that of Python lists and dictionaries.\nPython lists allow for selection of data only through integer location. You can use a single integer or slice notation to make the selection but NOT a list of integers.\nLet’s see examples of subset selection of lists using integers:\nsome_list = ['a', 'two', 10, 4, 0, 'asdf', 'mgmt', 434, 99] some_list[5]  asdf  some_list[-1]  99  some_list[:4]  ['a', 'two', 10, 4]  some_list[3:]  [4, 0, 'asdf', 'mgmt', 434, 99]\u0026gt;\u0026gt;\u0026gt; some_list[2:6:3] [10, 'asdf']  Selection by label with Python dictionaries All values in each dictionary are labeled by a key. We use this key to make single selections. Dictionaries only allow selection with a single label. Slices and lists of labels are not allowed.\nd = {'a':1, 'b':2, 't':20, 'z':26, 'A':27} d['a']  1  d['A']  27  Pandas has power of lists and dictionaries DataFrames and Series are able to make selections with integers like a list and with labels like a dictionary.\nExtra Topics There are a few more items that are important and belong in this tutorial and will be mentioned now.\nUsing just the indexing operator to select rows from a DataFrame — Confusing! Above, I used just the indexing operator to select a column or columns from a DataFrame. But, it can also be used to select rows using a slice. This behavior is very confusing in my opinion. The entire operation changes completely when a slice is passed.\nLet’s use an integer slice as our first example:\ndf[3:6]  To add to this confusion, you can slice by labels as well.\ndf['Aaron':'Christina']  I recommend not doing this! This feature is not deprecated and completely up to you whether you wish to use it. But, I highly prefer not to select rows in this manner as can be ambiguous, especially if you have integers in your index.\nUsing .iloc and .loc is explicit and clearly tells the person reading the code what is going to happen. Let\u0026rsquo;s rewrite the above using .iloc and .loc.\ndf.iloc[3:6] # More explicit that df[3:6]  df.loc['Aaron':'Christina']  Cannot simultaneously select rows and columns with [] An exception will be raised if you try and select rows and columns simultaneously with just the indexing operator. You must use .loc or .iloc to do so.\ndf[3:6, 'Aaron':'Christina']  TypeError: unhashable type: 'slice'  Using just the indexing operator to select rows from a Series — Confusing! You can also use just the indexing operator with a Series. Again, this is confusing because it can accept integers or labels. Let’s see some examples\nfood  Jane Steak Niko Lamb Aaron Mango Penelope Apple Dean Cheese Christina Melon Cornelia Beans Name: food, dtype: object  food[2:4]  Aaron Mango Penelope Apple Name: food, dtype: object  food['Niko':'Dean']  Niko Lamb Aaron Mango Penelope Apple Dean Cheese Name: food, dtype: object  Since Series don’t have columns you can use a single label and list of labels to make selections as well\nfood['Dean']  'Cheese'  food[['Dean', 'Christina', 'Aaron']]  Dean Cheese Christina Melon Aaron Mango Name: food, dtype: object  Again, I recommend against doing this and always use .iloc or .loc\nImporting data without choosing an index column We imported data by choosing the first column to be the index with the index_col parameter of the read_csv function. This is not typically how most DataFrames are read into pandas.\nUsually, all the columns in the csv file become DataFrame columns. Pandas will use the integers 0 to n-1 as the labels. See the example data below with a slightly different dataset:\ndf2 = pd.read_csv('data/sample_data2.csv') df2  The default RangeIndex If you don’t specify a column to be the index when first reading in the data, pandas will use the integers 0 to n-1 as the index. This technically creates a **RangeIndex** object. Let\u0026rsquo;s take a look at it.\ndf2.index  RangeIndex(start=0, stop=7, step=1)  This object is similar to Python range objects. Let\u0026rsquo;s create one:\nrange(7)  range(0, 7)  Converting both of these objects to a list produces the exact same thing:\nlist(df2.index)  [0, 1, 2, 3, 4, 5, 6]  list(range(7))  [0, 1, 2, 3, 4, 5, 6]  For now, it’s not at all important that you have a **RangeIndex**. Selections from it happen just the same with **.loc** and **.iloc**. Let\u0026rsquo;s look at some examples.\ndf2.loc[[2, 4, 5], ['food', 'color']]  df2.iloc[[2, 4, 5], [3,2]]  There is a subtle difference when using a slice. .iloc excludes the last value, while .loc includes it:\ndf2.iloc[:3]  df2.loc[:3]  Setting an index from a column after reading in data It is common to see pandas code that reads in a DataFrame with a RangeIndex and then sets the index to be one of the columns. This is typically done with the set_index method:\ndf2_idx = df2.set_index('Names') df2_idx  The index has a name Notice that this DataFrame does not look exactly like our first one from the very top of this tutorial. Directly above the index is the bold-faced word Names. This is technically the name of the index. Our original DataFrame had no name for its index. You can ignore this small detail for now. Subset selections will happen in the same fashion.\nDataFrame column selection with dot notation Pandas allows you to select a single column as a Series by using dot notation. This is also referred to as attribute access. You simply place the name of the column without quotes following a dot and the DataFrame like this:\ndf.state  Jane NY Niko TX Aaron FL Penelope AL Dean AK Christina TX Cornelia TX Name: state, dtype: object  df.age  Jane 30 Niko 2 Aaron 12 Penelope 4 Dean 32 Christina 33 Cornelia 69 Name: age, dtype: int64  Pros and cons when selecting columns by attribute access The best benefit of selecting columns like this is that you get help when chaining methods after selection. For instance, if you place another dot after the column name and press tab, a list of all the Series methods will appear in a pop-up menu. It will look like this:\nThis help disappears when you use just the indexing operator:\nThe biggest drawback is that you cannot select columns that have spaces or other characters that are not valid as Python identifiers (variable names).\nSelecting the same column twice? This is rather peculiar, but you can actually select the same column more than once:\ndf[['age', 'age', 'age']]  Summary of Part 1 We covered an incredible amount of ground. Let’s summarize all the main points: - Before learning pandas, ensure you have the fundamentals of Python - Always refer to the documentation when learning new pandas operations - The DataFrame and the Series are the containers of data - A DataFrame is two-dimensional, tabular data - A Series is a single dimension of data - The three components of a DataFrame are the index, the columns and the data (or values) - Each row and column of the DataFrame is referenced by both a label and an integer location - There are three primary ways to select subsets from a DataFrame — [], .loc and .iloc - I use the term just the indexing operator to refer to [] immediately following a DataFrame/Series - Just the indexing operator’s primary purpose is to select a column or columns from a DataFrame - Using a single column name to just the indexing operator returns a single column of data as a Series - Passing multiple columns in a list to just the indexing operator returns a DataFrame - A Series has two components, the index and the data (values). It has no columns - .loc makes selections only by label - .loc can simultaneously select rows and columns - .loc can make selections with either a single label, a list of labels, or a slice of labels - .loc makes row selections first followed by column selections: df.loc[row_selection, col_selection] - .iloc is analogous to .loc but uses only integer location to refer to rows or columns. - .ix is deprecated and should never be used - .loc and .iloc work the same for Series except they only select based on the index as there are no columns - Pandas combines the power of python lists (selection via integer location) and dictionaries (selection by label) - You can use just the indexing operator to select rows from a DataFrame, but I recommend against this and instead sticking with the explicit .loc and .iloc - Normally data is imported without setting an index. Use the set_index method to use a column as an index. - You can select a single column as a Series from a DataFrame with dot notation\nWay more to the story This is only part 1 of the series, so there is much more to cover on how to select subsets of data in pandas. Some of the explanations in this part will be expanded to include other possibilities.\nExercises This best way to learn pandas is to practice on your own. All these exercises will use the Chicago food inspections dataset found here at data.world.\n Download the Jupyter Notebook to get started on the exercises. Make sure to review the detailed solutions as well after you attempt the exercises  Get the All Access Pass! Get all of my current and future material for one low price with the All Access Pass! The primary courses available are the following:\n Exercise Python Master Data Analysis with Python Master Machine Learning with Python  "});index.add({'id':76,'href':'/library/tutorials/docs/articles/python/use-python-send-email/','title':"Send email using SMTP",'content':" Use Python to send email using SMTP Use Python to send emails\nIn this tutorial, we will learn to use python to send emails. If you are new to python, you can see our beginner’s series. In case you are having trouble installing Python, you can see our posts on installing python on MacOS and Windows.\nWe will start with sending plain email using python and then learn to send advanced automated emails, HTML emails, emails with attachments etc. In this tutorial, we will be using gmail to send email via python, which is the most common email service used. However, you can use any other email service.(You will have to use slightly different setting in that case.)\nOpen your gmail account. If you are not using\n2-Step Verification, you will have to allow less secure apps from this link.\nHowever, if you are using 2-Step Verification (which I highly recommend), you need to create app password for your account for this project from here. You can learn to create app passwords from google’s official documentation.\nWe do not want to hard code our username and password, so we will be using environment variable to set them. Open the .bash_profile of your MacOS and save the email and password (or app password in case of 2-step verification) as under:-\n$ nano .bash_profile  # .bash_profile export EMAIL_USER=\u0026quot;your_email\u0026quot; export PASSWORD=\u0026quot;your_password\u0026quot;  $ source .bash_profile  Sending simple email using python\nNow create a file called ‘python_send_email.py’ and import smtplib and write down the following code:-\n# python_send_email.py import os import smtplib EMAIL = os.environ.get('EMAIL_USER') PASSWORD = os.environ.get('PASSWORD') with smtplib.SMTP('smtp.gmail.com', 587) as smtp: smtp.ehlo() smtp.starttls() smtp.ehlo() smtp.login(EMAIL, PASSWORD) subject = 'Python Send Email' body = 'This email is sent using python' message = f'Subject:{subject}\\n\\n{body}' smtp.sendmail(EMAIL, EMAIL, message)  Let me quickly go through each step.\nWe have used os to use environment variables where we have saved our username and password.\nThen we have used the context manager, so that the connection ends by itself after the script is complete.\nThen we identified ourselves using smtp.ehlo(), then we put it in the connection mode using smtp.starttls() and logged in using smtp.login().\nFinally, we will draft the email by adding subject, body, message and send it using smtp.sendmail(sender, receipient, message). Running the script will send the simple email to the user.\nSending email using local debugging server\nWhile we are testing/learning, it could be frustrating to use real email, so we will start local debugging server using the following command. When we will run this, all the future emails which we will send using our script will be displayed on the terminal.\n$ python -m smtpd -c DebuggingServer -n localhost:1025  Now, we will have to make following changes to python_send_email.py :-\n# python_send_email.py # with smtplib.SMTP('smtp.gmail.com', 587) as smtp: with smtplib.SMTP('localhost', 1025) as smtp: #add this and comment out the rest # smtp.ehlo() # smtp.starttls() # smtp.ehlo() # smtp.login(EMAIL, PASSWORD)  Now if we will run our python_send_email.py, it will be displayed in the terminal.\nCleaning it up\nInstead of calling the server using smtp.ehlo() we will be creating a SSL connection from the very beginning using smptlib.SMTP_SSL and instead of port 587, we will use port 465. Now, we will be taking advantage of EmailMessage class of email.message to create a message and finally smtp.send_message() to send that message. The modified code is as under:-\n# python_send_email.py import os import smtplib from email.message import EmailMessage #new EMAIL = os.environ.get('EMAIL_USER') PASSWORD = os.environ.get('PASSWORD') message = EmailMessage() message['Subject'] = 'Python Send Email' message['From'] = EMAIL message['To'] = EMAIL message.set_content('This email is sent using python.') with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp: smtp.login(EMAIL, PASSWORD) smtp.send_message(message)  Python - send email with attachment\nNow we will be sending the emails with attachment. In order to send an image we will be using imghdr to find out the type of the image. Now place the image python_send_email.jpg in the same directory as the script python_send_email.py and change the code as under:\n# python_send_email.py import imghdr # new with open('python_send_email.jpg', 'rb') as f: file_data = f.read() file_type = imghdr.what(f.name) file_name = f.name message.add_attachment(file_data, maintype='image', subtype=file_type, filename=file_name)   Written with StackEdit.\n "});index.add({'id':77,'href':'/library/tutorials/docs/articles/python/set-passwords-and-secret-keys/','title':"Set Passwords and Secret Keys",'content':" Set Passwords and Secret Keys in Environment Variables (Mac/Linux/Windows) Hide Passwords and Secret Keys in Environment Variables\nIf you are into python , there is a fair chance that you would have contributed to open-source or had your code snippets/projects on Github or BitBucket.Some time your code involves some important credentials like passwords or secret keys etc. like the code for our post on how to send emails using python uses google/app password. You surely do not want to hard code the password in your code and accidentaly push it to a remote repository. Hence, the safest way is to do so is saving your secret keys/password in envirnoment variables. In this post we will learn how to save/hide the passwords, secret keys in environment variables for MacOS, Linux and Windows.\nThe wrong way\nHard coding your username, passwords or secret keys in your code is wrong way and it exposes you to vulnerability. Have a look at the code below:-\n# The wrong way user_name = 'my_user_name' password = 'my_password' print(user_name, password) # output my_user_name my_password  Set Passwords and Secret Keys in Environment Variables on Mac/Linux\nTo set password and secret keys in environment variable on Mac and Linux. You will need to open and modify .bash_profile . To do that open the terminal on your Mac or Linux and cd to the home directory. (You can read about useful terminal commands of mac here)\nuser desktop $ cd user ~ $  Now open the .bash_profile using your favorite editor like nano , vim , sublime text , atom etc. You can read a bit more about the text editors here\nuser ~ $ nano .bash_profile  The following file will open . You may not have the same text like mine there.\nNow we need to add our environment variables. For that we will have to write the following code. Remember that there is no whitespace on either side of =.\nexport USER=\u0026quot;my_user_name\u0026quot; export PASSWORD=\u0026quot;my_password\u0026quot;  Press ctrl + x and Y to save the nano file.\nNow either restart the terminal or use the following command to effect the changes.\nuser ~ $ source .bash_profile  Now to use these variables in our python script, we will be needing os module. Have a look at the following code. Here instead of hard coding the username and password like the example above, we have used the environment variables and still the result is same.\nimport os user_name = os.environ.get('USER') password = os.environ.get('password') print(user_name, password) # output my_user_name my_password  Set Passwords and Secret Keys in Environment Variables on Windows\nTo set the passwords and secret keys in environment variables on Windows, you will have to open Advance System Setting. You can either type ‘Advanced System Setting’ in search bar or browse to it by right clicking My Computer on desktop-\u0026gt; properties -\u0026gt; Advanced System Setting\nNow in Advance System Setting you will have to click on Environment Variables and the following screen will appear.\nNow, here we need to add new user variable. So click on new and add both the variables.\nNow using the same code as above, we can access the environmental variables.\nimport os user_name = os.environ.get('USER') password = os.environ.get('password') print(user_name, password) # output my_user_name my_password   Written with StackEdit.\n "});index.add({'id':78,'href':'/library/tutorials/docs/articles/data-science/finance/stock-analysis-in-python/','title':"Stock Analysis in Python",'content':" Stock Analysis in Python Exploring financial data with object-oriented programming and additive models\nIt’s easy to get carried away with the wealth of data and free open-source tools available for data science. After spending a little bit of time with the quandl financial library and the prophet modeling library, I decided to try some simple stock data exploration. Several days and 1000 lines of Python later, I ended up with a complete stock analysis and prediction tool. Although I am not confident (or foolish) enough to use it to invest in individual stocks, I learned a ton of Python in the process and in the spirit of open-source, want to share my results and code so others can benefit.\nNow more than ever\nThis article will show how to use Stocker, a Python class-based tool for stock analysis and prediction (the name was originally arbitrary, but I decided after the fact it nicely stands for “stock explorer”). I had tried several times to conquer classes, the foundation of object-oriented programming in Python, but as with most programming topics, they never quite made sense to me when I read the books. It was only when I was deep in a project faced with a problem I had not solved before that the concept finally clicked, showing once again that experience beats theoretical explanations! In addition to an exploration of Stocker, we will touch on some important topics including the basics of a Python class and additive models. For anyone wanting to use Stocker, the complete code can be found on GitHub along with documentation for usage. Stocker was designed to be easy to use (even for those new to Python), and I encourage anyone reading to try it out. Now, let’s take a look at the analysis capabilities of Stocker!\nGetting Started with Stocker After installing the required libraries, the first thing we do is import the Stocker class into our Python session. We can do this from an interactive Python session or a Jupyter Notebook started in the directory with the script.\nfrom stocker import Stocker  We now have the Stocker class in our Python session, and we can use it to create an instance of the class. In Python, an instance of a class is called an object, and the act of creating an object is sometimes called instantiation or construction. In order to make a Stocker object we need to pass in the name of a valid stock ticker (bold indicates output).\nmicrosoft = Stocker('MSFT') MSFT Stocker Initialized. Data covers 1986-03-13 to 2018-01-16.  Now, we have a microsoftobject with all the properties of the Stocker class. Stocker is built on the quandl WIKI database which gives us access to over 3000 US stocks with years of daily price data (full list). For this example, we will stick to Microsoft data. Although Microsoft might be seen as the opposite of open-source, they have recently made some changes that make me optimist they are embracing the open-source community (including Python).\nA class in Python is comprised of two main parts: attributes and methods. Without going into too much detail, attributes are values or data associated either with the class as a whole or with specific instances (objects) of the class. Methods are functions contained in the class which can act on that data. One attribute of a Stocker object is stock data for a specific company that is attribute is associated with the object when we construct it. We can access the attribute and assign it to another variable for inspection:\n# Stock is an attribute of the microsoft object stock_history = microsoft.stock stock_history.head()  Microsoft Stock Data\nThe benefit of a Python class is that the methods (functions) and the data they act on are associated with the same object. We can use a method of the Stocker object to plot the entire history of the stock.\n# A method (function) requires parentheses microsoft.plot_stock() Maximum Adj. Close = 89.58 on 2018-01-12. Minimum Adj. Close = 0.06 on 1986-03-24. Current Adj. Close = 88.35.  The default value plotted is the Adjusted Closing price, which accounts for splits in the stock (when one stock is split into multiple stocks, say 2, with each new stock worth 1\u0026frasl;2 of the original price).\nThis is a pretty basic plot that we could have found from a Google Search, but there is something satisfying about doing it ourselves in a few lines of Python! The plot_stockfunction has a number of optional arguments. By default, this method plots the Adjusted Closing price for the entire date range, but we can choose the range, the stats to plot, and the type of plot. For example, if we want to compare the Daily Change in price with the Adjusted Volume (number of shares) traded, we can specify those in the function call.\nmicrosoft.plot_stock(start_date = '2000-01-03', end_date = '2018-01-16', stats = ['Daily Change', 'Adj. Volume'], plot_type='pct') Maximum Daily Change = 2.08 on 2008-10-13. Minimum Daily Change = -3.34 on 2017-12-04. Current Daily Change = -1.75. Maximum Adj. Volume = 591052200.00 on 2006-04-28. Minimum Adj. Volume = 7425503.00 on 2017-11-24. Current Adj. Volume = 35945428.00.  Notice the y-axis is in percentage change relative to the average value for the statistic. This scale is necessary because the daily volume is originally in shares, with a range in the hundreds of millions, while daily price change typically is a few dollars! By converting to percentage change we can look at both datasets on a similar scale. The plot shows there is no correlation between the number of shares traded and the daily change in price. This is surprising as we might have expected more shares to be traded on days with larger price changes as people rush to take advantage of the swings. However, the only real trend seems to be that the volume traded decreases over time. There is also a significant decrease in price on December 4, 2017 that we could try to correlate with news stories about Microsoft. A quick news search for December 3 yields the following:\nNot sure about the reliability of these sources Google\nThere certainly does not seem to be any indication that Microsoft stock is due for its largest price decrease in 10 years the next day! In fact, if we were playing the stock market based on news, we might have been tempted to buy stock because a deal with the NFL (second result) sounds like a positive!\nUsing plot_stock,we can investigate any of the quantities in the data across any date range and look for correlations with real-world events (if there are any). For now, we will move on to one of the more enjoyable parts of Stocker: making fake money!\nLet’s pretend for a moment we had the presence of mind to invest in 100 shares of Microsoft at the company’s Initial Public Offering (IPO). How much richer would we be now?\nmicrosoft.buy_and_hold(start_date='1986-03-13', end_date='2018-01-16', nshares=100) MSFT Total buy and hold profit from 1986-03-13 to 2018-01-16 for 100 shares = $8829.11  In addition to making us feel better, using these results will allow us to plan our trips back in time to maximize profits.\nIf we are feeling too confident, we can try to tweak the results to lose money:\nmicrosoft.buy_and_hold(start_date='1999-01-05', end_date='2002-01-03', nshares=100) MSFT Total buy and hold profit from 1999-01-05 to 2002-01-03 for 100 shares = $-56.92  Surprisingly, it is possible to lose money in the stock market!\nAdditive Models Additive models are a powerful tool for analyzing and predicting time series, one of the most common types of real world data. The concept is straightforward: represent a time series as a combination of patterns on different time scales and an overall trend. We know the long-term trend of Microsoft stock is a steady increase, but there could also be patterns on a yearly or daily basis, such as an increase every Tuesday, that would be economically beneficial to know. A great library for analyzing time series with daily observations (such as stocks) is Prophet, developed by Facebook. Stocker does all the modeling work with Prophet behind the scenes for us, so we can use a simple method call to create and inspect a model.\nmodel, model_data = microsoft.create_prophet_model()  The additive model smooths out the noise in the data, which is why the modeled line does not exactly line up with the observations. Prophet models also calculate uncertainty, an essential part of modeling as we can never be sure of our predictions when dealing with fluctuating real life processes. We can also use a prophet model to make predictions for the future, but for now we are more concerned with past data. Notice that this method call returned two objects, a model and some data, which we assigned to variables. We now use these variables to plot the time series components.\n# model and model_data are from previous method call model.plot_components(model_data) plt.show()  The overall trend is a definitive increase over the past three years. There also appears to be a noticeable yearly pattern (bottom graph), with prices bottoming out in September and October and reaching a peak in November and January. As the time-scale decreases, the data gets noisier. Over the course of a typical month, there is more signal than noise! If we believe there might be a weekly pattern, we can add that in to the prophet model by changing the weekly_seasonalityattribute of the Stocker object:\nprint(microsoft.weekly_seasonality) microsoft.weekly_seasonality = True print(microsoft.weekly_seasonality) False True  The default value for weekly_seasonalityis False, but we changed the value to include a weekly pattern in our model. We then make another call to create_prophet_modeland graph the resulting components. Below is the weekly seasonality from the new model.\nThere was no way I could make this graph look good\nWe can ignore the weekends because the price only changes over the week (in reality the price changes by a small amount during after-hours training but it does not affect our analysis). Unfortunately, there is not a trend over the week that we can use and before we continue modeling, we will turn off the weekly seasonality. This behavior is expected: with stock data, as the time scale decreases, the noise starts to wash out the signal. On a day-to-day basis, the movements of stocks are essentially random, and it is only by zooming out to the yearly scale that we can see trends. Hopefully this serves as a good reminder of why not to play the daily stock game!\nChangepoints Changepoints occur when a time-series goes from increasing to decreasing or vice versa (in a more rigorous sense, they are located where the change in the rate of the time series is greatest). These times are extremely important because knowing when a stock will reach a peak or is about to take off could have significant economic benefits. Identifying the causes of changepoints might let us predict future swings in the value of a stock. The Stocker object can automatically find the 10 largest changepoints for us.\nmicrosoft.changepoint_date_analysis() Changepoints sorted by slope rate of change (2nd derivative): Date Adj. Close delta 48 2015-03-30 38.238066 2.580296 337 2016-05-20 48.886934 2.231580 409 2016-09-01 55.966886 -2.053965 72 2015-05-04 45.034285 -2.040387 313 2016-04-18 54.141111 -1.936257**  The changepoints tend to line up with peaks and valleys in the stock price. Prophet only finds changepoints in the first 80% of the data, but nonetheless, these results are useful because we can attempt to correlate them with real-world events. We could repeat what we did earlier and manually search for Google News around these dates, but I thought it would be preferable if Stocker did that for us. You might have seen the Google Search Trends tool which allows you to see the popularity of any search term over time in Google searches. Stocker can automatically retrieve this data for any search term we specify and plot the result on the original data. To find and graph the frequency of a search term, we modify the previous method call.\n# same method but with a search term microsoft.changepoint_date_analysis(search = 'Microsoft profit') Top Related Queries: query value 0 microsoft non profit 100 1 microsoft office 55 2 apple 30 3 microsoft 365 30 4 microsoft office 365 20 Rising Related Queries: query value 0 microsoft 365 120 1 microsoft office 365 90 2 microsoft profit 2014 70  In addition to graphing the relative search frequency, Stocker displays the top related queries and the top rising queries for the date range of the graph. On the graph, the y-axis is normalized between 0 and 1 by dividing the values by their maximums, allowing us to compare two variables with different scales. From the figure, there does not appear to be a correlation between searches for “Microsoft profit” and the stock price of Microsoft.\nHad we found a correlation, there would still be the question of causation. We would not know if searches or news caused the price to change, or if the change in price caused the searches. There might be some useful information to be found, but there are also many chance correlations. (For a humorous take on such random relationships, check out spurious correlations). Feel free to try out some different terms to see if you can find any interesting trends!\nmicrosoft.changepoint_date_analysis(search = 'Microsoft Office')  Looks like declining searches for Office leads to increasing stock prices. Maybe someone should let Microsoft know.\nPredictions We have only explored the first half of Stocker capabilities. The second half is designed for forecasting, or predicting future stock price. Although this might be a futile exercise (or at least will not pay off), there is still plenty to learn in the process! Stay tuned for a future article on prediction, or get started predicting with Stocker on your own (check out the documentation for details). For now, I’ll leave you with one more image.\n# specify number of days in future to make a prediction model, future = microsoft.create_prophet_model(days=180) Predicted Price on 2018-07-15 = $97.67  Although all the capabilities of Stocker might already be publically available, the process of creating this tool was enjoyable, and more importantly, taught me more about data science, Python, and the stock market than any college course could. We live in an incredible age of democratized knowledge where anyone can learn about programming or even state of the art fields like machine learning without formal instruction. If you have an idea for a project but think you do not know enough or find out it has been done before, don’t let that stop you. You might develop a better solution and even if you don’t, you’ll be better off and know more than if you had never started!\n Source:.\n "});index.add({'id':79,'href':'/library/tutorials/docs/articles/python/virtualenv/','title':"การใช้งาน Virtualenv",'content':" การใช้งาน Virtualenv Virtualenv คืออะไร Virtualenv(ironment) คือ environment ของ python เช่น คุณทำโปรแกรมอยู่ 2 ตัว A กับ B แล้วเวลาคุณจะติดตั้ง library ถ้าคุณ pip install ลงไปเลย\n library ที่คุณใช้กับงาน A กับปนมั่วกับงาน B  เช่น เวลาจะทำไฟล์ requirement เพื่อให้คนอื่น สามารถติดตั้ง library ที่ใช้กับงานเราได้สะดวกมากขึ้นก็กลับกลายเป็นว่า งาน A ใช้ 5 library งาน B ใช้ 10 Libray สรุป คนที่เอาโปรแกรมเราไม่ไปใช้ก็ไม่รู้ว่า โปรแกรมเราใช้ library อะไรบ้างก็ต้องติดตั้งทั้งหมด 15 library\n หรือแบบไม่สามารถแยก version ของ library กันได้  เช่น งาน A ใช้ OpenCV 3 แต่ งาน B ใช้ OpenCV 4 ทำไงให้ลง 2 version พร้อมกันได้ละ ก็ต้องให้เจ้า Virtualenv ช่วยเราไง\nโดยเจ้า Virtualenv จะสร้าง environment ใหม่ขึ้นมา ที่มีแต่ตัว Python เปล่าๆ แล้วเวลาเราติดตั้ง library อะไรไปมันก็จะเก็บไว้ใน Folder ของ environment แต่ละตัวไม่มาปนกัน\nตอนนี้อาจจะ งง เดี๋ยวไปลองติดตั้งแล้วใช้งานจริงกันเลยดีกว่าครับ\nการติดตั้ง Virtualenv เราจะติดตั้ง Virtualenv ผ่าน pip กันนะครับ โดยการพิมพ์ command\npip install virtualenv  การใช้งาน Virtualenv สมมติ ผมทำโปรเจค image_enhancement อยู่ผมก็จะเข้าไปใน folder โปรเจคของผม\nในทีนี้ผมจะสร้าง python environment ชื่อ env โดยสั่ง\nvirtualenv.exe venv  เวลาจะใช้งานก็สั่ง command\n.\\venv\\Scripts\\activate  \nNote: สำหรับใครที่ใช้ Virtualenv แล้วติดปัญหาเกี่ยวกับ execution policies แบบในรูปด้านล่าง\n\nก็ให้เปิด Powershell หรือ Command Prompt แบบ Admin แล้วสั่ง\nSet-ExecutionPolicy AllSigned  กับ\nSet-ExecutionPolicy RemoteSigned  โดยจะเลือกแบบ Yes หรือ Yes to All ก็ได้ ดูรายละเอียดได้จาก User Guid ของ virtualenv ครับ\nกลับมาเข้าเรื่องของเราต่อครับ เมื่อเราสั่ง activate แล้วจะมีชื่อ environment ของเราอยู่หน้าบรรทัดของ powershell หรือ command\nการใช้งาน Virtualenv (ต่อ) คราวนี้ถ้าเราอยากรู้ว่า environment ของเรามี library อะไรอยู่บ้างก็ให้ลองสั่ง\npip freeze  ซึ่งเราจะยังไม่เห็น library ใดๆ คราวนนี้เรามาลองติดตั้ง library OpenCV กัน\npip install opencv-python  แล้วลอง pip freeze อีกรอบ เราก็จะเห็นว่ามี library OpenCV เพิ่มเข้ามา\nnumpy==1.16.3 opencv-python==4.1.0.25  ทีนี้ก็มาลองทดสอบ library ที่เพิ่งลงกันครับ\n\nถ้าเราใช้งาน environment เสร็จแล้ว ก็ให้สั่ง\ndeactivate  เพื่อออกจาก environment นั้น\nประโยชน์ของ Virtualenv สมมติ ว่าเราทำโปรเจคเสร็จ แล้วคนอื่นอยากนำไปใช้งานต่อ ให้เราสั่ง\npip freeze \u0026gt; requirement.txt  เพื่อจะรวบรวม library ไว้ในไฟล์ requirement.txt เราอาจจะใช้ชื่อไฟล์อื่นก็ได้นะครับ\n\nเวลาคนอื่นเอาไปใช้ เค้าก็จะสั่ง\npip install -r \u0026lt;file requirement\u0026gt;  เจ้า pip ก็จะลง library ทุกตัวให้อัตโนมัติ ของเพียงแค่ version ของ python เหมือนกัน เพราะ บางทีถ้าเรา freeze library จาก python 3.7 แล้วไปลงใน python 3.6 version ของ library บางตัวอาจจะไม่มีก็ได้ครับ\nสรุป    Command Descriptions     virtualenv  สร้าง environment   /Scripts/activate ใช้งาน environment   deactivate ออกจาก environtment   pip install  ติดตั้ง library   pip freeze แสดงรายชื่อ library   สัญลักษณ์ \u0026gt;  เป็นการบอกให้เขียนใส่      ที่มาบทความ skconan.com.\n "});index.add({'id':80,'href':'/library/tutorials/posts/','title':"Posts",'content':""});index.add({'id':81,'href':'/library/tutorials/posts/goisforlovers/','title':"(Hu)go Template Primer",'content':" Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true ---  Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026quot;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026quot; TwitterUser: \u0026quot;spf13\u0026quot; SidebarRecentLimit: 5  Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}}  An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}}  Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt;  "});index.add({'id':82,'href':'/library/tutorials/posts/hugoisforlovers/','title':"Getting Started with Hugo",'content':" Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n"});index.add({'id':83,'href':'/library/tutorials/docs/articles/website/javascript/10-knowledge-javascript/','title':"10 เรื่องน่ารู้ตอบข้อสงสัย JavaScript",'content':" 10 เรื่องน่ารู้ตอบข้อสงสัย JavaScript ในการเขียนภาษา JavaScript นั้นมีทั้งสิ่งที่เหมือนและแตกต่างกับภาษาโปรแกรมอื่นๆ สำหรับคนที่ใช้งาน JavaScript ไม่ว่าจะเพิ่งเริ่มศึกษาหรือใช้มานานแล้ว ก็อาจจะยังมีบางเรื่องที่สงสัยหรือยังไม่รู้เกี่ยวกับ JavaScript อยู่ เราจึงรวบรวม 10 เรื่องน่ารู้เกี่ยวกับ JavaScriptมาให้ได้ลองอ่านกัน\n1. การประกาศตัวแปร Var, Let, Const ใช้แบบไหน ในการเขียนโค้ด การประกาศตัวแปรก็เป็นสิ่งแรกๆ ที่น่าจะเจอในการเริ่มต้นศึกษาภาษานั้นๆ ใน JavaScript ก็เช่นกัน สำหรับคนที่เริ่มศึกษา JavaSctipt น่าจะเคยเห็นผ่านตามาบ้างก็คือ var, let และ const เพื่อการนำไปใช้งานอย่างถูกต้อง ลองมาดูกันว่าการประกาศแต่ละแบบนั้นต่างกันอย่างไรบ้าง\nfunction run() { const myNum = 191; var one = \u0026quot;One\u0026quot;; let two = \u0026quot;Two\u0026quot;; { var three = \u0026quot;Three\u0026quot;; let four = \u0026quot;Four\u0026quot;; } console.log(one); //Output: One console.log(two); //Output: Two console.log(three); //Output: Three console.log(four); //Uncaught ReferenceError } run();   var – สำหรับการประกาศค่าด้วย var นั้น น่าจะเป็นแบบที่ทุกเคยเห็นกันแน่นอน ซึ่งการใช้ var นั้นเคยเป็นหลักในการประกาศตัวแปรมาก่อนที่ ES6 จะออกมา ซึ่งการประกาศด้วย var นั้นจะเป็นแบบ function scope เมื่อประกาศตัวแปรแล้วจะสมารถนำไปใช้ได้ภายในฟังก์ชันนั้นได้ทั้งหมด let – เป็นการประกาศตัวแปรที่ออกมาพร้อมกันกับ const ซึ่งมาพร้อมกับอัพเดต ES6 เพื่อช่วยให้การเขียน JavaScript นั้นง่ายขึ้น โดย let เมื่อประกาศแล้วตัวแปรจะมีค่าอยู่แค่ภายใน block scope คือแค่ภายในเครื่องหมาย { และ } ทำให้ไม่เกิดปัญหาการอ้างอิงตัวแปรเก่า เช่น การใช้ตัวแปรใน loop ค่างๆ ที่ต้องการประกาศค่าขึ้นมาใหม่ const – ใช้สำหรับประกาศค่าตัวแปรที่ไม่ต้องการให้เปลี่ยนแปลงค่าได้ เพราะเมื่อประกาศค่าไปแล้วจะไม่สามรถแก้ไขค่านั้นซ้ำได้ โดย const นั้นทำงานภายใน block scope เหมือนกันกับ let  2. ชนิดของตัวแปร JavaScript เป็น dynamic data type คือตัวแปรหนึ่งตัวนั้น สามารถกำหนดค่าที่ชนิดแตกต่างกันให้กับตัวแปรนั้นๆได้\nvar x = 10; console.log(x); //Output: 10 x = \u0026quot;hello\u0026quot;; console.log(x); //Output: hello x = [1, 2, 3]; console.log(x); //Output: [1,2,3]  จะเห็นว่าในตอนแรกนั้นตัวแปร x นั้นถูกกำหนดค่า string ไว้ แต่ภายหลังก็สามารถกำหนดค่าด้วย number หรือ array ให้กับตัวแปร x ได้เช่นกัน ในด้านหนึ่งนึงนี่คือความง่ายในการเขียนโค้ด แต่เมื่อโค้ดมีความซับซ้อนขึ้น หรือในการนำไปใช้ในโปรเจ็กใหญ่ๆ การที่ไม่ระบุชนิดของตัวแปรก็อาจจะกลายเป็นความยุ่งยากในการพัฒนาได้ ซึ่งถ้าอยู่ในจุดนั้นคงต้องหาทางเลือกอื่น เช่นการเปลี่ยนไปใช้ TypeScript ในการพัฒนาแทน\n3. เครื่องหมาย == กับ === ต่างกันยังไง ? การสร้างอัลกอริทึมขึ้นมา operator สำหรับการเปรียบเทียบค่าพื้นฐานย่อมเป็นสิ่งจำเป็นที่มีอยู่ในโค้ด เช่น มากกว่า, น้อยกว่า, เท่ากัน หรือ ไม่เท่ากัน สำหรับเครื่องหมายที่ใช้ในการเปรียบเทียบความเท่ากันนั้น อาจจะเคยเห็นหรือเคยใช้ทั้ง == และ === มาแล้ว แต่อาจจะยังไม่เข้าใจว่ามันมีอะไรที่ต่างกัน\nvar a = 10; var b = '10'; a == b // Output: true a === b // Output: false   == จะใช้สำหรับเปรียบเทียบความเท่ากัน (equality) === ใช้ในการเปรียบเทียบความเหมือนกัน/เป็นอย่างเดียวกัน (identically)  ในการใช้งาน == นั้นจะทำการแปลงชนิดของตัวแปรเพื่อเปรียบเทียบกัน ในขณะที่ === จะไม่ทำการแปลงชนิดของข้อมูล แต่จะเปรียบเทียบทั้ง ชนิดของตัวแปร และค่าของตัวแปร โดยตรง\n4. What Is ‘This’ ? ในภาษาอื่นๆเช่น Java นั้น this จะใช้เพื่ออ้างอิงถึง Object ที่กำลังใช้งานอยู่ อย่างเช่น method ภายในคลาสที่ต้องการเรียกค่าตัวแปรภายในคลาสนั้น ก็สามารถระบุได้ด้วยการใช้ this แต่ในส่วนของ JavaScript นั้นจะต่างออกไป โดยจะเปลี่ยนไปตามบริบทที่ใช้งาน เช่น\n// สร้าง Object var pet = { name: \u0026quot;Foo\u0026quot;, weight: 15, info: function() { return \u0026quot;Name: \u0026quot; + this.name+ \u0026quot;, Weight: \u0026quot; + this.weight; } };   this ใน method จะอ้างอิงถึง Object ที่เป็นเจ้าของ เช่นเดียวกันกับภาษา OOP อื่น\nvar x = 10; function run() { var x = 20; console.log(x); //Output: 20 console.log(this.x); //Output: 10 } run();  this ใน function จะอ้างอิงถึง Window Object\n\u0026lt;button onclick=\u0026quot;console.log(this.tagName);\u0026quot;\u0026gt; Click Me \u0026lt;/button\u0026gt; //Output: BUTTON  this ใน event handler จะอ้างอิงถึง HTML Element ที่เป็นตัวทำให้เกิด event นั้นๆ\n  5. Null กับ Undefined ต่างกันยังไง ? สำหรับคนที่เคยเขียน JavaJcript น่าจะเคยเจอ error เกี่ยวกับ null และ undefined มาบ้าง ซึ่งทั้งสองอย่างก็ล้วนแต่เป็นปัญหาเกี่ยวกับตัวแปรเวลาเขียนโค้ดเหมือนๆกัน แล้วสองอย่างนี้แตกต่างกันตรงไหน?\nvar myVarA; console.log(myVarA); //Output: undefined var myVarB = null; console.log(myVarB); //Output: null   Undefined นั้นหมายถึงว่าตัวแปรนั้นถูกประกาศเรียบร้อยแล้วแต่ยังไม่ได้กำหนดค่าให้ตัวแปร Null นั้นเป็นค่าที่ใช้กำหนดให้กับตัวแปรเพื่อสื่อความหมายว่า ตัวแปรนั้นไม่มีค่าอะไร  นอกจากความหมายของทั้งสองตัวจะต่างกันแล้ว ยังมีข้อสังเกตอีกว่า undefined นั้นจะเป็นค่าเริ่มต้นที่โปรแกรมจะกำหนดให้ตัวแปรที่ถูกสร้างขึ้นแต่ยังไม่ได้กำหนดค่าเสมอ ส่วน null นั้นจะเป็นค่าที่โปรแกรมเมอร์เป็นคนกำหนดให้กับตัวแปร (รูปแกนทิชชู)\n6. For / ForEach / For-In / For-Of แบบไหนใช้ยังไง ? ในการเขียนโปรแกรมยังไงก็คงหนีไม่พ้นการใช้ for loop เพราะใช้ในการทำซ้ำงานต่างๆ โดยหลักๆที่ภาษาโปรแกรมอื่นๆมีกันก็น่าจะเป็น for และ for each ที่แต่ละคนคงจะเคยคุ้นเคยกันแล้ว พอมาเป็น javascript ก็มีเช่นกัน แต่ถ้าใครได้ลองหาข้อมูลดูอาจจะได้เจอกับ for-in และ for-of ที่การใช้งานก็ดูคล้ายกันไปหมด แล้วทีนี้เราจะเลือกใช้ for แบบไหนตอนไหนดี\nlet myArray = [1, 2, 3] for (let index = 0; index \u0026lt; myArray.length; index++) { const element = myArray[index]; console.log(element); }  //Output 1 2 3   for – เริ่มที่ตัวพื้นฐาน สำหรับ for ตัวนี้ทุกคนต้องเคยใช้กันแน่นอน โดยจะเป็นการวนลูปตามค่า index ที่กำหนดไว้\nlet myArray = [1, 2, 3] myArray.forEach(element =\u0026gt; { console.log(element); });  //Output 1 2 3  forEach – มาถึงตัวนี้ก็น่าจะรู้จักการทำงานของมันที่เหมือนกันกับภาษาอื่นๆ คือใช้เพื่อเข้าถึงข้อมูลใน Array ต่างๆ โดยที่เราไม่ต้องประกาศค่า index ในการวนลูปเอง แต่ forEach จะเข้าถึงข้อมูลใน Array ตั้งแต่ตำแหน่งแรกจนถึงสุดท้ายให้เรา\nvar dog = { name: \u0026quot;Yoyo\u0026quot;, color: \u0026quot;black\u0026quot;, age: 2 } for (const key in dog) { if (dog.hasOwnProperty(key)) { const element = dog[key]; console.log(key + \u0026quot; : \u0026quot; + element); } }  //Output name : Yoyo color : black age : 2  for…in – สำหรับ for-in ของ javascript นั้นใช้สำหรับวนลูป Object ซึ่งจะได้เป็นชื่อ properties ของ Object นั้นๆ หรือก็คือ key นั่นเอง\n// Array var myArray = [1, 2, 3]; for (const iterator of myArray) { console.log(iterator); }  //Output 1 2 3  // String var str = \u0026quot;hello\u0026quot;; for (const iterator of str) { console.log(iterator); }  //Output h e l l o  for…of – ตัวสุดท้ายกับ for…of ตัวนี้จะใช้งานได้กับ iterable object หมายความว่าอะไรก็ตามที่สามารถวนลูปได้ จะสามารถใช้ for…of ได้นั่นเอง เช่น array, set หรือแม้แต่ string ก็สามารถใช้ได้\n  นี่เป็นเพียงแค่การวนลูปด้วย for ต่างๆเท่านั้น ยังไม่นับรวม while อีก จึงขึ้นอยู่กับการใช้งาน ว่าจะเลือกใช้อันไหนให้เหมาะสมกับความต้องการของเรา\n7. Use Strict คืออะไร ? หลายคนที่เคยได้อ่านโค้ด JavaScript น่าจะเคยผ่านตากับ use strict ที่อยู่บรรทัดแรกของโค้ดมากันบ้าง แต่อาจจะไม่รู้ว่ามันมีไว้เพื่ออะไร use strict มีไว้เพื่อระบุว่าโค้ดในส่วนนั้นจะทำงานใน strict mode ซึ่งจะทำให้ใช้ตัวแปรที่ยังไม่ได้ประกาศไม่ได้ เนื่องจากใน javascript นั้นหากเรียกใช้ตัวแปรโดยไม่ได้ประกาศ var/let/const นำหน้าชื่อตัวแปร ตัวแปรนั้นจะถูกกำหนดเป็น global variables ดังนั้นเพื่อป้องกันความผิดพลาดในการประกาศค่าตัวแปรเราจึงสามารถใช้ use strict ได้\nfunction myFunction1 () { x = 6; console.log(x); //Output: 6 } myFunction1()  function myFunction2 () { \u0026quot;use strict\u0026quot;; y = 7; console.log(y); //Uncaught ReferenceError: y is not defined } myFunction2()  8. Arrow Function ( =\u0026gt; ) คืออะไร ? สำหรับคนที่เพิ่งเริ่มศึกษา JavaScript เวลาค้นหาข้อมูลอาจจะเจอกับเครื่องหมาย =\u0026gt; ที่มีคนมาตอบตามกระทู้คำถามต่างๆเช่นใน Stack Overflow แล้วงงว่ามันคืออะไร ชื่อของเครื่องหมายนี้ก็ตามหัวข้อนี้เลยคือ Arrow Function เป็นสิ่งที่มาพร้อมกับ ES6 เพื่อให้สามารถเขียนฟังก์ชันได้สั้นลง\n// แบบปกติ sayHi = function() { return \u0026quot;Hi Human\u0026quot;; }  // แบบใช้ Arrow Function sayHi = () =\u0026gt; { return \u0026quot;Hi Human\u0026quot;; }  9. String จะใช้ ‘ ’ , “ ” หรือ ? การประกาศค่าให้กับตัวแปรชนิด string ใน JavaScript เราน่าจะเคยเห็นหรือใช้ทั้ง ‘ ’ (single quote) และ “ ” (double quote) ซึ่งทำงานได้เหมือนกันทุกประการ ขึ้นอยู่กับความชอบของแต่ละคน โดยจุดที่แตกต่างกันคือ\nvar str = 'Hello it\\'s me'; console.log(str); //Output: Hello it's me   single quote – ต้องใช้ Escape character สำหรับพิมพ์ single quote\nvar str = \u0026quot;Hello from the \\\u0026quot;other\\\u0026quot; side\u0026quot;; console.log(str); //Output: Hello from the \u0026quot;other\u0026quot; side  double quote – ต้องใช้ Escape character สำหรับพิมพ์ double quote\n  จากสองแบบข้างต้นก็จะทำให้ความยากง่ายในการประกาศค่าตัวแปร string ต่างกันออกไปขึ้นอยู่กับว่าเป็นประโยคแบบไหน เราก็สามารถเลือกใช้ตามความเหมาะสมได้ แต่ยังมีอีกเครื่องหมายนึงที่ใช้ประกาศค่า string ได้ ก็คือ (backtick) ก็คือเครื่องหมายที่อยู่ปุ่มเดียวกันกับปุ่มตัวหนอนที่มักใช้สำหรับเปลี่ยนภาษากันนั่นเอง ส่วนการนำไปใช้งานนั้น\nstr = `Hello it's me from the \u0026quot;other\u0026quot; side`; console.log(str); //Output: Hello it's me from the \u0026quot;other\u0026quot; side   backtick – ไม่ต้องใช้ Escape character ในเวลาที่พิมพ์ทั้ง single quote และ double quote  จะเห็นได้ว่าการใช้ backtick นั้นช่วยให้การประกาศค่า string นั้นทำได้ง่ายขึ้น และโค้ดอ่านได้ง่าย แต่ท้ายที่สุกแล้วก็วนกลับไปที่ความถนัดของแต่ละคนหรือสไตล์ที่คนในทีมเลือกใช้กัน ที่จะเป็นตัวตัดสินว่าเราจะเลือกใช้รูปแบบไหนในการเขียนโค้ดของเราออกมา\n10. Boolean ใน Javascript อะไรบ้างที่เป็น True หรือเป็น False ใน javascript นั้นค่าความจริงหรือ Boolean นั้นมี 2 ค่าด้วยกันนั่นคือ true และ false แต่นอกจากสองอย่างนี้แล้วสิ่งอื่นๆก็ล้วนนำมาเป็นค่าความจริงได้ โดยหลักการมีง่ายๆคือ\nconsole.log(Boolean(\u0026quot;hello\u0026quot;)); // true console.log(Boolean(5)); // true console.log(Boolean(9.99)); // true console.log(Boolean(1 + 2 + 3 + 4 + 5)); // true   อะไรก็ตามที่ “มีค่า” จะนับเป็น true เช่น “hello”, 5, 9.99, 1+2+3+4+5\nconsole.log(Boolean(\u0026quot;\u0026quot;)); // false console.log(Boolean(0)); // false console.log(Boolean(-0)); // false console.log(Boolean(null)); // false console.log(Boolean(undefined)); // false  ส่วนอะไรก็ตามที่ “ไม่มีค่า” จะนับเป็น false เช่น “”, 0, -0, null, undefined\n  อ้างอิง\nJavaScript Tutorial, available in https://www.w3schools.com/js/ 2020. JavaScript reference, available in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference 2020. เรื่องของ this ใน JavaScript และวิธีการใช้ bind, call, apply, available in https://www.tamemo.com/post/118/what-is-js-this-bind-call-apply/   Written with StackEdit.\n "});index.add({'id':84,'href':'/library/tutorials/docs/articles/','title':"Articles",'content':" Articles Welcome "});index.add({'id':85,'href':'/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-1/','title':"Building a Stock Screener - Part 1",'content':" Building a Stock Screener in Python- Part 1  ที่มาบทความ .\n In this post, I’ll share how to create a stock screener — a program which can filter stocks based on user preferences — from scratch (and for free) using python. This project will be broken into 3 parts-\n Scraping data Storing data Screening data  Before we dive into programming, let’s start by asking why anyone would want to build a stock screener.\nWhy Let’s think about personal finance and investments for a second: why would someone strategically pick healthy stocks which provide a high return-on-investment while maintaining relatively low levels of risk?\nDifference between growing your money at 6%, 8% and 10%\nBecause your choice of stocks directly impacts your portfolio’s returns and can be the difference between becoming a Millionaire at age 35 vs 55. Even a few bad stocks in your portfolio can greatly decrease performance, so it’s important to carefully analyze and filter companies.\nHow So now that you know why, let’s talk about how someone could strategically pick healthy stocks which provide a high return-on-investment while maintaining relatively low levels of risk? There’s a few methods out there for people wondering, but one of the most common analysis strategies for picking companies is Technical Analysis.\nTechnical Analysis is a method by which analysts use data to find patterns and trends to generate predictions about company performance. The key word in the previous statement is data. Sources like Yahoo Finance, Bloomberg, Market Watch etc. act like central hubs for stock data. They collect, visualize and share this information with the rest of the world. Investors use these websites to analyse companies and pick the ones they see fit; thus the terminology, filtering. While individually looking through hundreds of web-pages and picking companies is a perfectly acceptable method of building a portfolio, computer scientists know better. This is a where a stock screener comes into play.\nStock Screeners A stock screener is a program which can filter stocks based on certain criteria. It can be used to analyze a large volume of companies in a relatively short period of time. Keep in mind that a stock screener is not a program that can (or should) replace religious analysis of a company’s performance before any personal investment decision is made, but rather is a way to effectively decrease the number of companies which need to be analyzed. A trivial, but important example is shown below-\nWithout any filter\nApproximately 13,547 companies are listed on Yahoo Finance. This is a huge number of companies to filter through for individual examination\nScreen without any filters\nWith a basic filter\nEven a basic screen (companies which have seen a percent change in price greater than 10%, thus have a highly positive price change) decreases the number of companies by over 90%, making individual examination a possibility.\nScreen with a basic filter\nWith a selective filter\nThe following filter is fairly selective: it is only looking at Mega Cap companies (Market Cap over $100B), with a current ratio greater than 1 (indicating good liquidity health), and an expected PEG ratio greater than 2 (indicating very good expected growth over 5 years). The list of companies is down to 9, which is a very manageable number to individually inspect.\nScreen with a fairly selective filter\nBy now I’m sure you understand the importance of having a stock screener and hope you’re excited to build one from scratch! While there are a few paid and free stock screeners available online, building one from scratch enables you to really customize your screens, implement more complicated/personalized methods and take your filtering abilities to the next level. Now let’s get down to business.\nPart 1: Scraping Data Part 1, and arguably the most important part of building a stock screener, is the ability to get your hands on the data. There are many stock data API’s available out there, but do not be fooled, most of them are fairly expensive or limit the number of requests, making them severely infeasible for a stock screener. That is why I will show you how to scrape stock information in this part. You can use the framework discussed below on different websites/data based on your needs.\nThe following are the main steps taken to scrape the data.\n Find a reliable source Determine data to be scraped Create scraping methodology Build algorithm  Find a reliable source\nThis is a website that publishes the stock information that you’re trying to scrape. Be sure to check the website’s terms and conditions regarding data scraping to avoid unnecessary problems. In this case, I’m collecting the data for educational and research purposes only, and do not wish to sell this information elsewhere. I decided to use Yahoo Finance, as it is a very reliable source of data. Additionally, they also keep their information well organized as we’ll discuss below.\nDetermine Data to be scraped\nThis step is very important, as it constraints the data that the scraper will be collecting. In order to do this, we’ll be taking a look at the typical Yahoo Finance page of a company and decide what data is relevant to us. Here’s what the main Yahoo page of Apple Inc. looks like (as of December 30, 2018):\nYahoo Finance page for Apple Inc. (AAPL)\nWhile the summary tab contains some very useful information about this stock, we’re interested in indicators which tell us more about the health of this company. For this, we’ll turn to the statistics tab, which looks like so-\nStatistics page of Yahoo Finance for Apple Inc. (AAPL)\nAs you can see, this page contains a myriad of data and is neatly arranged into tables, making it perfect for our program. We note the URL (which is shown below) and move on to the scraping methodology. You can check out the web page for Apple yourself using the link too.\nhttp://finance.yahoo.com/q/ks?s=aapl\nCreate Scraping Methodology\nBefore we can talk about the scraping methodology, you need to understand Beautiful Soup. If you already know the basics feel free to move on, but if you need a refresher, check out this article.\nThe scraping methodology refers to the method by which beautiful soup finds the relevant \u0026lt;div\u0026gt;'s \u0026lt;table\u0026gt;'s etc. inside the web page’s HTML source code. This is usually achieved by inspecting the different elements (right click -\u0026gt; inspect element) inside a web page, till you can find a consistent class, attribute etc. which captures all the data you want. Here’s some photos of me inspecting elements in the Yahoo Finance pages to further show this point.\nInspecting elements on the Yahoo Finance web page for Apple Inc. (AAPL)\nAs you can (barely) tell from the above photo, each of the name-value pairs, like Market Cap (intraday), 741.37B are displayed using \u0026lt;span\u0026gt; and \u0026lt;td\u0026gt; tags inside the same \u0026lt;tr\u0026gt; tag. Further, all of these \u0026lt;tr\u0026gt; are within the same \u0026lt;table\u0026gt; tag with a special class: table-qsp-stats. This class gives us a way to distinguish the data-tables from all other elements on the web page. On further inspection, you can also see that the class is attached to every table tag that contains relevant data.\nThis is perfect for us, as we can easily use Beautiful Soup to navigate to the table (which contains our special class name), iterate through the rows and capture relevant information. Now, we can start coding this algorithm.\nBuild Algorithm\nNow we start with our actual python program. Here’s our algorithm, laid out step-by-step-\n Create URL for given stock Extract HTML from web page Find all tables that contain class table-qsp-stats For each table, iterate through rows For each row store \u0026lt;span\u0026gt;text as key and \u0026lt;td\u0026gt; text as corresponding value in dictionary  Here’s the syntax of the function, which accepts a stock symbol (for reference):\ndef scrape_yahoo(stock):  Now building on this, we need to create the URL (using the stock symbol) and extract the HTML from the web page using urllib2 and Beautiful Soup-\nurl = ('http://finance.yahoo.com/q/ks?s=' + stock) page = urllib2.urlopen(url) soup = BeautifulSoup(page, 'html.parser')  Now we move on to finding the relevant tables and processing each of the rows.\nNote: technicals is an empty dictionary initialized earlier.\ntables = soup.findAll('table', {\u0026quot;class\u0026quot; : 'table-qsp-stats'}) for table in tables: table_body = table.find('tbody') rows = table_body.find_all('tr') for row in rows: # span tags contain the indicator name col_name = row.find_all('span') col_name = [cell.text.strip() for cell in col_name] # td tags contain the indicator values col_val = row.find_all('td') col_val = [cell.text.strip() for cell in col_val] technicals[col_name[0]] = col_val[1]  The full code for this data scraper can be found on this github repository.\nWrap up and what next? So now you have it! A way to scrape stock data off of Yahoo Finance for use in your very own stock screener. If you want to continue on in this series, feel free to check out Part 2. In part 2 we build upon this algorithm to store the data collected and then we’ll be ready to create filtering queries to wrap up the stock screener.\nIf you have any questions, feedback or comments, feel free to get in touch with me through LinkedIn, or my website.\n"});index.add({'id':86,'href':'/library/tutorials/docs/articles/data-science/web-scraping/building-stock-screener-2/','title':"Building a Stock Screener - Part 2",'content':" Building a Stock Screener in Python- Part 2 In this series, I’ll share how to create a stock screener — a program which can filter stocks based on user preferences — from scratch (and for free) using python. This project will be broken into 3 parts-\n Scraping data Storing data Screening data  If you haven’t already, check out Part 1 where I talk about scraping stock information from Yahoo Finance in under 10 minutes! In this part, we’ll focus on storing the data we’ve collected and preparing it for screening.\nRecap- Scraping In the last part, we built a web scraper to crawl through yahoo finance and collect information about companies we’re interested in. We utilized BeautifulSoup library to create the scraper and were successfully able to scrape data.\nExample from the first part scraping information about Apple, Tesla and GE\nPieces We’ll be storing the information from the stock scraper in a format which is user-friendly and ready for screening. To do this, we’ll need two things-\n List of companies to get data for List of indicators to collect data for  We eventually want to use this stored data to screen companies to invest in, so we first want a list of companies that we’re interested in. For me, I found the constituents of the S\u0026amp;P 500, which consists of 500 of the largest U.S. publicly traded companies. You can chose to use your own list, but if you want to use the S\u0026amp;P 500 as well, here’s a link.\nWe also need a list of indicators to collect data. Indicators are metrics used to predict the direction of major financial indexes or groups of securities. In my case, here’s the list of indicators which I chose-\n ‘Market Cap (intraday)’, ‘Return on Equity’, ‘Revenue’, ‘Quarterly Revenue Growth’, ‘Operating Cash Flow’, ‘Total Cash’, ‘Total Debt’, ‘Current Ratio’, ‘52-Week Change’, ‘Avg Vol (3 month)’, ‘Avg Vol (10 day)’, ‘% Held by Insiders’\n You can find the full list of indicators on the Yahoo Finance page for a security.\nCode We’re going to utilize the scraper we built in the last part, along with the list of companies and indicators as discussed above. The code for storing this data is fairly straightforward and I explain it thoroughly below.\nThe first part of the code create a list of companies to look at from a .csv file in the folder, which contains symbols, names and industries of companies we’re interested in. We then create an array of strings with the names of all the indicators we’re interested in.\nAfter this, we’ll be creating an empty pandas data frame with the columns set to the indicators to store the information about the companies. Now, similar to the previous part, we’ll iterate through the list of companies, and each indicator. For each company we’ll scrape data using our scrape_yahoo method. We’ll store the data collected in our data frame and at the end print out a message when the data is stored to keep track of our progress. Our job is not done yet though, we still need to clean the data!\nWe’ll clean the data in 3 steps. We’ll rename the first column in the data frame to “Symbol” as it contains the ticker symbol for each of our companies. Then, we’ll join our new data frame with the old symbols data frame to ensure we keep the full name and industry of the company as well. Last, we’ll drop rows with excessive NaN values. When web scraping, there’s a fair possibility to have some missing data and dropping rows with excessive missing values(\u0026lt;10 non-NaN values) will be helpful later. After this, we can save our pandas data frame to a .csv file.\nThe full code for this data storage program can be found on this github repository.\nWrap up and what next? So now you have it! A way to store scraped stock data off of Yahoo Finance for use in your very own stock screener. If you want to continue on in this series, feel free to check out Part 3 (coming in Mar. 2019). In part 3 we’ll build upon this algorithm and create a screening pipeline to select companies which match our criteria.\n ที่มาบทความ : Medium.com.\n "});index.add({'id':87,'href':'/library/tutorials/docs/articles/website/html/creating-the-layout/','title':"Creating the Layout in HTML",'content':" Website Design: Creating the Layout in HTML For this you need to be aware of the different layout options available in HTML/CSS and which of those is the right fit for your website design. Let us go through the options one by one.\nPhoto by Pankaj Patel on Unsplash\nTables — Do Not Do This! This was used earlier when the web was still in its infancy, and there wasn’t much you could do with a website except display text. The developers had got used to designing websites using \u0026lt;table\u0026gt; element and stuck to it even when new things (CSS, images, animations, small screens) came into the picture.\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;table width=\u0026quot;600px\u0026quot; cellspacing=\u0026quot;0\u0026quot; cellpadding=\u0026quot;0\u0026quot; align=\u0026quot;center\u0026quot;\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;table width=\u0026quot;600px\u0026quot; bgcolor=\u0026quot;red\u0026quot; cellspacing=\u0026quot;0\u0026quot; cellpadding=\u0026quot;0\u0026quot;\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td height=\u0026quot;130px\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Header\u0026lt;/h1\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;table width=\u0026quot;600px\u0026quot; cellspacing=\u0026quot;0\u0026quot; cellpadding=\u0026quot;0\u0026quot;\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;td height=\u0026quot;10px\u0026quot;\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td bgcolor=\u0026quot;yellow\u0026quot; width=\u0026quot;400px\u0026quot; height=\u0026quot;450px\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Main\u0026lt;/h1\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td width=\u0026quot;5px\u0026quot;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td bgcolor=\u0026quot;orange\u0026quot; width=\u0026quot;195px\u0026quot; height=\u0026quot;450px\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Aside\u0026lt;/h1\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;td height=\u0026quot;10px\u0026quot;\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;table width=\u0026quot;600px\u0026quot; height=\u0026quot;80px\u0026quot; bgcolor=\u0026quot;green\u0026quot; cellspacing=\u0026quot;0\u0026quot; cellpadding=\u0026quot;0\u0026quot;\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;h1\u0026gt;Footer\u0026lt;/h1\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Websites designed using \u0026lt;table\u0026gt; element are fixed in nature. They can’t be redesigned to handle new changes, everything will have to be rewritten completely. This is because the \u0026lt;table\u0026gt; element is meant to display only tabular data, and nothing more. So do not use it for website layout!\nWhen we look at the other options available, you will realise why it’s so bad to use the Table-based layout. Especially when you are trying to create responsive websites.\nA bit of history: When the CSS standard arrived in 1996, it helped alleviate the problems created by table-based layout. The \u0026lt;div\u0026gt; element ruled the layout design for a long time, until the CSS 2.1 standard was finally published in 2011 and float walked in to claim the throne!\nFloat — The Classical Way The CSS Float property is used to float elements in a website. For example, you can float an image next to a body of text. This is \u0026lt;float\u0026gt; in its simplest usage. The same concept can be used to design an entire website.\nimg { float: right; }  For designing an entire website, the basic idea to understand is that the \u0026lt;float\u0026gt; element can be used to design an n-column layout. We can combine this with the \u0026lt;div\u0026gt; element to create a layout as given below.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026quot;header\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;topmenu\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;content\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;sidebar\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mainbar\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;footer\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  /* Create two columns that floats next to each other */ .sidebar { float: left; width: 30%; } .mainbar { float: left; width: 70%; } /* Clear floats after the columns */ .content:after { content: \u0026quot;\u0026quot;; display: block; clear: both; }  Today, a website can be accessed from so many different devices — mobiles, tablets, laptops, PCs. So, how would you ensure that your website looks good on any device? The answer is Responsive Web Design. It has only one guiding principle: A web page should look good on any device!\nw3schools has a rather neat definition: “_Responsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones)._”\nNow, if you want to make sure that your website is responsive and looks good on all kinds of devices then you can do something like the code below.\nAdd the following \u0026lt;meta\u0026gt; element to all your web pages:\n\u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt;  Modify the CSS to add a media query:\n/* Create two columns that floats next to each other */ .sidebar { float: left; width: 30%; } .mainbar { float: left; width: 70%; } /* Use a media query to add a breakpoint at 800px: */ @media screen and (max-width: 800px) { .sidebar, .mainbar { width: 100%; /* The width is 100%, when the viewport is 800px or smaller */ } } /* Clear floats after the columns */ .content:after { content: \u0026quot;\u0026quot;; display: block; clear: both; }  This basically makes the website display as a single column for devices with resolution smaller than 800px (most tablets and all smartphones). Why do this you ask? Imagine looking at a two-column website on your mobile device and trying to read the content. It’s not appealing, is it?!\nFlex — The Responsive Way CSS Flexbox makes it quite simple to design flexible responsive layout for websites. It takes the concept behind float and streamlines it for easy adoption. The above code can be rewritten as follows:\n/* Flexbox Layout */ .content { display: flex; flex-direction: row; } /* Use a media query to add a breakpoint at 800px: */ @media screen and (max-width: 800px) { .sidebar, .mainbar { width: 100%; /* The width is 100%, when the viewport is 800px or smaller */ } }  It’s that simple.\nYou can imagine your website to be a hierarchy of Flexbox elements, starting with the body element, and diving down into the depths till you reach the individual components on each page. Once you start adding \u0026lt;flex\u0026gt; elements to your website, it will become second nature to think of your layout in terms of \u0026lt;flex\u0026gt; properties. That’s how powerful Flexbox is!\nI won’t add anything more here, because there is a beautiful website which already explains Flexbox and its properties in detail. This CSS Tricks page is my go-to reference for all things flex!\nGrid — The Future By now you should be able to spot the issue with using \u0026lt;flex\u0026gt; to design an entire layout. It is a one-dimensional tool (a row/column layout), and as such has to be adapted to be used for designing a website layout which is two-dimensional. This is why you will end up with a hierarchy of nested Flexbox elements in your layout design.\nGrid solves this by providing a two-dimensional layout that can be designed as per your requirements. The below code creates a 3-column layout of 8 items.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026quot;grid-container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;grid-item\u0026quot;\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;grid-item\u0026quot;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;grid-item\u0026quot;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;grid-item\u0026quot;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;grid-item\u0026quot;\u0026gt;5\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;grid-item\u0026quot;\u0026gt;6\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;grid-item\u0026quot;\u0026gt;7\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;grid-item\u0026quot;\u0026gt;8\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  .grid-container { display: grid; grid-template-columns: auto auto auto; } .grid-item { text-align: center; }  Going by the example above, you can design a layout of your website using the CSS Grid as follows.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026quot;grid-container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;item1\u0026quot;\u0026gt;Header\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;item2\u0026quot;\u0026gt;Menu\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;item3\u0026quot;\u0026gt;Main\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;item4\u0026quot;\u0026gt;Right\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;item5\u0026quot;\u0026gt;Footer\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  .item1 { grid-area: header; } .item2 { grid-area: menu; } .item3 { grid-area: main; } .item4 { grid-area: right; } .item5 { grid-area: footer; } .grid-container { display: grid; grid-template-areas: 'header header header header header header' 'menu main main main right right' 'menu footer footer footer footer footer'; grid-gap: 10px; } .grid-container \u0026gt; div { text-align: center; }  The grid-template-areas is a great way to structure your layout. It’s represented visually in code and is easily understandable. Comparing this with the earlier ways (the rigid structure of the tables, the cumbersome floats and the multi-level hierarchy of the flexbox), we can see how easy the CSS Grid has made designing a layout!\nAfter going through each of the above, you can see that a pattern has emerged.\n The CSS Grid is best suited for designing entire layout of the website. The CSS Flexbox is optimal for designing individual rows or columns of components. Responsive Web Design should be considered in the beginning stages of website design. You should have a pretty good idea about how your website will look on every kind of device. And finally, DO NOT use Tables for layout design.  I hope this post has been easy to understand and has added to your CSS/HTML knowledge. Please don’t hesitate to ask any questions that you may have!\nUntil the next bog post..\nOriginally published at www.amithraravi.com on December 29, 2018.\n Written with StackEdit.\n "});index.add({'id':88,'href':'/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-2/','title':"Dash by Plotly",'content':" Python for Finance: Dash by Plotly  Source.\n Part 2 of Leveraging Python for Stock Portfolio Analyses. In part 1 of this series I discussed how, since I’ve become more accustomed to using pandas, that I have signficantly increased my use of Python for financial analyses. During the part 1 post, we reviewed how to largely automate the tracking and benchmarking of a stock portfolio’s performance leveraging pandas and the Yahoo Finance API. At the end of that post you had generated a rich dataset, enabling calculations such as the relative percentage and dollar value returns for portfolio positions versus equally-sized S\u0026amp;P 500 positions during the same holding periods. You could also determine how much each position contributed to your overall portfolio return and, perhaps most importantly, if you would have been better off investing in an S\u0026amp;P 500 ETF or index fund. Finally, you used Plotly for visualizations, which made it much easier to understand which positions drove the most value, what their YTD momentum looked like relative to the S\u0026amp;P 500, and if any had traded down and you might want to consider divesting, aka hit a “Trailing Stop”.\nI learned a lot as part of building this initial process in Jupyter notebook, and I also found it very helpful to write a post which walked through the notebook, explained the code and related my thinking behind each of the visualizations. This follow-up post will be shorter than the prior one and more direct in its purpose. While I’ve continued to find the notebook that I created helpul to track my stock portfolio, it had always been my intention to learn and incorporate a Python framework for building analytical dashboards / web applications. One of the most important use cases for me is having the ability to select specific positions and a time frame, and then dynamically evaluate the relative performances of each position. In the future, I will most likely expand this evaluation case to positions I do not own but am considering acquiring. For the rest of this year, I’m looking to further develop my understanding of building web applications by also learning Flask, deploying apps with Heroku, and ideally developing some type of a data pipeline to automate the extracting and loading of new data for the end web application. While I’m still rather early on in this process, in this post I will discuss the extension of the notebook I discussed last time with my initial development using Dash by Plotly, aka Dash.\nDash by Plotly. If you have read or reference part 1, you will see that once you created the master dataframe, you used Plotly to generate the visualizations which evaluate portfolio performance relative to the S\u0026amp;P 500. Plotly is a very rich library and I prefer to create visualizations using Plotly relative to other Python visualization libraries such as Seaborn and Matplotlib. Building on this, my end goal is to have an interactive dashboard / web app for my portfolio analysis. I’m continuing to search for the optimal solution for this, and in the meantime I’ve begun exploring the use of Dash. Plotly defines Dash as a Python framework for building web applications with the added benefit that no JavaScript is required. As indicated on the landing page which I link to, it’s built on top of Plotly.js, React, and Flask.\nThe initial benefit that I’ve seen thus far is that, once you’re familiar and comfortable with Plotly, Dash is a natural extension into dashboard development. Rather than simply house your visualizations within the Jupyter notebook where you conduct your analysis, I definitely see value in creating a stand-alone and interactive web app. Dash provides increased interactivity and the ability to manipulate data with “modern UI elements like dropdowns, sliders and graphs”. This functionality directionally supports my ultimate goal for my stock portfolio analyses, including the ability to conduct ‘what if analyses’, as well as interactively research potential opportunities and quickly understand key drivers and scenarios. With all of this considered, the learning curve with Dash, at least for me, is not insignificant.\nJose Portilla’s “Interactive Python Dashboards with Plotly and Dash” To short circuit the time that it would have taken for me to read through and extensively troubleshoot Dash’s documentation, I enrolled in Jose Portilla’s Plotly and Dash course on Udemy. The detail page for that course can be found here. I have taken a few of Jose’s courses and am currently taking his Flask course. I view him as a very sound and helpful instructor – while he generally does not presume extensive programming experience as prerequisites for his courses, in this Dash course he does recommend at least a strong familiarity with Python. In particular, having a solid understanding of Plotly's syntax for visualization, including using pandas, are highly recommended. After taking the course, you will still be scratching the surface in terms of what you can build with Dash. However, I found the course to be a very helpful jump start, particularly because Jose uses datareader and financial data and examples, including dynamically pulling stock price charts.\nPorting Data from Jupyter Notebook to Interact with it in Dash. Getting Started Similar to part 1, I created another repo on GitHub with all of the files and code required to create the final Dash dashboard.\nBelow is a summary of what is included and how to get started:\n Investment Portfolio Python Notebook_Dash_blog_example.ipynb — this is very similar to the Jupyter notebook from part 1; the additions include the final two sections: a ‘Stock Return Comparisons’ section, which I built as a proof-of-concept prior to using Dash, and ‘Data Outputs’, where I create csv files of the data the analyses generate; these serve as the data sources used in the Dash dashboard. Sample stocks acquisition dates_costs.xlsx — this is the toy portfolio file, which you will use or modify for your portfolio assessments. requirements.txt — this should have all of the libraries you will need. I recommend creating a virtual environment in Anaconda, discussed further below. Mock_Portfolio_Dash.py — this has the code for the Dash dashboard which we’ll cover below.  As per my repo’s README file, I recommend creating a virtual environment using Anaconda. Here’s a quick explanation and a link to more detail on Anaconda virtual environments:\nI recommend Python 3.6 or greater so that you can run the Dash dashboard locally with the provided csv files. Here is a very thorough explanation on how to set up virtual environments in Anaconda.\nLast, as mentioned in part 1, once your environment is set up, in addition to the libraries in the requirements file, if you want the Yahoo Finance datareader piece to run in the notebook, you will also need to pip install fix-yahoo-finance within your virtual environment.\nWorking with Dash If you have followed along thus far in setting up a virtual environment using Python 3.6, and have installed the necessary libraries, you should be able to run the Python file with the Dash dashboard code.\nFor those who are less familiar: once in your virtual environment, you will need to change directory, cd, to where you have the repo’s files saved. As a quick example, if you open Anaconda Prompt and you are in your Documents folder, and the files are saved on your Desktop, you could do the following:\ncd .. # This will take you up one folder in the directory. cd Desktop # this will take you to your Desktop. dir # This is the windows command to display all files in the directory. You should see the Mock_Portfolio_Dash.py file listed. python Mock_Portfolio_Dash.py # this will run the Dash file # You will then go to your browser and input the URL where Python says your dashboard is running on localhost.  If you would like the full explanation on the Jupyter notebook and generating the portfolio data set, please refer to part 1. At the end of the Jupyter notebook, you will see the below code in the ‘Data Outputs’ section. These minor additions will send CSV files into your local directory. The first is the full portfolio dataset, from which you can generate all of the visualizations, and the second provides the list of tickers you will use in the first, new stock chart’s dropdown selection.\n# Generate the base file that will be used for Dash dashboard. merged_portfolio_sp_latest_YTD_sp_closing_high.to_csv('analyzed_portfolio.csv')  I’ll highlight some key aspects of the Mock Portfolio Python file and share how to run the dashboard locally.\nFor reference while we breakdown the .py file, below is a screen grab of the first three charts that you should see when running this Dash dashboard.\nFirst three charts in Dash Stock Portfolio Analyses dashboard.\nAt the beginning of the .py file, you import the libraries included in the requirements.txt file, and then write\napp = dash.Dash()  in order to instantiate the Dash app. You then create two dataframe objects, tickers and data. Tickers will be used for the stock tickers in one of the chart’s dropdowns, and the data dataframe is the final data set which is used for all of the visualization evaluations.\nYou wrap the entire dashboard in a Div, and then begin adding the charting components within this main Div. Lines 35–72 in the .py file produce the ‘Relative Returns Comparison’ chart, including the stock symbol dropdown, the start/end date range, the Submit button, and the chart’s output. For brevity, I’ll break down the first of the three sections within this portion of the .py file.\nhtml.H1('Relative Returns Comparison'), html.Div([html.H3('Enter a stock symbol:', style={'paddingRight': '30px'}), dcc.Dropdown( id='my_ticker_symbol', options = options, value = ['SPY'], multi = True # style={'fontSize': 24, 'width': 75} )\t]  As mentioned, using Dash means that you do not need to add JavaScript to your application. In the above code block, we label the output with an H1 tag, create another Div, and then make use of a dropdown from the dash_core_components library. You set the id to ‘my_ticker_symbol’, we’ll review where this comes in to play shortly, set a default value of ‘SPY’ from the options list (generated from tickers dataframe), and then set multi-select to be True. There is a bit of a learning curve here, at least for me, and this is where a course such as Jose Portilla’s can short circuit your learning by providing tangible examples which summarize Dash documentation – Jose actually uses a similar example to this stock list dropdown and date range picker in his course.\nBelow this, in rows 75–93, you’ll see the code for the bottom left chart on the dashboard. This chart is the same as what was provided in the Jupyter Notebook in part 1, but I find using Dash for all of these outputs in a dashboard layout to be a better user experience and easier to work with than within Jupyter notebook (I continue to prefer notebooks for conducting analysis to anything else I’ve used to-date).\n# YTD Returns versus S\u0026amp;P 500 section html.H1('YTD and Total Position Returns versus S\u0026amp;P 500'), dcc.Graph(id='ytd1', figure = {'data':[ go.Bar( x = data['Ticker'][0:20], y = data['Share YTD'][0:20], name = 'Ticker YTD'), go.Scatter( x = data['Ticker'][0:20], y = data['SP 500 YTD'][0:20], name = 'SP500 YTD') ], 'layout':go.Layout(title='YTD Return vs S\u0026amp;P 500 YTD', barmode='group', xaxis = {'title':'Ticker'}, yaxis = {'title':'Returns', 'tickformat':\u0026quot;.2%\u0026quot;} )}, style={'width': '50%', 'display':'inline-block'} )  For those comfortable using Plotly, the syntax should be familiar in terms of creating the data and layout objects required to plot the Plotly figure. This syntax included above is different than that used for the charts in the notebook, as I prefer to create traces, generate the data object based on these traces, and use the dict syntax within the layout object. In taking Jose’s course and reviewing the Dash documentation, I’ve just found it easier to conform to this syntax in Dash – it can sometimes get unwieldy when troubleshooting closing tags, parentheses, curly braces, et al, so I’ve focused on getting accustomed to this structure.\n@app.callback(Output('my_graph', 'figure'), [Input('submit-button', 'n_clicks')], [State('my_ticker_symbol', 'value'), State('my_date_picker', 'start_date'), State('my_date_picker', 'end_date') ]) def update_graph(n_clicks, stock_ticker, start_date, end_date): start = datetime.strptime(start_date[:10], '%Y-%m-%d') end = datetime.strptime(end_date[:10], '%Y-%m-%d') traces = [] for tic in stock_ticker: df = web.DataReader(tic, 'iex', start, end) traces.append({'x':df.index, 'y':(df['close']/df['close'].iloc[0])-1, 'name': tic}) fig = { 'data': traces, 'layout': {'title':stock_ticker} } return fig if __name__ == '__main__': app.run_server()  Lines 229–252 (provided above) drive the interactivity for the first ‘Relative Returns Comparison’ chart. Below is a quick overview of what this code is doing:\n In order to create interactive charts, Dash uses a callback decorator: “The “inputs” and “outputs” of our application interface are described declaratively through the app.callback decorator.” In the app callback, we output the dcc.Graph specified earlier with an id of ‘my_graph’. You use the Submit button as the input, and we have three default states, ‘my_ticker_symbol’ with the default ‘SPY’ value declared in the dcc.Dropdown discussed earlier, as well as a default start date of 1/1/2018 and end date of today. Below the callback is the function the callback decorator wraps. As described in Dashdocumentation, when an input property changes, the function the decorator wraps is called automatically. “Dash provides the function with the new value of the input property as an input argument and Dash updates the property of the output component with whatever was returned by the function.” Within the for loop, for the y-values I divide the closing price on any given day, df['close'], by the first closing price in the series generated by the date range provided (df['close'].iloc[0]). I do this to look at the relative performance of two or more stocks indexed at 0, the start of the date range. Given the large differences in share price, this makes it much easier to compare the relative performance of a stock trading over $1,800 (e.g., AMZN) versus another trading below $100 (e.g., WMT). I’d quickly mention that there is sometimes a misconception that a stock is “cheap” if it trades at a lower price and “expensive” if it trades where AMZN currently does. Given this misconception, companies will sometimes split their stock in order to make the share price appear more affordable to small investors even though the company’s value / market cap remain the same. Regardless, the benefit of this chart is that it allows you to quickly spot over / under-performance of a stock relative to the S\u0026amp;P 500 using dynamic date ranges. This provides useful information regarding value contribution to your overall portfolio, and also when it might be time to consider divesting an under-performing holding.  Conclusion and Future considerations. This concludes my initial review of Dash for stock portfolio analyses. As before, you have an extensible Jupyter notebook and portfolio dataset, which you can now read out as a csv file and review in an interactive Dash dashboard. As discussed before in Part 1, this approach continues to have some areas for improvement, including the need to incorporate dividends as part of total shareholder return and the need to be able to evaluate both active and all (including divested) positions.\nThe most significant benefits I’ve found with this approach include the additional interactivity, and my preference for the dashboard layout of all of the charts versus in separate cells in Jupyter notebook. In the future, I’m planning to incorporate greater interactivity, including more ‘what-if-analyses’ to assess individual stock’s contribution to overall performance.\nThe additional options that I’m currently considering to deliver an end-to-end web application with a data pipeline include:\n Mode Analytics with Google BigQuery: I’ve written before about how much I enjoyed using Mode Analytics at my former company. The benefits of Mode include the fact that it already supports rich visualizations (no coding required), including a built in Python notebook. However, I do not believe there’s a way in Mode to extract data from a finance API, including Yahoo Finance and IEX. The data from those API sources could be read in to a private database, e.g., using Google BigQuery, which you could connect to Mode. However, for now this seems like a limitation as I believe more of my future charts and use cases will require data pulled from APIs (as opposed to stored in a database). Heroku with Postgres and Pipeline: As part of Jose’s course, he shows you how to deploy a Dashapp to Heroku (another benefit of his course). As of now, I believe that leveraging Heroku’s app functionality is a potential long-term solution. This is another reason why I’m taking Jose’s Flaskcourse; I’ve never built a web app, and he shows how to use SQLAlchemy as the database for the Flask app. Furthering my understanding of deploying an app with a database on Heroku, my focus will be determining the best way to pull in finance-API data to be analyzed within an interactive web app which I can refresh with new data on a specified schedule.  The long-term solution requires a lot more learning for me, but it’s definitely a challenge that I want to take on the rest of this year. I hope that you found this post useful, and I welcome any feedback in the comments, including additional options which I have not mentioned and you believe would be better suited for this application and its analyses.\nIf you enjoyed this post, it would be awesome if you would click the “claps” icon to let me know and to help increase circulation of my work.\nFeel free to also reach out to me on twitter, @kevinboller, and my personal blog can be found here. Thanks for reading!\n"});index.add({'id':89,'href':'/library/tutorials/docs/','title':"Docs",'content':""});index.add({'id':90,'href':'/library/tutorials/docs/articles/data-science/web-scraping/web-scrape-yahoo-finance/','title':"How to scrape Yahoo Finance",'content':" How to scrape Yahoo Finance and extract fundamental stock market data using Python, LXML, and Pandas In this blog post I’ll show you how to scrape Income Statement, Balance Sheet, and Cash Flow data for companies from Yahoo Finance using Python, LXML, and Pandas.\nI’ll use data from Mainfreight NZ (MFT.NZ) as an example, but the code will work for any stock symbol on Yahoo Finance.\nThe screenshot below shows a Pandas DataFrame with MFT.NZ balance sheet data, which you can expect to get by following the steps in this blog post:\nAfter taking you step by step on how to fetch data from the balance sheet, I’ll show you how to generalise the code to also generate a DataFrame containing data from the Income Statement, and Cash Flow statement.\nAfter creating the Pandas DataFrames, I’ll then show you how to export everything to an Excel file, so you’ll have output that looks something like this:\nThis post was last updated in October, 2019. Prior to this, Yahoo Finance conveniently had all this data in a regular HTML table, which made extracting the data super easy. Since then, they’ve updated the page with a new structure, which was a wee bit tricker to get the data from. Fortunately, it’s still possible. Read on to find out how.\nDisclaimers Before we start, a few disclaimers:\n This code doesn’t come with any guarantee or warranty. I’m not a financial advisor. This blog post doesn’t represent financial advice. I don’t recommend the use of this code for any investment decisions. This code is designed for personal use, and isn’t designed for high-volume extractions. Use the code at your own risk.  Prerequisites Make sure you have installed the Anaconda distribution of Python .. this includes Jupyter Notebook, which we’ll use throughout this blog post.\nNow we begin!\nFind the ticker symbol In this case, we’ll be scraping data for Mainfreight NZ.\nIn Yahoo Finance, the symbol for Mainfreight is MFT.NZ:\nTake a look at the Balance Sheet data that we’re going to scrape. Here’s an example of some of the financial data we’ll be wanting to extract. Take note of the data displayed. Once we’ve scraped the data, we’ll cross-check it to ensure the scraping was accurate.\nInspect the page source Open up the Chrome developer tools, and inspect the page source. If you inspect the “Cash And Cash Equivalents” row, you’ll see something like this:\nNote that:\n Table rows in the table have the class D(tbr) Values such as Cash And Cash Equivalents and 115,184 are within a span within each row This is true for all rows in the table, including the first row titled Breakdown with dates such as 3/31/2019  Because of this, we can use XPath queries to extract the data that we want.\nScrape some balance sheet data Open up Jupyter Notebook, and execute the following code block:\nfrom datetime import datetime import lxml from lxml import html import requests import numpy as np import pandas as pd symbol = 'MFT.NZ' url = 'https://finance.yahoo.com/quote/' + symbol + '/balance-sheet?p=' + symbol # Set up the request headers that we're going to use, to simulate # a request by the Chrome browser. Simulating a request from a browser # is generally good practice when building a scraper headers = { 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'en-US,en;q=0.9', 'Cache-Control': 'max-age=0', 'Pragma': 'no-cache', 'Referrer': 'https://google.com', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36' } # Fetch the page that we're going to parse, using the request headers # defined above page = requests.get(url, headers) # Parse the page with LXML, so that we can start doing some XPATH queries # to extract the data that we want tree = html.fromstring(page.content) # Smoke test that we fetched the page by fetching and displaying the H1 element tree.xpath(\u0026quot;//h1/text()\u0026quot;)  You should see some output which looks like the following:\nReading the financial data Add a new cell to your Jupyter notebook, and add the following:\ntable_rows = tree.xpath(\u0026quot;//div[contains(@class, 'D(tbr)')]\u0026quot;) # Ensure that some table rows are found; if none are found, then it's possible # that Yahoo Finance has changed their page layout, or have detected # that you're scraping the page. assert len(table_rows) \u0026gt; 0 parsed_rows = [] for table_row in table_rows: parsed_row = [] el = table_row.xpath(\u0026quot;./div\u0026quot;) none_count = 0 for rs in el: try: (text,) = rs.xpath('.//span/text()[1]') parsed_row.append(text) except ValueError: parsed_row.append(np.NaN) none_count += 1 if (none_count \u0026lt; 4): parsed_rows.append(parsed_row) df = pd.DataFrame(parsed_rows) df  After executing the code, you should see output which looks like:\nThere are a few observations to be taken from the screenshot of the Pandas DataFrame above:\n The header row contains index values (0, 1, 2, 3, etc), rather than useful column names. The first row of the table contains dates. The first column contains account names. Rows such as Short Term Investments contain “None” where there are dashes (which represent no value) in Yahoo Finance, and 0’s when there are 0’s.  Cross-check this output with the Balance Sheet in Yahoo Finance. The data should match. For example:\nNext, we’ll do some data cleanups and transformations to make the data more useful.\nClean up the data Because we’re using Pandas, it’ll be more convenient if the columns are the account names, and the rows are indexed by Date, so let’s do that now:\ndf = pd.DataFrame(parsed_rows) df = df.set_index(0) # Set the index to the first column: 'Period Ending'. df = df.transpose() # Transpose the DataFrame, so that our header contains the account names # Rename the \u0026quot;Breakdown\u0026quot; column to \u0026quot;Date\u0026quot; cols = list(df.columns) cols[0] = 'Date' df = df.set_axis(cols, axis='columns', inplace=False) df  You should now see output which looks like:\nMuch better!\nNow, let’s look at the data types of these columns:\ndf.dtypes  A few observations:\n Period Ending is of type ‘object’ when it should be a date type. We’re not going to be able to convert this to a date column since Income Statement and Statement of Cash Flows have “ttm” as the date value of the first column. All other columns such as Cash and Cash Equivalents are also of type ‘object’ when they should be numeric.  Let’s do the conversion to numeric:\nnumeric_columns = list(df.columns)[1::] # Take all columns, except the first (which is the 'Date' column) for column_name in numeric_columns: df[column_name] = df[column_name].str.replace(',', '') # Remove the thousands separator df[column_name] = df[column_name].astype(np.float64) # Convert the column to float64 df.dtypes  The numeric columns should be now of type float64:\nLet’s have another look at the DataFrame,:\ndf  Which should output something something like:\nLooking good! Now the Balance Sheet data has been fully scraped, with correct data types, in a form that’s ready to use.\nScraping Income Statement data from Yahoo Finance Now we’ll create a more generalised form of the code above, by combining the code into a method.\nfrom datetime import datetime import lxml from lxml import html import requests import numpy as np import pandas as pd def get_page(url): # Set up the request headers that we're going to use, to simulate # a request by the Chrome browser. Simulating a request from a browser # is generally good practice when building a scraper headers = { 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'en-US,en;q=0.9', 'Cache-Control': 'max-age=0', 'Pragma': 'no-cache', 'Referrer': 'https://google.com', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36' } return requests.get(url, headers) def parse_rows(table_rows): parsed_rows = [] for table_row in table_rows: parsed_row = [] el = table_row.xpath(\u0026quot;./div\u0026quot;) none_count = 0 for rs in el: try: (text,) = rs.xpath('.//span/text()[1]') parsed_row.append(text) except ValueError: parsed_row.append(np.NaN) none_count += 1 if (none_count \u0026lt; 4): parsed_rows.append(parsed_row) return pd.DataFrame(parsed_rows) def clean_data(df): df = df.set_index(0) # Set the index to the first column: 'Period Ending'. df = df.transpose() # Transpose the DataFrame, so that our header contains the account names # Rename the \u0026quot;Breakdown\u0026quot; column to \u0026quot;Date\u0026quot; cols = list(df.columns) cols[0] = 'Date' df = df.set_axis(cols, axis='columns', inplace=False) numeric_columns = list(df.columns)[1::] # Take all columns, except the first (which is the 'Date' column) for column_name in numeric_columns: df[column_name] = df[column_name].str.replace(',', '') # Remove the thousands separator df[column_name] = df[column_name].astype(np.float64) # Convert the column to return df def scrape_table(url): # Fetch the page that we're going to parse page = get_page(url); # Parse the page with LXML, so that we can start doing some XPATH queries # to extract the data that we want tree = html.fromstring(page.content) # Fetch all div elements which have class 'D(tbr)' table_rows = tree.xpath(\u0026quot;//div[contains(@class, 'D(tbr)')]\u0026quot;) # Ensure that some table rows are found; if none are found, then it's possible # that Yahoo Finance has changed their page layout, or have detected # that you're scraping the page. assert len(table_rows) \u0026gt; 0 df = parse_rows(table_rows) df = clean_data(df) return df symbol = 'MFT.NZ' balance_sheet_url = 'https://finance.yahoo.com/quote/' + symbol + '/balance-sheet?p=' + symbol df_balance_sheet = scrape_table(balance_sheet_url) df_balance_sheet  You should get the same output as the final balance sheet above. The only change will be that the ‘Period Ending’ column is now called ‘Date’.\nNow, let’s try the same method with the URL for income statement:\ndf_income_statement = scrape_table('https://finance.yahoo.com/quote/' + symbol + '/financials?p=' + symbol) df_income_statement  Cross check these values with the income statement on yahoo finance:\nand they match!\nScraping Statement of Cash Flows data from Yahoo Finance Now that we’ve got a generic method that can be used on the Balance Sheet, and Income Statement, let’s try it on the Cash Flow statement.\ndf_cash_flow = scrape_table('https://finance.yahoo.com/quote/' + symbol + '/cash-flow?p=' + symbol) df_cash_flow  Cross check these values with the cash flow statement on Yahoo Finance:\nand they match!\nNow you’ve got the following Pandas DataFrames:\n df_cash_flow, containing data scraped from the Statement of Cash Flows df_income_statement, containing data scraped from the Income Statement df_balance_sheet, containing data scraped from the Balance Sheet  Exporting to Excel It’s possible to export the Pandas DataFrame to Excel via ExcelWriter.\nBelow is the code to export to an Excel file with three worksheets; Income Statement, Balance Sheet, and Statement of Cash Flows\ndate = datetime.today().strftime('%Y-%m-%d') writer = pd.ExcelWriter(symbol + '-' + date + '-scraped.xlsx') df_income_statement.to_excel(writer,'Income Statement') df_balance_sheet.to_excel(writer,'Balance Sheet') df_cash_flow.to_excel(writer,'Statement of Cash Flows') writer.save()  I imported the file into Google Sheets, and got the following:\n Source: MattButton.com.\n "});index.add({'id':91,'href':'/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_2/','title':"Quantitative Trading Strategies",'content':" Python for Finance, Part 2: Intro to Quantitative Trading Strategies In Python for Finance, Part I, we focused on using Python and Pandas to\n retrieve financial time-series from free online sources (Yahoo), format the data by filling missing observations and aligning them, calculate some simple indicators such as rolling moving averages and visualise the final time-series.  As a reminder, the dataframe containing the three “cleaned” price timeseries has the following format:\nimport pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns sns.set(style='darkgrid', context='talk', palette='Dark2') data = pd.read_pickle('./data.pkl') data.head(10)     Date AAPL MSFT ^GSPC     03/01/2000 3.625643 39.33463 1455.219971   04/01/2000 3.319964 38.0059 1399.420044   05/01/2000 3.36854 38.406628 1402.109985   06/01/2000 3.077039 37.12008 1403.449951   07/01/2000 3.222794 37.60517 1441.469971   10/01/2000 3.166112 37.879354 1457.599976   11/01/2000 3.004162 36.90917 1438.560059   12/01/2000 2.823993 35.706986 1432.25   13/01/2000 3.133722 36.381896 1449.680054   14/01/2000 3.253159 37.879354 1465.150024    has the following format:\n# Calculating the short-window moving average short_rolling = data.rolling(window=20).mean() short_rolling.head() has the following format:  # Calculating the short-window moving average long_rolling = data.rolling(window=100).mean() long_rolling.tail()     Date AAPL MSFT ^GSPC     26/12/2016 110.958205 58.41818 2176.628791   27/12/2016 111.047874 58.476117 2177.50018   28/12/2016 111.1405889 58.532936 2178.24449   29/12/2016 111.233698 58.586112 2178.879189   30/12/2016 111.31527 58.63526 2179.42699    General considerations about trading strategies There are several ways one can go about when a trading strategy is to be developed. One approach would be to use the price time-series directly and work with numbers that correspond to some monetary value.\nFor example, a researcher could be working with time-series expressing the price of a given stock, like the time-series we used in the previous article. Similarly, if working with fixed income instruments, e.g. bonds, one could be using a time-series expressing the price of the bond as a percentage of a given reference value, in this case the par value of the bond. Working with this type of time-series can be more intuitive as people are used to thinking in terms of prices. However, price time-series have some drawbacks. Prices are usually only positive, which makes it harder to use models and approaches which require or produce negative numbers. In addition, price time-series are usually non-stationary, that is their statistical properties are less stable over time.\nBoth of these are trivially calculated using Pandas:\n# Relative returns returns = data.pct_change(1) returns.head()  # Log returns - First the logarithm of the prices is taken and the the difference of consecutive (log) observations log_returns = np.log(data).diff() log_returns.head()  fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(16,12)) for c in log_returns: ax1.plot(log_returns.index, log_returns[c].cumsum(), label=str(c)) ax1.set_ylabel('Cumulative log returns') ax1.legend(loc='best') for c in log_returns: ax2.plot(log_returns.index, 100*(np.exp(log_returns[c].cumsum()) - 1), label=str(c)) ax2.set_ylabel('Total relative returns (%)') ax2.legend(loc='best') plt.show()  So this simple investing strategy would yield a total return of more than 325% in the course of almost 16 years.\nHow does this translate to a yearly performance? Since we have kept all weekdays in our portfolio, there are 52×5=260 weekdays each year. There are 4435 days in our simulation which corresponds roughly to 16.92 years. We will be calculating the average geometric return, that is an average return r¯ which when compounded for 16.92 years will produce the total relative return of 325.14%. So we need to solve:\n# Calculating the time-related parameters of the simulation days_per_year = 52 * 5 total_days_in_simulation = data.shape[0] number_of_years = total_days_in_simulation / days_per_year # The last data point will give us the total portfolio return total_portfolio_return = total_relative_returns[-1] # Average portfolio return assuming compunding of returns average_yearly_return = (1 + total_portfolio_return)**(1 / number_of_years) - 1 print('Total portfolio return is: ' + '{:5.2f}'.format(100 * total_portfolio_return) + '%') print('Average yearly return is: ' + '{:5.2f}'.format(100 * average_yearly_return) + '%')  Total portfolio return is: 325.14% Average yearly return is: 8.85%\nWhat next? Our strategy is a very simple example of a buy-and-hold strategy. The investor simply splits up the available funds in the three assets and keeps the same position throughout the period under investigation. Although simple, the strategy does produce a healthy 8.85% per year.\nHowever, the simulation is not completely accurate. Let us not forget that we have used ALL weekdays in our example, but we do know that on some days the markets are not trading. This will not affect the strategy we presented as the returns on the days the markets are closed are 0, but it may potentially affect other types of strategies. Furthermore, the weights here are constant over time. Ideally, we would like weights that change over time so that we can take advantage of price swings and other market events.\nAlso, we have said nothing at all about the risk of this strategy. Risk is the most important consideration in any investment strategy and is closely related to the expected returns. In what follows, we will start designing a more complex strategy, the weights of which will not be constant over time. At the same time we will start looking into the risk of the strategy and present appropriate metrics to measure it. Finally, we will look into the issue of optimizing the strategy parameters and how this can improve our return to risk profile.\nSee Part 3 of this series: Moving Average Trading Strategies. \u0026gt; Written with StackEdit.\n"});index.add({'id':92,'href':'/library/tutorials/docs/articles/data-science/web-scraping/request-and-beautifulsoup/','title':"Requests and BeautifulSoup",'content':" Ultimate Guide to Web Scraping with Python Part 1: Requests and BeautifulSoup After the 2016 election I became much more interested in media bias and the manipulation of individuals through advertising. This series will be a walkthrough of a web scraping project that monitors political news from both left and right wing media outlets and performs an analysis on the rhetoric being used, the ads being displayed, and the sentiment of certain topics.\nThe first part of the series will we be getting media bias data and focus on only working locally on your computer, but if you wish to learn how to deploy something like this into production, feel free to leave a comment and let me know.\nLimit your impact when scraping Every time you load a web page you\u0026rsquo;re making a request to a server, and when you\u0026rsquo;re just a human with a browser there\u0026rsquo;s not a lot of damage you can do. With a Python script that can execute thousands of requests a second if coded incorrectly, you could end up costing the website owner a lot of money and possibly bring down their site (see Denial-of-service attack (DoS)).\nWith this in mind, we want to be very careful with how we program scrapers to avoid crashing sites and causing damage. Every time we scrape a website we want to attempt to make only one request per page. We don\u0026rsquo;t want to be making a request every time our parsing or other logic doesn\u0026rsquo;t work out, so we need to parse only after we\u0026rsquo;ve saved the page locally.\nIf I\u0026rsquo;m just doing some quick tests, I\u0026rsquo;ll usually start out in a Jupyter notebook because you can request a web page in one cell and have that web page available to every cell below it without making a new request. Since this article is available as a Jupyter notebook, you will see how it works if you choose that format.\nHow to save HTML locally After we make a request and retrieve a web page\u0026rsquo;s content, we can store that content locally with Python\u0026rsquo;s open() function. To do so we need to use the argument wb, which stands for \u0026ldquo;write bytes\u0026rdquo;. This let\u0026rsquo;s us avoid any encoding issues when saving.\nBelow is a function that wraps the open() function to reduce a lot of repetitive coding later on:\ndef save_html(html, path): with open(path, 'wb') as f: f.write(html) save_html(r.content, 'google_com')  Assume we have captured the HTML from google.com in html, which you\u0026rsquo;ll see later how to do. After running this function we will now have a file in the same directory as this notebook called google_com that contains the HTML.\nHow to open/read HTML from a local file To retrieve our saved file we\u0026rsquo;ll make another function to wrap reading the HTML back into html. We need to use rb for \u0026ldquo;read bytes\u0026rdquo; in this case.\ndef open_html(path): with open(path, 'rb') as f: return f.read() html = open_html('google_com')  The open function is doing just the opposite: read the HTML from google_com. If our script fails, notebook closes, computer shutsdown, etc., we no longer need to request google.com again, lessening our impact on their servers. While it doesn\u0026rsquo;t matter much with Google since they have a lot of resources, smaller sites with smaller servers will benefit from this.\nI save almost every page and parse later when web scraping as a safety precaution.\nFollow the rules for scrapers and bots Each site usually has a robots.txt on the root of their domain. This is where the website owner explicitly states what bots are allowed to do on their site. Simply go to example.com/robots.txt and you should find a text file that looks something like this:\nUser-agent: * Crawl-delay: 10 Allow: /pages/ Disallow: /scripts/ # more stuff  The User-agent field is the name of the bot and the rules that follow are what the bot should follow. Some robots.txt will have many User-agents with different rules. Common bots are googlebot, bingbot, and applebot, all of which you can probably guess the purpose and origin of.\nWe don\u0026rsquo;t really need to provide a User-agent when scraping, so User-agent: * is what we would follow. A * means that the following rules apply to all bots (that\u0026rsquo;s us).\nThe Crawl-delay tells us the number of seconds to wait before requests, so in this example we need to wait 10 seconds before making another request.\nAllow gives us specific URLs we\u0026rsquo;re allowed to request with bots, and vice versa for Disallow.\nIn this example we\u0026rsquo;re allowed to request anything in the /pages/ subfolder which means anything that starts with example.com/pages/. On the other hand, we are disallowed from scraping anything from the /scripts/ subfolder.\nMany times you\u0026rsquo;ll see a * next to Allow or Disallow which means you are either allowed or not allowed to scrape everything on the site.\nSometimes there will be a disallow all pages followed by allowed pages like this:\nDisallow: * Allow: /pages/  This means that you\u0026rsquo;re not allowed to scrape anything except the subfolder /pages/. Essentially, you just want to read the rules in order where the next rule overrides the previous rule.\nScraping Project: Getting Media Bias Data This project will primarily be run through a Jupyter notebook, which is done for teaching purposes and is not the usual way scrapers are programmed. After showing you the pieces, we\u0026rsquo;ll put it all together into a Python script that can be run from command line or your IDE of choice.\nMaking web requests With Python\u0026rsquo;s requests library we\u0026rsquo;re getting a web page by using get() on the URL. The response r contains many things, but using r.content will give us the HTML. Once we have the HTML we can then parse it for the data we\u0026rsquo;re interested in analyzing.\nThere\u0026rsquo;s an interesting website called AllSides that has a media bias rating table where users can agree or disagree with the rating.\nSince there\u0026rsquo;s nothing in their robots.txt that disallows us from scraping this section of the site, I\u0026rsquo;m assuming it\u0026rsquo;s okay to go ahead and extract this data for our project. Let\u0026rsquo;s request the this first page:\n!pip install requests  import requests url = 'https://www.allsides.com/media-bias/media-bias-ratings' r = requests.get(url) print(r.content[:100])  Since we essentially have a giant string of HTML, we can print a slice of 100 characters to confirm we have the source of the page. Let\u0026rsquo;s start extracting data.\nParsing HTML with BeautifulSoup What does BeautifulSoup do? We used requests to get the page from the AllSides server, but now we need the BeautifulSoup library to parse HTML and XML. When we pass our HTML to the BeautifulSoup constructor we get an object in return that we can then navigate like the original tree structure of the DOM.\nThis way we can find elements using names of tags, classes, IDs, and through relationships to other elements, like getting the children and siblings of elements.\nCreating a new soup object We create a new BeautifulSoup object by passing the constructor our newly acquired HTML content and the type of parser we want to use:\n!pip install beautifulsoup4  from bs4 import BeautifulSoup soup = BeautifulSoup(r.content, 'html.parser')  This soup object defines a bunch of methods — many of which can achieve the same result — that we can use to extract data from the HTML. Let\u0026rsquo;s start with finding elements.\nFinding elements and data To find elements and data inside our HTML we\u0026rsquo;ll be using select_one, which returns a single element, and select, which returns a list of elements (even if only one item exists). Both of these methods use CSS selectors to find elements, so if you\u0026rsquo;re rusty on how CSS selectors work here\u0026rsquo;s a quick refresher:\nA CSS selector refresher\n To get a tag, such as \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt;, \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;, use the naked name for the tag. E.g. select_one('a') gets an anchor/link element, select_one('body') gets the body element\n .temp gets an element with a class of temp, E.g. to get \u0026lt;a class=\u0026quot;temp\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; use select_one('.temp')\n #temp gets an element with an id of temp, E.g. to get \u0026lt;a id=\u0026quot;temp\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; use select_one('#temp')\n .temp.example gets an element with both classes temp and example, E.g. to get \u0026lt;a class=\u0026quot;temp example\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; use select_one('.temp.example')\n .temp a gets an anchor element nested inside of a parent element with class temp, E.g. to get \u0026lt;div class=\u0026quot;temp\u0026quot;\u0026gt;\u0026lt;a\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; use select_one('.temp a'). Note the space between .temp and a.\n .temp .example gets an element with class example nested inside of a parent element with class temp, E.g. to get \u0026lt;div class=\u0026quot;temp\u0026quot;\u0026gt;\u0026lt;a class=\u0026quot;example\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; use select_one('.temp .example'). Again, note the space between .temp and .example. The space tells the selector that the class after the space is a child of the class before the space.\n ids, such as \u0026lt;a id=one\u0026gt;\u0026lt;/a\u0026gt;, are unique so you can usually use the id selector by itself to get the right element. No need to do nested selectors when using ids.\n  There\u0026rsquo;s many more selectors for for doing various tasks, like selecting certain child elements, specific links, etc., that you can look up when needed. The selectors above get us pretty close to everything we would need for now.\nTips on figuring out how to select certain elements\nMost browsers have a quick way of finding the selector for an element using their developer tools. In Chrome, we can quickly find selectors for elements by\n Right-click on the the element then select \u0026ldquo;Inspect\u0026rdquo; in the menu. Developer tools opens and and highlights the element we right-clicked\n Right-click the code element in developer tools, hover over \u0026ldquo;Copy\u0026rdquo; in the menu, then click \u0026ldquo;Copy selector\u0026rdquo;\n  Sometimes it\u0026rsquo;ll be a little off and we need to scan up a few elements to find the right one. Here\u0026rsquo;s what it looks like to find the selector and Xpath, another type of selector, in Chrome:\n Let\u0026rsquo;s start! Getting data out of a table Our data is housed in a table on AllSides, and by inspecting the header element we can find the code that renders the table and rows. What we need to do is select all the rows from the table and then parse out the information from each row.\n\nSimplifying the table\u0026rsquo;s HTML, the structure looks like this (comments \u0026lt;!-- --\u0026gt; added by me):\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;!-- header information --\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr class=\u0026quot;odd views-row-first\u0026quot;\u0026gt; \u0026lt;!-- begin table row --\u0026gt; \u0026lt;td class=\u0026quot;views-field views-field-title source-title\u0026quot;\u0026gt; \u0026lt;!-- table cell --\u0026gt; \u0026lt;!-- outlet name --\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td class=\u0026quot;views-field views-field-field-bias-image\u0026quot;\u0026gt; \u0026lt;!-- table cell --\u0026gt; \u0026lt;!-- bias data --\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td class=\u0026quot;views-field views-field-nothing-1 what-do-you-think\u0026quot;\u0026gt; \u0026lt;!-- table cell --\u0026gt; \u0026lt;!-- agree / disagree buttons --\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td class=\u0026quot;views-field views-field-nothing community-feedback\u0026quot;\u0026gt; \u0026lt;!-- table cell --\u0026gt; \u0026lt;!-- agree / disagree data --\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;!-- end table row --\u0026gt; \u0026lt;!-- more rows --\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt;  So to get each row, we just select all \u0026lt;tr\u0026gt; inside \u0026lt;tbody\u0026gt;:\nrows = soup.select('tbody tr')  tbody tr tells the selector to extract all \u0026lt;tr\u0026gt; (table row) tags that are children of the \u0026lt;tbody\u0026gt; body tag. If there were more than one table on this page we would have to make a more specific selector, but since this is the only table, we\u0026rsquo;re good to go.\nNow we have a list of HTML table rows that each contain four cells:\n News source name and link\n Bias data\n Agreement buttons\n Community feedback data\n  Below is a breakdown of how to extract each one.\nNews source name  Let\u0026rsquo;s look at the first cell:\n\u0026lt;td class=\u0026quot;views-field views-field-title source-title\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;/news-source/abc-news-media-bias\u0026quot;\u0026gt;ABC News\u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt;  The outlet name (ABC News) is the text of an anchor tag that\u0026rsquo;s nested inside a \u0026lt;td\u0026gt; tag, which is a cell — or table data tag.\nGetting the outlet name is pretty easy: just get the first row in rows and run a select_one off that object:\nrow = rows[0] name = row.select_one('.source-title').text.strip() print(name)  The only class we needed to use in this case was .source-title since .views-field looks to be just a class each row is given for styling and doesn\u0026rsquo;t provide any uniqueness.\nNotice that we didn\u0026rsquo;t need to worry about selecting the anchor tag a that contains the text. When we use .text is gets all text in that element, and since \u0026ldquo;ABC News\u0026rdquo; is the only text, that\u0026rsquo;s all we need to do. Bear in mind that using select or select_one will give you the whole element with the tags included, so we need .text to give us the text between the tags.\n.strip() ensures all the whitespace surrounding the name is removed. This is a good thing to always do since many websites use whitespace as a way to visually pad the text inside elements.\nYou\u0026rsquo;ll notice that we can run BeautifulSoup methods right off one of the rows. That\u0026rsquo;s because the rows become their own BeautifulSoup objects when we make a select from another BeautifulSoup object. On the other hand, our name variable is no longer a BeautifulSoup object because we called .text.\nNews source page link We also need the link to this news source\u0026rsquo;s page on AllSides. If we look back at the HTML we\u0026rsquo;ll see that in this case we do want to select the anchor in order to get the href that contains the link, so let\u0026rsquo;s do that:\nallsides_page = row.select_one('.source-title a')['href'] allsides_page = 'https://www.allsides.com' + allsides_page print(allsides_page)  It is a relative path in the HTML, so we prepend the site\u0026rsquo;s URL to make it a link we can request later.\nGetting the link was a bit different than just selecting an element. We had to access an attribute (href) of the element, which is done using brackets, like how we would access a Python dictionary. This will be the same for other attributes of elements, like src in images and videos.\nBias rating  We can see that the rating is displayed as an image so how can we get the rating in words? Looking at the HTML notice the link that surrounds the image has the text we need:\n\u0026lt;td class=\u0026quot;views-field views-field-field-bias-image\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;/media-bias/left-center\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;...\u0026quot; width=\u0026quot;144\u0026quot; height=\u0026quot;24\u0026quot; alt=\u0026quot;Political News Media Bias Rating: Lean Left\u0026quot; title=\u0026quot;Political News Media Bias Rating: Lean Left\u0026quot;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt;  We could also pull the alt attribute, but the link looks easier. Let\u0026rsquo;s grab it:\nbias = row.select_one('.views-field-field-bias-image a')['href'] bias = bias.split('/')[-1] print(bias)  Here we selected the anchor tag by using the class name and tag together: .views-field-field-bias-image is the class of the \u0026lt;td\u0026gt; and \u0026lt;a\u0026gt; is for the anchor nested inside.\nAfter that we extract the href just like before, but now we only want the last part of the URL for the name of the bias so we split on slashes and get the last element of that split (left-center).\nCommunity feedback data \nThe last thing to scrape is the agree/disagree ratio from the community feedback area. The HTML of this cell is pretty convoluted due to the styling, but here\u0026rsquo;s the basic structure:\n\u0026lt;td class=\u0026quot;views-field views-field-nothing community-feedback\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;getratingval\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;rate-widget-4 rate-widget clear-block rate-average rate-widget-yesno\u0026quot; id=\u0026quot;rate-node-76-4-1\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;item-list\u0026quot;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026quot;first\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;rate-button rate-btn\u0026quot; href=\u0026quot;...\u0026quot; id=\u0026quot;rate-button-3\u0026quot;\u0026gt;agree\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;last\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;rate-button rate-btn\u0026quot; href=\u0026quot;...\u0026quot; id=\u0026quot;rate-button-4\u0026quot;\u0026gt;disagree\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;rate-details\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;agree\u0026quot;\u0026gt;8241\u0026lt;/span\u0026gt;/\u0026lt;span class=\u0026quot;disagree\u0026quot;\u0026gt;6568\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/td\u0026gt;  The numbers we want are located in two span elements in the last div. Both span elements have classes that are unique in this cell so we can use them to make the selection:\nagree = row.select_one('.agree').text agree = int(agree) disagree = row.select_one('.disagree').text disagree = int(disagree) agree_ratio = agree / disagree print(f\u0026quot;Agree: {agree}, Disagree: {disagree}, Ratio {agree_ratio:.2f}\u0026quot;)  Using .text will return a string, so we need to convert them to integers in order to calculate the ratio.\nSide note: If you\u0026rsquo;ve never seen this way of formatting print statements in Python, the f at the front allows us to insert variables right into the string using curly braces. The :.2f is a way to format floats to only show two decimals places.\nIf you look at the page in your browser you\u0026rsquo;ll notice that they say how much the community is in agreement by using \u0026ldquo;somewhat agree\u0026rdquo;, \u0026ldquo;strongly agree\u0026rdquo;, etc. so how do we get that? If we try to select it:\nprint(row.select_one('.community-feedback-rating-page'))  It shows up as None because this element is rendered with Javascript and requests can\u0026rsquo;t pull HTML rendered with Javascript. We\u0026rsquo;ll be looking at how to get data rendered with JS in a later article, but since this is the only piece of information that\u0026rsquo;s rendered this way we can manually recreate the text.\nTo find the JS files they\u0026rsquo;re using, just CTRL+F for \u0026ldquo;.js\u0026rdquo; in the page source and open the files in a new tab to look for that logic.\nIt turned out the logic was located in the eleventh JS file and they have a function that calculates the text and color with these parameters:\n Range Agreeance   $ratio  3$ absolutely agrees   $2 strongly agrees   $1.5 agrees   $1 somewhat agrees   $ratio = 1$ neutral   $0.67 somewhat disgrees   $0.5 disgrees   $0.33 strongly disagrees   $ratio \\leq 0.33$ absolutely disagrees   Let\u0026rsquo;s make a function that replicates this logic:\ndef get_agreeance_text(ratio): if ratio \u0026gt; 3: return \u0026quot;absolutely agrees\u0026quot; elif 2 \u0026lt; ratio \u0026lt;= 3: return \u0026quot;strongly agrees\u0026quot; elif 1.5 \u0026lt; ratio \u0026lt;= 2: return \u0026quot;agrees\u0026quot; elif 1 \u0026lt; ratio \u0026lt;= 1.5: return \u0026quot;somewhat agrees\u0026quot; elif ratio == 1: return \u0026quot;neutral\u0026quot; elif 0.67 \u0026lt; ratio \u0026lt; 1: return \u0026quot;somewhat disagrees\u0026quot; elif 0.5 \u0026lt; ratio \u0026lt;= 0.67: return \u0026quot;disagrees\u0026quot; elif 0.33 \u0026lt; ratio \u0026lt;= 0.5: return \u0026quot;strongly disagrees\u0026quot; elif ratio \u0026lt;= 0.33: return \u0026quot;absolutely disagrees\u0026quot; else: return None print(get_agreeance_text(2.5))  Now that we have the general logic for a single row and we can generate the agreeance text, let\u0026rsquo;s create a loop that gets data from every row on the first page:\ndata= [] for row in rows: d = dict() d['name'] = row.select_one('.source-title').text.strip() d['allsides_page'] = 'https://www.allsides.com' + row.select_one('.source-title a')['href'] d['bias'] = row.select_one('.views-field-field-bias-image a') ['href'].split('/')[-1] d['agree'] = int(row.select_one('.agree').text) d['disagree'] = int(row.select_one('.disagree').text) d['agree_ratio'] = d['agree'] / d['disagree'] d['agreeance_text'] = get_agreeance_text(d['agree_ratio']) data.append(d)  In the loop we can combine any multi-step extractions into one to create the values in the least number of steps.\nOur data list now contains a dictionary containing key information for every row.\nprint(data[0])  Keep in mind that this is still only the first page. The list on AllSides is three pages long as of this writing, so we need to modify this loop to get the other pages.\nRequesting and parsing multiple pages Notice that the URLs for each page follow a pattern. The first page has no parameters on the URL, but the next pages do; specifically they attach a ?page=# to the URL where \u0026lsquo;#\u0026rsquo; is the page number.\nRight now, the easiest way to get all pages is just to manually make a list of these three pages and loop over them. If we were working on a project with thousands of pages we might build a more automated way of constructing/finding the next URLs, but for now this works.\npages = [ 'https://www.allsides.com/media-bias/media-bias-ratings', 'https://www.allsides.com/media-bias/media-bias-ratings?page=1', 'https://www.allsides.com/media-bias/media-bias-ratings?page=2' ]  According to AllSides\u0026rsquo; robots.txt we need to make sure we wait ten seconds before each request.\nOur loop will:\n request a page parse the page wait ten seconds repeat for next page.   Remember, we\u0026rsquo;ve already tested our parsing above on a page that was cached locally so we know it works. You\u0026rsquo;ll want to make sure to do this before making a loop that performs requests to prevent having to reloop if you forgot to parse something.\nBy combining all the steps we\u0026rsquo;ve done up to this point and adding a loop over pages, here\u0026rsquo;s how it looks:\nfrom time import sleep data= [] for page in pages: r = requests.get(page) soup = BeautifulSoup(r.content, 'html.parser') rows = soup.select('tbody tr') for row in rows: d = dict() d['name'] = row.select_one('.source-title').text.strip() d['allsides_page'] = 'https://www.allsides.com' + row.select_one('.source-title a')['href'] d['bias'] = row.select_one('.views-field-field-bias-image a')['href'].split('/')[-1] d['agree'] = int(row.select_one('.agree').text) d['disagree'] = int(row.select_one('.disagree').text) d['agree_ratio'] = d['agree'] / d['disagree'] d['agreeance_text'] = get_agreeance_text(d['agree_ratio']) data.append(d) sleep(10)  Now we have a list of dictionaries for each row on all three pages.\nTo cap it off, we want to get the real URL to the news source, not just the link to their presence on AllSides. To do this, we will need to get the AllSides page and look for the link.\nIf we go to ABC News\u0026rsquo; page there\u0026rsquo;s a row of external links to Facebook, Twitter, Wikipedia, and the ABC News website. The HTML for that sections looks like this:\n\u0026lt;div class=\u0026quot;row-fluid source-links gray-bg-box\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://www.facebook.com/ABCNews/\u0026quot; class=\u0026quot;facebook\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;fa fa-facebook\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span\u0026gt;Facebook\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/ABC\u0026quot; class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;fa fa-twitter\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;span\u0026gt;Twitter\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;https://en.wikipedia.org/wiki/ABC_News\u0026quot; class=\u0026quot;wikipedia\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;fa fa-wikipedia-w\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;span\u0026gt;Wikipedia\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;http://abcnews.go.com/\u0026quot; class=\u0026quot;www\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fa fa-globe\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;/i\u0026gt;\u0026lt;span\u0026gt;ABC News\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;/contact\u0026quot; class=\u0026quot;improve-this-page\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;fa fa-line-chart\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;span\u0026gt;Improve this page\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Notice the anchor tag (\u0026lt;a\u0026gt;) that contains the link to ABC News has a class of \u0026ldquo;www\u0026rdquo;. Pretty easy to get with what we\u0026rsquo;ve already learned:\nwebsite = soup.select_one('.www')['href']  So let\u0026rsquo;s make another loop to request the AllSides page and get links for each news source. Unfortunately, some pages don\u0026rsquo;t have a link in this grey bar to the news source, which brings up a good point: always account for elements to randomly not exist.\nUp until now we\u0026rsquo;ve assumed elements exist in the tables we scraped, but it\u0026rsquo;s always a good idea to program scrapers in way so they don\u0026rsquo;t break when an element goes missing.\nUsing select_one or select will always return None or an empty list if nothing is found, so in this loop we\u0026rsquo;ll check if we found the website element or not so it doesn\u0026rsquo;t throw an Exception when trying to access the href attribute.\nFinally, since there\u0026rsquo;s 265 news source pages and the wait time between pages is 10 seconds, it\u0026rsquo;s going to take ~44 minutes to do this. Instead of blindly not knowing our progress, let\u0026rsquo;s use the tqdm library to give us a nice progress bar:\n!pip install tqdm  from tqdm import tqdm_notebook for d in tqdm_notebook(data): r = requests.get(d['allsides_page']) soup = BeautifulSoup(r.content, 'html.parser') try: website = soup.select_one('.www')['href'] d['website'] = website except TypeError: pass sleep(10)  tqdm is a little weird at first, but essentially tqdm_notebook is just wrapping around our data list to produce a progress bar. We are still able to access each dictionary, d, just as we would normally. Note that tqdm_notebook is only for Jupyter notebooks. In regular editors you\u0026rsquo;ll just import tqdm from tqdm and use tqdm instead.\nSaving our data So what do we have now? At this moment, data is a list of dictionaries, each of which contains all the data from the tables as well as the websites from each individual news source\u0026rsquo;s page on AllSides.\nThe first thing we\u0026rsquo;ll want to do now is save that data to a file so we don\u0026rsquo;t have to make those requests again. We\u0026rsquo;ll be storing the data as JSON since it\u0026rsquo;s already in that form anyway:\nimport json with open('allsides.json', 'w') as f: json.dump(data, f)  To load it back in when you need it:\nwith open('allsides.json', 'r') as f: data = json.load(f)  If you\u0026rsquo;re not familiar with JSON, just quickly open allsides.json in an editor and see what it looks like. It should look almost exactly like what data looks like if we print it in Python: a list of dictionaries.\nBrief Data Analysis Before ending this article I think it would be worthwhile to actually see what\u0026rsquo;s interesting about this data we just retrieved. So, let\u0026rsquo;s answer a couple of questions.\nWhich ratings for outlets does the community absolutely agree on?\nTo find where the community absolutely agrees we can do a simple list comprehension that checks each dict for the agreeance text we want:\nabs_agree = [d for d in data if d['agreeance_text'] == 'absolutely agrees'] print(f\u0026quot;{'Outlet':\u0026lt;20} {'Bias':\u0026lt;20}\u0026quot;) print(\u0026quot;-\u0026quot; * 30) for d in abs_agree: print(f\u0026quot;{d['name']:\u0026lt;20} {d['bias']:\u0026lt;20}\u0026quot;)  Using some string formatting we can make it look somewhat tabular. Interestingly, C-SPAN is the only center bias that the community absolutely agrees on. The others for left and right aren\u0026rsquo;t that surprising.\nMaking analysis easier with Pandas Which ratings for outlets does the community absolutely disagree on?\nTo make analysis a little easier, we can also load our JSON data into a Pandas DataFrame as well. This is easy with Pandas since they have a simple function for reading JSON into a DataFrame.\nAs an aside, if you\u0026rsquo;ve never used Pandas, Matplotlib, or any of the other data science libraries, I would definitely recommend checking out [Jose Portilla\u0026rsquo;s data science course]() for a great intro to these tools and many machine learning concepts.\nNow to the DataFrame:\nimport pandas as pd df = pd.read_json(open('allsides.json', 'r')) df.set_index('name', inplace=True) df.head()  Now filter the DataFrame by \u0026ldquo;agreeance_text\u0026rdquo;:\ndf[df['agreeance_text'] == 'strongly disagrees']  It looks like much of the community disagrees strongly with certain outlets being rated with a \u0026ldquo;center\u0026rdquo; bias.\nLet\u0026rsquo;s make a quick visualization of agreeance. Since there\u0026rsquo;s too many news sources to plot so let\u0026rsquo;s pull only those with the most votes. To do that, we can make a new column that counts the total votes and then sort by that value:\ndf['total_votes'] = df['agree'] + df['disagree'] df.sort_values('total_votes', ascending=False, inplace=True) df.head(10)  Visualizing the data To make a bar plot we\u0026rsquo;ll use Matplotlib with Seaborn\u0026rsquo;s dark grid style:\nimport matplotlib.pyplot as plt plt.style.use('seaborn-darkgrid')  As mentioned above, we have too many news outlets to plot comfortably, so just make a copy of the top 25 and place it in a new df2 variable:\ndf2 = df.head(25).copy() df2.head()  With the top 25 news sources by amount of feedback, let\u0026rsquo;s create a stacked bar chart where the number of agrees are stacked on top of the number of disagrees. This makes the total height of the bar the total amount of feedback.\nBelow, we first create a figure and axes, plot the agree bars, plot the disagree bars on top of the agrees using bottom, then set various text features:\nfig, ax = plt.subplots(figsize=(20, 10)) ax.bar(df2.index, df2['agree'], color='#5DAF83') ax.bar(df2.index, df2['disagree'], bottom=df2['agree'], color='#AF3B3B') ax.set_ylabel = 'Total feedback' plt.yticks(fontsize='x-large') plt.xticks(rotation=60, ha='right', fontsize='x-large', rotation_mode='anchor') plt.title('AllSides Bias Rating vs. Community Feedback', fontsize='xx-large') plt.show()  For a slightly more complex version, let\u0026rsquo;s make a subplot for each bias and plot the respective news sources.\nThis time we\u0026rsquo;ll make a new copy of the original DataFrame beforehand since we can plot more news outlets now.\nInstead of making one axes, we\u0026rsquo;ll create a new one for each bias to make six total subplots:\ndf3 = df.copy() fig = plt.figure(figsize=(15,15)) biases = df3['bias'].unique() for i, bias in enumerate(biases): # Get top 10 news sources for this bias and sort index alphabetically temp_df = df3[df3['bias'] == bias].iloc[:10] temp_df.sort_index(inplace=True) # Get max votes, i.e. the y value for tallest bar in this temp dataframe max_votes = temp_df['total_votes'].max() # Add a new subplot in the correct grid position ax = fig.add_subplot(len(biases) / 2, 2, i + 1) # Create the stacked bars ax.bar(temp_df.index, temp_df['agree'], color='#5DAF83') ax.bar(temp_df.index, temp_df['disagree'], bottom=temp_df['agree'], color='#AF3B3B') # Place text for the ratio on top of each bar for x, y, ratio in zip(ax.get_xticks(), temp_df['total_votes'], temp_df['agree_ratio']): ax.text(x, y + (0.02 * max_votes), f\u0026quot;{ratio:.2f}\u0026quot;, ha='center') ax.set_ylabel('Total feedback') ax.set_title(bias.title()) # Make y limit larger to compensate for text on bars ax.set_ylim(0, max_votes + (0.12 * max_votes)) # Rotate tick labels so they don't overlap plt.setp(ax.get_xticklabels(), rotation=30, ha='right') plt.tight_layout(w_pad=3.0, h_pad=1.0) plt.show()  Hopefully the comments help with how these plots were created. We\u0026rsquo;re just looping through each unique bias and adding a subplot to the figure.\nWhen interpreting these plots keep in mind that the y-axis has different scales for each subplot. Overall it\u0026rsquo;s a nice way to see which outlets have a lot of votes and where the most disagreement is. This is what makes scraping so much fun!\nFinal words We have the tools to make some fairly complex web scrapers now, but there\u0026rsquo;s still the issue with Javascript rendering. This is something that deserves its own article, but for now we can do quite a lot.\nThere\u0026rsquo;s also some project organization that needs to occur when making this into a more easily runnable program. We need to pull it out of this notebook and code in command-line arguments if we plan to run it often for updates.\nThese sorts of things will be addressed later when we build more complex scrapers, but feel free to let me know in the comments of anything in particular you\u0026rsquo;re interested in learning about.\n"});index.add({'id':93,'href':'/library/tutorials/docs/articles/data-science/finance/stock-portfolio-analyses-1/','title':"Stock Portfolio Analyses",'content':" Python for Finance: Stock Portfolio Analyses  Written with StackEdit.\n My two most recent blog posts were about Scaling Analytical Insights with Python; part 1 can be found here and part 2 can be found here. It has been several months since I wrote those, largely due to the fact that I relocated my family to Seattle to join Amazon in November; I’ve spent most of the time on my primary project determining our global rollout plan and related business intelligence roadmap.\nPrior to my departure at my former company, FloSports, we were in the process of overhauling our analytics reporting across the organization (data, marketing, product et al), and part of this overhaul included our financial reporting. While I left early on in that implementation, over the past several months I’ve continued using Python extensively for financial analyses, particularly pandas. In this post, I will share how I leveraged some very helpful online resources, the Yahoo Finance API (requires a work around and may require a future data source replacement), and Jupyter notebook to largely automate the tracking and benchmarking of a stock portfolio’s performance.\nOverview of PME and benchmarking individual stock performance As a quick background, I have been investing in my own stock portfolio since 2002 and developed a financial model for my portfolio a number of years ago. For years, I would download historical prices and load the data into the financial model — while online brokers calculate realized and unrealized returns, as well as income and dividends, I like to have historical data in the model as I conduct my own analyses to evaluate positions. One view / report which I’ve never found from online brokers and services is a “Public Market Equivalent”-like analysis. In short, the Public Market Equivalent (PME) is a set of analyses used in the private equity industry to compare the performance of a private equity fund relative to an industry benchmark. Much more detail here.\nRelated, the vast majority of equity portfolio managers are unable to select a portfolio of stocks which outperforms the broader market, e.g., S\u0026amp;P 500, over the long-term (~1 in 20 actively managed domestic funds beat index funds). Even when some individual stocks outperform, the underperformance of others often outweighs the better performing stocks, meaning overall an investor is worse off than simply investing in an index fund. During business school I learned about PME, and I incorporated a conceptually similar analysis into the evaluation of my current public equity holdings. To do this properly, you should measure the timing of investment inflows specific to each portfolio position (holding periods) relative to an S\u0026amp;P 500 equivalent dollar investment over the identical holding period. As an example, if you bought a stock on 6/1/2016 and you still own it, you would want to compare the stock’s return over that period to the return of an equal dollar investment on 6/1/2016 in the S\u0026amp;P 500 (our benchmark example). Among other things, you may find that even if a stock has done relatively well it may still trail the S\u0026amp;P 500’s return over the same time period.\nIn the past, I downloaded historical price data from Yahoo Finance and used INDEX and MATCH functions in excel to calculate the relative holding period performance of each position versus the S\u0026amp;P 500. While this is an OK way to accomplish this goal, conducting the same using pandas in Jupyter notebook is more scalable and extensible. Whenever you download new data and load into excel, you inevitably need to modify some formulas and validate for errors. Using pandas, adding new calculations, such as a cumulative ROI multiple (which I’ll cover), takes almost no time to implement. And the visualizations, for which I use Plotly, are highly reproducible and much more useful in generating insights.\nDisclosure: Nothing in this post should be considered investment advice. Past performance is not necessarily indicative of future returns. These are general examples about how to import data using pandas for a small sample of stocks across different time intervals and to benchmark their individual performance against an index. You should direct all investment related questions that you have to your financial advisor.\nIn addition to contributing this tutorial, I’m continuing to revise and build upon this approach, and I outline some considerations for further development at the end of this post. I believe this post will be helpful for novice to intermediate-level data science oriented finance professionals, especially since this should extend to many other types of financial analyses. This approach is “PME-like” in the sense that’s it’s measuring investment inflows over equal holding periods. As public market investments are much more liquid than private equity, and presuming you follow a trailing stop approach, from my perspective it’s more important to focus on active holdings — it’s generally advisable to divest holdings which underperform a benchmark or which you no longer want to own for various reasons, while I take a long-term view and am happy to own outperforming stocks for as long as they’ll have me.\nResources:\n I am a current DataCamp subscriber (future post forthcoming on DataCamp) and this community tutorial on Python for Finance is great. I have created a repo for this post including the Python notebook here, and the excel file here. If you want to see the full interactive version (because Jupyter \u0026lt;←\u0026gt;\u0026gt; GitHub integration is awesome), you can view using nbviewer here.  Outline of what we want to accomplish:\n Import S\u0026amp;P 500 and sample ticker data, using the Yahoo Finance API Create a merged portfolio ‘master’ file which combines the sample portfolio dataframe with the historical ticker and historical S\u0026amp;P 500 data Determine what the S\u0026amp;P 500 close was on the date of acquisition of each investment, which allows us to calculate the S\u0026amp;P 500 equivalent share position with the same dollars invested Calculate the relative % and dollar value returns for the portfolio positions versus S\u0026amp;P 500 returns over that time Calculate cumulative portfolio returns and ROI multiple, in order to assess how well this example portfolio compared to a market index One of the more important items: dynamically calculate how each position is doing relative to a trailing stop, e.g., if a position closes 25% below its closing high, consider selling the position on the next trading day. Visualizations Total Return Comparisons — % return of each position relative to index benchmark Cumulative Returns Over Time — $ Gain / (Loss) of each position relative to benchmark Cumulative Investments Over Time — given the above, how do the overall investment returns compare to the equal weighting and time period of S\u0026amp;P 500 investments? Adjusted Close % off of High Comparison — what is each position’s most recent close relative to its adjusted closing high since purchased?  Investment Portfolio Python Notebook Data Import and Dataframe Manipulation You will begin by importing the necessary Python libraries, import the Plotly offline module, and read in our sample portfolio dataframe.\n# Import initial libraries import pandas as pd import numpy as np import datetime import matplotlib.pyplot as plt import plotly.graph_objs as go %matplotlib inline # Imports in order to be able to use Plotly offline. from plotly import __version__ from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot print(__version__) # requires version \u0026gt;= 1.9.0 init_notebook_mode(connected=True) # Import the Sample worksheet with acquisition dates and initial cost basis: portfolio_df = pd.read_excel('Sample stocks acquisition dates_costs.xlsx', sheetname='Sample') portfolio_df.head(10)  Now that you have read in the sample portfolio file, you’ll create a few variables which capture the date ranges for the S\u0026amp;P 500 and all of the portfolio’s tickers. Note that this is one of the few aspects of this notebook which requires an update each week (adjust the date range to include the most recent trading week — here, we are running this off of prices through 3/9/2018).\n# Date Ranges for SP 500 and for all tickers # Modify these date ranges each week. # The below will pull back stock prices from the start date until end date specified. start_sp = datetime.datetime(2013, 1, 1) end_sp = datetime.datetime(2018, 3, 9) # This variable is used for YTD performance. end_of_last_year = datetime.datetime(2017, 12, 29) # These are separate if for some reason want different date range than SP. stocks_start = datetime.datetime(2013, 1, 1) stocks_end = datetime.datetime(2018, 3, 9)  As mentioned in the Python Finance training post, the pandas-datareader package enables us to read in data from sources like Google, Yahoo! Finance and the World Bank. Here I’ll focus on Yahoo! Finance, although I’ve worked very preliminarily with Quantopian and have also begun looking into quandl as a data source. As also mentioned in the DataCamp post, the Yahoo API endpoint recently changed and this requires the installation of a temporary fix in order for Yahoo! Finance to work. I’ve made this needed slight adjustment in the code below. I have noticed some minor data issues where the data does not always read in as expected, or the last trading day is sometimes missing. While these issues have been relatively infrequent, I’m continuing to monitor whether or not Yahoo! Finance will be the best and most reliable data source going forward.\n# Leveraged from the helpful Datacamp Python Finance trading blog post. from pandas_datareader import data as pdr import fix_yahoo_finance as yf yf.pdr_override() # \u0026lt;== that's all it takes :-) sp500 = pdr.get_data_yahoo('^GSPC', start_sp, end_sp) sp500.head()  If you’re following along with your own notebook, you should see something like the below once you’ve successfully read in the data from Yahoo’s API:\nAfter loading in the S\u0026amp;P 500 data, you’ll see that I inspect the head and tail of the dataframe, as well as condense the dataframe to only include the Adj Close column. The difference between the Adjusted Close and the Close columns is that an adjusted close reflects dividends (see future areas for development below). When a company issues a dividend, the share price is reduced by the size of the dividend per share, as the company is distributing a portion of the company’s earnings. For purposes of this analysis, you will only need to analyze this column. I also create a dataframe which only includes the S\u0026amp;P’s adjusted close on the last day of 2017 (start of 2018); this is in order to run YTD comparisons of individual tickers relative to the S\u0026amp;P 500’s performance.\nIn the below code, you create an array of all of the tickers in our sample portfolio dataframe. You then write a function to read in all of the tickers and their relevant data into a new dataframe, which is essentially the same approach you took for the S\u0026amp;P500 but applied to all of the portfolio’s tickers.\n# Generate a dynamic list of tickers to pull from Yahoo Finance API based on the imported file with tickers. tickers = portfolio_df['Ticker'].unique() tickers # Stock comparison code def get(tickers, startdate, enddate): def data(ticker): return (pdr.get_data_yahoo(ticker, start=startdate, end=enddate)) datas = map(data, tickers) return(pd.concat(datas, keys=tickers, names=['Ticker', 'Date'])) all_data = get(tickers, stocks_start, stocks_end)  As with the S\u0026amp;P 500 dataframe, you’ll create an adj_close dataframe which only has the Adj Closecolumn for all of your stock tickers. If you look at the notebook in the repo I link to above, this code is chunked out in more code blocks than shown below. For purposes of describing this here, I’ve included below all of the code which leads up to our initial merged_portfolio dataframe.\n# Also only pulling the ticker, date and adj. close columns for our tickers. adj_close = all_data[['Adj Close']].reset_index() adj_close.head() # Grabbing the ticker close from the end of last year adj_close_start = adj_close[adj_close['Date']==end_of_last_year] adj_close_start.head() # Grab the latest stock close price adj_close_latest = adj_close[adj_close['Date']==stocks_end] adj_close_latest adj_close_latest.set_index('Ticker', inplace=True) adj_close_latest.head() # Set portfolio index prior to merging with the adj close latest. portfolio_df.set_index(['Ticker'], inplace=True) portfolio_df.head() # Merge the portfolio dataframe with the adj close dataframe; they are being joined by their indexes. merged_portfolio = pd.merge(portfolio_df, adj_close_latest, left_index=True, right_index=True) merged_portfolio.head() # The below creates a new column which is the ticker return; takes the latest adjusted close for each position # and divides that by the initial share cost. merged_portfolio['ticker return'] = merged_portfolio['Adj Close'] / merged_portfolio['Unit Cost'] - 1 merged_portfolio  Depending on your level of familiarity with pandas, this will be very straightforward to slightly overwhelming. Below, I’ll unpack what these lines are doing:\n The overall approach you are taking is an example of split-apply-combine (note this downloads a PDF). The all_data[['Adj Close']] line creates a new dataframe with only the columns provided in the list; here Adj Close is the only item provided in the list. Using this line of code, adj_close[adj_close['Date']==end_of_last_year], you are filtering the adj_close dataframe to only the row where the data’s Date column equals the date which you earlier specified in the end_of_last_year variable (2017, 12, 29). You also set the index of the adj_close_latest and portfolio_df dataframes. I did this because this is how you’ll merge the two dataframes. The merge function, very similar to SQL joins, is an extremely useful function which I use very often. Within the merge function, you specify the left dataframe ( portfolio_df ) and our right dataframe ( adj_close_latest ). By specifying left_index and right_index equal True, you are stating that the two dataframes share a common index and you will join both on this. Last, you create a new column called 'ticker return' . This calculates the percent return for each stock position by dividing the Adj Close by the Unit Cost (initial purchase price for stock) and subtracting 1. This is similar to calculating a formula in excel and carrying it down, but in pandasthis is accomplished with one-line of code.  You have taken the individual dataframes for the S\u0026amp;P 500 and individual stocks, and you are beginning to develop a ‘master’ dataframe which we’ll use for calculations, visualizations and any further analysis. Next, you continue to build on this ‘master’ dataframe with further use of pandas merge function. Below, you reset the current dataframe’s index and begin joining your smaller dataframes with the master one. Once again, the below code block is broken out further in the Jupyter notebook; here I take a similar approach to before where I’ll share the code below and then break down the key callouts below the code block.\nmerged_portfolio.reset_index(inplace=True) # Here we are merging the new dataframe with the sp500 adjusted closes since the sp start price based on # each ticker's acquisition date and sp500 close date. merged_portfolio_sp = pd.merge(merged_portfolio, sp_500_adj_close, left_on='Acquisition Date', right_on='Date') # .set_index('Ticker') # We will delete the additional date column which is created from this merge. # We then rename columns to Latest Date and then reflect Ticker Adj Close and SP 500 Initial Close. del merged_portfolio_sp['Date_y'] merged_portfolio_sp.rename(columns={'Date_x': 'Latest Date', 'Adj Close_x': 'Ticker Adj Close' , 'Adj Close_y': 'SP 500 Initial Close'}, inplace=True) # This new column determines what SP 500 equivalent purchase would have been at purchase date of stock. merged_portfolio_sp['Equiv SP Shares'] = merged_portfolio_sp['Cost Basis'] / merged_portfolio_sp['SP 500 Initial Close'] merged_portfolio_sp.head() # We are joining the developing dataframe with the sp500 closes again, this time with the latest close for SP. merged_portfolio_sp_latest = pd.merge(merged_portfolio_sp, sp_500_adj_close, left_on='Latest Date', right_on='Date') # Once again need to delete the new Date column added as it's redundant to Latest Date. # Modify Adj Close from the sp dataframe to distinguish it by calling it the SP 500 Latest Close. del merged_portfolio_sp_latest['Date'] merged_portfolio_sp_latest.rename(columns={'Adj Close': 'SP 500 Latest Close'}, inplace=True) merged_portfolio_sp_latest.head()   You use reset_index on the merged_portfolio in order to flatten the master dataframe and join on the smaller dataframes’ relevant columns. In the merged_portfolio_sp line, you merge the current master dataframe (merged_portfolio) with the sp_500_adj_close; you do this in order to have the S\u0026amp;P’s closing price on each position’s purchase date – this allows you to track the S\u0026amp;P performance over the same time period that each position is held (from acquisition date to most recent market close date). The merge here is slightly different than before, in that we join on the left dataframe’s Acquisition Date column and on the right dataframe’s Date column. After completing this merge, you will have extra columns which you do not need — since our master dataframe will eventually have a considerable number of columns for analysis, it is important to prune duplicative and unnecessary columns along the way. There are several ways to remove unnecessary columns and perform various column name cleanups; for simplicity, I use python del and then rename a few columns with pandas rename method, clarifying the ticker’s Adj Close column by renaming to Ticker Adj Close; and you distinguish the S\u0026amp;P’s initial adjusted close with SP 500 Initial Close. When you calculate merged_portfolio_sp['Equiv SP Shares'], you do so in order to be able to calculate the S\u0026amp;P 500’s equivalent value for the close on the date you acquired each ticker position: if you spend $5,000 on a new stock position, you could have spent $5,000 on the S\u0026amp;P 500; continuing the example, if the S\u0026amp;P 500 was trading at $2,500 per share at the time of purchase, you would have been able to purchase 2 shares. Later, if the S\u0026amp;P 500 is trading for $3,000 per share, your stake would be worth $6,000 (2 equivalent shares * $3,000 per share) and you would have $1,000 in paper profits over this comparable time period. In the rest of the code block, you next perform a similar merge, this time joining on the S\u0026amp;P 500’s latest close — this provides the second piece needed to calculate the S\u0026amp;P’s comparable return relative to each position’s holding period: the S\u0026amp;P 500 price on each ticker’s acquisition day and the S\u0026amp;P 500’s latest market close.  You have now further developed your ‘master’ dataframe with the following:\n Each portfolio position’s price, shares and value on the position acquisition day, as well as the latest market’s closing price. An equivalent S\u0026amp;P 500 price, shares and value on the equivalent position acquisition day for each ticker, as well as the latest S\u0026amp;P 500 closing price.  Given the above, you will next perform the requisite calculations in order to compare each position’s performance, as well as the overall performance of this strategy / basket of stocks, relative to comparable dollar investment and holding times of the S\u0026amp;P 500.\nBelow is a summary of the new columns which you are adding to the ‘master’ dataframe.\n In the first column, ['SP Return'], you create a column which calculates the absolute percent return of the S\u0026amp;P 500 over the holding period of each position (note, this is an absolute return and is not an annualized return). In the second column (['Abs. Return Compare']), you compare the ['ticker return'] (each position’s return) relative to the ['SP Return'] over the same time period. In the next three columns, ['Ticker Share Value'], ['SP 500 Value'] and ['Abs Value Compare'], we calculate the dollar value (market value) equivalent based on the shares we hold multiplied by the latest adjusted close price (and subtract the S\u0026amp;P return from the ticker to calculate over / (under) performance). Last, the ['Stock Gain / (Loss)'] and ['SP 500 Gain / (Loss)'] columns calculate our unrealized dollar gain / loss on each position and comparable S\u0026amp;P 500 gain / loss; this allows us to compare the value impact of each position versus simply investing those dollars in the S\u0026amp;P 500.\n# Percent return of SP from acquisition date of position through latest trading day. merged_portfolio_sp_latest['SP Return'] = merged_portfolio_sp_latest['SP 500 Latest Close'] / merged_portfolio_sp_latest['SP 500 Initial Close'] - 1 # This is a new column which takes the tickers return and subtracts the sp 500 equivalent range return. merged_portfolio_sp_latest['Abs. Return Compare'] = merged_portfolio_sp_latest['ticker return'] - merged_portfolio_sp_latest['SP Return'] # This is a new column where we calculate the ticker's share value by multiplying the original quantity by the latest close. merged_portfolio_sp_latest['Ticker Share Value'] = merged_portfolio_sp_latest['Quantity'] * merged_portfolio_sp_latest['Ticker Adj Close'] # We calculate the equivalent SP 500 Value if we take the original SP shares * the latest SP 500 share price. merged_portfolio_sp_latest['SP 500 Value'] = merged_portfolio_sp_latest['Equiv SP Shares'] * merged_portfolio_sp_latest['SP 500 Latest Close'] # This is a new column where we take the current market value for the shares and subtract the SP 500 value. merged_portfolio_sp_latest['Abs Value Compare'] = merged_portfolio_sp_latest['Ticker Share Value'] - merged_portfolio_sp_latest['SP 500 Value'] # This column calculates profit / loss for stock position. merged_portfolio_sp_latest['Stock Gain / (Loss)'] = merged_portfolio_sp_latest['Ticker Share Value'] - merged_portfolio_sp_latest['Cost Basis'] # This column calculates profit / loss for SP 500. merged_portfolio_sp_latest['SP 500 Gain / (Loss)'] = merged_portfolio_sp_latest['SP 500 Value'] - merged_portfolio_sp_latest['Cost Basis'] merged_portfolio_sp_latest.head()  You now have what you need in order to compare your portfolio’s performance to a portfolio equally invested in the S\u0026amp;P 500. The next two code block sections allow you to i) compare YTD performance of each position relative to the S\u0026amp;P 500 (a measure of momentum and how your positions are pacing) and ii) compare the most recent closing price for each portfolio position relative to its most recent closing high (this allows you to assess if a position has triggered a trailing stop, e.g., closed 25% below closing high).\n  Below, I’ll start with the YTD performance code block and provide details regarding the code further below.\n# Merge the overall dataframe with the adj close start of year dataframe for YTD tracking of tickers. merged_portfolio_sp_latest_YTD = pd.merge(merged_portfolio_sp_latest, adj_close_start, on='Ticker') # , how='outer' # Deleting date again as it's an unnecessary column. Explaining that new column is the Ticker Start of Year Close. del merged_portfolio_sp_latest_YTD['Date'] merged_portfolio_sp_latest_YTD.rename(columns={'Adj Close': 'Ticker Start Year Close'}, inplace=True) # Join the SP 500 start of year with current dataframe for SP 500 ytd comparisons to tickers. merged_portfolio_sp_latest_YTD_sp = pd.merge(merged_portfolio_sp_latest_YTD, sp_500_adj_close_start , left_on='Start of Year', right_on='Date') # Deleting another unneeded Date column. del merged_portfolio_sp_latest_YTD_sp['Date'] # Renaming so that it's clear this column is SP 500 start of year close. merged_portfolio_sp_latest_YTD_sp.rename(columns={'Adj Close': 'SP Start Year Close'}, inplace=True) # YTD return for portfolio position. merged_portfolio_sp_latest_YTD_sp['Share YTD'] = merged_portfolio_sp_latest_YTD_sp['Ticker Adj Close'] / merged_portfolio_sp_latest_YTD_sp['Ticker Start Year Close'] - 1 # YTD return for SP to run compares. merged_portfolio_sp_latest_YTD_sp['SP 500 YTD'] = merged_portfolio_sp_latest_YTD_sp['SP 500 Latest Close'] / merged_portfolio_sp_latest_YTD_sp['SP Start Year Close'] - 1   When creating the merged_portfolio_sp_latest_YTD dataframe, you are now merging the ‘master’ dataframe with the adj_close_start dataframe; as a quick reminder, you created this dataframe by filtering on the adj_close dataframe where the 'Date' column equaled the variable end_of_last_year; you do this because it’s how YTD (year-to-date) stock and index performances are measured; last year’s ending close is the following year’s starting price. From here, we once again use del to remove unnecessary columns and the rename method to clarify the ‘master’ dataframe’s newly added columns. Last, we take each Ticker (in the ['Ticker Adj Close'] column) and calculate the YTD return for each (we also have an S\u0026amp;P 500 equivalent value for each value in the 'SP 500 Latest Close'column).  In the below code block, you use the sort_values method to re-sort our ‘master’ dataframe and then you calculate cumulative portfolio investments (sum of your position acquisition costs), as well the cumulative value of portfolio positions and the cumulative value of the theoretical S\u0026amp;P 500 investments. This allows you to be able to see how your total portfolio, with investments in positions made at different times across the entire period, compares overall to a strategy where you had simply invested in an index. Later on, you’ll use the ['Cum Ticker ROI Mult'] to help you visualize how much each investment contributed to or decreased your overall return on investment (ROI).\nmerged_portfolio_sp_latest_YTD_sp = merged_portfolio_sp_latest_YTD_sp.sort_values(by='Ticker', ascending=True) # Cumulative sum of original investment merged_portfolio_sp_latest_YTD_sp['Cum Invst'] = merged_portfolio_sp_latest_YTD_sp['Cost Basis'].cumsum() # Cumulative sum of Ticker Share Value (latest FMV based on initial quantity purchased). merged_portfolio_sp_latest_YTD_sp['Cum Ticker Returns'] = merged_portfolio_sp_latest_YTD_sp['Ticker Share Value'].cumsum() # Cumulative sum of SP Share Value (latest FMV driven off of initial SP equiv purchase). merged_portfolio_sp_latest_YTD_sp['Cum SP Returns'] = merged_portfolio_sp_latest_YTD_sp['SP 500 Value'].cumsum() # Cumulative CoC multiple return for stock investments merged_portfolio_sp_latest_YTD_sp['Cum Ticker ROI Mult'] = merged_portfolio_sp_latest_YTD_sp['Cum Ticker Returns'] / merged_portfolio_sp_latest_YTD_sp['Cum Invst'] merged_portfolio_sp_latest_YTD_sp.head()  You are now nearing the home stretch and almost ready to start visualizing your data and assessing the strengths and weaknesses of your portfolio’s individual ticker and overall strategy performance.\nAs before, I’ve included the main code block for determining where positions are trading relative to their recent closing high; I’ll then unpack the code further below.\n# Need to factor in that some positions were purchased much more recently than others. # Join adj_close dataframe with portfolio in order to have acquisition date. portfolio_df.reset_index(inplace=True) adj_close_acq_date = pd.merge(adj_close, portfolio_df, on='Ticker') # delete_columns = ['Quantity', 'Unit Cost', 'Cost Basis', 'Start of Year'] del adj_close_acq_date['Quantity'] del adj_close_acq_date['Unit Cost'] del adj_close_acq_date['Cost Basis'] del adj_close_acq_date['Start of Year'] # Sort by these columns in this order in order to make it clearer where compare for each position should begin. adj_close_acq_date.sort_values(by=['Ticker', 'Acquisition Date', 'Date'], ascending=[True, True, True], inplace=True) # Anything less than 0 means that the stock close was prior to acquisition. adj_close_acq_date['Date Delta'] = adj_close_acq_date['Date'] - adj_close_acq_date['Acquisition Date'] adj_close_acq_date['Date Delta'] = adj_close_acq_date[['Date Delta']].apply(pd.to_numeric) # Modified the dataframe being evaluated to look at highest close which occurred after Acquisition Date (aka, not prior to purchase). adj_close_acq_date_modified = adj_close_acq_date[adj_close_acq_date['Date Delta']\u0026gt;=0] # This pivot table will index on the Ticker and Acquisition Date, and find the max adjusted close. adj_close_pivot = adj_close_acq_date_modified.pivot_table(index=['Ticker', 'Acquisition Date'], values='Adj Close', aggfunc=np.max) adj_close_pivot.reset_index(inplace=True) # Merge the adj close pivot table with the adj_close table in order to grab the date of the Adj Close High (good to know). adj_close_pivot_merged = pd.merge(adj_close_pivot, adj_close , on=['Ticker', 'Adj Close']) # Merge the Adj Close pivot table with the master dataframe to have the closing high since you have owned the stock. merged_portfolio_sp_latest_YTD_sp_closing_high = pd.merge(merged_portfolio_sp_latest_YTD_sp, adj_close_pivot_merged , on=['Ticker', 'Acquisition Date']) # Renaming so that it's clear that the new columns are closing high and closing high date. merged_portfolio_sp_latest_YTD_sp_closing_high.rename(columns={'Adj Close': 'Closing High Adj Close', 'Date': 'Closing High Adj Close Date'}, inplace=True) merged_portfolio_sp_latest_YTD_sp_closing_high['Pct off High'] = merged_portfolio_sp_latest_YTD_sp_closing_high['Ticker Adj Close'] / merged_portfolio_sp_latest_YTD_sp_closing_high['Closing High Adj Close'] - 1 merged_portfolio_sp_latest_YTD_sp_closing_high   To begin, you merge the adj_close dataframe with the portfolio_df dataframe; this is the third time that you’ve leveraged this adj_close dataframe in order to conduct an isolated analysis which you’ll then combine with the overall ‘master’ dataframe. This initial merge is not particularly useful, as you have dates and adjusted close prices which pre-date your acquisition date for each position; as a result, we’ll subset the data post our acquisition date, and then find the max closing price since that time. Once again, I used del to delete the merged dataframe’s unneeded columns; this is code I should refactor, as creating a list, e.g., cols_to_keep, and then filtering the dataframe with this would be a better approach – as an FYI, running the del code block more than once will throw an error and you would need to re-initialize your dataframe then run the del code block again. After removing the unnecessary columns, you then use the sort_values method and sort the values by the 'Ticker', 'Acquisition Date', and 'Date' columns (all ascending); you do this to make sure all of the ticker rows are sorted together, and we sort by Acquisition Date (in case we’ve purchased the same stock more than once) and Date ascending in order to filter out the dates prior to your positions’ acquisition dates. In other words, you are only concerned with the closing high since you’ve held the position. In order to filter our dataframe, you create a new column ['Date Delta'] which is calculated by the difference between the Date and Acquisition Date columns. You then convert this column into a numeric column, and you create a new dataframe called adj_close_acq_date_modified where the ['Date Delta'] is \u0026gt;= 0. This ensures that you are only evaluating closing highs since the date that you purchased each position. Now that you have the adj_close_acq_date_modified dataframe, we’ll use a very powerful pandas function called pivot_table. If you’re familiar with pivot tables in Excel, this function is similar in that you can pivot data based on a single or multi-index, specify values to calculate and columns to pivot on, and also use agg functions (which leverage numpy). Using the pivot_table function, we pivot on Ticker and Acquisition Date and specify that we would like to find the maximum (np.max) Adj Close for each position; this allows you to compare the recent Adjusted Close for each position relative to this High Adjusted Close. Now you have an adj_close_pivot dataframe, and you reset the index and join this once again on the adj_close dataframe. This creates the adj_close_pivot_merged dataframe, which tells you when you purchased each position and the date on which it hit its closing high since acquisition. Finally, we will combine our ‘master’ dataframe with this last smaller dataframe, adj_close_pivot_merged. After doing so, you are now able to calculate the final column needed, ['Pct off High']. You take the ['Ticker Adj Close'] and divide it by the ['Closing High Adj Close'] and subtract 1. Note, that this percentage will always be negative, unless the stock happened to have its highest close (in this case it will be zero) on the most recent trading day evaluated (this is generally a very good sign if it’s the case).  This has been a pretty significant lift, and it’s now time for our long-awaited visualizations. If you’ve continued to follow along in your own notebook, you now have a very rich dataframe with a number of calculated portfolio metrics, as shown in the below:\nTotal Return and Cumulative Return Visualizations For all of these visualizations you’ll use Plotly, which allows you to make D3 charts entirely without code. While I also use Matplotlib and Seaborn, I really value the interactivity of Plotly; and once you are used to it, the syntax becomes fairly straightforward and dynamic charts are easily attainable.\nYour first chart below compares each individual position’s total return relative to the S\u0026amp;P 500 (same holding periods for the position and hypothetical investment in the S\u0026amp;P 500). In the below, you’ll see that over their distinct holding periods, 6 of the 8 positions outperformed the S\u0026amp;P. The last two, Twitter (which actually has had a negative return) and Walmart underperformed an equal timed investment in the S\u0026amp;P 500.\nAs each of these visualizations are relatively similar, I’ll explain the code required to generate the above Plotly visualization, and for the remaining ones I’ll only summarize observations from each visualization.\ntrace1 = go.Bar( x = merged_portfolio_sp_latest_YTD_sp_closing_high['Ticker'][0:10], y = merged_portfolio_sp_latest_YTD_sp_closing_high['ticker return'][0:10], name = 'Ticker Total Return') trace2 = go.Scatter( x = merged_portfolio_sp_latest_YTD_sp_closing_high['Ticker'][0:10], y = merged_portfolio_sp_latest_YTD_sp_closing_high['SP Return'][0:10], name = 'SP500 Total Return') data = [trace1, trace2] layout = go.Layout(title = 'Total Return vs S\u0026amp;P 500' , barmode = 'group' , yaxis=dict(title='Returns', tickformat=\u0026quot;.2%\u0026quot;) , xaxis=dict(title='Ticker') , legend=dict(x=.8,y=1) ) fig = go.Figure(data=d   When using Plotly, you create traces which will plot the x and y data you specify. Here, you specify in trace1 that you want to plot a bar chart, with each Ticker on the x-axis and each ticker’s return on the y-axis. In trace2, to break up the data a bit, we’ll use a Scatter line chart for the Ticker on the x-axis and the S\u0026amp;P Return on the y-axis. Where the bar is above the line, the individual ticker (6 of 8 times) has outperformed the S\u0026amp;P 500. You then create a data object with these traces, and then you provide a layout for the chart; in this case you specify a title, barmode, and the position of the legend; you also pass in a title and tick format (percent format to two decimal places) for the y-axis series. You then create a figure object using go.Figure, specifying the data and layout objects, which you previously named data and layout.  The next chart below shows the gain / (loss) dollar amount for each position, relative to the S\u0026amp;P 500, as well as shows the Ticker Total Return %. While it is generally recommended that you allocate an equal position size to your positions (or potentially determine positition sizing based on implied volatility), this may not always be the case. For a less volatile investment, you may invest more than in a riskier position (or you may have other position sizing rules). Given this, this visualization shows both each position’s return and the dollar value contribution to your overall portfolio’s return.\nHere, you can see that although you invested slightly less in Facebook (FB) than other positions, this stock has returned an ~$20k in this mock portfolio, greater than a 4x return relative to an equivalent S\u0026amp;P 500 investment over the same holding period.\nThe next chart below leverages the cumulative columns which you created: 'Cum Invst', 'Cum SP Returns', 'Cum Ticker Returns', and 'Cum Ticker ROI Mult'.\n Across the x-axis you have sorted the portfolio alphabetically. Each position shows the initial investment and total value (investment plus returns or less losses) for that position, combined with the positions preceding it. To explain further, based on the ~$8k investment in AAPL, this grew to ~$22.5k (\u0026gt;$14k in gains), versus $15k in total value for the S\u0026amp;P. This is a 2.75x return over the initial investment in AAPL ($22.5k value from $8k investment is ~2.75x ROI). Continuing to FB, you have invested ~$16k in aggregate ($8k in both positions), and this has grown to over $50k, a greater than 3x total return — this means that FB expanded your overall portfolio ROI. Further down the x-axis, you see that both TWTR and WMT have reduced the overall portfolio ROI — this is obvious, as both have underperformed the S\u0026amp;P, but I believe that the magnitude of the contribution is clearer with this visualization. As a caveat, this cumulative approach, given the different holding periods, is a bit of an apples and oranges combination for some positions based on when they were acquired. However, you can always isolate this analysis by sub-setting into smaller dataframes and separately compare positions which have more consistent holding periods. For example, you could compare your 2H 2016 and 1H 2017 purchases separate of one another.  Adjusted Close % off of High Comparison Your final chart compares how far off each position’s latest close price is from its adjusted closing high since the position was purchased. This is generally an important visualization to consider:\n When a stock closes at higher prices, it’s generally recommended to adjust your trailing stop up as well. To illustrate, here’s an example: A position is acquired at $10 and doubles to $20 — using a 25% trailing stop, you would want to consider selling this position the next day if it closed at $15 ($15 / $20–1 = (25%)). If the position increased to $25, you would want to consider moving your trailing stop up to $18.75 ($18.75 / $25–1 = (25%)). As mentioned early on, nothing in here is intended to be financial advice; different trading systems have different rules for trailing stops, and this is an illustrative example. Trailing stops are meant to help preserve gains and are generally important in mitigating the emotions of investing; while it’s easy to see your position’s current return, what tends to be manual (or somewhat expensive if you use a trailing stop service) is calculating how close your positions are to your trailing stops. This final visualization makes this easy to evaluate for any date you are reviewing; in the chart, we see that AAPL, MTCH, and NFLX all closed on 3/9/2018 at their closing highs (typically a very good sign). However, TWTR is greater than 25% below its highest close (33% below as of 3/9/2018) and WMT is ~20% below its highest close. In this case, you might want to sell TWTR and continue to keep a close eye on the performance of WMT.  Limitations to Approach and Closing Summary Now you have a relatively extensible Jupyter notebook and portfolio dataset, which you are able to use to evaluate your stock portfolio, as well as add in new metrics and visualizations as you see fit.\nPlease note that while this notebook provides a fairly thorough review of a portfolio, the below have not yet been taken into consideration, would have an impact on the overall comparison, and likely present great areas for future development:\n As noted initially, this notebook focuses on active holdings — ideally, we would evaluate all positions, both exited and active, in order to have a truly holistic view on one’s investment strategy relative to alternatives, such as an index comparison. The approach in here does not factor in dividends; while we evaluate adjusted close prices (which reflect dividends), total shareholder return combines share price appreciation and dividends to show a stock’s total return; while this is more difficult to do, it is something I’m evaluating to include in the future. On a related note, investors can also reinvest dividends in a position, rather than take a cash distribution; this is arguably even more complicated than accounting for dividends, as the acquisition costs are low and spread out, and over several years of holding a position you could have four (or more) acquisition dates each year for stocks where you reinvest dividends.  With those future areas in mind, we accomplished a lot here; this includes importing S\u0026amp;P 500 and ticker data using Yahoo! Finance’s API and creating a master dataframe which combines your portfolio with historical ticker and comparative S\u0026amp;P 500 prices. In doing this, you are able to calculate the absolute percent and dollar value returns for each position (and as compared to equally timed S\u0026amp;P 500 investments), as well as the cumulative impact of each position on your overall portfolio’s performance. You can also dynamically monitor your trailing stops, based on your own trading rules. And you have created visualizations which allow you to have much better insight into your master dataframe, focusing on the different metrics and each position’s contribution to each.\nI hope that you found this tutorial useful, and I welcome any feedback in the comments. Feel free to also reach out to me on twitter, @kevinboller, and my personal blog can be found here.\n"});index.add({'id':94,'href':'/library/tutorials/docs/articles/data-science/web-scraping/web-scraping-101/','title':"Web Scraping 101",'content':" Web Scraping 101 in Python : overview of the tools \u0026amp; the pros and cons of each Summary:  Web Fundamentals Manually opening a socket and sending the HTTP request urllib3 \u0026amp; LXML requests \u0026amp; BeautifulSoup Scrapy Selenium \u0026amp; Chrome —headless Conclusion  Web Fundamentals The internet is really complex–there are many underlying technologies and concepts involved to view a simple web page in your browser. I\u0026rsquo;m not going to explain everything, but I will show you the most important things you have to understand in order to extract data from the web.\nHyperText Transfer Protocol HTTP uses a client/server model, where an HTTP client (a browser, your Python program, curl, Requests, and so on) opens a connection and sends a message (“I want to see the /product page”) to an HTTP server (like Nginx, Apache, and others).\nThen the server answers with a response (the HTML code, for example) and closes the connection. HTTP is called a stateless protocol, because each transaction (request/response) is independent. FTP, for example, is stateful.\nBasically, when you type a website address in your browser, the HTTP request looks like this:\nGET /product/ HTTP/1.1 Host: example.com Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/web\\ p,*/*;q=0.8 Accept-Encoding: gzip, deflate, sdch, br Connection: keep-alive User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit\\ /537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36  In the first line of this request, you can see multiples things:\n The GET verb or method being used, meaning we request data from the specific path, /product/. There are other HTTP verbs, and you can see the full list here. The version of the HTTP protocol. In this tutorial we will focus on HTTP 1. Multiple headers fields.  Here are the most important header fields:\n Host: The domain name of the server. If no port number is given, it is assumed to be 80. User-Agent: Contains information about the client originating the request, including the OS information. In this case, it is my web-browser (Chrome), on OSX. This header is important because it is either used for statistics (how many users visit my website on mobile vs. desktop) or to prevent any violations by bots. Because these headers are sent by the clients, it can be modified with a technique called “Header Spoofing”. This is exactly what we will do with our scrapers to make them look like a normal web browser. Accept: The content types that are acceptable as a response. There are lots of different content types and sub-types: text/plain, text/html, image/jpeg, application/json \u0026hellip; Cookie : name1=value1;name2=value2\u0026hellip; This header field contains a list of name-value pairs. These are called session cookies, and are what websites use to authenticate users and store data in your browser. For example, when you fill in a login form, the server will check if the credentials you entered are correct. If so, it will redirect you and inject a session cookie in your browser. Your browser will then send this cookie with every subsequent request to that server. Referrer: The Referrer header contains the URL from which the actual URL has been requested. This header is important because websites use this header to change their behavior based on where the user came from. For example, lots of news websites have a paying subscription and let you view only 10% of a post. But if the user came from a news aggregator like Reddit, they let you view the full content. Sites use the referrer to check this. Sometimes we will have to spoof this header to get to the content we want to extract.  And the list goes on. You can find the full header list here.\nA server will respond with something like this:\nHTTP/1.1 200 OK Server: nginx/1.4.6 (Ubuntu) Content-Type: text/html; charset=utf-8 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot; /\u0026gt; ...[HTML CODE]  On the first line, we have a new piece of information, the HTTP code 200 OK. This means the request has succeeded. As for the request headers, there are lots of HTTP codes, split into four common classes: 2XX for successful requests, 3XX for redirects, 4XX for bad requests (the most famous being 404 Not found), and 5XX for server errors.\nIf you are sending an HTTP request with your web browser, it will parse the HTML code, fetch all the eventual assets (JavaScript, CSS, and image files) and render the result into the main window.\nIn the next section we will see the different ways to perform HTTP requests with Python and extract the data we want from the responses.\nManually opening a socket and sending the HTTP request Socket The most basic way to perform an HTTP request in Python is to open a socket and manually send the HTTP request:\nimport socket HOST = 'www.google.com' # Server hostname or IP address PORT = 80 # Port client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = (HOST, PORT) client_socket.connect(server_address) request_header = b'GET / HTTP/1.0\\r\\nHost: www.google.com\\r\\n\\r\\n' client_socket.sendall(request_header) response = '' while True: recv = client_socket.recv(1024) if not recv: break response += str(recv) print(response) client_socket.close()  Now that we have the HTTP response, the most basic way to extract data from it is to use regular expressions.\nRegular Expressions A regular expression (RE, or Regex) is a search pattern for strings. With regex, you can search for a particular character or word inside a bigger body of text.\nFor example, you could identify all the phone numbers on a web page. You can also replace items easily. For example, you can replace all the uppercase tags in poorly formatted HTML with lowercase ones. You can also validate some inputs.\nYou may be wondering, why it is important to know about regular expressions when doing web scraping? After all, there are all kinds of different Python modules to parse HTML, XPath, and CSS selectors.\nIn an ideal semantic world, data is easily machine-readable, and information is embedded inside relevant HTML elements with meaningful attributes.\nBut the real world is messy. You will often find huge amounts of text inside a p element. When you want to extract specific data inside this huge block of text like a price, date, or name, you will have to use regular expressions.\nNote: Here is a great website to test your regex, and one awesome blog to learn more about them. This post will only cover a small fraction of what you can do with regular expressions.\nRegular expressions can be useful when you have this kind of data:\n\u0026lt;p\u0026gt;Price : 19.99$\u0026lt;/p\u0026gt;  We could select this text node with an Xpath expression, and then use this kind of regex to extract the price. Remember that regex patterns are applied from left to right, and each source character is only used once.:\n^Price\\s:\\s(\\d+\\.\\d{2})\\$  To extract the text inside an HTML tag, it is annoying to use a regex, but doable:\nimport re html_content = '\u0026lt;p\u0026gt;Price : 19.99$\u0026lt;/p\u0026gt;' m = re.match('\u0026lt;p\u0026gt;(.+)\u0026lt;\\/p\u0026gt;', html_content) if m: print(m.group(1))  As you can see, manually sending the HTTP request with a socket and parsing the response with regular expressions can be done, but it\u0026rsquo;s complicated. There are higher-level APIs that can make this task a lot easier.\nurllib3 \u0026amp; LXML Disclaimer: It is easy to get lost in the urllib universe in Python. You have urllib and urllib2 that are parts of the standard library, but there\u0026rsquo;s also urllib3. urllib2 was split into multiple modules in Python 3, and urllib3 should not be a part of the standard library anytime soon. All of these confusing details will be the subject of its own blog post. In this section, I chose to only talk about urllib3 as it widely used in the Python world.\nurllib3 is a high-level package that allows you to do pretty much whatever you want with an HTTP request. We can do what we did with socket above with way fewer lines of code:\nimport urllib3 http = urllib3.PoolManager() r = http.request('GET', 'http://www.google.com') print(r.data)  Much more concise than the socket version, isn\u0026rsquo;t it? Not only that, but the API is straightforward, and you can do many things easily like adding HTTP headers, using a proxy, POSTing forms, and so on.\nFor example, if we had to set some headers to use a proxy, we would only have to do this:\nimport urllib3 user_agent_header = urllib3.make_headers(user_agent=\u0026quot;\u0026lt;USER AGENT\u0026gt;\u0026quot;) pool = urllib3.ProxyManager(f'\u0026lt;PROXY IP\u0026gt;', headers=user_agent_header) r = pool.request('GET', 'https://www.google.com/')  See? Exactly the same number of lines.\nHowever, there are some things that urllib3 does not handle very easily. If we want to add a cookie, we have to manually create the corresponding headers and add it to the request.\nThere are also things that urllib3 can do that requests can\u0026rsquo;t, like creation and management of pool and proxy pool, and control of retry strategy.\nTo put it simply, urllib3 falls between requests and socket in terms of abstraction, although it\u0026rsquo;s way closer to requests than socket.\nTo parse the response, we are going to use the lxml package and XPath expressions.\nXPath Xpath is a technology that uses path expressions to select nodes or node sets in an XML or HTML document. As with the Document Object Model, Xpath is a W3C standard since 1999. Even if Xpath is not a programming language in itself, it allows you to write expressions that can directly access a specific node or node-set without having to go through the entire XML or HTML tree.\nThink of XPath as a sort of regular expression, but specifically for XML or HMTL.\nTo extract data from an HTML document with XPath we need 3 things:\n an HTML document some XPath expressions an XPath engine that will run those expressions  To begin, we will use the HTML that we got thanks to urllib3. We just want to extract all the links from the Google homepage, so we will use one simple XPath expression, //a, and use LXML to run it. LXML is a fast and easy to use XML and HTML processing library that supports XPATH.\nInstallation:\npip install lxml  Below is the code that comes just after the previous snippet:\nfrom lxml import html # We reuse the reponse from urllib3 data_string = r.data.decode('utf-8', errors='ignore') # We instantiate a tree object from the HTML tree = html.fromstring(data_string) # We run the XPath against this HTML # This returns an array of element links = tree.xpath('//a') for link in links: # For each element we can easily get back the URL print(link.get('href'))  And the output should look like this:\nhttps://books.google.fr/bkshp?hl=fr\u0026amp;tab=wp https://www.google.fr/shopping?hl=fr\u0026amp;source=og\u0026amp;tab=wf https://www.blogger.com/?tab=wj https://photos.google.com/?tab=wq\u0026amp;pageId=none http://video.google.fr/?hl=fr\u0026amp;tab=wv https://docs.google.com/document/?usp=docs_alc ... https://www.google.fr/intl/fr/about/products?tab=wh  Keep in mind that this example is really, really simple, and doesn\u0026rsquo;t really show you how powerful XPath can be. (Note: this XPath expression should have been changed to //a/@href to avoid having to iterate through links to get their href).\nIf you want to learn more about XPath you can read this good introduction. The LXML documentation is also well written and is a good starting point.\nXPath expresions, like regexp, are really powerful and one of the fastest ways to extract information from HTML. Though also like regexp, XPath can quickly become messy, hard to read, and hard to maintain.\nrequests \u0026amp; BeautifulSoup Requests is the king of Python packages–with more than 11,000,000 downloads, it is the most widely used package for Python.\nInstallation:\npip install requests  Making a request with Requests (no comment) is really easy:\nimport requests r = requests.get('https://www.scrapingbee.com') print(r.text)  With Requests it is easy to do things like perform POST requests, handle cookies, and query parameters.\nAuthentication to Hacker News Let\u0026rsquo;s say we want to create a tool to automatically submit our blog post to Hacker News or any other forums like Buffer. We would need to authenticate to those websites before posting our link. That\u0026rsquo;s what we are going to do with Requests and BeautifulSoup!\nHere is the Hacker News login form and the associated DOM:\nThere are three \u0026lt;input\u0026gt; tags on this form. The first one has a type hidden with the name \u0026ldquo;goto\u0026rdquo;, and the two others are the username and password.\nIf you submit the form inside your Chrome browser, you will see that there is a lot going on: a redirect and a cookie is being set. This cookie will be sent by Chrome on each subsequent request in order for the server to know that you are authenticated.\nDoing this with Requests is easy–it will handle redirects automatically for us, and handling cookies can be done with the Session object.\nThe next thing we will need is BeautifulSoup, which is a Python library that will help us parse the HTML returned by the server to find out if we are logged in or not.\nInstallation:\npip install beautifulsoup4  So all we have to do is to POST these three inputs with our credentials to the /login endpoint and check for the presence of an element that is only displayed once logged in:\nimport requests from bs4 import BeautifulSoup BASE_URL = 'https://news.ycombinator.com' USERNAME = \u0026quot;\u0026quot; PASSWORD = \u0026quot;\u0026quot; s = requests.Session() data = {\u0026quot;gogo\u0026quot;: \u0026quot;news\u0026quot;, \u0026quot;acct\u0026quot;: USERNAME, \u0026quot;pw\u0026quot;: PASSWORD} r = s.post(f'{BASE_URL}/login', data=data) soup = BeautifulSoup(r.text, 'html.parser') if soup.find(id='logout') is not None: print('Successfuly logged in') else: print('Authentication Error')  In order to learn more about BeautifulSoup, we could try to extract every link on the homepage.\nBy the way, Hacker News offers a powerful API, so we\u0026rsquo;re doing this as an example. You should really use the API instead of scraping it!\nThe first thing we need to do is to inspect the Hacker News home page to understand the structure and the different CSS classes that we will have to select:\nWe can see that all posts are inside a \u0026lt;tr class=\u0026quot;athing\u0026quot;\u0026gt; , so the first thing we will need to do is to select all these tags. This can be easily done with:\nlinks = soup.findAll('tr', class_='athing')  Then for each link, we will extract its id, title, url and rank:\nimport requests from bs4 import BeautifulSoup r = requests.get('https://news.ycombinator.com') soup = BeautifulSoup(r.text, 'html.parser') links = soup.findAll('tr', class_='athing') formatted_links = [] for link in links: data = { 'id': link['id'], 'title': link.find_all('td')[2].a.text, \u0026quot;url\u0026quot;: link.find_all('td')[2].a['href'], \u0026quot;rank\u0026quot;: int(links[0].td.span.text.replace('.', '')) } formatted_links.append(data) print(formatted_links)  As you saw, Requests and BeautifulSoup are great libraries to extract data and automate different things like filling out forms. If you want to do large-scale web scraping projects, you could still use Requests, but you would need to handle lots of things yourself.\nWhen you need to scrape a lots of webpages, there are many things you have to take care of:\n finding a way of parallelizing your code to make it faster handling errors storing results filtering results throttling your requests so you don\u0026rsquo;t overload the server  Fortunately for us, tools exist that can handle all of those things for us.\nScrapy Scrapy is a powerful Python web scraping framework. It provides many features to download web pages asynchronously, process, and save it. It handles multithreading, crawling (the process of going from link to link to find every URL in a website), sitemap crawling, and much more.\nScrapy has also an interactive mode called the Scrapy Shell. With Scrapy Shell, you can test your things in your scraping code really quickly like XPath expression or CSS selectors.\nThe downside of Scrapy is that the learning curve is steep–there is a lot to learn.\nTo follow up on our example about Hacker News, we are going to write a Scrapy Spider that scrapes the first 15 pages of results and saves everything in a CSV file.\nYou can easily install Scrapy with pip:\npip install Scrapy  Then you can use the scrapy cli to generate the boilerplate code for our project:\nscrapy startproject hacker_news_scraper  Inside hacker_news_scraper/spider we will create a new Python file with our Spider\u0026rsquo;s code:\nfrom bs4 import BeautifulSoup import scrapy class HnSpider(scrapy.Spider): name = \u0026quot;hacker-news\u0026quot; allowed_domains = [\u0026quot;news.ycombinator.com\u0026quot;] start_urls = [f'https://news.ycombinator.com/news?p={i}' for i in range(1,16)] def parse(self, response): soup = BeautifulSoup(response.text, 'html.parser') links = soup.findAll('tr', class_='athing') for link in links: yield { 'id': link['id'], 'title': link.find_all('td')[2].a.text, \u0026quot;url\u0026quot;: link.find_all('td')[2].a['href'], \u0026quot;rank\u0026quot;: int(link.td.span.text.replace('.', '')) }  There is a lot of convention in Scrapy. Here we define an Array of starting URLs. The attribute name will be used to call our Spider with the Scrapy command line.\nThe parse method will be called on each URL in the start_urls array\nWe then need to tune Scrapy a little bit in order for our Spider to behave nicely against the target website.\n# Enable and configure the AutoThrottle extension (disabled by default) # See https://doc.scrapy.org/en/latest/topics/autothrottle.html AUTOTHROTTLE_ENABLED = True # The initial download delay AUTOTHROTTLE_START_DELAY = 5  You should always turn this on. It will make sure the target website will not slow down because of your spiders by analyzing the response time and adapting the number of concurrent threads.\nYou can run this code with the Scrapy CLI and with different output format (CSV, JSON, XML, and so on):\nscrapy crawl hacker-news -o links.json  And that\u0026rsquo;s it! You will now have all your links in a nicely formatted JSON file.\nSelenium \u0026amp; Chrome Scrapy is really nice for large-scale web scraping tasks. But it is not enough if you need to scrape Single Page Applications written with JavaScript frameworks because it won\u0026rsquo;t be able to render the JavaScript code.\nIt can be challenging to scrape these SPAs because there are often lots of AJAX calls and websockets connections involved. If performance is an issue, you should always try to reproduce the JavaScript code, meaning manually inspecting all the network calls with your browser inspector and replicating the AJAX calls containing the interesting data.\nIn some cases, there are just too many asynchronous HTTP calls involved to get the data you want, and it can be easier to just render the page in a headless browser.\nAnother great use case would be to take a screenshot of a page. This is what we are going to do with the Hacker News homepage (again !)\nYou can install the Selenium package with pip:\npip install selenium  You will also need Chromedriver:\nbrew install chromedriver  Then we just have to import the Webdriver from the Selenium package, configure Chrome with headless=True, and set a window size (otherwise it is really small):\nfrom selenium import webdriver from selenium.webdriver.chrome.options import Options options = Options() options.headless = True options.add_argument(\u0026quot;--window-size=1920,1200\u0026quot;) driver = webdriver.Chrome(options=options, executable_path=r'/usr/local/bin/chromedriver') driver.get(\u0026quot;https://news.ycombinator.com/\u0026quot;) driver.save_screenshot('hn_homepage.png') driver.quit()  You should then get a nice screenshot of the homepage:\nYou can do many more things with the Selenium API and Chrome like:\n Executing JavaScript Filling out forms Clicking on elements Extracting elements with CSS selectors or XPath expressions  Selenium and Chrome in headless mode is really the ultimate combination to scrape anything you want. You can automate anything that you could do with your regular Chrome browser.\nThe big drawback is that Chrome needs lots of memory / CPU power. With some fine-tuning you can reduce the memory footprint to 300-400mb per Chrome instance, but you still need 1 CPU core per instance.\nIf you want to run several Chrome instances concurrently, you will need powerful servers (the cost of which goes up quickly) and constant monitoring of resources.\n Source :\n "});index.add({'id':95,'href':'/library/tutorials/docs/articles/data-science/finance/yahoo-finance-api_1/','title':"Yahoo \u0026 Google Finance API",'content':" Python for Finance, Part I: Yahoo \u0026amp; Google Finance API, pandas, and matplotlib Getting the Data Pandas and matplotlib are included in the more popular distributions of Python for Windows, such as Anaconda.\nIn case it\u0026rsquo;s not included in your Python distribution, just simply use pip or conda install. Once installed, to use pandas, all one needs to do is import it. We will also need the pandas_datareader package (pip install pandas-datareader), as well as matplotlib for visualizing our results.\nfrom pandas_datareader import data import matplotlib.pyplot as plt import pandas as pd\nHaving imported the appropriate tools, getting market data from a free online source, such as Yahoo Finance, is super easy. Since pandas has a simple remote data access for the Yahoo Finance API data, this is as simple as:\nUPDATE (4/14/18): YAHOO FINANCE API ISSUE Yahoo finance has changed the structure of its website and as a result the most popular Python packages for retrieving data have stopped functioning properly. Until this is resolved, we will be using Google Finance for the rest this article so that data is taken from Google Finance instead. We are using the ETF \u0026ldquo;SPY\u0026rdquo; as proxy for S\u0026amp;P 500 on Google Finance\nPlease note that there has been some issues with missing data in Google\u0026rsquo;s API, as well as frequent, random errors that occur when pulling a lot of data.\n# Define the instruments to download. We would like to see Apple, Microsoft and the S\u0026amp;P500 index. tickers = ['AAPL', 'MSFT', '^GSPC'] # We would like all available data from 01/01/2000 until 12/31/2016. start_date = '2010-01-01' end_date = '2016-12-31' # User pandas_reader.data.DataReader to load the desired data. As simple as that. panel_data = data.DataReader('INPX', 'google', start_date, end_date)  What does panel_data look like? data.DataReader returns a Panel object, which can be thought of as a 3D matrix. The first dimension consists of the various fields Yahoo Finance returns for a given instrument, namely, the Open, High, Low, Close and Adj Close prices for each date. The second dimension contain the dates. The third one contains the instrument identifiers.\nLet\u0026rsquo;s see what panel_data actually is by temporarily making it a dataframe and calling the top nine rows:\npanel_data.to_frame().head(9)  Preparing the Data Let us assume we are interested in working with the Close prices which have been already been adjusted by Google finance to account for stock splits. We want to make sure that all weekdays are included in our dataset, which is very often desirable for quantitative trading strategies.\nOf course, some of the weekdays might be public holidays in which case no price will be available. For this reason, we will fill the missing prices with the latest available prices:\n# All we need to do is reindex close using all_weekdays as the new index close = close.reindex(all_weekdays) # Reindexing will insert missing values (NaN) for the dates that were not present # in the original set. To cope with this, we can fill the missing by replacing them # with the latest available price for each instrument. close = close.fillna(method='ffill')  Initially, close contains all the closing prices for all instruments and all the dates that Google returned. Some of the week days might be missing from the data Google provides. For this reason we create a Series of all the weekdays between the first and last date of interest and store them in the all_weekdays variable. Getting all the weekdays is achieved by passing the freq=’B’ named parameter to the pd.date_range() function. This function return a DatetimeIndex which is shown below:\nprint(all_weekdays) # DatetimeIndex(['2010-01-01', '2010-01-04', '2010-01-05', '2010-01-06', # '2010-01-07', '2010-01-08', '2010-01-11', '2010-01-12', # '2010-01-13', '2010-01-14', # ... # '2016-12-19', '2016-12-20', '2016-12-21', '2016-12-22', # '2016-12-23', '2016-12-26', '2016-12-27', '2016-12-28', # '2016-12-29', '2016-12-30'], # dtype='datetime64[ns]', length=1826, freq='B')  Aligning the original DataFrame with the new DatetimeIndex is accomplished by substitution of the initial DatetimeIndex of the close DataFrame. If any of the new dates were not included in the original DatetimeIndex, the prices for that date will be filled with NaNs. For this reason, we will fill any resulting NaNs with the last available price. The final, clean DataFrame is shown below:\nclose.head(10)     Date AAPL MSFT SPY     01/01/2010 nan nan nan   04/01/2010 30.57 30.95 113.33   05/01/2010 30.63 30.96 113.63   06/01/2010 30.14 30.77 113.71   07/01/2010 30.08 30.45 114.19   08/01/2010 30.28 30.66 114.57   11/01/2010 30.02 30.27 114.73   12/01/2010 29.67 30.07 113.66   13/01/2010 30.09 30.35 114.62   14/01/2010 29.92 30.96 114.93    Looking at the Data Our dataset is now complete and free of missing values. We can see a summary of the values in each of the instrument by calling the describe() method of a Pandas DataFrame:\nclose.describe()     Dest AAPL MSFT SPY     count 1825.0 1825.0 1825.0   mean 79.413167 37.118404999999996 164.67498600000002   std 28.30244 10.814263 37.049846   min 27.44 23.01 102.2   25% 55.46 27.84 131.28   50% 78.44 33.03 165.22   75% 103.12 46.11 201.99   max 133.0 63.62 227.76    Suppose we would like to plot the MSFT time-series. We would also like to see how the stock behaves compared to a short and longer term moving average of its price.\nA simple moving average of the original time-series is calculated by taking for each date the average of the last W prices (including the price on the date of interest). pandas has rolling(), a built in function for Series which returns a rolling object for a user-defined window, e.g. 20 days.\nOnce a rolling object has been obtained, a number of functions can be applied on it, such as sum(), std() (to calculate the standard deviation of the values in the window) or mean(). See below:\n# Get the MSFT timeseries. This now returns a Pandas Series object indexed by date. msft = close.loc[:, 'MSFT'] # Calculate the 20 and 100 days moving averages of the closing prices short_rolling_msft = msft.rolling(window=20).mean() long_rolling_msft = msft.rolling(window=100).mean() # Plot everything by leveraging the very powerful matplotlib package fig, ax = plt.subplots(figsize=(16,9)) ax.plot(msft.index, msft, label='MSFT') ax.plot(short_rolling_msft.index, short_rolling_msft, label='20 days rolling') ax.plot(long_rolling_msft.index, long_rolling_msft, label='100 days rolling') ax.set_xlabel('Date') ax.set_ylabel('Adjusted closing price ($)') ax.legend()  RESULT:\nNow, we finally the stock price history together with the two moving averages plotted!\nWhat\u0026rsquo;s Next All of this has been but a small preview of the way a quantitative analyst can leverage the power of Python and pandas to analyze scores of financial data. In part 2 of this series on Python and financial quantitative analysis, we are going to show how to use the two technical indicators already created to create a simple yet realistic trading strategy.\n Written with StackEdit.\n "});index.add({'id':96,'href':'/library/tutorials/docs/articles/website/javascript/api-for-javascript/','title':"รวม API สำหรับ Javascript ที่น่าสนใจในปี 2020",'content':" รวม API สำหรับ Javascript ที่น่าสนใจในปี 2020 หากคุณอยากเขียนไซต์หรือโปรแกรมของคุณ ในหัวของคุณคงมีภาพไซต์ที่มีฟีเจอร์มากมาย แต่จะทำอย่างไรล่ะให้ไซต์ของคุณเป็นไปตามที่วาดเอาไว้ เราจึงได้รวบรวม API สำหรับ JavaScript ที่จะทำให้ไซต์ของคุณทำงานได้อย่างหลากหลายทันต่อยุคสมัยปี 2020\nYoutube API Youtube เป็นหนึ่งในสิ่งที่ทุกคนใช้กันอย่างล้นหลาม และเป็นส่วนหนึ่งในชีวิตประจำวันของทุกคน จะเป็นอย่างไรถ้าเรานำยูทูปมาเป็นส่วนหนึ่งในไซต์ของเรา โดย Youtube API จะช่วยให้เราสามารถนำวิดิโอที่เราต้องการมาแปะในไซต์ของเราได้โดยไม่จำเป็นต้องเปลี่ยนหน้าไปที่ลิงค์วิดิโอของวิดิโอนั้นๆ\nhttps://developers.google.com/youtube\nGoogle Map API เราสามารถย่อส่วนกูเกิ้ลแมพมาใส่ไซต์ของเราได้!! ด้วย API ของ Google Map จะทำให้เราสามารถนำ service ต่างๆของ Google Map มาใส่ในไซต์ของเราได้ ไม่ว่าจะเป็นนำแผนที่มาใส่ในไซต์ หรือปักหมุดบนแผนที่ ซึ่งเป็นประโยชน์มากหากเราต้องการระบุตำแหน่งสถานที่ต่างๆบนแผนที่ ถึงแม้จะไม่สามารถทำทุกอย่างได้เหมือนกูเกิ้ลแมพหลักแต่ก็มีประโยชน์มากไม่น้อย\nhttps://developers.google.com/maps/documentation/javascript/tutorial\nNasa API นาซ่าเองก็มี API ของตัวเอง โดย API ของนาซ่าจะทำให้เราสามารถนำข้อมูลต่างๆที่น่าสนใจของนาซ่ามาแปะไว้ในไซต์ของเราได้ ไม่ว่าจะเป็นข้อมูลทางดาราศาสตร์ต่างๆ บทคความสนุกๆของนาซ่า หรือรูปภาพสวยๆของนาซ่า ซึ่งแต่ละวันนาซ่าจะมี Picture of The Day ที่เป็นภาพที่นาซ่าคัดมาไม่ซ้ำกัน ช่วยเพิ่มความสนุกให้ในการเยี่ยมชมไซต์ของเราได้ไม่น้อย\nhttps://api.nasa.gov/\nWeb Animation API อยากให้ไซต์ของเรามีอนิชั่นสวยๆ แต่CSSมันก็ใช้ยากเหลือเกิน แถมการเคลื่อนไหวก็ดูไม่ค่อยสมูท ปัญหานี้จะหมดไปเมื่อเราใช้ Web Animation API ซึ่งช่วยให้เราจัดการอนิเมชั่นของCSS animationได้ง่ายขึ้น ช่วยให้ไซต์ของเราให้มีชีวิตชีวามากขึ้น\nhttps://developers.google.com/web/updates/2018/10/animation-worklet\nWeb Speech API API นี้จะช่วยให้ไซต์ของเราสามารถรับ input ด้วยเสียงได้ เป็นการปลดขีดความสามารถให้ไซต์ของเราน่าใช้งานมากขึ้น เนื่องจากการรับinput ด้วยเสียงสามารถนำไปต่อยอดได้อย่างหลากหลาย และที่สำคัญ APIนี้สามารถรองรับการนำเข้าเสียงภาษาไทยได้อีกด้วย\nhttps://wicg.github.io/speech-api/\nFacebook API หากพูดถึง social media ในยุคปัจจุบัน คงจะเป็นไปม่ได้เลยที่จะไม่นึกถึง Facebook ที่มีผู้คนจากทั่วโลกใช้กันอย่างล้นหลามแทบทุกคนก็ย่อมมีบัญชีใช้งานของเฟซบุ๊คกันทั้งนั้น ซึ่งทางเฟซบุ๊คเองก็มี API ที่ทำให้ไซต์ของเราสามารถล็อคอินเพื่อยืนยันตัวตนผ่านบัญชีของเฟซบุ๊ค และสามารถแชร์ไซต์ของเราผ่านบัญชีผู้ใช้ได้อีกด้วย\nhttps://developers.facebook.com/\n Twitter API social media อีกค่ายหนึ่งที่มีผู้คนใช้มากมายไม่แพ้กันอีกค่ายหนึ่งคงหนีไม่พ้นเจ้านกน้อยสีฟ้าอย่าง Twitter ซึ่งทาง Twitter เองก็มี API สำหรับให้ผู้ใช้จัดการบัญชีบนไซต์ของเราได้เช่นเดียวกัน\nhttps://developer.twitter.com/\nGoogle Cloud Vision API หากเราต้องการให้ไซต์เข้าใจรูปๆหนึ่งว่าเป็นรูปอะไร ตามปกติเราจะต้องสร้าง neural network ขึ้นมาเองซึ่งทำเองได้ยาก Google ได้สร้าง API ตัวนี้ข้นมาเพื่อให้เราสามารถใช้ neural network ของ Google ได้เลย เพื่อให้ไซต์ของเราสามารถวิเคราะห์ภาพเองได้\nhttps://cloud.google.com/vision/\nGeneric Sensor API สมัยนี้เซนเซอร์ต่างๆ มีผลต่อชีวิตของเรามากขึ้น เช่น แสง อุณหภูมิ ความชื้นในอากาศ API ตัวนี้จะทำให้เราสามารถรับค่าจากเซนเซอร์ต่างๆ เพื่อให้เราตอบสนองต่อปัจจัยเหล่านั้นได้\nhttps://www.w3.org/TR/generic-sensor/\nRapidAPI ไซต์ที่เป็นแหล่งรวม API ที่มีข้อมูลจิปาถะย่อยๆที่สามารถนำมาแปะไว้ในไซต์ของเราได้ ไม่ว่าจะเป็นผลฟุลบอล ข้อมูลหนังต่างๆ หรือแม้แต่ข้อมูลสูตรทำอาหาร ที่มีให้เลือกสรรอย่างมากมาย โดยจะมีทั้งแบบฟรีและไม่ฟรีตามการใช้งาน\nhttps://rapidapi.com/\nจะเห็นว่าในยุคปัจจุบันนี้เรามี API มากมายที่ช่วยให้การเพิ่มความสะดวกสบายในการเขียนเว็ปหรือโปรแกรมของเรา ดังนั้นเวลาที่ต้องการให้โปรแกรมมีการทำงานอะไรเพิ่มขึ้นมา อย่าลืมที่จะเสิร์ชหา API เพื่อนรักที่จะทำให้เราเขียนเว็ปได้อย่างแฮปปี้มากขึ้นนะครับ\n Written with StackEdit.\n "});})();