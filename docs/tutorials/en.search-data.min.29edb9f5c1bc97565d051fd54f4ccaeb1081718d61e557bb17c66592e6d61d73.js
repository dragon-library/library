'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/library/book/docs/front-end/bootstrap/basic-bootstap/ep-1/','title':"Bootstrap 4 แบบพื้นฐาน ตอนที่ 1",'content':" สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน ตอนที่ 1 บทความนี้เป็นบทความสอนการใช้ Bootstrap เรื่องมีอยู่ว่าที่ทำงานของผมส่งผมไปเรียนคอส Web Design สอนโดย อ.กษิติ พันธุ์ถนอม คอสนี้เกี่ยวกับการใช้งาน Bootstrap4 ซึ่งผมก็พอจะรู้อยู่บ้างแล้ว การเรียนครั้งนี้เลยเหมือนการทบทวนและเพิ่มเติมเทคนิคต่างๆ ผมก็เลยได้โอกาสเขียนเป็นบล็อกนี้ขึ้นครับ\nโดยเป้าหมายคือ การใช้งาน Bootstrap ทำให้เว็บ responsive แล้วก็ใช้งาน component ของ Bootstrap ต่างๆ รวมถึงคลาสที่ใช้งานบ่อยๆ นอกจากนี้ก็มีแนะนำเทค และการใช้เครื่องมือช่วยต่างๆด้วย\nติดตั้ง VS code เครื่องมือสำหรับเขียน แนะนำ VS Code ใครไม่มีก็ติดตั้งเลย\nดาวน์โหลดได้ที่\nhttps://code.visualstudio.com/\nเริ่มต้น เริ่มจากการพิมพ์คำสั่งลัด html:5 เพื่อให้ VS Code generate code ให้อัตโนมัติ\nคำสั่ง meta UTF-8 และ viewport สำคัญสำหรับ Bootstrap ต้องใส่ทุกครั้ง ซึ่งมันก็สร้างมาให้แล้ว\n\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; อีกอันคือพิมพ์ว่า lorem มันจะ generate ประโยคที่เรียกว่า lorem ให้ มันคือคำที่ไม่มีความหมาย เอามาวางไว้เฉยๆว่านี่คือตัวอักษรจะเห็นในงานพวก design หรือตัวอย่างโค้ดบ่อยๆ\nDeprecate tag ใน HTML5 มียกเลิก tag บางอย่างไปแล้ว เปลี่ยนมาใช้อันใหม่ เช่น \u0026lt;b\u0026gt; เปลี่ยนเป็น \u0026lt;strong\u0026gt; \u0026lt;i\u0026gt; ไม่ใช่ตัวเอียง แต่เป็น icons\nทบทวน CSS ก่อนอื่นทบทวน css นิดนึง css คือภาษาสำหรับจัดแต่งหน้า HTML ในบทความนี้ การเขียน style ไม่แนะนำให้ใช้แบบ inline Style เพราะไม่ทำงานในบาง device , Framework แนะนำ external style sheet คือ เขียนแยกจาก HTML tag\nเพิ่ม css ใน html เพิ่มให้ html ขอเราใช้ไฟล์ .css ได้\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/custom.css\u0026#34;/\u0026gt; Selector สมมุติเราจะกำหนดให้ h1 เป็นสี #dd1144\nh1 {\rcolor:#d14\r} ต้องการให้ h1 ที่อยู่ใน div เป็นสีแดง เขียนแบบนี้ได้\ndiv h1{\rcolor:red;\r} การใช้ !important ปกติการทำงานจะทำแบบบนลงล่าง ทำให้คำสั่งมันทับกันได้ แต่ถ้าไม่อยากให้มันอานทับ ให้เพิ่ม !important\nh1{\rcolor:#d14 !important;\r}\rh1{\rcolor:green;\r} การใช้ id กำหนด id ให้ tag\n\u0026lt;div id=\u0026#34;first\u0026#34;\u0026gt; ใน CSS จะใช้สัญลักษณ์ #\n#first{\rbackground: lightblue;\r} การใช้ class กำหนด class ให้ tag ได้ ซึ่งใน Bootstrap จะใช้บ่อย\n\u0026lt;div class=\u0026#34;second\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Outside\u0026lt;/h1\u0026gt;\r\u0026lt;/div\u0026gt; ใน CSS จะใช้สัญลักษณ์ .\n.second{\rbackground: indianred;\r} id vs class id มีได้ element เดียว แต่ class มีได้หลาย element การใช้ id ส่วนใหญ่จะใช้เชื่อมกับ js ส่วน class จะมักเชื่อมกับ css และใน bootstrap จะเน้นใช้ class ส่วน id จะใช้เชื่อมกับของ bootstrap เอง\nรู้จัก Bootstrap Bootstrap คือ UI Framework พูดง่ายๆคือเขาเขียน CSS , JS สวยๆ มาให้แล้ว เรามีหน้าที่เรียกใช้ ซึ่งส่วนใหญ่ Bootstrap จะใช้ การเรียก class เป็นหลัก เรามาลองใช้งานกันนะ ตอนนี้ Bootstrap เวอชัน 4\nดาวน์โหลด Bootstrap ไปที่เว็บ https://getbootstrap.com/\n\nพอโหลด Bootstrap มาให้ copy มาไว้ในโปรเจค จะได้โฟลเดอร์ css กับ js มีไฟล์ด้านในประมาณนี้\nbootstarp grid จะมีเฉาะเรื่อง grid และ layout\nbootstrap reboot จะมีฟังชันก์ใหม่ ตัวที่ยังไม่ใช่ production จริง\nbootstarp.css จะเป็นแบบโค้ดสวยๆ อ่านได้\nbootstarp.min.css จะทำ minify มาแล้ว ตัด space และ ขึ้นบรรทัดใหม่ ทำให้ไฟล์เล็กลง\n[เวลาจะใช้งานจริง เราจะใช้ bootstrap.min.css ในการทำงาน\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34;/\u0026gt; การจัด Layout แบบ GRID ใน bootstrap จะใช้ระบบ GRID ในการวาง layout ต่างๆ\nเริ่มจากใช้ div ที่มี class ชื่อว่า container \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Hello\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34;/\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\nด้านในจะมี div ย่อย แบ่งเป็น row col คล้ายกับตาราง\nแนะนำเขียน comment เอาไว้ ซึ่งใน HTML จะใช้ \u0026lt;!– –\u0026gt;\n\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close col 1.1 --\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close row 1 --\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close container --\u0026gt;\r\u0026lt;/body\u0026gt; class container จะทำให้มีพื้นที่ว่างด้านข้าง และเปลี่ยน Font เป็น Helvetica Neue\n\nเพื่อนของมันอีกตัวคือ container-fluid มันจะขายเต็มจอ\n\u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; มาลองเล่นเรื่องรูปภาพกันบ้าง\nดาวน์โหลดรูปภาพ\nเพิ่มรูปภาพใน grid col คือใช้ \n\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026gt;\r\u0026lt;img src=\u0026#34;img/banner/banner2.jpg\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt; ลองเลือกรูปภาพใหญ่ๆ เมื่อเปิดดูจะเห็นว่ารูปภาพมีขนาดใหญ่จนล้นจอ ยิ่งเปิดในมือถือก็ยิ่งล้น มันไม่ responsive\nวิธีแก้คือ เพิ่ม class ชื่อว่า img-fluid\n\u0026lt;img src=\u0026#34;img/banner/banner2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34;\u0026gt; รูปภาพจะปรับ scale อัตโนมัติ\nลองเพิ่ม col 3 อัน มันจะแบ่งหน้าจอให้เท่ากัน เป็น 3 ส่วน\n\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 1 --\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/banner/banner2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 2 --\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CEO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CTO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff3.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CFO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 3 --\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close container --\u0026gt;\r\u0026lt;/body\u0026gt; ](https://benzneststudios.com/blog/wp-content/uploads/2018/11/8.png \u0026ldquo;8\u0026rdquo;)\n1 แถวของ Bootstrap มี 12 หน่วย ถ้าเกินมันจะล่วงลงมาแถวใหม่ ถ้าใส่ไม่ถึง 12 มันจะมีช่องว่างที่เหลืออยู่\nวิธีการคือ ใช้คลาส col- ตามด้วยหน่วย เช่น ต้องการให้คอลัมภ์แรก 50% ของแถว อีกสองอันก็แบ่งอันละ 25%\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-6\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CEO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CTO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff3.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CFO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ทีนี้ลองมาดูปัญหาเมื่อเปิดในจอของโทรศัพท์ คอลัมภ์สามอันมันดูอึดอัด การดูในมือถือมันควรจะแสดงทีละอัน มันยังไม่ responsive\nวิธีการคือใช้ Grid option เช่น col-md-4 หมายถึง ถ้าหน้าจอมีขนาดมากกว่า Medium มันจะใช้หน่วยขนาด 4 แต่ถ้าไม่ใช่ มันจะใช้ 1 เป็นค่าเดิม ซึ่ง Medium มีหน้าจอขนาด \u0026gt;= 768px ซึ่งคือหน้าจอคอมนั่นเอง ดังนั้น ถ้าหน้าจอเล็กมันก็จะใช้ col-1 แทนนั่นเอง หน้าจอมือถือเลยแสดง col-1 ซึ่งคืออันเดียวเต็มจอ\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CEO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CTO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff3.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;CFO\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 3 --\u0026gt; พอเปิดในจอเล็กมันก็แสดงเต็มจอแล้ว\nดูรายละเอียดเรื่อง Grid Option ได้ที่\nhttps://getbootstrap.com/docs/4.0/layout/grid/\nซึ่งนอกจาก md แล้วก็มี sm , lg , xl ด้วย\n[จะได้ประมาณนี้\n[Source code https://gist.github.com/benznest/f365a2de60451b6696c78d5ce642e293\nการจัด Format ตอนนี้ เราจะเริ่มใช้  ซับซ้อนขึ้น โค้ดมันอาจจะไม่เป็นระเบียบ\nวิธีการให้มันจัดระเบียบ คือ คลิกขวาเลือก Format document หรือกด Shift + Alt + F\n[การซ้อน Grid เราสามารถนำ Grid มาซ้อนอีกชั้นได้ โดยมันจะยังใช้หน่วย 12 เหมือนเดิม\n\u0026lt;!-- Start Row 4 --\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-6 col-12\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life2.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-8\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Service\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro!\rQuisquam\rvoluptatibus nesciunt impedit\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life3.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-8\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Subscription\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro!\rQuisquam\rvoluptatibus nesciunt impedit\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-8\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;More\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro!\rQuisquam\rvoluptatibus nesciunt impedit\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-6 col-12\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/content/office12.jpg\u0026#34; class=\u0026#34;img-fluid\u0026#34; /\u0026gt;\r\u0026lt;h1\u0026gt;About\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio odit illum autem porro! Quisquam\rvoluptatibus nesciunt impedit, suscipit corporis, minus culpa molestiae necessitatibus blanditiis,\rrepellat mollitia beatae hic voluptatum deleniti.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;!-- Close Row 4 --\u0026gt; Source code https://gist.github.com/benznest/5c13cf8292c68a89183103233f53f7bd\nClass ของรูปภาพ เพิ่มความสวยงามให้กับรูปภาพ ด้วย class ชื่อว่า rounded รุปภาพจะมีขอบมน\n\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt; หรือจะใช้ class ชื่อว่า rounded-circle ทำให้รูปเป็นวงกลม\n\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid rounded-circle\u0026#34; /\u0026gt; อีกอัน คือ class ชื่อว่า img-thumbnail ทำให้รูปมีขอบเป็นเส้นด้านนอก\n\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid img-thumbnail\u0026#34; /\u0026gt; Class ของ Width มี class ของ bootstrap ที่ใช้บ่อย เช่น การกำหนด width %\nเช่น w-50 คือกำหนด ให้มีขนาด 50% และการกำหนด mx-auto d-block คือการกำหนดตรงกลาง\n\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;w-50 mx-auto d-block\u0026#34; /\u0026gt;\r\u0026lt;h1 class=\u0026#34;text-center\u0026#34;\u0026gt;CEO\u0026lt;/h1\u0026gt; class เพื่อนๆในแก็งนี้ก็มี w-25 , w-50 , w-75 , w-100\n\u0026lt;img src=\u0026#34;img/staffs/staff1.jpg\u0026#34; class=\u0026#34;w-50\u0026#34; /\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff2.jpg\u0026#34; class=\u0026#34;w-75\u0026#34; /\u0026gt;\r\u0026lt;img src=\u0026#34;img/staffs/staff3.jpg\u0026#34; class=\u0026#34;w-100\u0026#34; /\u0026gt; การ Custom Bootstrap เวลาเราจะเพิ่ม css ของเราและต้องการทับกับ bootstrap ให้ไปเขียนที่ custom.css\nเช่น ต้องเปลี่ยนสีพื้นหลัง ของ class container ซึ่ง container เป็นของ bootstrap\nbody{\rbackground: #DCEBFC;\r}\r.container{\rbackground: #FFF;\r} แล้วก็เวลาเรียกใน HTML ให้ใส่ทีหลัง bootstrap.css นะ เพราะมันจะได้อ่านทับ bootstrap แล้วนั่นเอง\n\u0026lt;head\u0026gt;\r...\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/custom.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt; หน่วย rem rem คือ root element มันคือการกำหนด font-size ที่ root แล้วเอามาคูณ เช่น ถ้ากำหนด font-size 10 px\n2 rem = 16×2 = 32 px นั่นเอง\nใน Bootstrap จะใช้ font-size = 16 px ดังนั้น 1 rem = 16 px\nลองกำหนด padding ของ container 4.5rem = 16×4.5 = 72px\nbody{\rbackground: #DCEBFC;\r}\r.container{\rbackground: #FFF;\rpadding: 4.5rem\r} การ custom ค่า font-size ไม่ใช้ของ bootstrap ต้องไปเซ็ตใน html ที่เป็น root element\nhtml{\rfont-size:8px;\r} ค่า rem ก็จะเปลี่ยนมาใช้ font-size ของเราแทน\nbody{\rbackground: #DCEBFC;\r}\r.container{\rbackground: #FFF;\rpadding: 10rem\r}\rh1,h2,h3{\rcolor:#4F85D7;\r} Class สำหรับ Margin – Padding – Border เราสามารถใช้ rem มาใช้กับ class Margin Padding ได้\nmargin คือระยะห่างจาก element นี้กับอันอื่น\npadding คือระยะห่างจากเนื้อหาถึงขอบ\nborder คือ ขนาดขอบ\nวิธีการคือ {boxmodel}{position}-{rem}\nmargin-top 3 rem = mt-3 padding 5 rem = p-5 margin 2 rem = m-2 padding-bottom 3 rem= pd-3 ลองกำหนด padding-top 4 rem ซึ่งมีขนาด 16×4 = 64 px\n\u0026lt;div class=\u0026#34;row pt-4\u0026#34;\u0026gt;\r... ซึ่ง class margin padding ใช้บ่อยมากๆ\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life2.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life3.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life4.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life5.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life6.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life7.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-3 mt-2\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;img/life/life8.jpg\u0026#34; class=\u0026#34;img-fluid rounded\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 5 --\u0026gt; Custom font มาลองเปลี่ยน font ให้กับเว็บกัน\nเข้าไปดาวน์โหลด font ที่ Google Font\nhttps://fonts.google.com/\nเลือกอันที่ชอบ กด +\n[มันจะมีแถบด้านล่าง กดขึ้นมาเลือกแท็บ IMPORT แล้ว copy โค้ด @import\n[เอาไปวางใน custom.css ของเรา\nจากนั้นอยากใช้ font ตรงไหนก็เอา font-family ไปวางไว้ เช่นใส่ทั้งหน้าเลยก็ใส่ที่ body\n@import url(\u0026#39;https://fonts.googleapis.com/css?family=Indie+Flower\u0026#39;);\rbody{\rbackground: #DCEBFC;\rfont-family: \u0026#39;Indie Flower\u0026#39;, cursive;\r}\r.container{\rbackground: #FFF;\rpadding: 1.5rem\r}\rh1,h2,h3{\rcolor:#4F85D7;\r} ทำ Footer ลองเพิ่ม class ของเราเองชื่อ footer\nเนื้อหาใส่เป็นคำคม เพื่อลองใช้ font อีกตัว\n\u0026lt;div class=\u0026#34;row footer p-5\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-12\u0026#34;\u0026gt;\r\u0026lt;h2 class=\u0026#34;text-center\u0026#34;\u0026gt;Nothing in life is to be feared,\rit is only to be understood.\rNow is the time to understand more,\rso that we may fear less.\u0026lt;/h2\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ก็ทำเหมือนเดิม คือเพิ่มตรง @import\nแล้วก็ใส่ font-family ที่ footer\n@import url(\u0026#39;https://fonts.googleapis.com/css?family=Dancing+Script|Indie+Flower\u0026#39;);\rbody{\rbackground: #DCEBFC;\rfont-family: \u0026#39;Indie Flower\u0026#39;, cursive;\r}\r.container{\rbackground: #FFF;\rpadding: 1.5rem\r}\rh1,h2,h3{\rcolor:#4F85D7;\r}\r.footer{\rfont-family: \u0026#39;Dancing Script\u0026#39;, cursive;\r} Source code https://gist.github.com/benznest/21a5a7f2acbce4815433cd77f91c0b8e\nFontawesome fontawesome คือ ไลบรารี่เกี่ยวกับ icon ซึ่ง Bootstrap 4 ไม่มี fontawesome ติดมาอีกแล้ว เนื่องจาก fontawesome ไม่มีฟรี\nhttps://fontawesome.com/how-to-use/on-the-web/setup/getting-started?using=web-fonts-with-css\ncopy link CDN ของ Fontawesome เข้ามา\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://use.fontawesome.com/releases/v5.5.0/css/all.css\u0026#34;\rintegrity=\u0026#34;sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/custom.css\u0026#34; /\u0026gt; ในเว็บ Fontawesome ก็เลือก icon ที่ชอบ พอกดเข้าไปมันจะมีโค้ดอยู่\n[ให้นำโค้ด มาใช้ โดย  คือ icon มันต้องอยู่ภายใต้แท็กอื่นๆ\n\u0026lt;h2 class=\u0026#34;text-center\u0026#34;\u0026gt;\r\u0026lt;i class=\u0026#34;far fa-kiss-wink-heart\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\rNothing in life is to be feared,\rit is only to be understood.\rNow is the time to understand more,\rso that we may fear less.\u0026lt;/h2\u0026gt; เราสามารถนำ  มาใช้ได้เพื่อกำหนดขนาดของมัน\nเช่น custom.css กำหนดขนาดของ icon ที่ 10rem\n.front-icon{\rdisplay:block;\r}\r.front-icon i{\rfont-size: 10rem;\r} ใน html ก็เอา span มาครอบ\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-12\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;front-icon text-center\u0026#34;\u0026gt;\r\u0026lt;i class=\u0026#34;far fa-kiss-wink-heart\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\r\u0026lt;/span\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;!-- Close Row 7 --\u0026gt; icon จะมีขนาด 10rem แล้ว\n[หรือจะใช้พื้นหลังสีอื่น ไอคอนสีขาว\n.front-icon{\rdisplay:block;\rcolor:#FFFFFF;\rpadding:3rem;\rbackground:#4F85D7;\r}\r.front-icon i{\rfont-size: 10rem;\r} Class ของสี class utilities ที่ใช้บ่อยอีกตัวคือ เกี่ยวกับสี\nอ่านได้ที่ https://getbootstrap.com/docs/4.0/utilities/colors/\nหลักๆคือ มีให้เลือกใช้ดังนี้\n_primary **danger **success **info **dark \\_\\_light_ ใช้กับ class พวก bg- , text-\nเช่น\n\u0026lt;h3 class=\u0026#34;bg-primary p-2 text-white\u0026#34;\u0026gt;Service\u0026lt;/h3\u0026gt; วิธี Custom เช่นอยากเปลี่ยนสีให้ต่างจาก bootstrap ให้ใส่ !important ด้วย\n.bg-primary{\rbackground: #4F85D7 !important;\r} การใช้ Animate.css เข้าไปดาวน์โหลด css ได้ที่\nhttps://daneden.github.io/animate.css/\nแล้วเพิ่มเข้ามาใน HTML ของเรา\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/animate.css\u0026#34; /\u0026gt; วิธีการเรียกใช้ ก็แค่ใช้ class\nanimated = เรียกใช้ animated\ninfinite = ทำไปเรื่อยๆ\npulse = Animation แบบ pulse\ndelay-1s = delay 1 วินาที\n\u0026lt;h2 class=\u0026#34;text-center animated infinite pulse delay-1s\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;far fa-kiss-wink-heart\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\rNothing in life is to be feared,\rit is only to be understood.\rNow is the time to understand more,\rso that we may fear less.\u0026lt;/h2\u0026gt; Source code https://gist.github.com/benznest/ad45fd26b773e1ff47bb9727a4702494\nสรุป บทความนี้ก็สรุปคร่าวๆเกี่ยวกับการใช้ bootstrap ที่เป็นเรื่องสำคัญๆ เช่นการใช้ grid จัดวาง layout การทำให้รองรับ responsive การใช้ utility class เช่น margin padding รวมถึงพวกสี เช่น primary danger ที่เจอบ่อยมาก แล้วก็แนะนำเกี่ยวกับหน่วย rem ด้วย แถมด้วยเปลี่ยน Font กับใส่ Icon\nตอนหน้าจะเป็นเรื่องของการใช้ component อื่นๆที่ใช้งานบ่อยๆ รวมถึงเทคนิคเกี่ยวกับ bootstrap เพิ่มเติมด้วย\n Source : benzneststudios.com.\n "});index.add({'id':1,'href':'/library/book/docs/python/flask/','title':"Flask",'content':" Flask "});index.add({'id':2,'href':'/library/book/docs/python/flask/learning-flask/','title':"Learning Flask",'content':" Learning Flask "});index.add({'id':3,'href':'/library/book/docs/python/flask/learning-flask/ep-1/','title':"Learning Flask Ep. 1",'content':" Your first Flask app | Learning Flask Ep. 1 In the first part of this series, you\u0026rsquo;ll learn how to create and run your very first Flask web application\nCreating a project directory and virtual environment First of all, we need to create our new project directory. We\u0026rsquo;re going to a new directory called app in our home directory.\n Tip - I advise using the same names for your project so it\u0026rsquo;s easier to follow along\n Go ahead and create the directory with the following:\nmkdir ~/app\nNext, let\u0026rsquo;s move into the app directory:\ncd ~/app\nNow we need create out Python virtual environment. Do so with the following command:\npython -m venv env\nThis will create a new virtual environment called env\nYou\u0026rsquo;ll see a new directory appear inside the app directory called env. Now we need to activate our virtual environment before we install Flask.\nGo ahead and run the following command to activate the environment:\nsource env/bin/activate\nYou should see (env) appear in front of your terminal prompt indicating the virtual environment is activated!\nUpdating pip It\u0026rsquo;s best practice to update pip (Python\u0026rsquo;s package manager) after creating a new virtual environment. We can do so with the following:\npip install --upgrade pip\nYou should see a success message like the following Collecting pip\rUsing cached https://files.pythonhosted.org/packages/46/dc/7fd5df840efb3e56c8b4f768793a237ec4ee59891959d6a215d63f727023/pip-19.0.1-py2.py3-none-any.whl\rInstalling collected packages: pip\rFound existing installation: pip 18.1\rUninstalling pip-18.1:\rSuccessfully uninstalled pip-18.1\rSuccessfully installed pip-19.0.1` Now we\u0026#39;re ready to install Flask!\nInstalling Flask You install Flask just as you would any other Python package.\npip install flask\nIf we now run pip list, you\u0026rsquo;ll see the following: Package Version\r------------ -------\rClick 7.0\rFlask 1.0.2\ritsdangerous 1.1.0\rJinja2 2.10\rMarkupSafe 1.1.0\rpip 19.0.1\rsetuptools 40.6.2\rWerkzeug 0.14.1` \n Note - Flask comes with several other packages so don\u0026rsquo;t be alarmed when you see MarkupSafe or itsdangerous!\n Ok so we\u0026rsquo;ve got everything we need to start building our very simple application. Let\u0026rsquo;s get to it.\nCreating a Flask app This guide is just to show you the most basic Flask application possible. You\u0026rsquo;ll learn the correct way to structure a Flask application over the next couple of parts in this series.\nThe most basic Flask app can be just a single file. We\u0026rsquo;re going to call it app.py. Make sure you\u0026rsquo;re in the app directory and run the following to create it:\ntouch app.py\nLet\u0026rsquo;s write some code! Go ahead and open up app.py in your favourite editor and follow along.\nFirst of all, we need to import Flask from flask\nfrom flask import Flask\nNow we need to create our Flask application. We\u0026rsquo;re going to pass __name__ to Flask and assign it to the variable app\nDon\u0026rsquo;t worry about exactly why we\u0026rsquo;re doing this. We\u0026rsquo;ll cover it in a more advanced episode in this series. from flask import Flask\rapp = Flask(__name__) Next up, we need to create a route or view (route and view are used interchangeably)\nLet\u0026rsquo;s create a route and explain it line by line after: from flask import Flask\rapp = Flask(__name__)\r@app.route(\u0026#34;/\u0026#34;)\rdef index():\rreturn \u0026#34;Hello world!\u0026#34; Let\u0026rsquo;s talk through the 3 lines we just added:\n@app.route(\u0026quot;/\u0026quot;)\nRoutes in Flask are created using the @app.route decorator and passing in a URL or path.\nIn this example, we\u0026rsquo;ve passed \u0026quot;/\u0026quot; into the @app.route decorator. \u0026quot;/\u0026quot; is the root of the website or application.\nThis route will be triggered when someone goes to the root or index of our website, for example http://example.com.\ndef index(): return \u0026quot;Hello world!\u0026quot;\nUnder the @app.route decorator, we simply write a standard Python function with a return statement.\nFlask will return whatever we pass to the return statement! In this case, just a short \u0026quot;Hello world!\u0026quot; string.\nWe need to add 2 more lines of code before we can run our app. Add the following: from flask import Flask\rapp = Flask(__name__)\r@app.route(\u0026#34;/\u0026#34;)\rdef index():\rreturn \u0026#34;Hello world!\u0026#34;\rif __name__ == \u0026#34;__main__\u0026#34;:\rapp.run()`  Let\u0026rsquo;s take a look at what we added: if __name__ == \u0026#34;__main__\u0026#34;:\rapp.run()`  Again, I don\u0026rsquo;t want you to worry too much about what\u0026rsquo;s happening here. For now just know that __name__ is a special variable used by the Python interpreter to understand if a file is the main program.\nJust as we passed __name__ into the Flask() class, the special variable __name__ is equal to __main__. You\u0026rsquo;ll learn more about this principle as you advance through the series.\nRunning the Flask app Time to see the app in action! We can run our Flask app in a couple of ways.\nIn your terminal, make sure you\u0026rsquo;re in the same directory as app.py and run the following:\npython app.py\nYou\u0026rsquo;ll see the following message in your terminal to let you know Flask is running: * Serving Flask app \u0026#34;app\u0026#34; (lazy loading)\r* Environment: production\rWARNING: Do not use the development server in a production environment.\rUse a production WSGI server instead.\r* Debug mode: off\r* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\r127.0.0.1 - - [03/Feb/2019 14:35:04] \u0026#34;GET / HTTP/1.1\u0026#34; 200 -\r127.0.0.1 - - [03/Feb/2019 14:35:04] \u0026#34;GET /favicon.ico HTTP/1.1\u0026#34; 404 -`  Great, our app is running! Ignore any of the warning messages in your terminal and open up a new browser tab and head to the following URL:\nhttp://127.0.0.1:5000/\nYou should see Hello world! in your browser!\nHead back over to your terminal and stop the app by hitting Ctrl + c\nSo you\u0026rsquo;ve seen one way to run your Flask app but it\u0026rsquo;s not recommended. There\u0026rsquo;s a better way.\nFlask environment variables To make running our app even easier, we\u0026rsquo;re going to set a couple of environment variables in our shell. Run the following commands and we\u0026rsquo;ll talk through them after: export FLASK_APP=app.py\rexport FLASK_ENV=development`  Running export FLASK_APP=app.py will set the FLASK_APP variable to app.py\nRunning export FLASK_ENV=development tells Flask we want to run our app in development mode\n Warning - Never run a live Flask application in production using development mode\n We\u0026rsquo;re quite a way from deploying our app to the web but I want to drill it home early, just so you know. We\u0026rsquo;ll cover the reasons why later in the series.\nWe can now run our app using the following simple command:\nflask run\nYou\u0026rsquo;ll see: * Serving Flask app \u0026#34;app.py\u0026#34; (lazy loading)\r* Environment: development\r* Debug mode: on\r* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\r* Restarting with stat\r* Debugger is active!\r* Debugger PIN: 201-167-879`  You\u0026rsquo;ll notice we don\u0026rsquo;t get any of the warnings and that Environment is set to development\nHead back to http://127.0.0.1:5000/ and you\u0026rsquo;ll see the same Hello world! message as before.\nUse Ctrl + c in your terminal to stop the app when you\u0026rsquo;re ready.\nTo deactivate your virtual environment, simply enter:\ndeactivate\nWrapping up You now know how to create and run a very basic Flask application, along with some best practices for setting environment variables and using the flask run command.\nNext up, learning how to structure your Flask application properly!\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':4,'href':'/library/book/docs/python/','title':"Python",'content':" Python "});index.add({'id':5,'href':'/library/book/docs/python/awesome/','title':"Awesome Python",'content':" Awesome Python A curated list of awesome Python frameworks, libraries, software and resources.\nInspired by awesome-php.\n Awesome Python  Admin Panels Algorithms and Design Patterns Audio Authentication Build Tools Built-in Classes Enhancement Caching ChatOps Tools CMS Code Analysis Command-line Interface Development Command-line Tools Compatibility Computer Vision Concurrency and Parallelism Configuration Cryptography Data Analysis Data Validation Data Visualization Database Database Drivers Date and Time Debugging Tools Deep Learning DevOps Tools Distributed Computing Distribution Documentation Downloader E-commerce Editor Plugins and IDEs Email Environment Management Files Foreign Function Interface Forms Functional Programming Game Development Geolocation GUI Development Hardware HTML Manipulation HTTP Clients Image Processing Implementations Interactive Interpreter Internationalization Job Scheduler Logging Machine Learning Miscellaneous Natural Language Processing Network Virtualization Networking News Feed ORM Package Management Package Repositories Permissions Processes Queue Recommender Systems RESTful API Robotics RPC Servers Science Search Serialization Serverless Frameworks Specific Formats Processing Static Site Generator Tagging Template Engine Testing Text Processing Third-party APIs URL Manipulation Video Web Asset Management Web Content Extracting Web Crawling Web Frameworks WebSocket WSGI Servers  Services  Code Quality Continuous Integration  Resources  Podcasts Twitter Websites Weekly  Contributing  [](https://github.com/vinta/awesome-python#admin-panels)Admin Panels Libraries for administrative interfaces.\n ajenti - The admin panel your servers deserve. django-grappelli - A jazzy skin for the Django Admin-Interface. django-jet - Modern responsive template for the Django admin interface with improved functionality. django-suit - Alternative Django Admin-Interface (free only for Non-commercial use). django-xadmin - Drop-in replacement of Django admin comes with lots of goodies. flask-admin - Simple and extensible administrative interface framework for Flask. flower - Real-time monitor and web admin for Celery. wooey - A Django app which creates automatic web UIs for Python scripts.  [](https://github.com/vinta/awesome-python#algorithms-and-design-patterns)Algorithms and Design Patterns Python implementation of algorithms and design patterns.\n algorithms - Minimal examples of data structures and algorithms in Python. PyPattyrn - A simple yet effective library for implementing common design patterns. python-patterns - A collection of design patterns in Python. sortedcontainers - Fast, pure-Python implementation of SortedList, SortedDict, and SortedSet types.  [](https://github.com/vinta/awesome-python#audio)Audio Libraries for manipulating audio and its metadata.\n Audio  audioread - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding. dejavu - Audio fingerprinting and recognition. mingus - An advanced music theory and notation package with MIDI file and playback support. pyAudioAnalysis - Audio feature extraction, classification, segmentation and applications. pydub - Manipulate audio with a simple and easy high level interface. TimeSide - Open web audio processing framework.  Metadata  beets - A music library manager and MusicBrainz tagger. eyeD3 - A tool for working with audio files, specifically MP3 files containing ID3 metadata. mutagen - A Python module to handle audio metadata. tinytag - A library for reading music meta data of MP3, OGG, FLAC and Wave files.   [](https://github.com/vinta/awesome-python#authentication)Authentication Libraries for implementing authentications schemes.\n OAuth  authlib - JavaScript Object Signing and Encryption draft implementation. django-allauth - Authentication app for Django that \u0026ldquo;just works.\u0026rdquo; django-oauth-toolkit - OAuth 2 goodies for Django. oauthlib - A generic and thorough implementation of the OAuth request-signing logic. python-oauth2 - A fully tested, abstract interface to creating OAuth clients and servers. python-social-auth - An easy-to-setup social authentication mechanism.  JWT  pyjwt - JSON Web Token implementation in Python. python-jose - A JOSE implementation in Python. python-jwt - A module for generating and verifying JSON Web Tokens.   [](https://github.com/vinta/awesome-python#build-tools)Build Tools Compile software from source code.\n BitBake - A make-like build tool for embedded Linux. buildout - A build system for creating, assembling and deploying applications from multiple parts. PlatformIO - A console tool to build code with different development platforms. pybuilder - A continuous build tool written in pure Python. SCons - A software construction tool.  [](https://github.com/vinta/awesome-python#built-in-classes-enhancement)Built-in Classes Enhancement Libraries for enhancing Python built-in classes.\n dataclasses - (Python standard library) Data classes. attrs - Replacement for __init__, __eq__, __repr__, etc. boilerplate in class definitions. bidict - Efficient, Pythonic bidirectional map data structures and related functionality.. Box - Python dictionaries with advanced dot notation access. DottedDict - A library that provides a method of accessing lists and dicts with a dotted path notation.  [](https://github.com/vinta/awesome-python#cms)CMS Content Management Systems.\n wagtail - A Django content management system. django-cms - An Open source enterprise CMS based on the Django. feincms - One of the most advanced Content Management Systems built on Django. Kotti - A high-level, Pythonic web application framework built on Pyramid. mezzanine - A powerful, consistent, and flexible content management platform. plone - A CMS built on top of the open source application server Zope. quokka - Flexible, extensible, small CMS powered by Flask and MongoDB.  [](https://github.com/vinta/awesome-python#caching)Caching Libraries for caching data.\n beaker - A WSGI middleware for sessions and caching. django-cache-machine - Automatic caching and invalidation for Django models. django-cacheops - A slick ORM cache with automatic granular event-driven invalidation. dogpile.cache - dogpile.cache is next generation replacement for Beaker made by same authors. HermesCache - Python caching library with tag-based invalidation and dogpile effect prevention. pylibmc - A Python wrapper around the libmemcached interface. python-diskcache - SQLite and file backed cache backend with faster lookups than memcached and redis.  [](https://github.com/vinta/awesome-python#chatops-tools)ChatOps Tools Libraries for chatbot development.\n errbot - The easiest and most popular chatbot to implement ChatOps.  [](https://github.com/vinta/awesome-python#code-analysis)Code Analysis Tools of static analysis, linters and code quality checkers. Also see awesome-static-analysis.\n Code Analysis  coala - Language independent and easily extendable code analysis application. code2flow - Turn your Python and JavaScript code into DOT flowcharts. prospector - A tool to analyse Python code. pycallgraph - A library that visualises the flow (call graph) of your Python application.  Code Linters  flake8 - A wrapper around pycodestyle, pyflakes and McCabe. pylint - A fully customizable source code analyzer. pylama - A code audit tool for Python and JavaScript.  Code Formatters  black - The uncompromising Python code formatter. yapf - Yet another Python code formatter from Google.  Static Type Checkers  mypy - Check variable types during compile time. pyre-check - Performant type checking.  Static Type Annotations Generators  MonkeyType - A system for Python that generates static type annotations by collecting runtime types   [](https://github.com/vinta/awesome-python#command-line-interface-development)Command-line Interface Development Libraries for building command-line applications.\n Command-line Application Development  cement - CLI Application Framework for Python. click - A package for creating beautiful command line interfaces in a composable way. cliff - A framework for creating command-line programs with multi-level commands. clint - Python Command-line Application Tools. docopt - Pythonic command line arguments parser. python-fire - A library for creating command line interfaces from absolutely any Python object. python-prompt-toolkit - A library for building powerful interactive command lines.  Terminal Rendering  asciimatics - A package to create full-screen text UIs (from interactive forms to ASCII animations). bashplotlib - Making basic plots in the terminal. colorama - Cross-platform colored terminal text. tqdm - Fast, extensible progress bar for loops and CLI.   [](https://github.com/vinta/awesome-python#command-line-tools)Command-line Tools Useful CLI-based tools for productivity.\n Productivity Tools  cookiecutter - A command-line utility that creates projects from cookiecutters (project templates). doitlive - A tool for live presentations in the terminal. howdoi - Instant coding answers via the command line. PathPicker - Select files out of bash output. percol - Adds flavor of interactive selection to the traditional pipe concept on UNIX. thefuck - Correcting your previous console command. tmuxp - A tmux session manager. try - A dead simple CLI to try out python packages - it\u0026rsquo;s never been easier.  CLI Enhancements  httpie - A command line HTTP client, a user-friendly cURL replacement. kube-shell - An integrated shell for working with the Kubernetes CLI. mycli - A Terminal Client for MySQL with AutoCompletion and Syntax Highlighting. pgcli - Postgres CLI with autocompletion and syntax highlighting. saws - A Supercharged aws-cli.   [](https://github.com/vinta/awesome-python#compatibility)Compatibility Libraries for migrating from Python 2 to 3.\n python-future - The missing compatibility layer between Python 2 and Python 3. python-modernize - Modernizes Python code for eventual Python 3 migration. six - Python 2 and 3 compatibility utilities.  [](https://github.com/vinta/awesome-python#computer-vision)Computer Vision Libraries for computer vision.\n OpenCV - Open Source Computer Vision Library. pytesseract - Another wrapper for Google Tesseract OCR. SimpleCV - An open source framework for building computer vision applications.  [](https://github.com/vinta/awesome-python#concurrency-and-parallelism)Concurrency and Parallelism Libraries for concurrent and parallel execution. Also see awesome-asyncio.\n concurrent.futures - (Python standard library) A high-level interface for asynchronously executing callables. multiprocessing - (Python standard library) Process-based parallelism. eventlet - Asynchronous framework with WSGI support. gevent - A coroutine-based Python networking library that uses greenlet. uvloop - Ultra fast implementation of asyncio event loop on top of libuv. scoop - Scalable Concurrent Operations in Python.  [](https://github.com/vinta/awesome-python#configuration)Configuration Libraries for storing and parsing configuration options.\n configobj - INI file parser with validation. configparser - (Python standard library) INI file parser. profig - Config from multiple formats with value conversion. python-decouple - Strict separation of settings from code.  [](https://github.com/vinta/awesome-python#cryptography)Cryptography  cryptography - A package designed to expose cryptographic primitives and recipes to Python developers. paramiko - The leading native Python SSHv2 protocol library. passlib - Secure password storage/hashing library, very high level. pynacl - Python binding to the Networking and Cryptography (NaCl) library.  [](https://github.com/vinta/awesome-python#data-analysis)Data Analysis Libraries for data analyzing.\n Blaze - NumPy and Pandas interface to Big Data. Open Mining - Business Intelligence (BI) in Pandas interface. Orange - Data mining, data visualization, analysis and machine learning through visual programming or scripts. Pandas - A library providing high-performance, easy-to-use data structures and data analysis tools. Optimus - Agile Data Science Workflows made easy with PySpark.  [](https://github.com/vinta/awesome-python#data-validation)Data Validation Libraries for validating data. Used for forms in many cases.\n Cerberus - A lightweight and extensible data validation library. colander - Validating and deserializing data obtained via XML, JSON, an HTML form post. jsonschema - An implementation of JSON Schema for Python. schema - A library for validating Python data structures. Schematics - Data Structure Validation. valideer - Lightweight extensible data validation and adaptation library. voluptuous - A Python data validation library.  [](https://github.com/vinta/awesome-python#data-visualization)Data Visualization Libraries for visualizing data. Also see awesome-javascript.\n Altair - Declarative statistical visualization library for Python. Bokeh - Interactive Web Plotting for Python. bqplot - Interactive Plotting Library for the Jupyter Notebook Dash - Built on top of Flask, React and Plotly aimed at analytical web applications.  awesome-dash  plotnine - A grammar of graphics for Python based on ggplot2. Matplotlib - A Python 2D plotting library. Pygal - A Python SVG Charts Creator. PyGraphviz - Python interface to Graphviz. PyQtGraph - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets. Seaborn - Statistical data visualization using Matplotlib. VisPy - High-performance scientific visualization based on OpenGL.  [](https://github.com/vinta/awesome-python#database)Database Databases implemented in Python.\n pickleDB - A simple and lightweight key-value store for Python. tinydb - A tiny, document-oriented database. ZODB - A native object database for Python. A key-value and object graph database.  [](https://github.com/vinta/awesome-python#database-drivers)Database Drivers Libraries for connecting and operating databases.\n MySQL - awesome-mysql  mysqlclient - MySQL connector with Python 3 support (mysql-python fork). PyMySQL - A pure Python MySQL driver compatible to mysql-python.  PostgreSQL - awesome-postgres  psycopg2 - The most popular PostgreSQL adapter for Python. queries - A wrapper of the psycopg2 library for interacting with PostgreSQL.  Other Relational Databases  pymssql - A simple database interface to Microsoft SQL Server.  NoSQL Databases  cassandra-driver - The Python Driver for Apache Cassandra. happybase - A developer-friendly library for Apache HBase. kafka-python - The Python client for Apache Kafka. py2neo - Python wrapper client for Neo4j\u0026rsquo;s restful interface. pymongo - The official Python client for MongoDB. redis-py - The Python client for Redis.  Asynchronous Clients  motor - The async Python driver for MongoDB. Telephus - Twisted based client for Cassandra. txpostgres - Twisted based asynchronous driver for PostgreSQL. txRedis - Twisted based client for Redis.   [](https://github.com/vinta/awesome-python#date-and-time)Date and Time Libraries for working with dates and times.\n Chronyk - A Python 3 library for parsing human-written times and dates. dateutil - Extensions to the standard Python datetime module. delorean - A library for clearing up the inconvenient truths that arise dealing with datetimes. moment - A Python library for dealing with dates/times. Inspired by Moment.js. Pendulum - Python datetimes made easy. PyTime - A easy-use Python module which aims to operate date/time/datetime by string. pytz - World timezone definitions, modern and historical. Brings the tz database into Python. when.py - Providing user-friendly functions to help perform common date and time actions. maya - Datetimes for Humans.  [](https://github.com/vinta/awesome-python#debugging-tools)Debugging Tools Libraries for debugging code.\n pdb-like Debugger  ipdb - IPython-enabled pdb. pdb++ - Another drop-in replacement for pdb. pudb - A full-screen, console-based Python debugger. wdb - An improbable web debugger through WebSockets.  Tracing  lptrace - strace for Python programs. manhole - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt. pyringe - Debugger capable of attaching to and injecting code into Python processes. python-hunter - A flexible code tracing toolkit.  Profiler  line_profiler - Line-by-line profiling. memory_profiler - Monitor Memory usage of Python code. profiling - An interactive Python profiler. py-spy - A sampling profiler for Python programs. Written in Rust. pyflame - A ptracing profiler For Python. vprof - Visual Python profiler.  Others  icecream - Inspect variables, expressions, and program execution with a single, simple function call. django-debug-toolbar - Display various debug information for Django. django-devserver - A drop-in replacement for Django\u0026rsquo;s runserver. flask-debugtoolbar - A port of the django-debug-toolbar to flask. pyelftools - Parsing and analyzing ELF files and DWARF debugging information.   [](https://github.com/vinta/awesome-python#deep-learning)Deep Learning Frameworks for Neural Networks and Deep Learning. Also see awesome-deep-learning.\n caffe - A fast open framework for deep learning.. keras - A high-level neural networks library and capable of running on top of either TensorFlow or Theano. mxnet - A deep learning framework designed for both efficiency and flexibility. pytorch - Tensors and Dynamic neural networks in Python with strong GPU acceleration. SerpentAI - Game agent framework. Use any video game as a deep learning sandbox. tensorflow - The most popular Deep Learning framework created by Google. Theano - A library for fast numerical computation.  [](https://github.com/vinta/awesome-python#devops-tools)DevOps Tools Software and libraries for DevOps.\n ansible - A radically simple IT automation platform. cloudinit - A multi-distribution package that handles early initialization of a cloud instance. cuisine - Chef-like functionality for Fabric. docker-compose - Fast, isolated development environments using Docker. fabric - A simple, Pythonic tool for remote execution and deployment. fabtools - Tools for writing awesome Fabric files. honcho - A Python clone of Foreman, for managing Procfile-based applications. OpenStack - Open source software for building private and public clouds. pexpect - Controlling interactive programs in a pseudo-terminal like GNU expect. psutil - A cross-platform process and system utilities module. saltstack - Infrastructure automation and management system. supervisor - Supervisor process control system for UNIX.  [](https://github.com/vinta/awesome-python#distributed-computing)Distributed Computing Frameworks and libraries for Distributed Computing.\n Batch Processing  PySpark - Apache Spark Python API. dask - A flexible parallel computing library for analytic computing. luigi - A module that helps you build complex pipelines of batch jobs. mrjob - Run MapReduce jobs on Hadoop or Amazon Web Services. Ray - A system for parallel and distributed Python that unifies the machine learning ecosystem.  Stream Processing  faust - A stream processing library, porting the ideas from Kafka Streams to Python. streamparse - Run Python code against real-time streams of data via Apache Storm.   [](https://github.com/vinta/awesome-python#distribution)Distribution Libraries to create packaged executables for release distribution.\n dh-virtualenv - Build and distribute a virtualenv as a Debian package. Nuitka - Compile scripts, modules, packages to an executable or extension module. py2app - Freezes Python scripts (Mac OS X). py2exe - Freezes Python scripts (Windows). PyInstaller - Converts Python programs into stand-alone executables (cross-platform). pynsist - A tool to build Windows installers, installers bundle Python itself.  [](https://github.com/vinta/awesome-python#documentation)Documentation Libraries for generating project documentation.\n sphinx - Python Documentation generator.  awesome-sphinxdoc  pdoc - Epydoc replacement to auto generate API documentation for Python libraries. pycco - The literate-programming-style documentation generator.  [](https://github.com/vinta/awesome-python#downloader)Downloader Libraries for downloading.\n s3cmd - A command line tool for managing Amazon S3 and CloudFront. s4cmd - Super S3 command line tool, good for higher performance. you-get - A YouTube/Youku/Niconico video downloader written in Python 3. youtube-dl - A small command-line program to download videos from YouTube.  [](https://github.com/vinta/awesome-python#e-commerce)E-commerce Frameworks and libraries for e-commerce and payments.\n alipay - Unofficial Alipay API for Python. Cartridge - A shopping cart app built using the Mezzanine. django-oscar - An open-source e-commerce framework for Django. django-shop - A Django based shop system. merchant - A Django app to accept payments from various payment processors. money - Money class with optional CLDR-backed locale-aware formatting and an extensible currency exchange. python-currencies - Display money format and its filthy currencies. forex-python - Foreign exchange rates, Bitcoin price index and currency conversion. saleor - An e-commerce storefront for Django. shoop - An open source E-Commerce platform based on Django.  [](https://github.com/vinta/awesome-python#editor-plugins-and-ides)Editor Plugins and IDEs  Emacs  elpy - Emacs Python Development Environment.  Sublime Text  anaconda - Anaconda turns your Sublime Text 3 in a full featured Python development IDE. SublimeJEDI - A Sublime Text plugin to the awesome auto-complete library Jedi.  Vim  jedi-vim - Vim bindings for the Jedi auto-completion library for Python. python-mode - An all in one plugin for turning Vim into a Python IDE. YouCompleteMe - Includes Jedi-based completion engine for Python.  Visual Studio  PTVS - Python Tools for Visual Studio.  Visual Studio Code  Python - The official VSCode extension with rich support for Python.  IDE  PyCharm - Commercial Python IDE by JetBrains. Has free community edition available. spyder - Open Source Python IDE.   [](https://github.com/vinta/awesome-python#email)Email Libraries for sending and parsing email.\n envelopes - Mailing for human beings. flanker - A email address and Mime parsing library. imbox - Python IMAP for Humans. inbox.py - Python SMTP Server for Humans. lamson - Pythonic SMTP Application Server. Marrow Mailer - High-performance extensible mail delivery framework. modoboa - A mail hosting and management platform including a modern and simplified Web UI. Nylas Sync Engine - Providing a RESTful API on top of a powerful email sync platform. yagmail - Yet another Gmail/SMTP client.  [](https://github.com/vinta/awesome-python#environment-management)Environment Management Libraries for Python version and virtual environment management.\n pyenv - Simple Python version management. pipenv - Python Development Workflow for Humans. poetry - Python dependency management and packaging made easy. virtualenv - A tool to create isolated Python environments.  [](https://github.com/vinta/awesome-python#files)Files Libraries for file manipulation and MIME type detection.\n mimetypes - (Python standard library) Map filenames to MIME types. path.py - A module wrapper for os.path. pathlib - (Python standard library) An cross-platform, object-oriented path library. PyFilesystem2 - Python\u0026rsquo;s filesystem abstraction layer. python-magic - A Python interface to the libmagic file type identification library. Unipath - An object-oriented approach to file/directory operations. watchdog - API and shell utilities to monitor file system events.  [](https://github.com/vinta/awesome-python#foreign-function-interface)Foreign Function Interface Libraries for providing foreign function interface.\n cffi - Foreign Function Interface for Python calling C code. ctypes - (Python standard library) Foreign Function Interface for Python calling C code. PyCUDA - A Python wrapper for Nvidia\u0026rsquo;s CUDA API. SWIG - Simplified Wrapper and Interface Generator.  [](https://github.com/vinta/awesome-python#forms)Forms Libraries for working with forms.\n Deform - Python HTML form generation library influenced by the formish form generation library. django-bootstrap3 - Bootstrap 3 integration with Django. django-bootstrap4 - Bootstrap 4 integration with Django. django-crispy-forms - A Django app which lets you create beautiful forms in a very elegant and DRY way. django-remote-forms - A platform independent Django form serializer. WTForms - A flexible forms validation and rendering library.  [](https://github.com/vinta/awesome-python#functional-programming)Functional Programming Functional Programming with Python.\n Coconut - Coconut is a variant of Python built for simple, elegant, Pythonic functional programming. CyToolz - Cython implementation of Toolz: High performance functional utilities. fn.py - Functional programming in Python: implementation of missing features to enjoy FP. funcy - A fancy and practical functional tools. Toolz - A collection of functional utilities for iterators, functions, and dictionaries.  [](https://github.com/vinta/awesome-python#gui-development)GUI Development Libraries for working with graphical user interface applications.\n curses - Built-in wrapper for ncurses used to create terminal GUI applications. Eel - A library for making simple Electron-like offline HTML/JS GUI apps. enaml - Creating beautiful user-interfaces with Declaratic Syntax like QML. Flexx - Flexx is a pure Python toolkit for creating GUI\u0026rsquo;s, that uses web technology for its rendering. Gooey - Turn command line programs into a full GUI application with one line. kivy - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS. pyglet - A cross-platform windowing and multimedia library for Python. PyGObject - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3). PyQt - Python bindings for the Qt cross-platform application and UI framework. PySimpleGUI - Wrapper for tkinter, Qt, WxPython and Remi. pywebview - A lightweight cross-platform native wrapper around a webview component. Tkinter - Tkinter is Python\u0026rsquo;s de-facto standard GUI package. Toga - A Python native, OS native GUI toolkit. urwid - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc. wxPython - A blending of the wxWidgets C++ class library with the Python.  [](https://github.com/vinta/awesome-python#game-development)Game Development Awesome game development libraries.\n Cocos2d - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications. Harfang3D - Python framework for 3D, VR and game development. Panda3D - 3D game engine developed by Disney. Pygame - Pygame is a set of Python modules designed for writing games. PyOgre - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D. PyOpenGL - Python ctypes bindings for OpenGL and it\u0026rsquo;s related APIs. PySDL2 - A ctypes based wrapper for the SDL2 library. RenPy - A Visual Novel engine.  [](https://github.com/vinta/awesome-python#geolocation)Geolocation Libraries for geocoding addresses and working with latitudes and longitudes.\n django-countries - A Django app that provides a country field for models and forms. GeoDjango - A world-class geographic web framework. GeoIP - Python API for MaxMind GeoIP Legacy Database. geojson - Python bindings and utilities for GeoJSON. geopy - Python Geocoding Toolbox. pygeoip - Pure Python GeoIP API.  [](https://github.com/vinta/awesome-python#html-manipulation)HTML Manipulation Libraries for working with HTML and XML.\n BeautifulSoup - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML. bleach - A whitelist-based HTML sanitization and text linkification library. cssutils - A CSS library for Python. html5lib - A standards-compliant library for parsing and serializing HTML documents and fragments. lxml - A very fast, easy-to-use and versatile library for handling HTML and XML. MarkupSafe - Implements a XML/HTML/XHTML Markup safe string for Python. pyquery - A jQuery-like library for parsing HTML. untangle - Converts XML documents to Python objects for easy access. WeasyPrint - A visual rendering engine for HTML and CSS that can export to PDF. xmldataset - Simple XML Parsing. xmltodict - Working with XML feel like you are working with JSON.  [](https://github.com/vinta/awesome-python#http-clients)HTTP Clients Libraries for working with HTTP.\n grequests - requests + gevent for asynchronous HTTP requests. httplib2 - Comprehensive HTTP client library. requests - HTTP Requests for Humans™. treq - Python requests like API built on top of Twisted\u0026rsquo;s HTTP client. urllib3 - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.  [](https://github.com/vinta/awesome-python#hardware)Hardware Libraries for programming with hardware.\n ino - Command line toolkit for working with Arduino. keyboard - Hook and simulate global keyboard events on Windows and Linux. mouse - Hook and simulate global mouse events on Windows and Linux. Pingo - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc. PyUserInput - A module for cross-platform control of the mouse and keyboard. scapy - A brilliant packet manipulation library. wifi - A Python library and command line tool for working with WiFi on Linux.  [](https://github.com/vinta/awesome-python#image-processing)Image Processing Libraries for manipulating images.\n hmap - Image histogram remapping. imgSeek - A project for searching a collection of images using visual similarity. nude.py - Nudity detection. pagan - Retro identicon (Avatar) generation based on input string and hash. pillow - Pillow is the friendly PIL fork. pyBarcode - Create barcodes in Python without needing PIL. pygram - Instagram-like image filters. python-qrcode - A pure Python QR Code generator. Quads - Computer art based on quadtrees. scikit-image - A Python library for (scientific) image processing. thumbor - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images. wand - Python bindings for MagickWand, C API for ImageMagick.  [](https://github.com/vinta/awesome-python#implementations)Implementations Implementations of Python.\n CPython - Default, most widely used implementation of the Python programming language written in C. Cython - Optimizing Static Compiler for Python. CLPython - Implementation of the Python programming language written in Common Lisp. Grumpy - More compiler than interpreter as more powerful CPython2.7 replacement (alpha). IronPython - Implementation of the Python programming language written in C#. Jython - Implementation of Python programming language written in Java for the JVM. MicroPython - A lean and efficient Python programming language implementation. Numba - Python JIT compiler to LLVM aimed at scientific Python. PeachPy - x86-64 assembler embedded in Python. Pyjion - A JIT for Python based upon CoreCLR. PyPy - A very fast and compliant implementation of the Python language. Pyston - A Python implementation using JIT techniques. Stackless Python - An enhanced version of the Python programming language.  [](https://github.com/vinta/awesome-python#interactive-interpreter)Interactive Interpreter Interactive Python interpreters (REPL).\n bpython - A fancy interface to the Python interpreter. Jupyter Notebook (IPython) - A rich toolkit to help you make the most out of using Python interactively.  awesome-jupyter  ptpython - Advanced Python REPL built on top of the python-prompt-toolkit.  [](https://github.com/vinta/awesome-python#internationalization)Internationalization Libraries for working with i18n.\n Babel - An internationalization library for Python. PyICU - A wrapper of International Components for Unicode C++ library (ICU).  [](https://github.com/vinta/awesome-python#job-scheduler)Job Scheduler Libraries for scheduling jobs.\n APScheduler - A light but powerful in-process task scheduler that lets you schedule functions. django-schedule - A calendaring app for Django. doit - A task runner and build tool. gunnery - Multipurpose task execution tool for distributed systems with web-based interface. Joblib - A set of tools to provide lightweight pipelining in Python. Plan - Writing crontab file in Python like a charm. schedule - Python job scheduling for humans. Spiff - A powerful workflow engine implemented in pure Python. TaskFlow - A Python library that helps to make task execution easy, consistent and reliable. Airflow - Airflow is a platform to programmatically author, schedule and monitor workflows.  [](https://github.com/vinta/awesome-python#logging)Logging Libraries for generating and working with logs.\n Eliot - Logging for complex \u0026amp; distributed systems. logbook - Logging replacement for Python. logging - (Python standard library) Logging facility for Python. raven - Python client for Sentry, a log/error tracking, crash reporting and aggregation platform for web applications.  [](https://github.com/vinta/awesome-python#machine-learning)Machine Learning Libraries for Machine Learning. Also see awesome-machine-learning.\n H2O - Open Source Fast Scalable Machine Learning Platform. Metrics - Machine learning evaluation metrics. NuPIC - Numenta Platform for Intelligent Computing. scikit-learn - The most popular Python library for Machine Learning. Spark ML - Apache Spark\u0026rsquo;s scalable Machine Learning library. vowpal_porpoise - A lightweight Python wrapper for Vowpal Wabbit. xgboost - A scalable, portable, and distributed gradient boosting library.  [](https://github.com/vinta/awesome-python#microsoft-windows)Microsoft Windows Python programming on Microsoft Windows.\n Python(x,y) - Scientific-applications-oriented Python Distribution based on Qt and Spyder. pythonlibs - Unofficial Windows binaries for Python extension packages. PythonNet - Python Integration with the .NET Common Language Runtime (CLR). PyWin32 - Python Extensions for Windows. WinPython - Portable development environment for Windows 7\u0026frasl;8.  [](https://github.com/vinta/awesome-python#miscellaneous)Miscellaneous Useful libraries or tools that don\u0026rsquo;t fit in the categories above.\n blinker - A fast Python in-process signal/event dispatching system. boltons - A set of pure-Python utilities. itsdangerous - Various helpers to pass trusted data to untrusted environments. pluginbase - A simple but flexible plugin system for Python. tryton - A general purpose business framework.  [](https://github.com/vinta/awesome-python#natural-language-processing)Natural Language Processing Libraries for working with human languages.\n General  gensim - Topic Modelling for Humans. langid.py - Stand-alone language identification system. nltk - A leading platform for building Python programs to work with human language data. pattern - A web mining module for the Python. polyglot - Natural language pipeline supporting hundreds of languages. pytext - A natural language modeling framework based on PyTorch. PyTorch-NLP - A toolkit enabling rapid deep learning NLP prototyping for research. spacy - A library for industrial-strength natural language processing in Python and Cython. stanfordnlp - The Stanford NLP Group\u0026rsquo;s official Python library, supporting 50+ languages.  Chinese  jieba - The most popular Chinese text segmentation library. pkuseg-python - A toolkit for Chinese word segmentation in various domains. snownlp - A library for processing Chinese text. funNLP - A collection of tools and datasets for Chinese NLP.   [](https://github.com/vinta/awesome-python#network-virtualization)Network Virtualization Tools and libraries for Virtual Networking and SDN (Software Defined Networking).\n mininet - A popular network emulator and API written in Python. pox - A Python-based SDN control applications, such as OpenFlow SDN controllers.  [](https://github.com/vinta/awesome-python#networking)Networking Libraries for networking programming.\n asyncio - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.  awesome-asyncio  pulsar - Event-driven concurrent framework for Python. pyzmq - A Python wrapper for the ZeroMQ message library. Twisted - An event-driven networking engine. napalm - Cross-vendor API to manipulate network devices.  [](https://github.com/vinta/awesome-python#news-feed)News Feed Libraries for building user\u0026rsquo;s activities.\n django-activity-stream - Generating generic activity streams from the actions on your site. Stream Framework - Building newsfeed and notification systems using Cassandra and Redis.  [](https://github.com/vinta/awesome-python#orm)ORM Libraries that implement Object-Relational Mapping or data mapping techniques.\n Relational Databases  Django Models - A part of Django. SQLAlchemy - The Python SQL Toolkit and Object Relational Mapper.  awesome-sqlalchemy  dataset - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL. orator - The Orator ORM provides a simple yet beautiful ActiveRecord implementation. peewee - A small, expressive ORM. pony - ORM that provides a generator-oriented interface to SQL. pydal - A pure Python Database Abstraction Layer.  NoSQL Databases  hot-redis - Rich Python data types for Redis. mongoengine - A Python Object-Document-Mapper for working with MongoDB. PynamoDB - A Pythonic interface for Amazon DynamoDB. redisco - A Python Library for Simple Models and Containers Persisted in Redis.   [](https://github.com/vinta/awesome-python#package-management)Package Management Libraries for package and dependency management.\n pip - The Python package and dependency manager.  PyPI pip-tools - A set of tools to keep your pinned Python dependencies fresh.  conda - Cross-platform, Python-agnostic binary package manager.  [](https://github.com/vinta/awesome-python#package-repositories)Package Repositories Local PyPI repository server and proxies.\n warehouse - Next generation Python Package Repository (PyPI). bandersnatch - PyPI mirroring tool provided by Python Packaging Authority (PyPA). devpi - PyPI server and packaging/testing/release tool. localshop - Local PyPI server (custom packages and auto-mirroring of pypi).  [](https://github.com/vinta/awesome-python#permissions)Permissions Libraries that allow or deny users access to data or functionality.\n django-guardian - Implementation of per object permissions for Django 1.2+ django-rules - A tiny but powerful app providing object-level permissions to Django, without requiring a database.  [](https://github.com/vinta/awesome-python#processes)Processes Libraries for starting and communicating with OS processes.\n delegator.py - Subprocesses for Humans™ 2.0. sarge - Yet another wrapper for subprocess. sh - A full-fledged subprocess replacement for Python.  [](https://github.com/vinta/awesome-python#queue)Queue Libraries for working with event and task queues.\n celery - An asynchronous task queue/job queue based on distributed message passing. huey - Little multi-threaded task queue. mrq - Mr. Queue - A distributed worker task queue in Python using Redis \u0026amp; gevent. rq - Simple job queues for Python.  [](https://github.com/vinta/awesome-python#recommender-systems)Recommender Systems Libraries for building recommender systems.\n annoy - Approximate Nearest Neighbors in C++/Python optimized for memory usage. fastFM - A library for Factorization Machines. implicit - A fast Python implementation of collaborative filtering for implicit datasets. libffm - A library for Field-aware Factorization Machine (FFM). lightfm - A Python implementation of a number of popular recommendation algorithms. spotlight - Deep recommender models using PyTorch. Surprise - A scikit for building and analyzing recommender systems. tensorrec - A Recommendation Engine Framework in TensorFlow.  [](https://github.com/vinta/awesome-python#restful-api)RESTful API Libraries for developing RESTful APIs.\n Django  django-rest-framework - A powerful and flexible toolkit to build web APIs. django-tastypie - Creating delicious APIs for Django apps.  Flask  eve - REST API framework powered by Flask, MongoDB and good intentions. flask-api-utils - Taking care of API representation and authentication for Flask. flask-api - Browsable Web APIs for Flask. flask-restful - Quickly building REST APIs for Flask. flask-restless - Generating RESTful APIs for database models defined with SQLAlchemy.  Pyramid  cornice - A RESTful framework for Pyramid.  Framework agnostic  apistar - A smart Web API framework, designed for Python 3. falcon - A high-performance framework for building cloud APIs and web app backends. hug - A Python 3 framework for cleanly exposing APIs. restless - Framework agnostic REST framework based on lessons learned from Tastypie. ripozo - Quickly creating REST/HATEOAS/Hypermedia APIs. sandman - Automated REST APIs for existing database-driven systems.   [](https://github.com/vinta/awesome-python#robotics)Robotics Libraries for robotics.\n PythonRobotics - This is a compilation of various robotics algorithms with visualizations. rospy - This is a library for ROS (Robot Operating System).  [](https://github.com/vinta/awesome-python#rpc-servers)RPC Servers RPC-compatible servers.\n SimpleJSONRPCServer - This library is an implementation of the JSON-RPC specification. SimpleXMLRPCServer - (Python standard library) Simple XML-RPC server implementation, single-threaded. zeroRPC - zerorpc is a flexible RPC implementation based on ZeroMQ and MessagePack.  [](https://github.com/vinta/awesome-python#science)Science Libraries for scientific computing. Also see Python-for-Scientists\n astropy - A community Python library for Astronomy. bcbio-nextgen - Providing best-practice pipelines for fully automated high throughput sequencing analysis. bccb - Collection of useful code related to biological analysis. Biopython - Biopython is a set of freely available tools for biological computation. cclib - A library for parsing and interpreting the results of computational chemistry packages. Colour - Implementing a comprehensive number of colour theory transformations and algorithms. NetworkX - A high-productivity software for complex networks. NIPY - A collection of neuroimaging toolkits. NumPy - A fundamental package for scientific computing with Python. Open Babel - A chemical toolbox designed to speak the many languages of chemical data. ObsPy - A Python toolbox for seismology. PyDy - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion. PyMC - Markov Chain Monte Carlo sampling toolkit. QuTiP - Quantum Toolbox in Python. RDKit - Cheminformatics and Machine Learning Software. SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering. statsmodels - Statistical modeling and econometrics in Python. SymPy - A Python library for symbolic mathematics. Zipline - A Pythonic algorithmic trading library. SimPy - A process-based discrete-event simulation framework.  [](https://github.com/vinta/awesome-python#search)Search Libraries and software for indexing and performing search queries on data.\n elasticsearch-py - The official low-level Python client for Elasticsearch. elasticsearch-dsl-py - The official high-level Python client for Elasticsearch. django-haystack - Modular search for Django. pysolr - A lightweight Python wrapper for Apache Solr. whoosh - A fast, pure Python search engine library.  [](https://github.com/vinta/awesome-python#serialization)Serialization Libraries for serializing complex data types\n marshmallow - A lightweight library for converting complex objects to and from simple Python datatypes. pysimdjson - A Python bindings for simdjson. python-rapidjson - A Python wrapper around RapidJSON.  [](https://github.com/vinta/awesome-python#serverless-frameworks)Serverless Frameworks Frameworks for developing serverless Python code.\n python-lambda - A toolkit for developing and deploying Python code in AWS Lambda. Zappa - A tool for deploying WSGI applications on AWS Lambda and API Gateway.  [](https://github.com/vinta/awesome-python#specific-formats-processing)Specific Formats Processing Libraries for parsing and manipulating specific text formats.\n General  tablib - A module for Tabular Datasets in XLS, CSV, JSON, YAML.  Office  openpyxl - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files. pyexcel - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files. python-docx - Reads, queries and modifies Microsoft Word 2007\u0026frasl;2008 docx files. python-pptx - Python library for creating and updating PowerPoint (.pptx) files. unoconv - Convert between any document format supported by LibreOffice/OpenOffice. XlsxWriter - A Python module for creating Excel .xlsx files. xlwings - A BSD-licensed library that makes it easy to call Python from Excel and vice versa. xlwt / xlrd - Writing and reading data and formatting information from Excel files.  PDF  PDFMiner - A tool for extracting information from PDF documents. PyPDF2 - A library capable of splitting, merging and transforming PDF pages. ReportLab - Allowing Rapid creation of rich PDF documents.  Markdown  Mistune - Fastest and full featured pure Python parsers of Markdown. Python-Markdown - A Python implementation of John Gruber’s Markdown.  YAML  PyYAML - YAML implementations for Python.  CSV  csvkit - Utilities for converting to and working with CSV.  Archive  unp - A command line tool that can unpack archives easily.   [](https://github.com/vinta/awesome-python#static-site-generator)Static Site Generator Static site generator is a software that takes some text + templates as input and produces HTML files on the output.\n mkdocs - Markdown friendly documentation generator. pelican - Static site generator that supports Markdown and reST syntax. lektor - An easy to use static CMS and blog engine. nikola - A static website and blog generator.  [](https://github.com/vinta/awesome-python#tagging)Tagging Libraries for tagging items.\n django-taggit - Simple tagging for Django.  [](https://github.com/vinta/awesome-python#template-engine)Template Engine Libraries and tools for templating and lexing.\n Jinja2 - A modern and designer friendly templating language. Genshi - Python templating toolkit for generation of web-aware output. Mako - Hyperfast and lightweight templating for the Python platform.  [](https://github.com/vinta/awesome-python#testing)Testing Libraries for testing codebases and generating test data.\n Testing Frameworks  pytest - A mature full-featured Python testing tool. hypothesis - Hypothesis is an advanced Quickcheck style property based testing library. nose2 - The successor to nose, based on `unittest2. Robot Framework - A generic test automation framework. unittest - (Python standard library) Unit testing framework.  Test Runners  green - A clean, colorful test runner. mamba - The definitive testing tool for Python. Born under the banner of BDD. tox - Auto builds and tests distributions in multiple Python versions  GUI / Web Testing  locust - Scalable user load testing tool written in Python. PyAutoGUI - PyAutoGUI is a cross-platform GUI automation Python module for human beings. Selenium - Python bindings for Selenium WebDriver. sixpack - A language-agnostic A/B Testing framework. splinter - Open source tool for testing web applications.  Mock  mock - (Python standard library) A mocking and patching library. doublex - Powerful test doubles framework for Python. freezegun - Travel through time by mocking the datetime module. httmock - A mocking library for requests for Python 2.6+ and 3.2+. httpretty - HTTP request mock tool for Python. mocket - A socket mock framework with gevent/asyncio/SSL support. responses - A utility library for mocking out the requests Python library. VCR.py - Record and replay HTTP interactions on your tests.  Object Factories  factory_boy - A test fixtures replacement for Python. mixer - Another fixtures replacement. Supported Django, Flask, SQLAlchemy, Peewee and etc. model_mommy - Creating random fixtures for testing in Django.  Code Coverage  coverage - Code coverage measurement.  Fake Data  mimesis - is a Python library that help you generate fake data. fake2db - Fake database generator. faker - A Python package that generates fake data. radar - Generate random datetime / time.   [](https://github.com/vinta/awesome-python#text-processing)Text Processing Libraries for parsing and manipulating plain texts.\n General  chardet - Python 2\u0026frasl;3 compatible character encoding detector. difflib - (Python standard library) Helpers for computing deltas. ftfy - Makes Unicode text less broken and more consistent automagically. fuzzywuzzy - Fuzzy String Matching. Levenshtein - Fast computation of Levenshtein distance and string similarity. pangu.py - Paranoid text spacing. pyfiglet - An implementation of figlet written in Python. pypinyin - Convert Chinese hanzi (漢字) to pinyin (拼音). textdistance - Compute distance between sequences with 30+ algorithms. unidecode - ASCII transliterations of Unicode text.  Slugify  awesome-slugify - A Python slugify library that can preserve unicode. python-slugify - A Python slugify library that translates unicode to ASCII. unicode-slugify - A slugifier that generates unicode slugs with Django as a dependency.  Unique identifiers  hashids - Implementation of hashids in Python. shortuuid - A generator library for concise, unambiguous and URL-safe UUIDs.  Parser  ply - Implementation of lex and yacc parsing tools for Python. pygments - A generic syntax highlighter. pyparsing - A general purpose framework for generating parsers. python-nameparser - Parsing human names into their individual components. python-phonenumbers - Parsing, formatting, storing and validating international phone numbers. python-user-agents - Browser user agent parser. sqlparse - A non-validating SQL parser.   [](https://github.com/vinta/awesome-python#third-party-apis)Third-party APIs Libraries for accessing third party services APIs. Also see List of Python API Wrappers and Libraries.\n apache-libcloud - One Python library for all clouds. boto3 - Python interface to Amazon Web Services. django-wordpress - WordPress models and views for Django. facebook-sdk - Facebook Platform Python SDK. google-api-python-client - Google APIs Client Library for Python. gspread - Google Spreadsheets Python API. twython - A Python wrapper for the Twitter API.  [](https://github.com/vinta/awesome-python#url-manipulation)URL Manipulation Libraries for parsing URLs.\n furl - A small Python library that makes parsing and manipulating URLs easy. purl - A simple, immutable URL class with a clean API for interrogation and manipulation. pyshorteners - A pure Python URL shortening lib. webargs - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks.  [](https://github.com/vinta/awesome-python#video)Video Libraries for manipulating video and GIFs.\n moviepy - A module for script-based movie editing with many formats, including animated GIFs. scikit-video - Video processing routines for SciPy.  [](https://github.com/vinta/awesome-python#wsgi-servers)WSGI Servers WSGI-compatible web servers.\n bjoern - Asynchronous, very fast and written in C. gunicorn - Pre-forked, partly written in C. uWSGI - A project aims at developing a full stack for building hosting services, written in C. waitress - Multi-threaded, powers Pyramid. werkzeug - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.  [](https://github.com/vinta/awesome-python#web-asset-management)Web Asset Management Tools for managing, compressing and minifying website assets.\n django-compressor - Compresses linked and inline JavaScript or CSS into a single cached file. django-pipeline - An asset packaging library for Django. django-storages - A collection of custom storage back ends for Django. fanstatic - Packages, optimizes, and serves static file dependencies as Python packages. fileconveyor - A daemon to detect and sync files to CDNs, S3 and FTP. flask-assets - Helps you integrate webassets into your Flask app. webassets - Bundles, optimizes, and manages unique cache-busting URLs for static resources.  [](https://github.com/vinta/awesome-python#web-content-extracting)Web Content Extracting Libraries for extracting web contents.\n html2text - Convert HTML to Markdown-formatted text. lassie - Web Content Retrieval for Humans. micawber - A small library for extracting rich content from URLs. newspaper - News extraction, article extraction and content curation in Python. python-readability - Fast Python port of arc90\u0026rsquo;s readability tool. requests-html - Pythonic HTML Parsing for Humans. sumy - A module for automatic summarization of text documents and HTML pages. textract - Extract text from any document, Word, PowerPoint, PDFs, etc. toapi - Every web site provides APIs.  [](https://github.com/vinta/awesome-python#web-crawling)Web Crawling Libraries to automate web scraping.\n cola - A distributed crawling framework. feedparser - Universal feed parser. grab - Site scraping framework. MechanicalSoup - A Python library for automating interaction with websites. pyspider - A powerful spider system. robobrowser - A simple, Pythonic library for browsing the web without a standalone web browser. scrapy - A fast high-level screen scraping and web crawling framework. portia - Visual scraping for Scrapy.  [](https://github.com/vinta/awesome-python#web-frameworks)Web Frameworks Full stack web frameworks.\n Django - The most popular web framework in Python.  awesome-django  Flask - A microframework for Python.  awesome-flask  Masonite - The modern and developer centric Python web framework. Pyramid - A small, fast, down-to-earth, open source Python web framework.  awesome-pyramid  Sanic - Web server that\u0026rsquo;s written to go fast. Vibora - Fast, efficient and asynchronous Web framework inspired by Flask. Tornado - A Web framework and asynchronous networking library.  [](https://github.com/vinta/awesome-python#websocket)WebSocket Libraries for working with WebSocket.\n autobahn-python - WebSocket \u0026amp; WAMP for Python on Twisted and asyncio. crossbar - Open-source Unified Application Router (Websocket \u0026amp; WAMP for Python on Autobahn). django-channels - Developer-friendly asynchrony for Django. django-socketio - WebSockets for Django. WebSocket-for-Python - WebSocket client and server library for Python 2 and 3 as well as PyPy.  [](https://github.com/vinta/awesome-python#services)Services Online tools and APIs to simplify development.\n[](https://github.com/vinta/awesome-python#continuous-integration)Continuous Integration Also see awesome-CIandCD.\n CircleCI - A CI service that can run very fast parallel testing. Travis CI - A popular CI service for your open source and private projects. (GitHub only) Vexor CI - A continuous integration tool for private apps with pay-per-minute billing model. Wercker - A Docker-based platform for building and deploying applications and microservices.  [](https://github.com/vinta/awesome-python#code-quality)Code Quality  Codacy - Automated Code Review to ship better code, faster. Codecov - Code coverage dashboard. CodeFactor - Automated Code Review for Git. Landscape - Hosted continuous Python code metrics. PEP 8 Speaks - GitHub integration to review code style.  [](https://github.com/vinta/awesome-python#resources)Resources Where to discover new Python libraries.\n[](https://github.com/vinta/awesome-python#podcasts)Podcasts  From Python Import Podcast Podcast.init Python Bytes Python Testing Radio Free Python Talk Python To Me Test and Code  [](https://github.com/vinta/awesome-python#twitter)Twitter  @codetengu @getpy @importpython @planetpython @pycoders @pypi @pythontrending @PythonWeekly @TalkPython @realpython  [](https://github.com/vinta/awesome-python#websites)Websites  /r/CoolGithubProjects /r/Python Awesome Python @LibHunt Django Packages Full Stack Python Python Cheatsheet Python Hackers Python ZEEF Python 开发社区 Real Python Trending Python repositories on GitHub today Сообщество Python Программистов  [](https://github.com/vinta/awesome-python#weekly)Weekly  CodeTengu Weekly 碼天狗週刊 Import Python Newsletter Pycoder\u0026rsquo;s Weekly Python Weekly Python Tricks   Source : https://github.com/vinta/awesome-python\n "});index.add({'id':6,'href':'/library/book/docs/front-end/bootstrap/basic-bootstap/ep-2/','title':"Bootstrap 4 แบบพื้นฐาน ตอนที่ 2",'content':" สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน ตอนที่ 2 Table สร้างไฟล์ใหม่ชื่อ portal.html\nใส่โค้ดพื้นฐาน html ลงไปแล้วก็เพิ่ม bootstrap.css ด้วย\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Portal\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; ใส่ตารางลงไปใน container\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Portal\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Portal\u0026lt;/h1\u0026gt;\r\u0026lt;table\u0026gt;\r\u0026lt;thead\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;No...\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Status\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Age\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Address\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Department\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/thead\u0026gt;\r\u0026lt;tbody\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Benz\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Normal\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;35\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Bangkok 10000\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;IT\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Namnueng\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;NA\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;35\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Bangkok 10000\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;IT\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Pare\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;NA\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;35\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;Bangkok 10000\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;IT\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/tbody\u0026gt;\r\u0026lt;/table\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; จะได้แบบนี้\nBootstrap มี class ชื่อว่า table ทำให้ตารางสวยขึ้น\n\u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; ปรับแต่งหัวตารางโดยใช้ utility class คือ bg- และ text-\n\u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt;\r\u0026lt;thead\u0026gt;\r\u0026lt;tr class=\u0026#34;bg-primary text-white\u0026#34;\u0026gt;\r... ทำให้ตารางสลับสี ใช้ table-striped เพิ่มเข้าไป\n\u0026lt;table class=\u0026#34;table table-striped\u0026#34;\u0026gt; ทำให้ตารางเลื่อสีไปตาม cursor ใช้ table-hover เพิ่มเข้าไป\n\u0026lt;table class=\u0026#34;table table-hover\u0026#34;\u0026gt; ใส่ขอบให้ตารางใช้ table-bordered\n\u0026lt;table class=\u0026#34;table table-hover table-bordered\u0026#34;\u0026gt; ลองย่อหน้าต่างให้เล็กเป็นมุมมองมือถือ จะพบว่าตารางไม่รองรับ responsive\n[วิธีการแก้ก็คือเอาตารางไปใส่ใน div class table-responsive\n\u0026lt;div class=\u0026#34;table-responsive\u0026#34;\u0026gt;\r\u0026lt;table class=\u0026#34;table table-hover table-bordered\u0026#34;\u0026gt;\r...\r\u0026lt;/table\u0026gt;\r\u0026lt;/div\u0026gt; มันจะสามารถเลื่อน ซ้ายขวาได้\nใน VS Code ตรงไหนโค้ดยาวก็ย่อโค้ดได้นะ\n[Source code https://gist.github.com/benznest/d7b07ec41ffef49429ec4c95112c1dcb\nForm สร้างไฟล์ใหม่ login.html จะลองทำหน้า login กัน อย่าลืมเพิ่ม boostrap.css เข้ามาด้วย\nฟอร์มล้อคอินที่จะทำ หน้าตาประมาณนี้\nลองใส่ฟอร์มล็อกอิน แบบง่ายๆ\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Portal\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;form action=\u0026#34;#\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;usernmae\u0026#34;\u0026gt;Username: \u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt;Password: \u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; name=\u0026#34;pwd\u0026#34;\u0026gt;\r\u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Sign in\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; ให้ใช้ class form-group จัดการแถวของฟอร์ม\n\u0026lt;form action=\u0026#34;#\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;usernmae\u0026#34;\u0026gt;Username: \u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt;Password: \u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; name=\u0026#34;pwd\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt; ใช้ class form-control ให้กับ input เพื่อให้มันรองรับ responsive และความสวยงาม\n\u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt; ส่วนปุ่มใช้ class ชื่อว่า btn และอยากได้ส้มๆก็ใส่ btn-warning\n\u0026lt;button class=\u0026#34;btn btn-warning text-white\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt; ถ้าต้องการให้ปุ่มแสดงตามขนาดจอ ก็ใช้ btn-block\n\u0026lt;button class=\u0026#34;btn btn-block btn-warning text-white\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt; ถ้าต้องการให้แสดงแบบแถวเดียวใช้ form-inline\n\u0026lt;form action=\u0026#34;#\u0026#34; class=\u0026#34;form-inline\u0026#34;\u0026gt; ฟอร์มมันชิดไป ไม่สวยก็สามารถใช้ class margin มาร่วมได้\n\u0026lt;form action=\u0026#34;#\u0026#34; class=\u0026#34;form-inline mt-3\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\r\u0026lt;label class=\u0026#34;mr-2\u0026#34; for=\u0026#34;usernmae\u0026#34;\u0026gt;Username: \u0026lt;/label\u0026gt;\r\u0026lt;input class=\u0026#34;form-control mr-3\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\r\u0026lt;label class=\u0026#34;mr-2\u0026#34; for=\u0026#34;pwd\u0026#34;\u0026gt;Password: \u0026lt;/label\u0026gt;\r\u0026lt;input class=\u0026#34;form-control mr-3\u0026#34; type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; name=\u0026#34;pwd\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;button class=\u0026#34;btn btn-warning text-white\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt; Source code https://gist.github.com/benznest/1d77e1a799253e5546b8d4c836cd2f1c\nCard อีกอันที่ใช้บ่อยๆ คือ card มันคือการทำเนื้อหาเป็นบล็อกๆ\nสร้างไฟล์ใหม่ชื่อว่า news.html ทำ grid ไว้ 2 คอลัมภ์\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;News\u0026lt;/title\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;!-- Col 1 --\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;!-- Col 2 --\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Card โครงสร้างจะเป็นประมาณนี้\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;card-header\u0026#34;\u0026gt;\r\u0026lt;h4\u0026gt;Hot news\u0026lt;/h4\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Dolorem minus accusantium rerum suscipit, commodi sapiente, saepe doloremque beatae quod architecto voluptatibus. Nobis ratione excepturi omnis incidunt laboriosam quidem quae quibusdam!\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;card-footer\u0026#34;\u0026gt;\rBy Benznest\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;!-- Col 2 --\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; สามารถจัดแต่งโดยใช้ utilities class ได้ตามปกติ เช่น bg และ text\n\u0026lt;div class=\u0026#34;card-header bg-danger text-white\u0026#34;\u0026gt; สามารถนำรูปมาเป็น Header ได้ โดยใช้ class ชือว่า card-img-top\n\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r...\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;card-img-top\u0026#34; src=\u0026#34;img/staffs/staff4.jpg\u0026#34; \u0026gt;\r\u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt;\r\u0026lt;h4 class=\u0026#34;card-title\u0026#34;\u0026gt;Our Staff\u0026lt;/h4\u0026gt;\r\u0026lt;p class=\u0026#34;card-text\u0026#34;\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolores excepturi modi voluptate animi repellat? Animi accusantium numquam iste non voluptatem ipsum totam, odio sequi. Fuga amet qui vitae atque. Illo.\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; เพิ่มปุ่มใน card ให้ดูสวยงาม\n\u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Read more\u0026lt;/a\u0026gt; ซึ่งถ้าจะทำสวยๆ ก็ต้องมีรูป และเนื้อหาที่เหมาะสมกัน\nสามารถนำรูปมาวางด้านล่างแทนได้ โดยใช้ class ชื่อว่า card-img-bottom\n\u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt;\r...\r\u0026lt;/div\u0026gt; Source code https://gist.github.com/benznest/bb45d6f0affd79d462a837055408f3c8\nการใช้ Media การนำคลิป youtube embed มาใช้ใน bootstrap\nไปที่ youtube คลิกขวาที่คลิป \u0026gt; Copy embed code\nมันจะเป็น iframe ถ้ามี width height ให้ลบออก เพราะ เราจะทำให้ responsive\n\u0026lt;iframe src=\u0026#34;https://www.youtube.com/embed/5nLWk7kzXgI?ecver=1\u0026#34;\rframeborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; encrypted-media;\rgyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; เพิ่ม \u0026lt;div\u0026gt;ครอบตัว video โดยเพิ่ม class ชื่อว่า embed-responsive embed-responsive-4by3 4by3 คือขนาด 4:3 สามารถใช้ตัวอื่นได้เช่น 16by9, 21by9, 1by1และที่ iframe เพิ่ม class ชื่อว่า embed-responsive-item\nโดยจะลองเพิ่มแถวเข้าไปต่อจากเดิม\n\u0026lt;div class=\u0026#34;row mt-5\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Video gallery\u0026lt;/h3\u0026gt;\r\u0026lt;div class=\u0026#34;embed-responsive embed-responsive-4by3\u0026#34;\u0026gt;\r\u0026lt;iframe class=\u0026#34;embed-responsive-item\u0026#34; src=\u0026#34;https://www.youtube.com/embed/5nLWk7kzXgI?ecver=1\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ลองเพิ่มคอมลัมภ์อีกอันเพื่อทำ photo gallery ด้านขวาของ video\nซึ่งสามารถใช้ class ชื่อว่า media การทำงานของมันจะเรียงไปแนวนอน\n\u0026lt;div class=\u0026#34;row mt-5\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt;\r...\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Photo gallery\u0026lt;/h3\u0026gt;\r\u0026lt;div class=\u0026#34;media\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;w-50\u0026#34; src=\u0026#34;img/content/office10.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;media-body pl-3\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque aliquam nisi officiis aut\rbeatae. Voluptas, aliquid! Nostrum quam architecto \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; การจะเพิ่มแถวของเนื้อหาที่ใช้ class media สามารถใช้ \u0026lt;ul class=”list-unstyled”\u0026gt; และ \u0026lt;li\u0026gt; เข้ามาได้\n\u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Photo gallery\u0026lt;/h3\u0026gt;\r\u0026lt;ul class=\u0026#34;list-unstyled\u0026#34;\u0026gt;\r\u0026lt;li\u0026gt;\r\u0026lt;div class=\u0026#34;media\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;w-50\u0026#34; src=\u0026#34;img/content/office1.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;media-body pl-3\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque aliquam nisi\rofficiis aut\rbeatae. Voluptas, aliquid! Nostrum quam architecto \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;\r\u0026lt;div class=\u0026#34;media\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;w-50\u0026#34; src=\u0026#34;img/content/office3.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;media-body pl-3\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque aliquam nisi\rofficiis aut\rbeatae. Voluptas, aliquid! Nostrum quam architecto \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;\r\u0026lt;div class=\u0026#34;media\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;w-50\u0026#34; src=\u0026#34;img/content/office2.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;media-body pl-3\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque aliquam nisi\rofficiis aut\rbeatae. Voluptas, aliquid! Nostrum quam architecto \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt; Source code https://gist.github.com/benznest/17e5753cff346c5ed5ba8f4689377801\nNavigation เพิ่ม row ไปที่บนสุดของ container ข้างในใช้ list คือ \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt; … \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\n\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ใน bootstrap จะใช้ class ชื่อ nav ใน \u0026lt;ul\u0026gt; class ชื่อ nav-item ใน \u0026lt;li\u0026gt; class ชื่อ nav-link ใน \u0026lt;a\u0026gt; ที่เป็นป้ายลิงค์ \u0026lt;div class=\u0026#34;row pt-3 pb-3\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt;\r\u0026lt;ul class=\u0026#34;nav\u0026#34;\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Service\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; เพิ่ม ให้เมนูนึงถูกเลือกใช้ class ชื่อว่า active\n\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link active\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; เพิ่ม class nav-pills ให้กับ \u0026lt;ul\u0026gt;\n\u0026lt;ul class=\u0026#34;nav nav-pills\u0026#34;\u0026gt; หรือจะใช้ class nav-tabs\n\u0026lt;ul class=\u0026#34;nav nav-tabs\u0026#34;\u0026gt; รายละเอียด\nhttps://getbootstrap.com/docs/4.1/components/navs/\nการใช้ Javascript ของ Bootstrap Bootstrap ต้องใช้ library เพิ่มคือ jquery กับ popper ถึงจะใช้งานได้เต็มประสิทธิภาพ ซึ่ง bootstrap ไม่มีติดมาให้ เพราะ ติด license จำเป็นต้องไปดาวน์ดหลดมาจากต้นทางผู้พัฒนา\nให้ดาวน์โหลด jquery js กับ popper js มาติดตั้งไว้ในโปรเจค ในโฟลดเดอร์ js\n[เพิ่ม jquery , popper , bootstrap ไปที่ท้าย body โดยใช้คำสั่ง \u0026lt;script\u0026gt;\u0026lt;/script\u0026gt; โดยให้ jquery และ popper อยู่ด้านบนของ bootstrap.js เพราะการอ่านโค้ดจะอ่านจากบนลงล่าง วึ่ง bootstrap เรียกใช้งาน jquery\nจึงจำเป็นต้องอ่าน jquery มาก่อนนั่นเอง\n\u0026lt;script src=\u0026#34;js/jquery-3.3.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;js/popper_1_14_3.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; ถ้าใส่ผิด สามารถ Inspect ดูที่เมนู console\nการทำ dropdown เพิ่ม dropdown ให้เมนู ได้ โดยใช้ dropdown-menu\n\u0026lt;li class=\u0026#34;nav-item dropdown\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;nav-link dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34;\u0026gt;Service\u0026lt;/a\u0026gt;\r\u0026lt;div class=\u0026#34;dropdown-menu\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;App\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Website\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Desktop\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;IoT\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt; ปัญหาที่ตามมาคือ เมนูแบบนี้ไม่รองรับ responsive ดังนั้นต้องไปใช้ Navbar แบบใหม่\nติตดั้ง extension ติดตั้ง Bootstrap v4 Snippets\n[Navbar responsive พิมพ์ b-navbar มันจะ generate โค้ดมาให้\nซึ่งเยอะมาก เรามีหน้าที่แก้เนื้อหาก็พอ นี่คือการใช้เครื่องมือให้เป็นประโยชน์\n\u0026lt;nav class=\u0026#34;navbar navbar-expand-lg navbar-light bg-light fixed-top\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;navbar-brand\u0026#34;\u0026gt;Benznest\u0026#39;s blog\u0026lt;/a\u0026gt;\r\u0026lt;button class=\u0026#34;navbar-toggler\u0026#34; data-target=\u0026#34;#my-nav\u0026#34; data-toggle=\u0026#34;collapse\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;navbar-toggler-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\r\u0026lt;/button\u0026gt;\r\u0026lt;div id=\u0026#34;my-nav\u0026#34; class=\u0026#34;collapse navbar-collapse\u0026#34;\u0026gt;\r\u0026lt;ul class=\u0026#34;navbar-nav mr-auto\u0026#34;\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link active\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item dropdown\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;nav-link dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34;\u0026gt;Service\u0026lt;/a\u0026gt;\r\u0026lt;div class=\u0026#34;dropdown-menu\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;App\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Website\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Desktop\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;IoT\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Android\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;iOS\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Windows\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Linux\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/nav\u0026gt; Navbar อันใหม่จะรองรับ responsive\nปรับสีของ Navbar โดยใช้ class uitility\n\u0026lt;nav class=\u0026#34;navbar navbar-expand-lg navbar-dark bg-primary fixed-top\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;navbar-brand text-white\u0026#34;\u0026gt;Benznest\u0026#39;s blog\u0026lt;/a\u0026gt; และเนื่องจาก Navbar มันใช้ Fix-top มันจะทำให้กินเนื้อด้านบน ก็ให้เนื้อหาของเราเว้นว่างด้านบนนิดนึง โดยใช้ pt-5 ก็คือ padding top 5 rem\n\u0026lt;/nav\u0026gt;\r\u0026lt;div class=\u0026#34;container pt-5\u0026#34;\u0026gt; แนะนำ Bootswatch bootswatch เป็นเว็บที่รวมแหล่งธีม css ของ bootstrap มาไว้ในที่เดียว เราสามารถดาวน์โหลดธีมที่ชอบมาใช้ได้ ซึ่งมันคือ css ของ bootstrap ดังนั้นสามารถนำมาใช้กับ bootstrap ได้เลย\nhttps://bootswatch.com/\nกดดาวน์โหลดธีมที่ชอบ แล้วจะได้ไฟล์ .css\n[เอาไฟล์ .css ไปไว้ในโฟลเดอร์ css แนะนำเปลี่ยนชื่อเป็นชื่อธีม ไม่ควรใช้ชื่อ bootstrap ทับอันเดิม\nใน html ให้เปลี่ยนการใช้ bootstrap.min.css มาใช้ธีมอันใหม่\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/minty.min.css\u0026#34; /\u0026gt; Refresh หน้าเว็บ\nการใช้ Carousel carousel คือ ตัวสไลด์รูปภาพ\nใช้โค้ดลัด พิมพ์ว่า b-carousel เลือก carousel-full\nจากนั้นก็ปรับแต่ง carousel จะมีสามส่วน คือ\nindicator ที่เป็นจุด ว่ารูปภาพเราคือรูปไหน\nSlide คือรูปภาพ\nButton คือปุ่มซ้าย ขวา\nactive คืออันที่ถูกเลือกอยู่\n\u0026lt;div class=\u0026#34;container-fluid mt-5 p-0\u0026#34;\u0026gt;\r\u0026lt;div id=\u0026#34;my-carousel\u0026#34; class=\u0026#34;carousel slide\u0026#34; data-ride=\u0026#34;carousel\u0026#34; data-interval=\u0026#34;500\u0026#34;\u0026gt;\r\u0026lt;ol class=\u0026#34;carousel-indicators\u0026#34; \u0026gt;\r\u0026lt;li class=\u0026#34;active\u0026#34; data-target=\u0026#34;#my-carousel\u0026#34; data-slide-to=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;\u0026#34; data-target=\u0026#34;#my-carousel\u0026#34; data-slide-to=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li class=\u0026#34;\u0026#34; data-target=\u0026#34;#my-carousel\u0026#34; data-slide-to=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;/ol\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-inner\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-item active\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;d-block w-100\u0026#34; src=\u0026#34;img/banner/banner3.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt;\r\u0026lt;h5\u0026gt;Hello , world\u0026lt;/h5\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ullam aliquid doloremque, \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;d-block w-100\u0026#34; src=\u0026#34;img/banner/banner4.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt;\r\u0026lt;h5\u0026gt;Hello , world\u0026lt;/h5\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ullam aliquid doloremque, \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt;\r\u0026lt;img class=\u0026#34;d-block w-100\u0026#34; src=\u0026#34;img/banner/banner5.jpg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt;\r\u0026lt;h5\u0026gt;Hello , world\u0026lt;/h5\u0026gt;\r\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ullam aliquid doloremque, \u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;a class=\u0026#34;carousel-control-prev\u0026#34; href=\u0026#34;#my-carousel\u0026#34; data-slide=\u0026#34;prev\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;carousel-control-prev-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\r\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;carousel-control-next\u0026#34; href=\u0026#34;#my-carousel\u0026#34; data-slide=\u0026#34;next\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;carousel-control-next-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\r\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt; การปรับเวลาในการเลื่อนอัตโนมัติ ทำได้โดยใช้ data-interval หน่วยเป็นมิลลิวินาที\n\u0026lt;div id=\u0026#34;my-carousel\u0026#34; class=\u0026#34;carousel slide\u0026#34; data-ride=\u0026#34;carousel\u0026#34;\rdata-interval=\u0026#34;500\u0026#34;\u0026gt; Source code https://gist.github.com/benznest/a2c5683a2f19ddd26617415821a2b141\nModal Modal คือป๊อบอัพแบบสวยๆ อันนี้ก็ใช้บ่อยมากๆ\nใช้โค้ดลัดสร้าง Modal คือพิมพ์ว่ b-modal แล้วเลือก modal-full\n[Modal ปกติมันจะถูกซ่อนเอาไว้ รอให้เรียกใช้งาน\nให้เพิ่ม id ให้กับ div modal หลัก\n\u0026lt;div class=\u0026#34;modal fade\u0026#34; id=\u0026#34;myModal\u0026#34;\u0026gt; ปรับแต่ง modal ตามใจ โดยภายในก็แบ่งเป็น header, content , footer\n\u0026lt;div class=\u0026#34;modal fade\u0026#34; id=\u0026#34;myModal\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;modal-dialog\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;modal-content\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;modal-header\u0026#34;\u0026gt;\r\u0026lt;h5 class=\u0026#34;modal-title\u0026#34;\u0026gt;Hello Modal\u0026lt;/h5\u0026gt;\r\u0026lt;button class=\u0026#34;close\u0026#34; data-dismiss=\u0026#34;modal\u0026#34;\u0026gt;\r\u0026lt;span\u0026gt;\u0026amp;times;\u0026lt;/span\u0026gt;\r\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;modal-body\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Content\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;modal-footer\u0026#34;\u0026gt;\r\u0026lt;a class=\u0026#34;btn btn-danger text-white\u0026#34; data-dismiss=\u0026#34;modal\u0026#34;\u0026gt;Close\u0026lt;/a\u0026gt;\r\u0026lt;a class=\u0026#34;btn btn-success text-white\u0026#34; data-dismiss=\u0026#34;modal\u0026#34;\u0026gt;Save\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; ปุ่มไหนที่อยากให้กดแล้วแสดง modal ก็เพิ่ม **data-toggle=”modal” data-target=”#myModal”\n**โดย target คือ id ของ modal\n\u0026lt;a class=\u0026#34;btn btn-primary text-white\u0026#34; data-toggle=\u0026#34;modal\u0026#34; data-target=\u0026#34;#myModal\u0026#34;\u0026gt;Read more\u0026lt;/a\u0026gt; แนะนำ bootsnipp bootsnipp จะเป็นเว็บที่รวม code หรือ component ต่างๆ เอาไว้สำหรับ bootstrap\nhttps://bootsnipp.com\nเช่นอยากลองใช้ตัวที่ชื่อว่า Timeline vertical ในเว็บของเรา\nกดเข้าไป ข้างในจะมีรายละเอียด เช่น HTML , CSS\nให้ copy โค้ด HTML มาไว้ในที่ต้องการ และ copy CSS ของมันมาด้วย โดยเอาไปวางไว้ใน custom.css ของเรา\nจากนั้น มาเพิ่ม custom.css\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/custom.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt; แนะนำ Startbootstrap.com ตัวนี้เป็นแหล่งรวมธีมของ Bootstrap แบบมาทั้ง pack เลย เช่น ธีมสำหรับทำเว็บบริษัท ธีมสำหรับแสดงผลงาน\nhttps://startbootstrap.com/\n[การใช้ class display อันนี้เป็นความสามารถใหม่ใน ฺbootstrap4 เช่น อยากให้หน้าจอใหญ่แสดง Carousel แต่ในจอเล็กให้ซ่อน\nใน Bootstrap 4 สามารถใช้ class d-\n\u0026lt;div class=\u0026#34;container-fluid mt-5 p-0 d-none d-sm-none d-md-block\u0026#34;\u0026gt; Media query Media query คือการระบุเงื่อนไขเจาะจงสำหรับ css เช่น ถ้าหน้าจอขนาดมากกว่า 700px ให้ h1 , h2, h3 ขนาด 1 rem\n@media (max-width:700px){\rh1,h2,h3{\rfont-size:1rem;\r}\r} สิ่งที่ใช้ร่วมกับ Bootstrap ไม่ได้ เช่น คู่แข่ง ชื่อว่า Foundation เพราะใช้ชื่อ class เหมือนกัน ตัว Foundation มีความสามารถมากกว่า Bootstrap ทำอะไร Advance ได้มากกว่า แต่ก็ต้องเรียนรู้มากกว่า\n[สรุป บทความนี้ก็พาไปทำ component ที่ใช้งานบ่อย เช่น Table , Form , Carousel , Modal , Navbar รวมทั้งแนะนำเว็บที่เกี่ยวกับ bootstrap ที่จะช่วยให้ใช้งานได้ง่ายขึ้นอีกด้วย\n Written with StackEdit.\n "});index.add({'id':7,'href':'/library/book/docs/python/flask/learning-flask/ep-2/','title':"Learning Flask Ep. 2",'content':" Flask application structure | Learning Flask Ep. 2 Structuring your Flask application for\nIn this part of the Learning Flask series, you\u0026rsquo;ll learn how to structure files and directories in your Flask application.\nFlask is a very flexible framework and doesn\u0026rsquo;t enforce that you follow any specific pattern for structuring your application. However there are some best practices and tips to make sure you don\u0026rsquo;t run into issues down the line as your application grows!\nLike I said, there\u0026rsquo;s many ways to setup your structure. This is a pattern I\u0026rsquo;ve been using for the last couple of years and has worked very well for me.\nLet\u0026rsquo;s get started.\nYou application as a package By far the most popular way to structure your application is by using the package method, where we define our Flask application as a package and can import it! Just like we would any other Python package.\nThe package method allows you much more flexibility, as we can split our application up into multiple logical files, making working with our app much cleaner and easier to navigate.\nAs this is a beginner series, we\u0026rsquo;re going to expand from our simple, single file application and break it up into multiple files and package it up.\nIn the last part of this series, we created a single directory called app in our home directory containing a single file called app.py.\nLet\u0026rsquo;s take a look at how our new project structure is going to look from inside our app project directory:\n├── app │ ├── __init__.py │ └── views.py ├── env ├── requirements.txt └── run.py`  We\u0026rsquo;re going to go through each file step by step. But for now, let\u0026rsquo;s go ahead and create our structure!\nMake your way to the app directory you created in your home folder:\ncd ~/app\nRunning the ls command, your should see the single app.py file along with the virtual environment direcory named env\nWe\u0026rsquo;re going to keep our virtual environment but delete app.py and start from scratch. Delete the file with the following:\nrm app.py\nWhile we\u0026rsquo;re here in the root of our app directory. Go ahead and create a file called run.py\nWe\u0026rsquo;ll use this file as the entrypoint to our Flask app.\nNow create another directory called app and move into it. This is going to contain our Flask application and become our package\nmkdir app cd app\nOnce we\u0026rsquo;re in our newly created app directory, we need to create the __init__.py and views.py files:\ntouch __init__.py views.py\nGreat, we\u0026rsquo;ve created our basic application structure. Let\u0026rsquo;s go through each file, add some code and explain what we\u0026rsquo;ve done.\nWe\u0026rsquo;ll start with the __init__.py file. Go ahead and open it up in an editor and enter the following:\napp/app/init.py\nfrom flask import Flask app = Flask(__name__) from app import views`  You\u0026rsquo;ll be familiar with the first 2 lines, just like we did in the last episode we\u0026rsquo;re importing Flask and setting our app variable, however you\u0026rsquo;ll noticed we\u0026rsquo;ve added from app import views at the bottom.\nUsing this method, we can import multiple python files into our Flask app (as you\u0026rsquo;ll see later)\nThink of the __init__.py file as a contructor that pulls all of the parts of our application together into a package and then tells Python to treat it as a package!\nNow, let\u0026rsquo;s add some views in views.py\napp/app/views.py\n`from app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot;`  Just like in our first app, we\u0026rsquo;re creating a new view using the @app.route decorator and passing it a URL. The only difference is the from app import app statement at the top of the file.\nWe\u0026rsquo;re actually importing the app variable we created in the __init__.py. Meaning we can access it anywhere in our package!\nLet\u0026rsquo;s add another view and pass it a different URL:\napp/app/views.py\nfrom app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot; @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;All about Flask\u0026quot;`  We\u0026rsquo;ve added another route with the URL \u0026quot;/about\u0026quot;, changed the function name to about and then told it to return \u0026quot;All about Flask\u0026quot;\n Tip - Routes in Flask must always start with a / slash\n You\u0026rsquo;ll learn more about routing in the next few parts of this series!\nBefore we can run our app, we need to create an entrypoint. This is where we\u0026rsquo;ll instruct our app to run.\nGo back up one directory into the parent app folder, open up run.py and add the following:\napp/run.py\nfrom app import app if __name__ == \u0026quot;__main__\u0026quot;: app.run()`  We\u0026rsquo;re importing the app variable from the app package that we\u0026rsquo;ve just created.\nWe\u0026rsquo;re then calling the app.run() method, just like in the previous tutorial by wrapping it in an if __name__ == \u0026quot;__main__\u0026quot;: block.\nBefore we run our app, we need to set our environment variables\nFlask environment variables  Tip - If you deactivated the virtual environment. Go ahead and re-activate it with source env.bin/activate from within the parent app directory\n Just like last time, we\u0026rsquo;re going to set 2 environment variables:\nexport FLASK_APP=run.py export FLASK_ENV=development  We\u0026rsquo;ve set the FLASK_APP variable to run.py which is our Flask entry point.\nRunning our app Run the app with the following:\nflask run\nYou\u0026rsquo;ll see the following message, just like last time:\n * Serving Flask app \u0026quot;run.py\u0026quot; (lazy loading) * Environment: development * Debug mode: on * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 306-421-612`  Open up a new browser tab and head to:\nhttp://127.0.0.1:5000/\nYou\u0026rsquo;ll see our \u0026ldquo;Hello world!\u0026rdquo; message just as before.\nNow head over to the other route we created at http://127.0.0.1:5000/about\nYou should see \u0026ldquo;All about Flask\u0026rdquo;\nBoom! We\u0026rsquo;re up and running with our application as a package.\nLet\u0026rsquo;s add some more views in another file and import them into our __init__.py file.\nSplitting up views Let\u0026rsquo;s say we want an admin section of our app. Rather than stuffing all of our views into one folder, let\u0026rsquo;s separate them out into their own seperate file.\nStop your app by hitting Ctrl + c in your terminal.\nMove into the app package directory\ncd app\nCreate a new file called admin_views.py\ntouch admin_views.py\nYour project file structure should now look like this:\n├── app │ ├── __init__.py │ ├── admin_views.py │ └── views.py └── run.py`  Open up admin_views.py and add the following:\napp/app/admin_views.py\nfrom app import app @app.route(\u0026quot;/admin/dashboard\u0026quot;) def admin_dashboard(): return \u0026quot;Admin dashboard\u0026quot;`  We\u0026rsquo;ve done exactly the same as what we did in views.py. Imported app from app and declared a new route.\nYou\u0026rsquo;ll also notice the URL is longer and contains 2 parts! You\u0026rsquo;ll learn all about routing in detail later on in this series.\nBut before we can access this new route, we need to import admin_views.py in out __init__.py file.\nGot ahead and open up __init__.py and from app import admin_views down at the bottom. It should then look like this:\napp/app/init.py\nfrom flask import Flask app = Flask(__name__) from app import views from app import admin_views`  Save the file and head back to the root app directory containing run.py. It\u0026rsquo;s time to run our app again.\nOnce there, run the following command to run the app:\nflask run\nOpen up your browser. Let\u0026rsquo;s check out our new admin route.\nhttp://127.0.0.1:5000/admin/dashboard\nYou\u0026rsquo;ll see \u0026ldquo;Admin dashboard\u0026rdquo;, just like we told the view to return!\nWe\u0026rsquo;re still missing our requirements.txt file from our original structure. Let\u0026rsquo;s go ahead and generate it with pip\nHit Ctrl + c to stop your application.\nRequirements From the root app directory, run the following command:\npip freeze \u0026gt; requirements.txt\nThis command will create a requirements.txt file and place it in our current directory, listing all of the packages we\u0026rsquo;ve installed.\nIt will look like this:\nClick==7.0 Flask==1.0.2 itsdangerous==1.1.0 Jinja2==2.10 MarkupSafe==1.1.0 Werkzeug==0.14.1`   Tip - To install packages from a requirements.txt file, run pip install -r requirements.txt\n Wrapping up Awesome. You\u0026rsquo;ve learned how to structure your Flask application as a package, break out your code into separate files and work with requirements.txt files.\nNext up, You\u0026rsquo;ll learn how to build a website and render HTML files!\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':8,'href':'/library/book/docs/python/flask/learning-flask/ep-3/','title':"Learning Flask Ep. 3",'content':" Serving HTML files | Learning Flask Ep. 3 How to render HTML files and structure template directories with Flask\nIn this part of the Learning Flask series, you\u0026rsquo;ll learn how to work with and serve HTML files.\nFlask provides a fast and easy way for us to serve static files! So building a simple website is a breeze.\nWe\u0026rsquo;re going to pick up the same application we created in the last episode and build upon it. If you haven\u0026rsquo;t read the last part of this series, I\u0026rsquo;d suggest doing so. If not, this is how our current application structure looks:\n├── app │ ├── __init__.py │ ├── admin_views.py │ └── views.py ├── requirements.txt └── run.py`  Ready to code? Fire up a new terminal and browser windows and let\u0026rsquo;s get started.\nLaunch your app From the root app directory, start Flask with the following command:\nflask run\nIn your browser, head to http://127.0.0.1:5000/ to see \u0026ldquo;Hello world!\u0026rdquo; at our app index route\nOk so the app is up and running. Now let\u0026rsquo;s start rendering some HTML.\nBefore we start working with any HTML files, I want to show you how we can return HTML from a flask view.\nGo ahead and open up views.py in your favourite editor. You should see the following:\napp/app/views.py\nfrom app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot; @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;All about Flask\u0026quot;`  Let\u0026rsquo;s modify the about route to return some HTML by simple passing an HTML string to return\n`from app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot; @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;\u0026lt;h1 style='color: red;'\u0026gt;I'm a red H1 heading!\u0026lt;/h1\u0026gt;\u0026quot;`   Tip - Flask will automatically reload when we make changes to any of the Python files assosiated with our app!\n Go to /about in your browser to see the changes. You\u0026rsquo;ll see a big red H1 heading at the top of the page!\nWe can also pass a multi line string of HTML to return, let\u0026rsquo;s do that now:\n`from app import app @app.route(\u0026quot;/\u0026quot;) def index(): return \u0026quot;Hello world\u0026quot; @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;\u0026quot;\u0026quot; \u0026lt;h1 style='color: red;'\u0026gt;I'm a red H1 heading!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is a lovely little paragraph\u0026lt;/p\u0026gt; \u0026lt;code\u0026gt;Flask is \u0026lt;em\u0026gt;awesome\u0026lt;/em\u0026gt;\u0026lt;/code\u0026gt; \u0026quot;\u0026quot;\u0026quot;`  Cool right? But not very practical.\nTo make things a bit more fun, let\u0026rsquo;s learn how to serve HTML files with Flask.\nServing HTML files Flask provides a very simple way for us to return HTML files to the client/browser, using the render_template function.\nHowever, before we start using this function, we need to create some new files and directories.\nFlask looks for a directory called templates in the root of the Flask application package. Let\u0026rsquo;s go ahead and create it now.\nStop the app with Ctrl + c\nMove into the app directory with:\ncd app\nCreate the templates directory and move into it:\nmkdir templates cd templates  Let\u0026rsquo;s create a template called index.html:\ntouch index.html\nOpen up index.html in your editor and add the following:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Index\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 style=\u0026quot;color: blue\u0026quot;\u0026gt;Index\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is an HTML file served up by Flask\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  It\u0026rsquo;s not going to win any design awards but will illustrate how to render HTML files!\nSave and close the file.\nYour project file structure should now look like the following:\n├── app │ ├── __init__.py │ ├── admin_views.py │ ├── templates │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py  In your terminal, navigate back to the root app directory containing run.py and run the flask run command to restart the app.\nBefore we can start serving up any HTML files, we need to import render_template from Flask. Go ahead and add the following import to the top of views.py\napp/app/views.py\nfrom flask import render_template\n Tip - Flask provides many useful functions that you\u0026rsquo;ll be learning about throughout this series\n Next up, we need to tell our view to serve up the HTML file we just created. Let\u0026rsquo;s serve index.html using the index route.\nTo return an HTML template, we use the following syntax:\nreturn render_template(\u0026quot;index.html\u0026quot;)\nFlask will look in the templates directory we\u0026rsquo;ve just created for index.html (It\u0026rsquo;s the default place Flask will go to look for HTML files when the render_template function is called)\nYour views.py file should now look like this:\nfrom app import app from flask import render_template @app.route(\u0026quot;/\u0026quot;) def index(): return render_template(\u0026quot;index.html\u0026quot;) @app.route(\u0026quot;/about\u0026quot;) def about(): return \u0026quot;\u0026quot;\u0026quot; \u0026lt;h1 style='color: red;'\u0026gt;I'm a red H1 heading!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is a lovely little paragraph\u0026lt;/p\u0026gt; \u0026lt;code\u0026gt;Flask is \u0026lt;em\u0026gt;awesome\u0026lt;/em\u0026gt;\u0026lt;/code\u0026gt; \u0026quot;\u0026quot;\u0026quot;`  Go to /index in your browser at http://127.0.0.1:5000/ to see your HTML masterpiece.\nNice work. You\u0026rsquo;ve rendered your first HTML page with Flask!\nJust like how we split our views into multiple files, we can do something similar to our HTML template directories to make our life easier and working with our files more manegable.\nIn the last episode, we created an admin_views.py file to contain all of our admin routes.\nLet\u0026rsquo;s refactor our template directories and files to reflect that change.\nTemplate directories Our new file structure is going to look like the following:\n├── app │ ├── __init__.py │ ├── admin_views.py │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py`  We\u0026rsquo;re going to create 2 new directories within our templates directory:\n public - Will contain all of the HTML files we want to serve from views.py admin - Will contain any HTML files we\u0026rsquo;ll serve from our admin routes in admin_views.py  This keeps things separated and easy for us to navigate and work with.\nIn the terminal, stop the app with Ctrl + c and move into the templated directory with:\ncd app/templates/\nNow we\u0026rsquo;ll create our 2 new directories:\nmkdir public admin\nWe then need to move our index.html file into the public directory. Do so with:\nmv index.html /public\nWhilst we\u0026rsquo;re here, let\u0026rsquo;s create a new file in admin called dashboard.html\ncd admin touch dashboard.html\nOnce again, your app structure should now look like this:\n├── app │ ├── __init__.py │ ├── admin_views.py │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py`  Before we add any HTML to dashboard.html. Let\u0026rsquo;s refactor our view in views.py to serve index.html from the newly created directory.\nOpen up views.py. We\u0026rsquo;re going to change the path to the file we want to serve in render_template.\nChange this:\napp/app/views.py\n`@app.route(\u0026quot;/\u0026quot;) def index(): return render_template(\u0026quot;index.html\u0026quot;)`  To this:\napp/app/views.py\n`@app.route(\u0026quot;/\u0026quot;) def index(): return render_template(\u0026quot;public/index.html\u0026quot;)`  We\u0026rsquo;ve changed \u0026quot;index.html\u0026quot; to \u0026quot;public/index.html\u0026quot; to reflect our new directory structure.\nStart up your app and reload your browser to test everything works.\nAwesome! We\u0026rsquo;ve separated our HTML templates into something more logical and easy to manage.\nLet\u0026rsquo;s add some HTML to dashboard.html and refactor our admin_views.py file. Just like we just did with views.py\nOpen up dashboard.html and add the following:\napp/app/templates/admin/dashboard.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dashboard\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 style=\u0026quot;color: green\u0026quot;\u0026gt;Admin dashboard\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This HTML file is served from the admin templates directory\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Save and close the file.\nWe now need to refactor the route in admin_views.py. Open the file and make the following changes.\nFirst up, we need to import render_template. Add the following to the top of admin_views.py\napp/app/admin_views.py\nfrom flask import render_template\nWe then need to change our file path in the render_template function.\nFrom this:\n@app.route(\u0026quot;/admin/dashboard\u0026quot;) def admin_dashboard(): return render_template(\u0026quot;dashboard.html\u0026quot;)  To this:\n@app.route(\u0026quot;/admin/dashboard\u0026quot;) def admin_dashboard(): return render_template(\u0026quot;admin/dashboard.html\u0026quot;)  Save the file and go to admin/dashboard in your browser to see the changes.\nAnd we\u0026rsquo;re done! We\u0026rsquo;ve split up our app and created a logical file structure within our app.\nIf you\u0026rsquo;re feeling adventurous, I want you to try the following:\n Create a new Python file containing a new view Import that file into the __init__.py file Create a new template directory for those views Add an HTML template to it Render that template  If you\u0026rsquo;re not feeling ready for that just yet, it\u0026rsquo;s no worries! Contunie working your way through the series and you\u0026rsquo;ll soon be building Flask apps of your own.\nWrapping up A Flask application can be as simple or as complex as you want it to be.\nYou can put all of your views into a single file or break them up into separate logical files, likewise with templates, you can keep them all together of split them up into corresponding directories.\nThe beauty of Flask is that it\u0026rsquo;s all up to you.\nIn the next part of this series, you\u0026rsquo;ll be learning how to serve static files including images, CSS and Javascript.\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':9,'href':'/library/book/docs/python/cheat-sheet/','title':"Python Cheat sheet",'content':" Python Cheat sheet Useful tricks # Terminate a Python script early.\r quit()\r# For 1 statement on multiple lines,  # use line continuation character (\\).\r # Good for blog post.\r def __str__(self):\rreturn \u0026#34;Name={}, Title={}, Hourly rate={}.\u0026#34;\\\r.format( self.name, self.title, self.__hourly_rate ) String # Concatenation\r s1 = \u0026#39;Open\u0026#39;\rs2 = \u0026#39;Writings.net\u0026#39;\rprint( s1+s2 ) # Output: OpenWritings.net\r # Object to string: Use str() function\r import datetime\rnow_str = \u0026#34;Today is \u0026#34; + str(datetime.datetime.now())\rprint(now_str)\r# Find and replace  string.replace(old_str, new_str, maxreplace) # maxreplace: Replace N occurrences matched.\r # Replace using regular expression\r import re\rstr=\u0026#34;Example regex\u0026#34;\rtest = re.sub(r\u0026#34;[Ee]\u0026#34;, \u0026#34;a\u0026#34;, str) # axampla ragax\r # Join: string.join(iterable); iterable = list, string \u0026amp; tuple\r my_list = [\u0026#39;1\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;]\rseparator = \u0026#39;,\u0026#39;\rprint( separator.join(my_list) ) # 1,3,4,5 If statement # Conditions\r # Comparison operators\r # == : Values are equal.\r # != : Values are NOT equal.\r # \u0026lt;\u0026gt; : Values are NOT equal.\r # \u0026gt;= : Value is greater or equal.\r # \u0026lt;= : Value is less or equal.\r # is : Is the same object.\r if True and b \u0026gt; a:\rprint(\u0026#34;b is greater than a\u0026#34;)\relif a == b and b is not None:\rprint(\u0026#34;a and b are equal\u0026#34;)\r# Modulo\r if i%2==0:\rprint(\u0026#39;even\u0026#39;)\relse:\rprint(\u0026#39;odd\u0026#39;) List my_list=[] # Empty list.\r my_list=[1,2,3] # Create a list with some values.\r print( len(my_list) ) # Size of my_list.\r my_list[2] # Access the third element(Index starts at 0)\r my_list[-1] # Get last element.\r my_list.append(\u0026#39;a\u0026#39;) # Append a new value to my_list\r my_list.insert(0, \u0026#39;first\u0026#39;) # Insert \u0026#39;first\u0026#39; at position 0\r del my_list[1] # Delete element at position 1.\r my_list.remove(\u0026#39;a\u0026#39;) # Remove first element with value \u0026#39;a\u0026#39;.  # Loop through a list.\r for item in my_list:\rprint(item)\r# Loop through a list using range.\r for i in range(0, len(my_list)):\rprint(my_list[i])\r# Loop through a list and at the same time, get the index too.\r my_list = [1,3,5]\rfor (i, item) in enumerate(my_list):\rprint(i, item)\r# Slicing\r first_two = my_list[:2] # Get the first two items.\r last_two = my_list[-2:] # Get the last two items.\r portion_of_list= my_list[2:4] # Get items from position 2 to 4.\r # For sorting, data type has to be the same. Can\u0026#39;t mix int and string.\r my_list=[1,2,3]\rmy_list.sort() # Sort list permanently in alphabetical order.\r my_list.sort(reverse=True) # Sort list permanently in reverse alphabetical order.\r my_list.reverse() # Reverse the order of the list.  Loop # Loop through a list \u0026amp; get index at the same time.\r my_list = [1,3,5]\rfor (i, item) in enumerate(my_list):\rprint(i, item) Date \u0026amp; Time import datetime\rtoday = datetime.date.today()\rprint(today) # 2018-12-31\r print(\u0026#34;{}-{}-{}\u0026#34;.format(today.year, today.month, today.day))\rprint(datetime.date(2011, 4, 13)) # 2011-04-13\r print(datetime.date.fromtimestamp(1326244364)) # 2012-01-10\r a_datetime = datetime.datetime(2011, 4, 13, 23, 33, 59)\rprint(\u0026#34;{}-{}-{}\u0026#34;.format(a_datetime.year, a_datetime.month, a_datetime.day))\rprint(\u0026#34;{}:{}:{}\u0026#34;.format(a_datetime.hour, a_datetime.minute, a_datetime.second))\rprint(a_datetime.timestamp())\r# Convert date to string.\r now = datetime.datetime.now()\rprint(now.strftime(\u0026#34;%m/%d/%Y, %H:%M:%S\u0026#34;)) # 04/04/2019, 12:45:08\r # Convert string to date: string should match date representation.\r # All directives(%): https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\r a_date = datetime.datetime.strptime(\u0026#34;21 June, 2018\u0026#34;, \u0026#34;%d%B, %Y\u0026#34;)\rprint(a_date) # 2018-06-21 00:00:00\r a_date = datetime.datetime.strptime(\u0026#34;12/11/2018 09:15:32\u0026#34;, \u0026#34;%d/%m/%Y %H:%M:%S\u0026#34;)\rprint(a_date) # 2018-11-12 09:15:32\r # Add / Substract date\r # timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)\r today = datetime.datetime.now()\rdays_ago_delta = datetime.timedelta(days = 5)\rdays_ago_5 = today - days_ago_delta\rprint(days_ago_5) Function def sum(a,b):\rreturn (a, b, a+b)\rprint( sum(3,4) ) # Output: (3, 4, 7) ที่มาบทความ : https://openwritings.net/pg/python/python-cheat-sheet\n"});index.add({'id':10,'href':'/library/book/docs/python/flask/learning-flask/ep-4/','title':"Learning Flask Ep. 4",'content':" Serving static files | Learning Flask Ep. 4 Linking stylesheets, javascript files and serving images with Flask\nIn this episode of the Learning Flask series, we\u0026rsquo;ll be making our HTML look prettier with some images, CSS and JavaScript, along with a few extra tips on working with static files.\nFlask provides a few useful ways for working with static files so let\u0026rsquo;s get started.\nCreating stylesheets If you\u0026rsquo;ve worked with HTML and CSS before, you\u0026rsquo;ll know that we have to import a stylesheet in the \u0026lt;head\u0026gt; tag of our HTML.\nIt\u0026rsquo;s no dirrefent in Flask, however we need to cover a few bases before we try and import and stylesheets into our HTML files.\nFlask requires a static directory. Just like the templates directory we created in the last episode.\nLet\u0026rsquo;s go ahead and create a static directory, a css directory and a stylesheet.\nWe\u0026rsquo;ll create the static directory next to our templates directory. From the root app directory, enter the following:\ncd app mkdir static cd static mkdir css cd css touch style.css  Your application filestructure should now look loike this:\napp ├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ └── css │ │ └── style.css │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py  Open up style.css in your editor and add the following:\napp/app/static/css/style.css\nbody { background-color: #f1f1f1; }  Save and close the file for now.\nNext up, we\u0026rsquo;ll import our new stylesheet into our index.html file in the public directory.\nTypically you would provide a relative path to your stylesheet in the \u0026lt;head\u0026gt;, for example:\n\u0026lt;head\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;path/to/your/stylesheet.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt;  You can use relative paths in Flask, but it\u0026rsquo;ll get complicated real fast as we\u0026rsquo;ve split our HTML templates up into sub-directories.\nThankfully, there\u0026rsquo;s a better way!\nLinking stylesheets Flask has a function called url_for which can be used in our HTML to provide a path to any static files we want to fetch.\nGo ahead and open up index.html in your editor and in the \u0026lt;head\u0026gt; tag, add the following:\napp/app/templates/public/index.html\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/style.css') }}\u0026quot;\u0026gt;   Notice the double curly braces {{ }}\n These double curly braces are part of the Jinja templating engine that Flask uses to render our HTML templates.\nYou\u0026rsquo;ll learn all about Jinja in the next couple of episodes in this series! Just know for now, that before any of our HTML files are rendered in the browser, Flask will pass our HTML files through the Jinja templating engine and parse anything we provide in between the sets of curly braces.\nIn this case, Jinja will replace {{ url_for('static', filename='css/style.css') }} with the path to the CSS file.\nThe url_for function takes 2 arguments, and endpoint and some values. In this case, we\u0026rsquo;ve providing static as the endpoint and css/style.css as the filename value.\nIn this case, Flask will render the stylesheet we just created at static/css/style.css.\nSave the file and reload your browser to see the subtle changes to the background color.\nNext up, you\u0026rsquo;ll learn how to do something very similar with JavaScript files.\nJavascript files We\u0026rsquo;re going to create a Javascript directory and a JavaScript file and link them to our HTML templates in the exact same way as we did with the CSS.\nWe\u0026rsquo;ll create a js directory inside our static directory, along with creating a new file called app.js in the js folder.\nOur new app file structure will look like this:\napp ├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ ├── css │ │ │ └── style.css │ │ └── js │ │ └── app.js │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py  From the app root directory, we\u0026rsquo;ll run the following:\ncd app cd static mkdir js cd js touch app.js`  Open up the app.js file and add the following:\nconsole.log(\u0026quot;Hello from app.js!\u0026quot;);  Let\u0026rsquo;s link our js file to our HTML template.\nOpen up index.htmlin your editor, and at the bottom of the page, just before the closing \u0026lt;/body\u0026gt; tag, add the following:\n\u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/app.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  Your index.html file should now look something like this:\napp/app/templates/public/index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/style.css') }}\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Index\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 style=\u0026quot;color: blue\u0026quot;\u0026gt;Index\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is an HTML file served up by Flask\u0026lt;/p\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/app.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Just like we did with the stylesheet, we use url_for to provide a directory and a path to our filename.\nSave the file, make sure your app is running with the flask run command and reload your browser.\n Tip - You must run the flask run command from the root directory of your application, in the same directory as run.py\n Open up the developer tools and click on the console tab to see the message from your JavaScript file.\nHello from app.js!\nPerfect! We\u0026rsquo;ve linked our stylesheet and our Javascript file. Let\u0026rsquo;s talk about serving images in Flask.\nServing images Any guesses on how we\u0026rsquo;re going to serve images?\nWe\u0026rsquo;re going to do exactly what we did with our CSS and JavaScript files and create a new img directory in our static directory and place all of our pictures in there.\nOur new app file structure will look like this:\n`app ├── app │ ├── __init__.py │ ├── admin_views.py │ ├── static │ │ ├── css │ │ │ └── style.css │ │ ├── img │ │ │ └── my-image.png │ │ └── js │ │ └── app.js │ ├── templates │ │ ├── admin │ │ │ └── dashboard.html │ │ └── public │ │ └── index.html │ └── views.py ├── requirements.txt └── run.py`  From the root app directory, we\u0026rsquo;ll create our new directories with the following commands:\n`cd app cd static mkdir img`  Go ahead and drop any image into the img directory.\nNext up, let\u0026rsquo;s put an \u0026lt;img\u0026gt; tag in our index.html file and render an image to the browser.\nopen up index.html and add the following just under the \u0026lt;p\u0026gt; tag in the \u0026lt;body\u0026gt;:\napp/app/templates/public/index.html\n`\u0026lt;img src=\u0026quot;{{ url_for('static', filename='img/TEST-IMG.png') }}\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt;`  Your index.html should now look like this:\napp/app/templates/public/index.html\n`\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ url_for('static', filename='css/style.css') }}\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Index\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 style=\u0026quot;color: blue\u0026quot;\u0026gt;Index\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is an HTML file served up by Flask\u0026lt;/p\u0026gt; \u0026lt;img src=\u0026quot;{{ url_for('static', filename='img/TEST-IMG.png') }}\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;{{ url_for('static', filename='js/app.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;`  We\u0026rsquo;re using the exact same url_for function to point to the path of our image.\nSave the file, make sure your app is running and reload the browser windows to see your image rendered!\nWrapping up You\u0026rsquo;ve learned how to create the static directory, CSS, JavaScript and image directories and link static files to HTML templates, along with rendering images using the url_for function.\nurl_for provides some other powerful uses that you\u0026rsquo;ll learn about very soon.\nAt this point, your armed with the tools to be able to create a simple static website! If you\u0026rsquo;re feeling confident, go ahead and create a few more pages, add some CSS and JavaScript and have some fun.\nIn the next part of this series, you\u0026rsquo;ll be learning more about the Jinja templating engine, along with passing variables and objects into your HTML from Flask views.\nLast modified · 28 Feb 2019\n Written with StackEdit.\n "});index.add({'id':11,'href':'/library/book/posts/creating-a-new-theme/','title':"Creating a New Theme",'content':" Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $  Some Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $  Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $  The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $  See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $  Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop  Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml  That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html]  That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $  The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot;  Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $  Update the Configuration File to Use the Theme Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $  Generate the Site Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $  Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $  Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]  If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $  The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $  The Theme Development Cycle When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose  Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms  Update the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt;  Live Reload Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $  That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $  Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $  The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $  The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html  We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html  As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq  Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html  Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq  Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html  Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot;  Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq  Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }}  versus\n{{ partial \u0026quot;header.html\u0026quot; . }}  Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}  Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"});index.add({'id':12,'href':'/library/book/posts/migrate-from-jekyll/','title':"Migrate to Hugo from Jekyll",'content':" Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n Change your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public  Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }   Convert Jekyll templates to Hugo templates That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"});index.add({'id':13,'href':'/library/book/docs/front-end/bootstrap/basic-bootstap/','title':"Bootstrap 4 แบบพื้นฐาน",'content':" สรุปการใช้งาน Bootstrap 4 แบบพื้นฐาน "});index.add({'id':14,'href':'/library/book/','title':"e-Library",'content':" e-Library "});index.add({'id':15,'href':'/library/book/functions/','title':"Functions",'content':""});index.add({'id':16,'href':'/library/book/functions/newfunction/','title':"Newfunction",'content':""});index.add({'id':17,'href':'/library/book/posts/','title':"Posts",'content':""});index.add({'id':18,'href':'/library/book/posts/goisforlovers/','title':"(Hu)go Template Primer",'content':" Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true ---  Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026quot;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026quot; TwitterUser: \u0026quot;spf13\u0026quot; SidebarRecentLimit: 5  Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}}  An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}}  Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt;  "});index.add({'id':19,'href':'/library/book/posts/hugoisforlovers/','title':"Getting Started with Hugo",'content':" Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n"});index.add({'id':20,'href':'/library/book/docs/','title':"Docs",'content':""});})();